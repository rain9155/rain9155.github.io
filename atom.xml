<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jianyu的博客</title>
  <icon>https://www.gravatar.com/avatar/6784cdf8051a915bd150c93df8defed3</icon>
  <subtitle>每天进步一点点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2023-01-07T10:44:49.155Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>rain9155</name>
    <email>jianyu9155@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>揭秘kotlin协程的实现原理</title>
    <link href="http://yoursite.com/2022/05/26/%E6%8F%AD%E7%A7%98kotlin%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2022/05/26/%E6%8F%AD%E7%A7%98kotlin%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</id>
    <published>2022-05-25T18:56:26.000Z</published>
    <updated>2023-01-07T10:44:49.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>上一篇文章：<a href="https://juejin.cn/post/6926695962354122765#heading-0" target="_blank" rel="noopener">揭秘kotlin协程中的CoroutineContext</a></li></ul><p>上一篇文章中介绍了kotlin协程的CoroutineContext的主要组成以及它的结构，kotlin协程的CoroutineContext它是一个K-V数据结构，保存了跟协程相关联的运行上下文例如协程的线程调度策略、异常处理逻辑、日志记录、运行标识、名字等，本篇文章是作为上一篇文章的补充，在使用kotlin协程一年多之后，对kotlin协程的实现有了新的认识，本文会深入介绍kotlin协程的实现原理，例如Continuation和CPS，suspend方法的含义以及背后的原理，协程是如何被创建、启动、调度，同时使用kotlin-stdlib提供的intrinsics原语实现一个简化版的协程，从而帮助我们更好地理解kotlin协程的整个设计思想，kotlin协程的源码被放在了两个库中，一部分是在kotlin标准库<a href="https://github.com/JetBrains/kotlin/tree/1.4.0/libraries/stdlib/src/kotlin/coroutines" target="_blank" rel="noopener">kotlin-stdlib</a>中，一部分是在kotlin协程官方实现库<a href="https://github.com/Kotlin/kotlinx.coroutines/tree/native-mt-1.4.20/kotlinx-coroutines-core" target="_blank" rel="noopener">kotlinx-coroutines</a>中，其中kotlinx-coroutines是基于kotlin-stdlib的，kotlin-stdlib库提供了实现协程所需的基本原语。</p><blockquote><p>本文涉及到的源码都是基于kotlin1.4版本</p></blockquote><h2 id="Continuation和CPS"><a href="#Continuation和CPS" class="headerlink" title="Continuation和CPS"></a>Continuation和CPS</h2><p>在讲解协程的原理之前，我们先来了解一下Continuation和CPS，理解了这两个术语，那么后面对于协程的理解就非常容易了：</p><p><strong>Continuation</strong></p><p><a href="https://en.wikipedia.org/wiki/Continuation" target="_blank" rel="noopener">Continuation</a>延续在计算机中表示<strong>程序剩余的部分</strong>，它保存了程序从某一点开始的执行状态，并能够在稍后的时间让程序回到这一点恢复执行，所以它是一种能够保存程序执行状态的数据结构，像break、continue这类控制流操作符一样可以暴露给用户使用，用户通过操作Continuation来控制程序的执行顺序，Continuation的概念在上个世纪五、六十年代就被提出来，首次实现Continuation的编程语言是上个世纪70年代的<a href="https://en.wikipedia.org/wiki/Scheme_(programming_language)" target="_blank" rel="noopener">Scheme</a>语言，在Scheme语言中它引入了<strong>call/cc</strong>关键字 - <a href="https://en.wikipedia.org/wiki/Call-with-current-continuation" target="_blank" rel="noopener">call-with-current-continuation</a>，通过call/cc关键字我们可以捕获程序当前剩余的执行状态保存到Continuation中，并在之后适当的时候执行Continuation以恢复到捕获Continuation时所在的上下文继续执行，由于我不熟悉Schema语言，这里我用kotlin来模拟这个关键字，<strong>假设</strong>kotlin有call/cc关键字，它是这样使用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//pause</span></span><br><span class="line">    <span class="keyword">val</span> result = call/cc &#123; continuation -&gt;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">        continuation(<span class="string">"world"</span>)</span><br><span class="line">        <span class="comment">//ignore</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"world!"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//resume</span></span><br><span class="line">    println(<span class="string">"hello <span class="variable">$result</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行输出：</span></span><br><span class="line"><span class="comment">//hello world</span></span><br></pre></td></tr></table></figure><p>call/cc接收一个带有一个参数的函数，这个参数就是current-continuation表示程序剩余的部分，当程序运行到call/cc时，它会暂停程序后续的执行并捕获程序当前剩余的部分作为参数传进call/cc接收的函数中，然后执行这个函数，然后在适当的时候我们可以调用continuation，continuation接收一个参数作为call/cc的返回值，一旦我们调用continuation后，函数后面的部分就不会继续执行而是返回到call/cc调用处继续执行，而如果我们不调用continuation，那么函数就会正常执行完毕返回，这时call/cc的返回值就是函数的返回值，由于我们这里调用了continuation，所以这里程序恢复后输出了”hello world”，这就是使用call/cc应用Continuation的一个简单例子，通过Continuation我们还可以实现更为复杂的场景例如<a href="https://en.wikipedia.org/wiki/Exception_handling" target="_blank" rel="noopener">异常处理</a>，这里继续通过call/cc实现一个异常处理try catch能力：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    tryCatch(&#123;</span><br><span class="line">         <span class="comment">//do something,</span></span><br><span class="line">         throwException(IllegalAccessException(<span class="string">"something error"</span>))</span><br><span class="line">    &#125;, &#123; e: Exception -&gt;</span><br><span class="line">        <span class="comment">//continue</span></span><br><span class="line">        println(<span class="string">"catch <span class="variable">$e</span>"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  println(<span class="string">"finish"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> continuationStack = Stack&lt;Continuation&gt;()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">tryCatch</span><span class="params">(tryBlock: () -&gt; <span class="type">Unit</span>, catchBlock: (<span class="type">e</span>: <span class="type">Exception</span>) -&gt; <span class="type">Unit</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> result = call/cc &#123; continuation -&gt;</span><br><span class="line">        funStack.add(continuation)</span><br><span class="line">        <span class="keyword">return</span> tryBlock()</span><br><span class="line">    &#125;</span><br><span class="line">    funStack.pop()</span><br><span class="line">    <span class="keyword">if</span>(result <span class="keyword">is</span> Exception) &#123;</span><br><span class="line">        catchBlock(result)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">throwException</span><span class="params">(e: <span class="type">Exception</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(continuationStack.size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> continuation = continuationStack.peek()</span><br><span class="line">        continuation(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行输出：</span></span><br><span class="line"><span class="comment">//catch IllegalAccessException: something error</span></span><br><span class="line"><span class="comment">//finish</span></span><br></pre></td></tr></table></figure><p>tryCatch方法接收两个函数：一个是正常代码执行主体tryBlock，一个是异常处理执行主体catchBlock，每次在执行tryBlock前都会把当前捕获的延续Continuation压入栈中，然后每次调用throwException方法抛出异常时都会弹出最近的Continuation传入异常恢复外部执行，如果tryBlock正常返回即没有调用throwException方法，这时call/cc的返回值是一个Unit类型，如果tryBlock出现异常即调用了throwException方法抛出异常，那么这时call/cc的返回值是一个Exception类型，这时就调用catchBlock处理异常，这样就通过Continuation实现了一个简单的try catch能力，这里我们也可以看到Continuation的作用，可以让我们灵活的控制程序的执行，除了异常处理，Continuation也可以被运用来实现<a href="https://en.wikipedia.org/wiki/Coroutine#Mutual_recursion" target="_blank" rel="noopener">协程</a>、<a href="https://en.wikipedia.org/wiki/Generator_(computer_programming)" target="_blank" rel="noopener">生成器</a>等，后面我们就会看到kotlin协程的实现原理。</p><p><strong>CPS</strong></p><p>介绍完Continuation，继续来了解一下<a href="https://en.wikipedia.org/wiki/Continuation-passing_style" target="_blank" rel="noopener">CPS</a>即Continuation-passing Style延续传递风格，它是Continuation在<a href="https://en.wikipedia.org/wiki/Functional_programming" target="_blank" rel="noopener">函数式编程</a>中的应用，像一些支持函数式编程的编程语言例如scheme、kotlin、js、py、C#等都可以把它们的函数转化为CPS风格，CPS风格的函数有以下特点：</p><p>1、函数没有return语句；</p><p>2、函数都有一个额外的Continuation参数；</p><p>3、函数内对于Continuation的传递调用都是<a href="https://en.wikipedia.org/wiki/Tail_call" target="_blank" rel="noopener">尾调用</a>。</p><p>先看一个普通的函数的调用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> result = add(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    println(<span class="string">"<span class="variable">$result</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面定义了一个add方法，调用它返回两个参数相加的结果，接下把它翻译成CPS函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">1</span>) &#123; result -&gt;  </span><br><span class="line">        println(<span class="string">"<span class="variable">$result</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>, continuation: (<span class="type">result</span>: <span class="type">Int</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    continuation(a + b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到CPS风格的add方法与普通的add方法多了一个continuation参数，用来表示外部的控制流，当方法需要返回时，就调用传进来的continuation代替return语句，当调用传进来的continuation后，外部代码的逻辑就继续执行。</p><p>下面再看一个嵌套的函数调用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> result = squareAdd(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    println(<span class="string">"<span class="variable">$result</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">squareAdd</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> add(square(a), square(b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">square</span><span class="params">(c: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c * c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面定义了一个squareAdd方法，调用它返回两个平方的相加结果，把它翻译成CPS函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    squareAdd(<span class="number">1</span>, <span class="number">1</span>) &#123; result -&gt;  </span><br><span class="line">        println(<span class="string">"<span class="variable">$result</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">squareAdd</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>,  continuation: (<span class="type">result</span>: <span class="type">Int</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    square(a) &#123; aSquareResult -&gt;</span><br><span class="line">        square(b) &#123; bSquareResult -&gt;</span><br><span class="line">            add(aSquareResult, bSquareResult) &#123; abAddResult -&gt;</span><br><span class="line">                continuation(abAddResult)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>, continuation: (<span class="type">result</span>: <span class="type">Int</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    continuation(a + b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">square</span><span class="params">(c: <span class="type">Int</span>, continuation: (<span class="type">result</span>: <span class="type">Int</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    continuation(c * c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到CPS风格的squareAdd方法里面不断的嵌套调用其他方法，并且调用其他方法传递Continuation时都是尾调用，尾调用就是在函数的末尾调用了另外一个函数而没有做其他操作，相应地，如果在函数的末尾调用地是函数本身，那么这就叫做尾递归，每个CPS风格的方法就是这样不断地在尾部调用其他方法并把自己当前的延续Continuation传递给调用的方法，这就是<strong>Continuation-passing延续传递</strong>名字的由来，从本质讲，CPS方法就是一个回调函数，Continuation相当于一个回调，每个CPS方法只能通过Continuation回调来恢复程序的后续逻辑执行，随着代码的复杂度提升，方法的调用数变多，CPS方法的嵌套深度也会越来越深，代码的可读性也会越来越差，出现回调地狱callback-hell现象，同时如果编译器不支持尾调用优化，那么CPS方法很容易就出现栈溢出错误。</p><blockquote><p>如果编译器支持，尾调用和尾递归都可以进行优化，尾调用由于不需要依赖调用方，所以调用方函数的栈帧可以直接被尾调用函数的栈帧代替，如果所有函数都是都是尾调用，那么调用方就可以直接goto到最深处调用的函数，减少调用栈帧从而避免了栈溢出，同时减少了栈帧的内存消耗，这就是尾调用优化，而尾递归除了可以应用尾调用优化外，它还有自己特属的优化方法，由于尾递归的特殊性，我们可以把一个尾递归函数展开为一个循环调用，这样也减少了调用栈帧和内存消耗，这就是尾递归优化，kotlin中可以通过<strong>tailrec</strong>修饰符让编译器对一个尾递归函数进行优化，不管是尾调用优化和还是尾递归优化，它们都改变了原本函数的调用栈帧，所以会让debug变得困难，这也是为什么支持尾调用和尾递归优化的编译器不默认打开这个选项的原因。</p></blockquote><p>那么CPS存在的意义是什么？其实CPS方法主要是作为高级语言的一种中间表示IR，把高级语言的方法逻辑编译成CPS风格，可以大大地减少编译器的实现复杂度，当程序被编译成CPS时，方法会被划分成不可再分割的最小粒度例如基本的运算、基本的方法调用等，例如 1 + 2 + 3 * 4 的计算翻译成CPS风格：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   calculate &#123;</span><br><span class="line">       println(it)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">calculate</span><span class="params">(continuation: (<span class="type">result</span>: <span class="type">Int</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    &#123; cont1: (<span class="built_in">Int</span>) -&gt; <span class="built_in">Unit</span> -&gt;</span><br><span class="line">        cont1(<span class="number">3</span> * <span class="number">4</span>)</span><br><span class="line">    &#125;(&#123; mul: <span class="built_in">Int</span> -&gt;</span><br><span class="line">        &#123; cont2: (<span class="built_in">Int</span>) -&gt; <span class="built_in">Unit</span> -&gt;</span><br><span class="line">            cont2(<span class="number">2</span> + mul)</span><br><span class="line">        &#125;(&#123; add: <span class="built_in">Int</span> -&gt;</span><br><span class="line">            &#123; cont3: (<span class="built_in">Int</span>) -&gt; <span class="built_in">Unit</span> -&gt;</span><br><span class="line">                cont3(<span class="number">1</span> + add)</span><br><span class="line">            &#125;(&#123; result: <span class="built_in">Int</span> -&gt;</span><br><span class="line">                continuation(result)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到每一条基本的计算语句(+、*)都会被包含在一个函数中，每个函数只负责基本的运算，然后原函数剩余的部分被包装在Continuation中，这对于用户来说可能比较难以阅读，但对于编译器来说这会让程序的语法分析更加简单，同时CPS所有的控制流例如if else、try catch等都会通过Continuation显式表示出来，这时编译器可以直接进行控制流分析，同时在CPS的基础上还可以进行尾调用优化等手段，如果对CPS这些编译优化感兴趣的可以阅读下面链接：</p><p><a href="https://www.gnu.org/software/guile/manual/html_node/Compiling-CPS.html" target="_blank" rel="noopener">Compiling CPS</a></p><p><a href="https://www.reddit.com/r/haskell/comments/d5tutb/what_optimizations_cps_transformations_enables/" target="_blank" rel="noopener">What optimizations CPS transformations enables / disables</a></p><p>CPS除了应用在编译器中，还可以应用在异步编程中，异步编程就是我们以不阻塞当前线程的方式来获取一个耗时操作的执行结果，例如网络请求、IO读取等，在Android中一般通过callback实现异步编程，但是通过callback进行异步编程是很困难，因为程序的逻辑被分散到各个callback，程序的连续性被打破，同时当每个callback相互依赖时就会出现callback-hell，让代码可读性降低，我们还需要额外去维护每一个callback，前面讲过CPS方法本质上是一个callback方法，所以通过CPS方法也可以处理异步编程的场景，由于CPS方法遵循一定的规则，所有编程语言就很容易替我们完成CPS转换和Continuation管理，不用我们编写复杂的CPS代码，例如js、c#中的async/await、kotlin中的suspend关键字等，这些都是语法糖，通过这些关键字修饰的一些方法都会有CPS转换的过程，可以让我们像编写同步代码那样编写异步代码，可以在一定的范围内保持程序的连续性，例如下面login和fetchData都是异步方法，fetchData方法依赖login方法，displayUI方法依赖fetchData方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js</span></span><br><span class="line">async function display() &#123;</span><br><span class="line">  <span class="keyword">var</span> user = await login(); <span class="comment">//async方法</span></span><br><span class="line">  <span class="keyword">var</span> <span class="keyword">data</span> = await fetchData(user); <span class="comment">//async方法</span></span><br><span class="line">  displayUI(<span class="keyword">data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//c#</span></span><br><span class="line">async void display() &#123;</span><br><span class="line">  <span class="keyword">var</span> user = await login(); <span class="comment">//async方法</span></span><br><span class="line">  <span class="keyword">var</span> <span class="keyword">data</span> = await fetchData(user); <span class="comment">//async方法</span></span><br><span class="line">  displayUI(<span class="keyword">data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//kotlin</span></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">display</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> user = login() <span class="comment">//suspend方法</span></span><br><span class="line">   <span class="keyword">val</span> userData = fetchData(user) <span class="comment">//suspend方法</span></span><br><span class="line">   displayUI(userData)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即使login和fetchData方法是异步的，但是上面的整个运行过程都是线性的，每一个方法都会等前一个方法返回后再继续执行，这就是Continuation和CPS在异步编程中的应用，对方法进行CPS转换时，首先要进行call/cc处理即捕获当前延续Continuation，然后还要处理不同Continuation之间的流转，实现暂停和恢复，每个编程语言对于这些实现是不一样，主流的有<strong>生成器</strong>和<strong>状态机</strong>两种实现方式，js中通过<a href="https://dev.to/yelouafi/algebraic-effects-in-javascript-part-1---continuations-and-control-transfer-3g88" target="_blank" rel="noopener">生成器</a>实现，而c#和kotlin则是通过<a href="https://en.wikipedia.org/wiki/Finite-state_machine" target="_blank" rel="noopener">状态机</a>的方式实现，得益于编程语言的良好封装，我们通过这些语法糖编写异步代码时不用再去维护每一个callback，不用再考虑这些复杂的处理。</p><h2 id="suspend方法的实现"><a href="#suspend方法的实现" class="headerlink" title="suspend方法的实现"></a>suspend方法的实现</h2><p>通过前面的介绍，相信大家已经猜到kotlin suspend方法的实现原理，suspend就是一个语法糖，当我们用suspend修饰命名方法或者匿名、lambda方法时，kotlin编译器会替我们把suspend方法进行CPS转换，转化后的方法会多一个额外的名为completion的Continuation类型参数，原本的返回值类型会移动到Continuation的类型参数中，并且把返回值用Any类型表示，例如命名方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">login</span><span class="params">()</span></span>: String</span><br></pre></td></tr></table></figure><p>转化为：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">login</span><span class="params">(completion: <span class="type">Continuation</span>&lt;<span class="type">String</span>&gt;)</span></span>: Any?</span><br></pre></td></tr></table></figure><p>再例如lambda方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">suspend</span> () -&gt; String</span><br></pre></td></tr></table></figure><p>转化为：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(completion: Continuation&lt;String&gt;) -&gt; Any?</span><br></pre></td></tr></table></figure><p>其实kotlin中的每个lambda方法都会对应一个<a href="https://github.com/JetBrains/kotlin/blob/1.4.0/libraries/stdlib/jvm/runtime/kotlin/jvm/functions/Functions.kt" target="_blank" rel="noopener">Function</a>类型, 如果lambda方法没有参数就对应Function0类型，如果lambda方法有一个参数就对应Function1类型，以此类推，每个Function类都有一个invoke方法，invoke方法的参数就对应lambda方法的参数，invoke方法的返回值就对应lambda方法的返回值，调用Function类实例的invoke方法就相当于调用对应的lambda方法，所以上面CPS转化后的lambda方法在kotlin中实际表示为：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//XXX就是lambda方法对应类的名称，会根据所在类、所在方法用$符号拼接而成</span></span><br><span class="line"><span class="comment">//这里是简化版，实际情况还会实现一个SuspendLambda抽象类，SuspendLambda继承自ContinuationImpl，后面会讲到</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XXX</span> : <span class="type">Function1</span>&lt;<span class="type">Continuation&lt;String</span>&gt;, <span class="type">Any?&gt; &#123;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">invoke</span><span class="params">(completion: <span class="type">Continuation</span>&lt;<span class="type">String</span>&gt;)</span></span>: Any? &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>suspend方法CPS后的方法都返回值用一个Any类型表示，它是<strong>T | COROUTINE_SUSPENDED</strong>的组合类型，T表示suspend方法同步执行返回时的类型，例如这里返回为String类型，当suspend方法不需要挂起时，suspend方法就正常返回对应的值或者抛出异常，COROUTINE_SUSPENDED表示suspend方法需要挂起时返回的一个枚举类型，当suspend方法需要挂起时，suspend方法就返回COROUTINE_SUSPENDED表示这个suspend方法被挂起，最终真正执行挂起动作返回COROUTINE_SUSPENDED的地方是kotlin intrinsics提供的<strong>suspendCoroutineUninterceptedOrReturn</strong>方法，这个方法可以捕获传递过来的Continuation，然后决定是否挂起，kotlin协程库提供的一些封装好的挂起方法如withContext、delay、await等最终都是调用这个方法捕获Continuation和执行挂起动作，我们编写suspend方法时也可以直接使用这个方法，实现我们自己的挂起逻辑，后面在intrinsics中会介绍这个方法。</p><p>当一个suspend方法被挂起，说明这个suspend方法不能马上同步返回对应的结果，而是在稍后准备好时再通过调用Continuation的<strong>resumeWith</strong>方法从挂起点恢复返回结果，Continuation在kotlin中是一个接口：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//T为suspend方法的返回值类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Continuation</span>&lt;<span class="type">in T</span>&gt; </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//当前延续的上下文</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> context: CoroutineContext</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当需要从挂起点恢复时调用这个方法，result可以表示正常恢复还是异常恢复</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">resumeWith</span><span class="params">(result: <span class="type">Result</span>&lt;<span class="type">T</span>&gt;)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>挂起点suspend point就是调用suspend方法的地方，当我们在suspend方法中调用suspend方法时，每一个suspend方法的调用处就是一个挂起点，整个suspend方法被挂起点分割成多个部分，每一个部分都对应一个Continuation，例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">display</span><span class="params">()</span></span> &#123;     </span><br><span class="line">    <span class="keyword">val</span> user = login() <span class="comment">//suspend方法，挂起点1     </span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">data</span> = fetchData(user) <span class="comment">//suspend方法，挂起点2   </span></span><br><span class="line">    displayUI(<span class="keyword">data</span>) <span class="comment">//普通方法                         </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">login</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">  delay(<span class="number">200</span>) <span class="comment">//suspend方法，延迟200ms后返回</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">"user"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">fetchData</span><span class="params">(user: <span class="type">String</span>)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"<span class="variable">$user</span> data"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">displayUI</span><span class="params">(<span class="keyword">data</span>: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">"displayUI: <span class="variable">$data</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据挂起点划分，上面display方法有三个延续Continuation：</p><p>1、初始Continuation，整个display方法就是一个Continuation；</p><p>2、子Continuation1，挂起点1到display方法结尾；</p><p>3、子Continuation2，挂起点2到display方法结尾。</p><p>类似地，login方法有两个延续，kotlin并不会像传统的CPS处理那样为每一个Continuation创建对应的实例，kotlin只会为整个suspend方法创建一个初始Continuation实例，然后在这个Continuation实例内部通过<strong>状态机</strong>进行流转，每个挂起点对应状态机中的一个状态，通过状态机就可以复用一个Continuation实例就能达到在多个挂起点之间进行挂起和恢复的效果，减少了Continuation实例的创建数量，下面是display方法的对应实现，是经过简化后的版本：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">display</span><span class="params">(completion: <span class="type">Continuation</span>&lt;<span class="type">Unit</span>&gt;)</span></span>: Any? &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//display方法的状态机，继承自ContinuationImpl</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DisplayStateMachine</span></span>(</span><br><span class="line">        <span class="comment">//completion是调用display方法时传递进来的，当display执行完毕时，通过completion恢复外部执行</span></span><br><span class="line">        completion: Continuation&lt;<span class="built_in">Unit</span>&gt;</span><br><span class="line">    ) : ContinuationImpl(completion) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存每个挂起点恢复后的结果</span></span><br><span class="line">        <span class="keyword">var</span> result: Result&lt;Any?&gt; = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//当前display方法的状态</span></span><br><span class="line">        <span class="keyword">var</span> label: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//当invokeSuspend被调用时，再次调用display方法，这时result会是前一个状态的结果，而label也已处于将要执行的状态</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">invokeSuspend</span><span class="params">(result: <span class="type">Result</span>&lt;<span class="type">Any</span>?&gt;)</span></span>: Any? &#123;</span><br><span class="line">            <span class="keyword">this</span>.result = result</span><br><span class="line">            <span class="keyword">return</span> display(<span class="keyword">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果是第一次调用display方法，就创建状态机实例，如果不是第一次调用，继续执行状态</span></span><br><span class="line">    <span class="keyword">val</span> continuation = completion <span class="keyword">as</span>? DisplayStateMachine ?: DisplayStateMachine(completion)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//COROUTINE_SUSPENDED标记，用于判断是否挂起</span></span><br><span class="line">    <span class="keyword">val</span> val0 = COROUTINE_SUSPENDED</span><br><span class="line"></span><br><span class="line">    <span class="keyword">when</span>(continuation.label) &#123;</span><br><span class="line">        <span class="number">0</span> -&gt; &#123;</span><br><span class="line">            <span class="comment">//错误检查</span></span><br><span class="line">            continuation.result?.getOrThrow()</span><br><span class="line">            <span class="comment">//下次display方法被调用时, 它应当直接去到状态1</span></span><br><span class="line">            continuation.label = <span class="number">1</span></span><br><span class="line">            <span class="comment">//调用login方法，传入continuation</span></span><br><span class="line">            <span class="keyword">val</span> val1 = login(continuation)</span><br><span class="line">            <span class="comment">//判断是否挂起</span></span><br><span class="line">            <span class="keyword">if</span>(val1 == val0) &#123;</span><br><span class="line">                <span class="comment">//如果挂起，直接return，后面通过传进login方法的continuation恢复当前状态机执行</span></span><br><span class="line">                <span class="keyword">return</span> val0</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果没有挂起，继续执行，下面流程跟label1类似</span></span><br><span class="line">            <span class="keyword">val</span> user = val1 <span class="keyword">as</span> String</span><br><span class="line">            continuation.label = <span class="number">2</span></span><br><span class="line">            <span class="keyword">val</span> val2 = fetchData(user, continuation)</span><br><span class="line">            <span class="keyword">if</span>(val2 == val0) &#123;</span><br><span class="line">                <span class="keyword">return</span> val0</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">val</span> <span class="keyword">data</span> = val2 <span class="keyword">as</span> String</span><br><span class="line">            continuation.label = -<span class="number">1</span></span><br><span class="line">            displayUI(<span class="keyword">data</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Unit</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="number">1</span> -&gt; &#123;</span><br><span class="line">            <span class="comment">//错误检查, 并获取前一个状态的结果</span></span><br><span class="line">            <span class="keyword">val</span> user = continuation.result?.getOrThrow() <span class="keyword">as</span> String</span><br><span class="line">          <span class="comment">//下次display方法被调用时, 它应当直接去到状态2</span></span><br><span class="line">            continuation.label = <span class="number">2</span></span><br><span class="line">            <span class="comment">//调用fetchData方法，传入continuation</span></span><br><span class="line">            <span class="keyword">val</span> val2 = fetchData(user, continuation)</span><br><span class="line">            <span class="comment">//判断是否挂起</span></span><br><span class="line">            <span class="keyword">if</span>(val2 == val0) &#123;</span><br><span class="line">                <span class="comment">//如果挂起，直接return，后面通过传进fetchData方法的continuation恢复当前状态机执行</span></span><br><span class="line">                <span class="keyword">return</span> val0</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果没有挂起，继续执行，下面流程跟label2类似</span></span><br><span class="line">            <span class="keyword">val</span> <span class="keyword">data</span> = val2 <span class="keyword">as</span> String</span><br><span class="line">            continuation.label = -<span class="number">1</span></span><br><span class="line">            displayUI(<span class="keyword">data</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Unit</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="number">2</span> -&gt; &#123;</span><br><span class="line">          <span class="comment">//错误检查, 并获取前一个状态的结果</span></span><br><span class="line">            <span class="keyword">val</span> <span class="keyword">data</span> = continuation.result?.getOrThrow() <span class="keyword">as</span> String</span><br><span class="line">            <span class="comment">//display方法执行完毕，把label置为非法状态</span></span><br><span class="line">            continuation.label = -<span class="number">1</span></span><br><span class="line">            displayUI(<span class="keyword">data</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Unit</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalStateException(<span class="string">"call to 'resume' before 'invoke' with coroutine"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">login</span><span class="params">(completion: <span class="type">Continuation</span>&lt;<span class="type">String</span>&gt;)</span></span>: Any? &#123;</span><br><span class="line">    <span class="comment">//login方法的状态机, 跟display方法的类似</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LoginStateMachine</span></span>(</span><br><span class="line">        <span class="comment">//completion是调用login方法时传递进来的，当login执行完毕时，通过completion恢复外部执行</span></span><br><span class="line">        completion: Continuation&lt;<span class="built_in">Unit</span>&gt;</span><br><span class="line">    ) : ContinuationImpl(completion) &#123;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">var</span> result: Result&lt;Any?&gt; = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">var</span> label: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">invokeSuspend</span><span class="params">(result: <span class="type">Result</span>&lt;<span class="type">Any</span>?&gt;)</span></span>: Any? &#123;</span><br><span class="line">            <span class="keyword">this</span>.result = result</span><br><span class="line">            <span class="keyword">return</span> login(<span class="keyword">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> continuation = completion <span class="keyword">as</span>? LoginStateMachine ?: LoginStateMachine(completion)</span><br><span class="line">    <span class="keyword">val</span> val0 = COROUTINE_SUSPENDED</span><br><span class="line">    <span class="keyword">when</span>(continuation.label) &#123;</span><br><span class="line">        <span class="number">0</span> -&gt; &#123;</span><br><span class="line">            continuation.result?.getOrThrow()</span><br><span class="line">            continuation.label = <span class="number">1</span></span><br><span class="line">            <span class="keyword">val</span> val1 = delay(continuation)</span><br><span class="line">            <span class="keyword">if</span>(val1 == val0) &#123;</span><br><span class="line">                <span class="keyword">return</span> val0</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"user"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="number">1</span> -&gt; &#123;</span><br><span class="line">            continuation.result?.getOrThrow()</span><br><span class="line">            continuation.label = -<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"user"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalStateException(<span class="string">"call to 'resume' before 'invoke' with coroutine"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">fetchData</span><span class="params">(user: <span class="type">String</span>, completion: <span class="type">Continuation</span>&lt;<span class="type">String</span>&gt;)</span></span>: Any? &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"<span class="variable">$user</span> data"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">displayUI</span><span class="params">(<span class="keyword">data</span>: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">"displayUI: <span class="variable">$data</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到display和login方法都创建了对应的状态机，每个延续都对应状态机的一个状态，每个状态机都继承自<strong>ContinuationImpl</strong>，ContinuationImpl的父类是<strong>BaseContinuationImpl</strong>，它实现了<strong>Continuation</strong>的resumeWith方法并且含有一个invokeSuspend抽象方法，所以每个状态机都会实现这个invokeSuspend方法，并且每个状态机都会持有一个外部的完成延续Continuation，用来在当前状态机运行结束时恢复外部的Continuation，关于Continuation的恢复后面会讲。</p><p>当suspend方法第一次被调用时就会创建一个状态机，这时状态机是初始状态，对应执行初始延续的逻辑，每执行完一个状态，都会把状态机的状态提前置为下一个状态，当要执行下一个状态时，只需要再次调用suspend方法就行，而这个再次调用就由<strong>invokeSuspend</strong>方法来完成，invokeSuspend方法中会调用suspend方法进行<strong>状态流转</strong>，而invokeSuspend方法会被<strong>resumeWith方</strong>法调用，而Continuation的resumeWith方法什么时候调用，就是由我们自己决定的，因为最终suspend方法的状态机Continuation会被传递到kotlin intrinsics提供的<strong>suspendCoroutineUninterceptedOrReturn</strong>方法中，在这个方法中我们可以捕获到这个Continuation，并决定什么时候调用这个Continuation到resumeWith方法。</p><p>上面的display和login方法都是命名suspend方法，对于suspend lambda方法，kotlin编译器也会对它进行CPS转换并且创建状态机，不同的是suspend lambda方法的状态机是继承自<strong>SuspendLambda</strong>类，而SuspendLambda是ContinuationImpl的子类，例如我们通过launch方法传递<strong>block块</strong>启动协程：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   GlobalScope.launch &#123;<span class="comment">//suspend lambda方法</span></span><br><span class="line">      <span class="keyword">val</span> user = login() <span class="comment">//suspend方法，挂起点1     </span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">data</span> = fetchData(user) <span class="comment">//suspend方法，挂起点2   </span></span><br><span class="line">    displayUI(<span class="keyword">data</span>) <span class="comment">//普通方法    </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> CoroutineScope.<span class="title">launch</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    context: <span class="type">CoroutineContext</span> = EmptyCoroutineContext,</span></span></span><br><span class="line"><span class="function"><span class="params">    start: <span class="type">CoroutineStart</span> = CoroutineStart.DEFAULT,</span></span></span><br><span class="line"><span class="function"><span class="params">    block: <span class="type">suspend</span> <span class="type">CoroutineScope</span>.() -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: Job &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个block块就是一个suspend lambda方法，所以kotlin编译器会为这个suspend lambda方法创建一个实现了Function接口、继承自SuspendLambda的类，并且这个类同时也实现了状态机，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    GlobalScope.launch(EmptyCoroutineContext, CoroutineStart.DEFAULT, SuspendLambdaStateMachine(<span class="literal">null</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuspendLambdaStateMachine</span></span>(completion: Continuation&lt;<span class="built_in">Unit</span>&gt;) : SuspendLambda(<span class="number">2</span>, completion), Function2&lt;CoroutineScope, Continuation&lt;<span class="built_in">Unit</span>&gt;, Any?&gt; &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//保存每个挂起点恢复后的结果</span></span><br><span class="line">    <span class="keyword">var</span> result: Result&lt;Any?&gt; = <span class="literal">null</span></span><br><span class="line">  <span class="comment">//当前lambda方法的状态</span></span><br><span class="line">  <span class="keyword">var</span> label: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//invoke方法被调用相当于lambda方法被执行，在里面它会创建状态机，并执行状态机的invokeSuspend方法</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">invoke</span><span class="params">(p1: <span class="type">CoroutineScope</span>, completion: <span class="type">Continuation</span>&lt;<span class="type">Unit</span>&gt;)</span></span>: Any? &#123;</span><br><span class="line">        <span class="keyword">return</span> (create(completion) <span class="keyword">as</span> SuspendLambdaStateMachine).invokeSuspend(Result.success(<span class="built_in">Unit</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//调用create方法可以传入一个完成延续创建suspend lambda方法的状态机</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">(completion: <span class="type">Continuation</span>&lt;*&gt;)</span></span>: Continuation&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> SuspendLambdaStateMachine(completion)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//调用invokeSuspend方法进行状态流转，这时result会是前一个状态的结果，而label也已处于将要执行的状态</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">invokeSuspend</span><span class="params">(result: <span class="type">Result</span>&lt;<span class="type">Any</span>?&gt;)</span></span>: Any? &#123;</span><br><span class="line">        <span class="keyword">this</span>.result = result</span><br><span class="line">        <span class="keyword">when</span>(label) &#123;</span><br><span class="line">            <span class="comment">//...跟前面display方法类似, 这个</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>suspend lambda方法的状态机会比suspend命名方法多实现一个<strong>create</strong>方法，这个create方法也来自于父类BaseContinuationImpl中，这个create方法的目的就是创建一个suspend lambda方法的状态机实例并传入它的完成延续，这个方法最终会被kotlin intrinsice方法的<strong>createCoroutineUnintercepted</strong>方法调用。</p><p>通过前面介绍的suspend命名方法和suspend lambda方法实现可以看出，kotlin编译器为每个suspend方法做了以下几件事：</p><ul><li><p>1、为含有挂起点、且挂起点不是尾调用的suspend方法创建一个私有的状态机；</p></li><li><p>2、状态机中通过变量保存了suspend方法将要执行的状态和上一个状态的结果，每一次执行状态前，为了防止挂起函数运行失败都会进行状态检查，并且调用挂起函数前，状态机的状态都会提前置为下一个状态；</p></li><li><p>3、调用其他挂起函数时，都会把当前状态机实例作为Continuation传递过去，而被调用的挂起函数满足1条件时也会被创建一个状态机，当被调用挂起函数的状态机运行结束时，可以利用传递过去的Continuation恢复当前状态机执行。</p></li></ul><p>从第1点可以看出，kotlin编译器并不总是为suspend方法创建状态机，例如fetchData方法，虽然它是suspend方法，但是它里面没有调用其他的suspend方法，并不需要处理状态，所以kotlin编译器不会为它创建状态机，还有一种情况kotlin编译器也不会创建状态机，就是如果suspend方法中只有一个suspend方法调用并且这个suspend方法调用是尾调用，那么kotlin编译器不会为它创建状态机，只会简单地把suspend方法的Continuation实例继续传递给尾调用的suspend方法，因为在尾调用中，调用方不需要保存状态，所以总结起来就是kotlin编译器只会为<strong>含有非尾部suspend方法调用</strong>的suspend方法创建状态机，这是kotlin编译器的一个优化，避免创建多余的状态机实例。</p><blockquote><p>kotlin官方对于suspend方法还提出了另外一个优化，就是只有当首次挂起时才进行状态机的创建，即状态机懒创建，因为在首次挂起前，suspend方法很有可能因为其他原因提前退出了，这时提前创建的状态机就是多余的。</p></blockquote><p>从第2点可以看出，suspend方法的挂起和恢复是通过状态机的状态切换来实现的，每个状态对应suspend方法的每个延续，状态机保存了每个延续恢复后的结果，从第3点可以看出，suspend方法的状态机实例会作为Continuation在suspend方法之间传递，而最终这个状态机实例Continuation会传到<strong>suspendCoroutineUninterceptedOrReturn</strong>方法中暴露给我们使用，在这个方法里我们可以控制这个Continuation例如包装它在恢复前作出一些我们的自定义行为，并决定什么时候进行恢复，当我们决定恢复时，就调用resumeWith方法就行。</p><h2 id="intrinsics方法"><a href="#intrinsics方法" class="headerlink" title="intrinsics方法"></a>intrinsics方法</h2><p>kotlin intrinsics方法是用来实现协程的基本原语，前面已经讲过协程的实现原理是Continuation，Continuation的最主要的好处就是可以暴露给用户用于控制程序的执行，而kotlin intrinsics作用就是可以让我们调用它提供的基本方法获取Continuation，kotlin intrinsics在<a href="https://github.com/JetBrains/kotlin/blob/1.4.0/libraries/stdlib/jvm/src/kotlin/coroutines/intrinsics/IntrinsicsJvm.kt" target="_blank" rel="noopener">kotlin-stdlib</a>和<a href="https://github.com/Kotlin/kotlinx.coroutines/tree/native-mt-1.4.20/kotlinx-coroutines-core/common/src/intrinsics" target="_blank" rel="noopener">kotlinx-coroutines</a>都有相应的intrinsics包，而kotlinx-coroutines的intrinsics包是基于kotlin-stdlib的intrinsics包的安全实现，增加了一些try catch、启动时可取消、拦截的能力，kotlin-stdlib的intrinsics包是不推荐给用户使用的，因为使用它必须要注意一些问题，所以kotlin在IDE中隐藏了kotlin-stdlib的intrinsics包的智能提示，我们无法自动导入这个包只能手动导入，并且里面的方法在引用时也没有提示，只能手动编写，这里我主要讲kotlin-stdlib的intrinsics包的方法，因为它才是最基本的实现，如果平时开发使用，还是推荐使用kotlinx-coroutines的intrinsics包。</p><p>首先我们要手动导入kotlin-stdlib的intrinsics包：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlin.coroutines.intrinsics.*</span><br></pre></td></tr></table></figure><p>intrinsics包主要有两部分，一部分是基于suspend lambda方法创建Continuation，一部分是捕获suspend方法的Continuation，先看Continuation的创建：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">actual</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="params">(<span class="keyword">suspend</span> ()</span></span> -&gt; T).createCoroutineUnintercepted(completion: Continuation&lt;T&gt;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">actual</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;R, T&gt;</span> <span class="params">(<span class="keyword">suspend</span> R.()</span></span> -&gt; T).createCoroutineUnintercepted(receiver: R, completion: Continuation&lt;T&gt;): Continuation&lt;<span class="built_in">Unit</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>createCoroutineUnintercepted</strong>方法用来创建一个返回值为T类型的初始Continuation实例，创建Continuation实例需要传入一个完成延续，当需要执行这个Continuation时，就调用它的resumeWith方法，当这个Continuation执行完毕时，完成延续completion的resumeWith方法就会回调，suspend lambda方法是普通方法和suspend方法之间的<strong>桥梁</strong>，因为suspend方法只能在suspend方法中调用，所以为了调用suspend方法，我们只能在普通方法声明一个suspend lambda类型的参数，然后在调用普通方法时传入suspend lambda方法块，并在传入suspend lambda方法块中调用其他suspend方法，例如kotlin协程通过launch方法启动时，都是要传一个<strong>block</strong>块，这个block块就是一个suspend lambda方法，我们传进去的block最终会被调用它的createCoroutineUnintercepted方法创建初始协程的初始Continuation实例，以CoroutineStart.DEFAULT启动模式为例，调用链如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CoroutineScope.launch(context, start, block)</span><br><span class="line">-&gt; AbstractCoroutine.start(start, coroutine, block)</span><br><span class="line">-&gt; CoroutineStart.invoke(block, receiver, completion)</span><br><span class="line">-&gt; block.startCoroutineCancellable(receiver, completion)</span><br><span class="line">-&gt; createCoroutineUnintercepted(receiver, completion).intercepted().resumeCancellable(Result.success(<span class="built_in">Unit</span>))</span><br></pre></td></tr></table></figure><p>而前面讲过suspend lambda方法会被CPS成一个状态机实现，这个状态机继承自BaseContinuationImpl并且实现了<strong>create</strong>方法，而createCoroutineUnintercepted方法会调用这个create方法创建状态机实例作为协程的初始Continuation。</p><p>从上面launch的调用链可以看到调用了createCoroutineUnintercepted方法后会马上调用<strong>intercepted</strong>方法，intercepted方法是Continuation的扩展方法，它也属于intrinsics方法，方法签名如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> Continuation<span class="type">&lt;T&gt;</span>.<span class="title">intercepted</span><span class="params">()</span></span>: Continuation&lt;T&gt;</span><br></pre></td></tr></table></figure><p>这个方法的作用是在Continuation的上下文CoroutineContext中查找拦截器ContinuationInterceptor，并返回拦截器对Continuation的拦截延续，它包装了原始的Continuation，在Continuation恢复前做出一些其他操作，目前在协程实现中intercepted方法返回的是一个<strong>DispatchedContinuation</strong>，它的作用是在Continuation恢复前把它分发到对应上下文的Dispatcher中恢复，这样原始的Continuation就会被切换到对应的Dispatcher中执行，由于拦截在协程的执行过程会经常用到，所以kotlin就建议在调用createCoroutineUnintercepted方法创建了初始Continuation后和调用suspendCoroutineUninterceptedOrReturn方法捕获Continuation后马上调用它的intercepted方法，因为intercepted方法中会返回的拦截延续进行缓存，这样后续调用intercepted方法时就能马上返回。</p><p>前面多次讲到了<strong>suspendCoroutineUninterceptedOrReturn</strong>方法，它也属于intrinsics方法，suspendCoroutineUninterceptedOrReturn方法的作用是捕获suspend连续传递过来的Continuation，方法签名如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">suspend</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">suspendCoroutineUninterceptedOrReturn</span><span class="params">(<span class="keyword">crossinline</span> block: (<span class="type">Continuation</span>&lt;<span class="type">T</span>&gt;) -&gt; <span class="type">Any</span>?)</span></span>: T</span><br></pre></td></tr></table></figure><p>suspendCoroutineUninterceptedOrReturn方法的返回值类型即为Continuation的结果类型，在block块中我们可以拿到Continuation实例，注意到block块的返回值为<strong>Any</strong>类型，还记得前面讲suspend方法CPS后的返回值也为Any类型，这个Any类型就是<strong>T | COROUTINE_SUSPENDED</strong>的组合类型，如果block块中返回了COROUTINE_SUSPENDED，则表示suspend方法需要挂起并且不会立即返回结果，在这种情况下，要在将来的某个时刻调用Continuation的resumeWith来恢复suspend方法的执行，如果block块中返回了T类型的值或者抛出了异常，这表示执行没有被挂起，suspend方法可以直接同步返回结果，suspendCoroutineUninterceptedOrReturn方法是一个非常实用且常用的intrinsics方法，通过它我们可以对普通回调方法进行包装，把它与suspend方法进行结合，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  GlobalScope.launch &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> <span class="keyword">data</span> = fetchData()</span><br><span class="line">            println(<span class="keyword">data</span>)</span><br><span class="line">        &#125;<span class="keyword">catch</span> (e: NullPointerException) &#123;</span><br><span class="line">            e.printStackTrace()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">fetchData</span><span class="params">()</span></span>: String = suspendCoroutineUninterceptedOrReturn &#123; continuation -&gt;</span><br><span class="line">    fetchDataAsync &#123;</span><br><span class="line">      <span class="comment">//恢复</span></span><br><span class="line">        <span class="keyword">if</span>(it.isNullOrEmpty()) &#123;</span><br><span class="line">            continuation.resumeWithException(NullPointerException())</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            continuation.resume(it)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//挂起                                                                </span></span><br><span class="line">    COROUTINE_SUSPENDED</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">fetchDataAsync</span><span class="params">(callback: (<span class="type">String</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    Executors.newCachedThreadPool().execute &#123;</span><br><span class="line">        callback.invoke(<span class="string">"result"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到suspendCoroutineUninterceptedOrReturn方法可以把回调方法结果在suspend方法中以同步的形式返回，除了这种应用，我还可以对捕获到的Continuation进行包装，像DispatchedContinuation那样在Continuation恢复前后自定义我们自己的逻辑，像协程提供的delay、await、withContext等方法都是利用suspendCoroutineUninterceptedOrReturn方法实现它们的逻辑，例如delay方法可以让捕获的Continuation延迟指定时间后恢复，await方法可以让捕获的Continuation等到协程完成得到结果后才恢复，但是我们在日常开发中一般不会直接使用suspendCoroutineUninterceptedOrReturn方法，因为使用不当会让线程出现<strong>栈溢出</strong>错误，suspendCoroutineUninterceptedOrReturn方法已经在注释中明确提示：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note that it is not recommended to call either Continuation.resume nor Continuation.resumeWithException   * functions synchronously in the same stackframe where suspension function is run. Use suspendCoroutine as a * safer way to obtain current continuation instance.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>不推荐在运行suspend方法的同一堆栈帧中同步调用Continuation的resumeWith方法，例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">fetchData</span><span class="params">()</span></span>: String = suspendCoroutineUninterceptedOrReturn &#123; continuation -&gt;</span><br><span class="line">   <span class="comment">//错误做法，不推荐在当前线程栈帧调用Continuation的resumeWith方法                                                    continuation.resume("result")</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为如果我们直接在当前线程上同步调用resumeWith方法，就相当于<strong>递归调用</strong>上一个suspend方法，这样当当前线程长时间运行时，就会很容易出现栈溢出错误，注释提到推荐使用<strong>suspendCoroutine</strong>方法代替suspendCoroutineUninterceptedOrReturn方法获取当前Continuation，该方法定义在kotlin.coroutines中：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">suspend</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">suspendCoroutine</span><span class="params">(<span class="keyword">crossinline</span> block: (<span class="type">Continuation</span>&lt;<span class="type">T</span>&gt;) -&gt; <span class="type">Unit</span>)</span></span>: T &#123;</span><br><span class="line">    <span class="keyword">return</span> suspendCoroutineUninterceptedOrReturn &#123; c: Continuation&lt;T&gt; -&gt;</span><br><span class="line">        <span class="keyword">val</span> safe = SafeContinuation(c.intercepted())</span><br><span class="line">        block(safe)</span><br><span class="line">        safe.getOrThrow()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过suspendCoroutine获取到的Continuation是一个<strong>SafeContinuation</strong>，它是对suspendCoroutineUninterceptedOrReturn捕获的Continuation又一层包装，它可以让我们同步地、安全地调用Continuation的resumeWith方法，而不用考虑任何限制，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">fetchData</span><span class="params">()</span></span>: String = suspendCoroutine &#123; continuation -&gt;</span><br><span class="line">   <span class="comment">//没问题，SafeContinuation可以同步调用</span></span><br><span class="line">   continuation.resume(<span class="string">"result"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SafeContinuation的原理就是它重写了resumeWith方法，在同步调用的情况下，不调用真正的Continuation的resumeWith方法，而是先保存结果，然后把保存的结果在调用getOrThrow方法时直接return给调用方法，这样就避免了同步调用Continuation的resumeWith方法出现的问题，同时SafeContinuation还替我们封装好了返回COROUTINE_SUSPENDED的逻辑，我们使用suspendCoroutine需要挂起时不用再显式地返回COROUTINE_SUSPENDED，除了suspendCoroutine方法，我们还可以使用<strong>suspendCancellableCoroutine</strong>方法代替，它定义在kotlinx.coroutines中：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">suspend</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">suspendCancellableCoroutine</span><span class="params">( <span class="keyword">crossinline</span> block: (<span class="type">CancellableContinuation</span>&lt;<span class="type">T</span>&gt;) -&gt; <span class="type">Unit</span>)</span></span>: T = suspendCoroutineUninterceptedOrReturn &#123; uCont -&gt;</span><br><span class="line">      <span class="keyword">val</span> cancellable = CancellableContinuationImpl(uCont.intercepted(), resumeMode = MODE_CANCELLABLE)</span><br><span class="line">      cancellable.initCancellability()</span><br><span class="line">      block(cancellable)</span><br><span class="line">      cancellable.getResult()</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>通过suspendCancellableCoroutine获取到的Continuation是一个<strong>CancellableContinuation</strong>，它也是对suspendCoroutineUninterceptedOrReturn捕获的Continuation又一层包装，它除了可以让我们同步地、安全地调用Continuation的resumeWith方法外，还可以取消Continuation同时响应协程的取消，例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">fetchData</span><span class="params">()</span></span>: String = suspendCancellableCoroutine&#123; continuation -&gt;</span><br><span class="line">    <span class="keyword">val</span> fileIs = FileInputStream(File(<span class="string">"test"</span>))</span><br><span class="line">    continuation.invokeOnCancellation &#123;</span><br><span class="line">        <span class="comment">//Continuation被取消时执行一些资源释放工</span></span><br><span class="line">        fileIs.close()</span><br><span class="line">    &#125;                                                             </span><br><span class="line">    <span class="comment">//...do something</span></span><br><span class="line">    <span class="comment">//没问题，CancellableContinuation可以同步调用</span></span><br><span class="line">    continuation.resume(<span class="string">"result"</span>)                                      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kotlin intrinsics方法中还有一个<strong>startCoroutineUninterceptedOrReturn</strong>方法，当你调用它之后，他会创建一个Continuation并立即执行它，直到遇到第一个挂起点，而createCoroutineUnintercepted方法创建的Continuation需要你显式调用resumeWith方法才会执行，它的方法签名如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="params">(<span class="keyword">suspend</span> ()</span></span> -&gt; T).startCoroutineUninterceptedOrReturn(completion: Continuation&lt;T&gt;): Any?</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;R, T&gt;</span> <span class="params">(<span class="keyword">suspend</span> R.()</span></span> -&gt; T).startCoroutineUninterceptedOrReturn(receiver: R, completion: Continuation&lt;T&gt;): Any?</span><br></pre></td></tr></table></figure><p>这个返回的调用同样需要传入一个Continuation作为该方法创建的Continuation的完成延续，当该方法创建的Continuation执行完毕后，完成延续completion的resumeWith方法就会被调用，与createCoroutineUnintercepted方法不同的是它的返回值是一个Any类型，这个Any类型的含义和前面讲的suspendCoroutineUninterceptedOrReturn方法中block块的返回值含义一样，这个方法的主要是和suspendCoroutineUninterceptedOrReturn方法结合使用，在相同的上下文中使用不同的suspend lambda块创建执行新的Continuation，并在新的Continuation结束后恢复suspendCoroutineUninterceptedOrReturn方法捕获的Continuation，例如withContext方法就使用到了suspendCoroutineUninterceptedOrReturn方法，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">withContext</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    context: <span class="type">CoroutineContext</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    block: <span class="type">suspend</span> <span class="type">CoroutineScope</span>.() -&gt; <span class="type">T</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: T &#123;</span><br><span class="line">    <span class="keyword">return</span> suspendCoroutineUninterceptedOrReturn <span class="symbol">sc@</span> &#123; uCont -&gt;</span><br><span class="line">        <span class="keyword">val</span> oldContext = uCont.context</span><br><span class="line">        <span class="keyword">val</span> newContext = oldContext + context</span><br><span class="line">        newContext.checkCompletion()</span><br><span class="line">        <span class="comment">// FAST PATH #1 -- newContext等于oldContext，不需要执行上下文切换</span></span><br><span class="line">        <span class="keyword">if</span> (newContext === oldContext) &#123;</span><br><span class="line">            <span class="keyword">val</span> coroutine = ScopeCoroutine(newContext, uCont)</span><br><span class="line">            <span class="comment">//最终调用block.startCoroutineUninterceptedOrReturn方法</span></span><br><span class="line">            <span class="keyword">return</span><span class="symbol">@sc</span> coroutine.startUndispatchedOrReturn(coroutine, block)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// FAST PATH #2 -- newContext的Dispatcher等于oldContext的oldContext，不需要切换Dispatcher</span></span><br><span class="line">        <span class="keyword">if</span> (newContext[ContinuationInterceptor] == oldContext[ContinuationInterceptor]) &#123;</span><br><span class="line">            <span class="keyword">val</span> coroutine = UndispatchedCoroutine(newContext, uCont)</span><br><span class="line">            withCoroutineContext(newContext, <span class="literal">null</span>) &#123;</span><br><span class="line">              <span class="comment">//最终调用block.startCoroutineUninterceptedOrReturn方法</span></span><br><span class="line">                <span class="keyword">return</span><span class="symbol">@sc</span> coroutine.startUndispatchedOrReturn(coroutine, block)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// SLOW PATH -- newContext不等于oldContext</span></span><br><span class="line">        <span class="keyword">val</span> coroutine = DispatchedCoroutine(newContext, uCont)</span><br><span class="line">        coroutine.initParentJob()</span><br><span class="line">        <span class="comment">//最终调用block.createCoroutineUnintercepted方法</span></span><br><span class="line">        block.startCoroutineCancellable(coroutine, coroutine)</span><br><span class="line">        coroutine.getResult()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>withContext方法的作用是把block块运行在新的上下文中，并返回block块的运行结果，同时返回时会切换到原来的上下文中，withContext方法在不需要进行Dispatcher切换的情况中会直接使用block.startCoroutineUninterceptedOrReturn方法，这样会减少无谓的intercepted方法调用。</p><p>createCoroutineUnintercepted、startCoroutineUninterceptedOrReturn、suspendCoroutineUninterceptedOrReturn三个方法就是kotlin intrinsice中最常用到的方法，用来创建、启动和捕获Continuation，kotlin协程的本质就是启动、调度和管理Continuation，所以说intrinsics方法是kotlin协程实现的基石。</p><h2 id="Continuation的恢复"><a href="#Continuation的恢复" class="headerlink" title="Continuation的恢复"></a>Continuation的恢复</h2><p>从前面可以看到，当我们需要从挂起点恢复被挂起的Continuation或者首次执行这个Continuation时，就要调用<a href="https://github.com/JetBrains/kotlin/blob/1.4.0/libraries/stdlib/src/kotlin/coroutines/Continuation.kt" target="_blank" rel="noopener">Continuation</a>接口的resumeWith方法，resumeWith方法方法根据Continuation的子类不同有不同的实现，在kotlin协程中，Continuation主要有<strong>BaseContinuationImpl</strong>、<strong>DispatchedContinuation</strong>、<strong>SafeContinuation</strong>、<strong>CancellableContinuation</strong>、<strong>AbstractCoroutine</strong>这几种实现，下面主要讲一下DispatchedContinuation、BaseContinuationImpl和AbstractCoroutine的resumeWith方法实现，它们之间的关系如下：</p><img src="/2022/05/26/%E6%8F%AD%E7%A7%98kotlin%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/coroutines1.png" class="" title="coroutine"><p><strong>DispatchedContinuation</strong></p><p>DispatchedContinuation就是把Continuation分发到对应上下文的Dispatcher中执行，当我们需要拦截Continuation时，就调用它的intercepted方法获取它的DispatchedContinuation，当一个Continuation被拦截后，后续它执行都在对应的Dispatcher中，DispatchedContinuation当resumeWith方法实现如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatchedContinuation</span>&lt;<span class="type">in T</span>&gt;</span>(</span><br><span class="line">    <span class="meta">@JvmField</span> <span class="keyword">val</span> dispatcher: CoroutineDispatcher,<span class="comment">//被拦截Continuation的Dispatcher</span></span><br><span class="line">    <span class="meta">@JvmField</span> <span class="keyword">val</span> continuation: Continuation&lt;T&gt;<span class="comment">//被拦截的Continuation</span></span><br><span class="line">) : DispatchedTask&lt;T&gt;(MODE_UNINITIALIZED), CoroutineStackFrame, Continuation&lt;T&gt; <span class="keyword">by</span> continuation &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">resumeWith</span><span class="params">(result: <span class="type">Result</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> context = continuation.context</span><br><span class="line">        <span class="keyword">val</span> state = result.toState()</span><br><span class="line">        <span class="keyword">if</span> (dispatcher.isDispatchNeeded(context)) &#123;<span class="comment">//IO、DEFAULT、MAIN走这里逻辑</span></span><br><span class="line">            _state = state</span><br><span class="line">            resumeMode = MODE_ATOMIC</span><br><span class="line">            <span class="comment">//调用dispatch方法后，DispatchedTask的run方法会执行</span></span><br><span class="line">            dispatcher.dispatch(context, <span class="keyword">this</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//Unconfined走这里的逻辑</span></span><br><span class="line">            executeUnconfined(state, MODE_ATOMIC) &#123;</span><br><span class="line">                withCoroutineContext(<span class="keyword">this</span>.context, countOrElement) &#123;</span><br><span class="line">                   <span class="comment">//调用Continuation的resumeWith方法</span></span><br><span class="line">                    continuation.resumeWith(result)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatchedTask</span>&lt;<span class="type">in T</span>&gt;</span>(<span class="meta">@JvmField</span> <span class="keyword">public</span> <span class="keyword">var</span> resumeMode: <span class="built_in">Int</span>) : SchedulerTask() &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> taskContext = <span class="keyword">this</span>.taskContext</span><br><span class="line">    <span class="keyword">var</span> fatalException: Throwable? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> delegate = delegate <span class="keyword">as</span> DispatchedContinuation&lt;T&gt;</span><br><span class="line">      <span class="keyword">val</span> continuation = delegate.continuation</span><br><span class="line">      <span class="keyword">val</span> context = continuation.context</span><br><span class="line">      <span class="keyword">val</span> state = takeState()</span><br><span class="line">      withCoroutineContext(context, delegate.countOrElement) &#123;</span><br><span class="line">        <span class="keyword">val</span> exception = getExceptionalResult(state)</span><br><span class="line">        <span class="keyword">val</span> job = <span class="keyword">if</span> (exception == <span class="literal">null</span> &amp;&amp; resumeMode.isCancellableMode) context[Job] <span class="keyword">else</span> <span class="literal">null</span></span><br><span class="line">        <span class="keyword">if</span> (job != <span class="literal">null</span> &amp;&amp; !job.isActive) &#123;</span><br><span class="line">          <span class="keyword">val</span> cause = job.getCancellationException()</span><br><span class="line">          cancelCompletedResult(state, cause)</span><br><span class="line">          continuation.resumeWithStackTrace(cause)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//调用Continuation的resumeWith方法</span></span><br><span class="line">          <span class="keyword">if</span> (exception != <span class="literal">null</span>) &#123;</span><br><span class="line">            continuation.resumeWithException(exception)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            continuation.resume(getSuccessfulResult(state))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Throwable) &#123;</span><br><span class="line">      fatalException = e</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> result = runCatching &#123; taskContext.afterTask() &#125;</span><br><span class="line">      handleFatalException(fatalException, result.exceptionOrNull())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到如果Dispatcher是Unconfined，那么就会在当前线程调用Continuation的resumeWith方法，如果Dispatcher是IO、DEFAULT、MAIN，就调用它们的dispatch方法提交DispatchedTask任务等待调度执行，而DispatchedContinuation同时又继承自DispatchedTask，所以它是一个DispatchedTask，等IO、DEFAULT、MAIN的Dispatcher调度时，run方法就会执行，这时就调用Continuation的resumeWith方法，这样Continuation就被分发到对应上下文的线程中恢复。</p><p><strong>BaseContinuationImpl</strong></p><p><a href="https://github.com/JetBrains/kotlin/blob/1.4.0/libraries/stdlib/jvm/src/kotlin/coroutines/jvm/internal/ContinuationImpl.kt" target="_blank" rel="noopener">BaseContinuationImpl</a>是所有suspend方法状态机的共同父类，例如子类ContinuationImpl就表示suspend命名方法，子类SuspendLambda就表示suspend lambda方法，除了这些普通的suspend方法外，kotlin中还有一种受限suspend方法，它是一种带有限制的suspend方法作用域，在这种带限制的suspend方法中只能调用<strong>@RestrictsSuspension</strong>注解的类中定义的suspend方法，例如<a href="https://kotlinlang.org/docs/sequences.html" target="_blank" rel="noopener">sequence</a>方法的block块就是一个带有限制的suspend lambda方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sequence&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">      <span class="comment">//display() 报错，不允许调用其他suspend方法</span></span><br><span class="line">      yield(<span class="number">1</span>) <span class="comment">//只能调用被@RestrictsSuspension注解的SequenceScope类中定义的yield方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">sequence</span><span class="params">(<span class="meta">@BuilderInference</span> block: <span class="type">suspend</span> <span class="type">SequenceScope</span>&lt;<span class="type">T</span>&gt;.() -&gt; <span class="type">Unit</span>)</span></span>: Sequence&lt;T&gt; &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestrictsSuspension</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceScope</span>&lt;<span class="type">in T</span>&gt; <span class="keyword">internal</span> <span class="keyword">constructor</span></span>() &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">yield</span><span class="params">(value: <span class="type">T</span>)</span></span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>受限的suspend方法用RestrictedContinuationImpl表示，受限的suspend lambda方法用RestrictedSuspendLambda表，当我们调用BaseContinuationImpl的resumeWith方法时，就是在执行当前suspend方法的状态机，并且在状态机运行结束时恢复外部Continuation，我们可以看一下BaseContinuationImpl的resumeWith方法的实现：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseContinuationImpl</span></span>(</span><br><span class="line">    <span class="comment">//每个BaseContinuationImpl实例都会引用一个完成Continuation，用来在当前状态机流转结束时恢复这个Continuation</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> completion: Continuation&lt;Any?&gt;?</span><br><span class="line">) : Continuation&lt;Any?&gt;, CoroutineStackFrame, Serializable &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//resumeWith方法中通过循环由里到外恢复Continuation</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">resumeWith</span><span class="params">(result: <span class="type">Result</span>&lt;<span class="type">Any</span>?&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> current = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">var</span> param = result</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            probeCoroutineResumed(current)</span><br><span class="line">            with(current) &#123;</span><br><span class="line">                <span class="keyword">val</span> completion = completion!!</span><br><span class="line">                <span class="keyword">val</span> outcome: Result&lt;Any?&gt; =</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//通过调用invokeSuspend方法执行当前suspend方法主体，进行状态流转</span></span><br><span class="line">                        <span class="keyword">val</span> outcome = invokeSuspend(param)</span><br><span class="line">                        <span class="keyword">if</span> (outcome === COROUTINE_SUSPENDED) <span class="keyword">return</span></span><br><span class="line">                        Result.success(outcome)</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (exception: Throwable) &#123;</span><br><span class="line">                        Result.failure(exception)</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="comment">//当invokeSuspend方法没有返回COROUTINE_SUSPENDED，就表示当前状态机流转结束，即当前suspend方法执行完毕</span></span><br><span class="line">                releaseIntercepted() </span><br><span class="line">              <span class="comment">//然后在这里判断是否还有suspend方法需要恢复</span></span><br><span class="line">                <span class="keyword">if</span> (completion <span class="keyword">is</span> BaseContinuationImpl) &#123; <span class="comment">//completion是suspend方法，继续恢复</span></span><br><span class="line">                    current = completion</span><br><span class="line">                    param = outcome</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">//completion不是suspend方法，调用resumeWith方法恢复</span></span><br><span class="line">                    completion.resumeWith(outcome)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每个suspend方法状态机都要实现这个接口，用来调用suspend方法主体</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">invokeSuspend</span><span class="params">(result: <span class="type">Result</span>&lt;<span class="type">Any</span>?&gt;)</span></span>: Any?</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个BaseContinuationImpl实例就代表一个suspend方法状态机，当suspend方法状态机执行结束时，BaseContinuationImpl就会恢复引用的完成Continuation，如果完成Continuation是suspend方法，就调用它状态机的invokeSuspend方法，当遇到完成Continuation不是suspend方法时，就调用它的resumeWith方法执行对应的逻辑。</p><p><strong>AbstractCoroutine</strong></p><p><a href="https://github.com/Kotlin/kotlinx.coroutines/blob/native-mt-1.4.20/kotlinx-coroutines-core/common/src/AbstractCoroutine.kt" target="_blank" rel="noopener">AbstractCoroutine</a>是kotlin协程的基类，AbstractCoroutine在kotlin协程实现中会作为<strong>最后一个恢复的Continaution</strong>，所以当所有suspend方法都执行完毕后，AbstractCoroutine的resumeWith方法就会被调用，这时它就可以进行协程的生命周期流转，例如判断子协程是否完成，如果子协程都完成了，那么就能置为完成状态，否则就置为完成中状态等待所有子协程完成，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCoroutine</span>&lt;<span class="type">in T</span>&gt;</span>(<span class="keyword">protected</span> <span class="keyword">val</span> parentContext: CoroutineContext, active: <span class="built_in">Boolean</span> = <span class="literal">true</span>) : JobSupport(active), Job, Continuation&lt;T&gt;, CoroutineScope &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">resumeWith</span><span class="params">(result: <span class="type">Result</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">      <span class="comment">//进行协程生命周期流转</span></span><br><span class="line">      <span class="keyword">val</span> state = makeCompletingOnce(result.toState())</span><br><span class="line">      <span class="keyword">if</span> (state === COMPLETING_WAITING_CHILDREN) <span class="keyword">return</span></span><br><span class="line">      afterResume(state)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自己实现Coroutine"><a href="#自己实现Coroutine" class="headerlink" title="自己实现Coroutine"></a>自己实现Coroutine</h2><p>当我们通过launch方法传入block块启动一个协程，本质是通过这个block块创建了一个Continuation，当我们在block块中调用其他suspend方法，并且suspend方法中再调用其他suspend方法，Continuation就会在这些suspend方法之间传递，最终我们可以捕获到连续传递的Continuation，当我们通过Continuation恢复时，本质是上一个suspend方法的递归调用进行状态流转，而kotlin协程只是在这些Continuation的基础上添加了生命周期管理、父子关系、异常处理、线程切换等逻辑。</p><p>通过intrinsics方法，我们自己也可以实现一个协程，这里我通过intrinsics方法仿照kotlin协程写了个简化版的协程，它这样使用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> simpleScope = SimpleCoroutineScope(Dispatchers.Default)</span><br><span class="line">    <span class="keyword">val</span> simpleJob = simpleScope.launch(CoroutineName(<span class="string">"main"</span>), CoroutineStart.DEFAULT) &#123;</span><br><span class="line">        <span class="keyword">val</span> user = login()</span><br><span class="line">        <span class="keyword">val</span> userData = fetchData(user)</span><br><span class="line">        displayUI(userData)</span><br><span class="line">    &#125;</span><br><span class="line">    simpleJob.invokeOnCompletion(<span class="keyword">object</span> : SimpleJob.CompletionHandler &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">invoke</span><span class="params">(cause: <span class="type">Throwable</span>?)</span></span> &#123;</span><br><span class="line">            println(<span class="string">"invokeOnCompletion: cause = <span class="variable">$cause</span>"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//进程保活</span></span><br><span class="line">    Thread.sleep(<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> SimpleCoroutineScope.<span class="title">login</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> async(CoroutineName(<span class="string">"login"</span>)) &#123;</span><br><span class="line">        delay(<span class="number">200</span>)</span><br><span class="line">        <span class="keyword">return</span><span class="symbol">@async</span> <span class="string">"user"</span></span><br><span class="line">    &#125;.await()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> SimpleCoroutineScope.<span class="title">fetchData</span><span class="params">(user: <span class="type">String</span>)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> async(CoroutineName(<span class="string">"fetch"</span>)) &#123;</span><br><span class="line">        delay(<span class="number">200</span>)</span><br><span class="line">        <span class="keyword">return</span><span class="symbol">@async</span> <span class="string">"<span class="variable">$user</span> data"</span></span><br><span class="line">    &#125;.await()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">displayUI</span><span class="params">(<span class="keyword">data</span>: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">"displayUI: <span class="variable">$data</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行输出：</span></span><br><span class="line"><span class="comment">//displayUI: user data</span></span><br><span class="line"><span class="comment">//invokeOnCompletion: cause = null</span></span><br></pre></td></tr></table></figure><p>invokeOnCompletion方法回调会在协程完成后被调用，如果协程正常完成那么，cause为null，如果协程异常完成，那么cause为对应的异常，上面协程正常完成，所有实现代码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlinx.coroutines.*</span><br><span class="line"><span class="keyword">import</span> kotlin.coroutines.*</span><br><span class="line"><span class="keyword">import</span> kotlin.coroutines.intrinsics.*</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArraySet</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简化版的[CoroutineScope]，提供协程运行作用域，它与[CoroutineScope]的区别是没有[CoroutineScope.cancel]、[CoroutineScope.ensureActive]等这些扩展方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">interface</span> <span class="title">SimpleCoroutineScope</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> coroutineContext: CoroutineContext</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [SimpleCoroutineScope]的实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleCoroutineScopeImpl</span></span>(<span class="keyword">override</span> <span class="keyword">val</span> coroutineContext: CoroutineContext) : SimpleCoroutineScope</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造[SimpleCoroutineScope]实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">SimpleCoroutineScope</span><span class="params">(context: <span class="type">CoroutineContext</span>)</span></span> = SimpleCoroutineScopeImpl(<span class="keyword">if</span>(context[SimpleJob] != <span class="literal">null</span>) context <span class="keyword">else</span> context + SimpleJob())</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简化版的[Job]，用于管理协程的生命周期，它与[Job]的区别是它没有取消操作、异常传播、异常处理等功能，只有简单的状态流转：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      start/await</span></span><br><span class="line"><span class="comment"> * NEW -------------&gt; ACTIVE (isActive = true)</span></span><br><span class="line"><span class="comment"> *   \                /</span></span><br><span class="line"><span class="comment"> *    \  fail/finish /</span></span><br><span class="line"><span class="comment"> *     \            /</span></span><br><span class="line"><span class="comment"> *       COMPLETING</span></span><br><span class="line"><span class="comment"> *           |</span></span><br><span class="line"><span class="comment"> *           | wait children</span></span><br><span class="line"><span class="comment"> *           v</span></span><br><span class="line"><span class="comment"> *       COMPLETE (isComplete = true)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">interface</span> <span class="title">SimpleJob</span> : <span class="type">CoroutineContext.Element &#123;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> Key : CoroutineContext.Key&lt;SimpleJob&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 协程是否已启动</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isActive</span><span class="params">()</span></span>: <span class="built_in">Boolean</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 协程是否已完成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isComplete</span><span class="params">()</span></span>: <span class="built_in">Boolean</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动协程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待协程的结果返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">await</span><span class="params">()</span></span>: T</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册协程完成回调[completionHandler]，返回的[DisposableHandle]可以用来反注册回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">invokeOnCompletion</span><span class="params">(completionHandler: <span class="type">CompletionHandler</span>, invokeImmediately: <span class="type">Boolean</span> = <span class="literal">true</span>)</span></span>: DisposableHandle</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立起与[childJob]子协程的父子关系</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">attachChild</span><span class="params">(childJob: <span class="type">SimpleJob</span>)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 协程完成通知回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">CompletionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * cause == null -&gt; 成功结束</span></span><br><span class="line"><span class="comment">         * cause == other -&gt; 异常结束</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">invoke</span><span class="params">(cause: <span class="type">Throwable</span>?)</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反注册句柄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">DisposableHandle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 调用[dispose]方法反注册</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">dispose</span><span class="params">()</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [SimpleJob]的实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleJobImpl</span></span>(active: <span class="built_in">Boolean</span>) : SimpleJob &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">        NEW, ACTIVE, COMPLETING, COMPLETED</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> key: CoroutineContext.Key&lt;*&gt; <span class="keyword">get</span>() = SimpleJob</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Volatile</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> state = <span class="keyword">if</span>(active) State.ACTIVE <span class="keyword">else</span> State.NEW</span><br><span class="line">    <span class="meta">@Volatile</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> result: Any? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> children = CopyOnWriteArraySet&lt;SimpleJob&gt;()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> completionHandlers = CopyOnWriteArraySet&lt;SimpleJob.CompletionHandler&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isActive</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state == State.ACTIVE</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isComplete</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state == State.COMPLETED</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">start</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(state == State.NEW) &#123;</span><br><span class="line">            state = State.ACTIVE</span><br><span class="line">            onStart()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">await</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">if</span>(state == State.COMPLETED) &#123;</span><br><span class="line">            <span class="keyword">if</span>(result <span class="keyword">is</span> Throwable) &#123;</span><br><span class="line">                <span class="keyword">throw</span> result <span class="keyword">as</span> Throwable</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> result <span class="keyword">as</span> T</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(state == State.NEW) &#123;</span><br><span class="line">            start()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> suspendCoroutineUninterceptedOrReturn &#123;</span><br><span class="line">            invokeOnCompletion(<span class="keyword">object</span> : SimpleJob.CompletionHandler &#123;</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">invoke</span><span class="params">(cause: <span class="type">Throwable</span>?)</span></span> &#123;</span><br><span class="line">                     <span class="keyword">if</span>(cause != <span class="literal">null</span>) &#123;</span><br><span class="line">                         it.resumeWithException(cause)</span><br><span class="line">                     &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                         it.resume(result <span class="keyword">as</span> T)</span><br><span class="line">                     &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            COROUTINE_SUSPENDED</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">invokeOnCompletion</span><span class="params">(completionHandler: <span class="type">SimpleJob</span>.<span class="type">CompletionHandler</span>, invokeImmediately: <span class="type">Boolean</span>)</span></span>: SimpleJob.DisposableHandle &#123;</span><br><span class="line">        <span class="keyword">if</span>(invokeImmediately &amp;&amp; state == State.COMPLETED) &#123;</span><br><span class="line">            completionHandler.invoke(result <span class="keyword">as</span>? Throwable)</span><br><span class="line">        &#125;</span><br><span class="line">        completionHandlers.add(completionHandler)</span><br><span class="line">        <span class="keyword">return</span> CompletionHandlerDisposeHandle(completionHandler)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">attachChild</span><span class="params">(childJob: <span class="type">SimpleJob</span>)</span></span> &#123;</span><br><span class="line">        children.add(childJob)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="title">initParentJob</span><span class="params">(parentJob: <span class="type">SimpleJob</span>?)</span></span> &#123;</span><br><span class="line">        parentJob?.start()</span><br><span class="line">        parentJob?.attachChild(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="title">tryMakeCompleted</span><span class="params">(value: <span class="type">Any</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        result = value ?: result</span><br><span class="line">        <span class="keyword">val</span> complete = children.find &#123; !it.isComplete() &#125; == <span class="literal">null</span></span><br><span class="line">        <span class="keyword">if</span>(complete) &#123;</span><br><span class="line">            <span class="keyword">if</span>(state == State.COMPLETED) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            state = State.COMPLETED</span><br><span class="line">            <span class="keyword">val</span> cause = <span class="keyword">if</span>(result <span class="keyword">is</span> Throwable) &#123; result <span class="keyword">as</span> Throwable &#125; <span class="keyword">else</span> &#123; <span class="literal">null</span> &#125;</span><br><span class="line">            notifyCompleteHandlers(cause)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">// 等待所有child完成</span></span><br><span class="line">            <span class="keyword">if</span>(state == State.COMPLETING) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            state = State.COMPLETING</span><br><span class="line">            children.forEach &#123;</span><br><span class="line">                it.invokeOnCompletion(<span class="keyword">object</span> : SimpleJob.CompletionHandler &#123;</span><br><span class="line">                    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">invoke</span><span class="params">(cause: <span class="type">Throwable</span>?)</span></span> &#123;</span><br><span class="line">                        tryMakeCompleted(cause)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, invokeImmediately = <span class="literal">true</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> complete</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">notifyCompleteHandlers</span><span class="params">(cause: <span class="type">Throwable</span>?)</span></span> &#123;</span><br><span class="line">        completionHandlers.forEach &#123;</span><br><span class="line">            it.invoke(cause)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 协程调用start/await方法从[State.NEW]转移到[State.ACTIVE]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStart</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用[dispose]方法解除注册的[completionHandler]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">CompletionHandlerDisposeHandle</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> completionHandler: SimpleJob.CompletionHandler) : SimpleJob.DisposableHandle &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">dispose</span><span class="params">()</span></span> &#123;</span><br><span class="line">            completionHandlers.remove(completionHandler)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造[SimpleJob]实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">SimpleJob</span><span class="params">()</span></span> = SimpleJobImpl(active = <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简化版的协程，调用start方法启动协程</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parentContext 协程的父Context，用于建立父子关系</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> active 为true时让协程处于active状态，否则处于new状态，处于new状态需要调用start/await方法才会启动协程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleCoroutine</span>&lt;<span class="type">T</span>&gt;</span>(<span class="keyword">private</span> <span class="keyword">val</span> parentContext: CoroutineContext, active: <span class="built_in">Boolean</span> = <span class="literal">true</span>) : SimpleJobImpl(active), SimpleCoroutineScope, Continuation&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> context: CoroutineContext = parentContext + <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> coroutineContext: CoroutineContext <span class="keyword">get</span>() = context</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 协程完成通知，这里处理结果，进行生命周期状态流转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">resumeWith</span><span class="params">(result: <span class="type">Result</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">        println(<span class="string">"resumeWith: result = <span class="variable">$result</span>, coroutineName = <span class="subst">$&#123;coroutineContext[CoroutineName]&#125;</span>"</span>)</span><br><span class="line">        <span class="keyword">if</span>(result.isSuccess) &#123;<span class="comment">//成功恢复</span></span><br><span class="line">            tryMakeCompleted(result.getOrNull())</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">//错误恢复</span></span><br><span class="line">            tryMakeCompleted(result.exceptionOrNull())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * for [CoroutineStart.LAZY]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> lazyContinuation: Continuation&lt;<span class="built_in">Unit</span>&gt;? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * for [CoroutineStart.LAZY]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStart</span><span class="params">()</span></span> &#123;</span><br><span class="line">        lazyContinuation?.intercepted()?.resumeWith(Result.success(<span class="built_in">Unit</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立协程的父子关系，使用[kotlin.coroutines.intrinsics]原语为[block]块创建协程的初始化[Continuation], 并根据[start]模式启动它</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">start</span><span class="params">(start: <span class="type">CoroutineStart</span>, block: <span class="type">suspend</span> <span class="type">SimpleCoroutineScope</span>.() -&gt; <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(coroutineContext[CoroutineExceptionHandler] != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalAccessException(<span class="string">"unsupport CoroutineExceptionHandler"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        initParentJob(parentContext[SimpleJob])</span><br><span class="line">        <span class="keyword">when</span>(start) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 立即启动协程，并把启动的协程运行在指定的Dispatcher上</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            CoroutineStart.DEFAULT -&gt; &#123;</span><br><span class="line">                block.createCoroutineUnintercepted(<span class="keyword">this</span>, <span class="keyword">this</span>).intercepted().resumeWith(Result.success(<span class="built_in">Unit</span>))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 在当前线程立即启动协程, 但恢复时会把协程运行在指定的Dispatcher上，效果和指定[Dispatchers.Unconfined]类似</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            CoroutineStart.UNDISPATCHED -&gt; &#123;</span><br><span class="line">                <span class="keyword">val</span> result = <span class="keyword">try</span> &#123;</span><br><span class="line">                    block.startCoroutineUninterceptedOrReturn(<span class="keyword">this</span>, <span class="keyword">this</span>)</span><br><span class="line">                &#125;<span class="keyword">catch</span> (e: Throwable) &#123;</span><br><span class="line">                    e</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(result <span class="keyword">is</span> Throwable) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.resumeWithException(result)</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(result !== COROUTINE_SUSPENDED) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.resume(result <span class="keyword">as</span> T)</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//COROUTINE_SUSPENDED, do noting</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 不立即启动协程，当调用start/await方法时才启动协程，并把启动的协程运行在指定的Dispatcher上</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            CoroutineStart.LAZY -&gt; &#123;</span><br><span class="line">                lazyContinuation = block.createCoroutineUnintercepted(<span class="keyword">this</span>, <span class="keyword">this</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">throw</span> IllegalAccessException(<span class="string">"unsupport <span class="variable">$start</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动协程，没有结果返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> SimpleCoroutineScope.<span class="title">launch</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    context: <span class="type">CoroutineContext</span> = EmptyCoroutineContext,</span></span></span><br><span class="line"><span class="function"><span class="params">    start: <span class="type">CoroutineStart</span> = CoroutineStart.DEFAULT,</span></span></span><br><span class="line"><span class="function"><span class="params">    block: <span class="type">suspend</span> <span class="type">SimpleCoroutineScope</span>.() -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: SimpleJob &#123;</span><br><span class="line">    <span class="keyword">val</span> newContext = coroutineContext + context</span><br><span class="line">    <span class="keyword">val</span> coroutine = <span class="keyword">if</span>(start == CoroutineStart.LAZY) &#123;</span><br><span class="line">        SimpleCoroutine&lt;<span class="built_in">Unit</span>&gt;(newContext, active = <span class="literal">false</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        SimpleCoroutine&lt;<span class="built_in">Unit</span>&gt;(newContext, active = <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    coroutine.start(start, block)</span><br><span class="line">    <span class="keyword">return</span> coroutine</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动协程，可以调用返回的SimpleJob的await方法等待结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> SimpleCoroutineScope.<span class="title">async</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    context: <span class="type">CoroutineContext</span> = EmptyCoroutineContext,</span></span></span><br><span class="line"><span class="function"><span class="params">    start: <span class="type">CoroutineStart</span> = CoroutineStart.DEFAULT,</span></span></span><br><span class="line"><span class="function"><span class="params">    block: <span class="type">suspend</span> <span class="type">SimpleCoroutineScope</span>.() -&gt; <span class="type">T</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: SimpleJob &#123;</span><br><span class="line">    <span class="keyword">val</span> newContext = coroutineContext + context</span><br><span class="line">    <span class="keyword">val</span> coroutine = <span class="keyword">if</span>(start == CoroutineStart.LAZY) &#123;</span><br><span class="line">        SimpleCoroutine&lt;T&gt;(newContext, active = <span class="literal">false</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        SimpleCoroutine&lt;T&gt;(newContext, active = <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    coroutine.start(start, block)</span><br><span class="line">    <span class="keyword">return</span> coroutine</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我自定义了SimpleCoroutineScope、SimpleJob、SimpleCoroutine分别对应kotlin协程的CoroutineScope、Job、AbstractCoroutine角色，实现了协程的launch、async方法，支持DEFAULT、LAZY、UNDISPATCHED三种启动模式，在kotlin协程中CoroutineScope是用来控制协程的作用域，Job是用来管理协程的生命周期和父子关系，而AbstractCoroutine实现了Continuation同时继承自Job，它的作用在前面也讲过，就是当所有suspend方法都执行完毕后，AbstractCoroutine的resumeWith方法就会被调用，这时它就可以进行协程的生命周期流转，DEFAULT模式表示立即启动，所以它调用了createCoroutineUnintercepted方法创建初始Continuation后马上调用resumeWith方法执行它，LAZY模式表示延迟启动，所以它通过createCoroutineUnintercepted方法创建的初始Continuation的resumeWith方法会等到调用start方法时才调用，而UNDISPATCHED模式表示在当前线程立即启动，所以它通过startCoroutineUninterceptedOrReturn方法创建并执行Continuation，希望大家通过这个简化版的协程理解kotlin协程中角色的作用。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文介绍了kotlin协程的实现思想，Continuation、CPS和suspend方法的实现，不只是kotlin协程，其他语言的协程的实现思想也是类似的，同时还介绍了kotlin提供的intrinsics方法，它是用于给用户操纵这些Continuation，最后通过intrinsics方法实现了一个简化版的kotlin协程，所以kotlin协程也没有那么神秘，它只是Continuation的应用，它只是在这些Continuation的基础上添加了生命周期管理、父子关系、异常处理、线程切换等逻辑。</p><p>以上就是本文的所有内容，希望大家有所收获！</p><p>参考文档：</p><p><a href="https://blog.csdn.net/pzhang_9_25/article/details/7832072" target="_blank" rel="noopener">Continuation-passing Style介绍及应用</a></p><p><a href="https://github.com/Kotlin/KEEP/blob/master/proposals/coroutines.md#implementation-details" target="_blank" rel="noopener">KEEP-Kotlin Coroutines</a></p><p><a href="https://medium.com/androiddevelopers/the-suspend-modifier-under-the-hood-b7ce46af624f" target="_blank" rel="noopener">The suspend modifier</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;上一篇文章：&lt;a href=&quot;https://juejin.cn/post/6926695962354122765#headin
      
    
    </summary>
    
    
      <category term="kotlin" scheme="http://yoursite.com/categories/kotlin/"/>
    
    
      <category term="协程" scheme="http://yoursite.com/tags/%E5%8D%8F%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>优雅地处理运行时权限请求</title>
    <link href="http://yoursite.com/2021/09/23/%E4%BC%98%E9%9B%85%E5%9C%B0%E5%A4%84%E7%90%86%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90%E8%AF%B7%E6%B1%82/"/>
    <id>http://yoursite.com/2021/09/23/%E4%BC%98%E9%9B%85%E5%9C%B0%E5%A4%84%E7%90%86%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90%E8%AF%B7%E6%B1%82/</id>
    <published>2021-09-22T17:22:43.000Z</published>
    <updated>2023-01-07T10:44:48.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从android 6.0(API 级别 23)开始，android引入了运行时权限，用户开始在应用运行时向其授予权限，而不是在应用安装时向其授予权限，如果应用的某项功能需要使用到受运行时权限保护的资源(例如相机、位置、麦克风等)，但在运行该功能前没有动态地申请相应的权限，那么在调用该功能时就会抛出SecurityException异常， android 6.0已经推出了很多年了，相信大家对于运行时权限的申请过程已经非常的熟悉，但是android的运行时权限的申请过程一直都是非常的繁琐的，主要有两步：</p><p>1、在需要申请权限的地方检查该权限是否被同意，如果同意了就直接执行，如果不同意就动态申请权限；</p><p>2、重写Activity或Fragment的onRequestPermissionsResult方法，在里面根据grantResults数组判断权限是否被同意，如果同意就直接执行，如果不同意就要进行相应的提示，如果用户勾选了“don’t ask again”，还要引导用户去“Settings”界面打开权限，这时还要重写onActivityResult判断权限是否被同意.</p><p>就是这简单的两步，却夹杂了大量的if else语句，不但不优雅，而且每次都要写重复的样板代码，可能android的开发者也意识到了这一点，在最新androidx中引入了<a href="https://developer.android.com/training/basics/intents/result" target="_blank" rel="noopener">activity result api</a>，通过activity result api你可以不需要自己管理requestCode，只需要提供需要请求的权限和处理结果的回调就行，让权限请求简单了一点，但是如果在权限请求的过程中，用户点击拒绝或者拒绝并不再询问，那么我们还是需要自己处理这些情况，但是这些处理流程都是一样的，完全可以封装起来，所以我就把以前的一个使用无界面fragment代理权限申请的库重构了一下，让权限的请求流程更加简单，本文会先复习一下权限的分类，然后再介绍PermissionHelper申请权限时的设计，最后记录一下从android 6.0后随着系统的迭代跟权限申请相关的重要行为变更。</p><ul><li><a href="https://github.com/rain9155/PermissionHelper" target="_blank" rel="noopener">PermissionHelper</a></li></ul><h2 id="权限的分类"><a href="#权限的分类" class="headerlink" title="权限的分类"></a>权限的分类</h2><p>android中所有的预定义权限(不包括厂商自定义的)都可以在<a href="https://developer.android.google.cn/reference/android/Manifest.permission" target="_blank" rel="noopener">Manifest.permission</a>这个静态类中找到定义，android把权限分为四类：普通权限、签名权限、危险权限和特殊权限，每一种类型的权限都分配一个对应的<strong>Protection Level</strong>，分别为：normal、signature、dangerous和appop，下面简单介绍一下这四种类型的权限</p><h3 id="1、普通权限"><a href="#1、普通权限" class="headerlink" title="1、普通权限"></a>1、普通权限</h3><p>普通权限也叫正常权限，Protection Level为<strong>normal</strong>，它不需要动态申请，你只需要在AndroidManifest.xml中静态地声明，然后系统在应用<strong>安装时</strong>就会自动的授予该应用相应的权限，当应用获得授权时，它就可以访问应用沙盒外受该普通权限保护地数据或操作，这些数据或操作不会泄漏或篡改用户的隐私，对用户或其他应用几乎没有风险。</p><h3 id="2、签名权限"><a href="#2、签名权限" class="headerlink" title="2、签名权限"></a>2、签名权限</h3><p>这类权限我们用得比较少，它只对拥有相同签名的应用开放，Protection Level为<strong>signature</strong>，它也不需要动态申请，例如应用A在AndroidManifest.xml中自定义了一个permission且在权限标签中加入android:protectionLevel=”signature”，表示应用A声明了一个签名权限，那么应用B想要访问应用A受该权限保护的数据时，必须要在AndroidManifest.xml中声明该权限，同时要用与应用A<strong>相同的签名</strong>打包，这样系统在应用B<strong>安装时</strong>才会自动地授予应用B该权限，应用B在获得授权后就可以访问该权限控制的数据，其他应用即使知道这个权限，也在AndroidManifest.xml中声明了该权限，但由于应用签名不同，安装时系统不会授予它该权限，这样其他应用就无法访问受该权限保护的数据。</p><p>还有一些签名权限不会供第三方应用程序使用，只会供系统预装应用使用，这种签名权限的Protection Level为signature和privileged。</p><h3 id="3、危险权限"><a href="#3、危险权限" class="headerlink" title="3、危险权限"></a>3、危险权限</h3><p>危险权限也叫运行时权限，Protection Level为<strong>dangerous</strong>，跟普通权限相反，一旦应用获取了该类权限，用户的隐私数据就会面临被泄露或篡改的风险，所以如果你想使用该权限保护的数据或操作，就必须在AndroidManifest.xml中静态地声明需要用到的危险权限，并在访问这些数据或操作前<strong>动态的</strong>申请权限，系统就会弹出一个权限请求弹窗征求用户的同意，除非用户同意该权限，否则你不能使用该权限保护的数据或操作。</p><p>所有的危险权限都有对应的权限组，android预定义了11个权限组(<strong>根据android 11总结</strong>)，这11个权限组中包含了30个危险权限和几个普通权限，当我们动态的申请某个危险权限时，都是按权限组申请的，当用户一旦同意授权该危险权限，那么该权限所对应的权限组中的其他在AndroidManifest.xml中注册的权限也会同时被授权，android预定义的11个权限组包含的危险权限如下：</p><table><thead><tr><th>Permission Group</th><th>Dangerous Permissions</th></tr></thead><tbody><tr><td>CALENDAR (日历)</td><td>READ_CALENDAR   <br> WRITE_CALENDAR</td></tr><tr><td>CALL_LOG (通话记录，Added in android 29)</td><td>READ_CALL_LOG <br> WRITE_CALL_LOG <br> PROCESS_OUTGOING_CALLS</td></tr><tr><td>CAMERA (相机)</td><td>CAMERA</td></tr><tr><td>CONTACTS (通讯录)</td><td>READ_CONTACTS <br> WRITE_CONTACTS <br> GET_ACCOUNTS</td></tr><tr><td>LOCATION (位置信息)</td><td>ACCESS_COARSE_LOCATION <br> ACCESS_FINE_LOCATION <br> ACCESS_BACKGROUND_LOCATION (Added in android 10)</td></tr><tr><td>MICROPHONE (麦克风)</td><td>RECORD_AUDIO</td></tr><tr><td>PHONE (电话)</td><td>READ_PHONE_NUMBERS <br> READ_PHONE_STATE <br> CALL_PHONE <br> ANSWER_PHONE_CALLS <br> ADD_VOICEMAIL <br> USE_SIP <br> ACCEPT_HANDOVER (Added in android 9)</td></tr><tr><td>SENSORS (身体传感器)</td><td>BODY_SENSORS</td></tr><tr><td>SMS (短信)</td><td>READ_SMS <br> RECEIVE_WAP_PUSH <br> RECEIVE_SMS <br> RECEIVE_MMS <br> SEND_SMS</td></tr><tr><td>STORAGE (存储空间)</td><td>READ_EXTERNAL_STORAGE <br> WRITE_EXTERNAL_STORAGE <br> ACCESS_MEDIA_LOCATION (Added in android 10)</td></tr><tr><td>ACTIVITY_RECOGNITION (身体活动，Added in android 10)</td><td>ACTIVITY_RECOGNITION (Added in android 10)</td></tr></tbody></table><h3 id="4、特殊权限"><a href="#4、特殊权限" class="headerlink" title="4、特殊权限"></a>4、特殊权限</h3><p>特殊权限用于保护一些特定的应用程序操作，Protection Level为<strong>appop</strong>，使用前也需要在AndroidManifest.xml中静态地声明，也需要<strong>动态的</strong>申请，但是它不同于危险权限的申请，危险权限的申请会弹出一个对话框询问你是否同意，而特殊权限的申请需要跳转到指定的设置界面，让你手动点击toggle按钮确认是否同意，<strong>截止到android 11</strong>，我了解到的常用的5个特殊权限为：</p><ul><li>SYSTEM_ALERT_WINDOW：允许应用在其他应用的顶部绘制悬浮窗，当你创建的悬浮窗是<a href="https://developer.android.google.cn/reference/android/view/WindowManager.LayoutParams#TYPE_APPLICATION_OVERLAY" target="_blank" rel="noopener">TYPE_APPLICATION_OVERLAY</a>类型时需要申请这个权限；</li><li>WRITE_SETTINGS：允许应用修改系统设置，当你需要修改系统参数<a href="https://developer.android.google.cn/reference/android/provider/Settings.System" target="_blank" rel="noopener">Settings.System</a>时需要申请该权限，例如<a href="https://blog.csdn.net/hnkwei1213/article/details/54947339" target="_blank" rel="noopener">修改系统屏幕亮度</a>等；</li><li>REQUEST_INSTALL_PACKAGES： 允许应用安装未知来源应用，android 8.0以后当你<a href="https://www.jianshu.com/p/0462a57134ed" target="_blank" rel="noopener">在应用中安装第三方应用</a>时需要申请这个权限，否则不会跳转到安装界面；</li><li>PACKAGE_USAGE_STATS：允许应用收集其他应用的使用信息，当你使用<a href="https://developer.android.com/reference/android/app/usage/UsageStatsManager" target="_blank" rel="noopener">UsageStatsManager</a>相关Api<a href="https://blog.csdn.net/LoveDou0816/article/details/77983400" target="_blank" rel="noopener">获取其他应用的信息</a>时需要申请这个权限；</li><li>MANAGE_EXTERNAL_STORAGE(Added in android 11)：允许应用访问作用域存储(scoped storage)中的外部存储，android 11以后强制新安装的应用使用<a href="https://developer.android.com/training/data-storage#scoped-storage" target="_blank" rel="noopener">作用域存储</a>，但是对于文件管理器这一类的应用它们需要<a href="https://developer.android.com/training/data-storage/manage-all-files" target="_blank" rel="noopener">管理整个SD卡上的文件</a>，所以针对这些特殊应用可以申请这个权限来获得对整个SD卡的读写权限，当应用授予这个权限后，它就可以访问文件的真实路径，注意这个权限是很危险的，声明这个权限上架应用时可能需要进行审核.</li></ul><p>除了特殊权限，LOCATION权限组中的位置权限也有点特殊，需要注意一下，位置信息的获取不仅依赖位置权限的动态申请还依赖系统定位开关，如果你没有打开定位开关就申请了位置权限，那么就算用户同意授权位置权限，应用通过Location相关Api也无法获取到位置信息，所以申请位置权限前，最好先通过<strong>LocationManager#isProviderEnabled方法</strong>判断是否打开定位开关后再进行位置权限的申请，如果没有打开定位开关需要先跳转到设置界面打开定位开关，伪代码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> locationManager = <span class="keyword">this</span>.getSystemService(Context.LOCATION_SERVICE) <span class="keyword">as</span> LocationManager</span><br><span class="line"><span class="keyword">if</span> (locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER) or locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) &#123;</span><br><span class="line">    <span class="comment">//请求位置权限</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//跳转到开启定位的地方</span></span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"检测到未开启定位服务,请开启"</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">    <span class="keyword">val</span> intent = Intent().apply &#123;</span><br><span class="line">        action = Settings.ACTION_LOCATION_SOURCE_SETTINGS</span><br><span class="line">    &#125;</span><br><span class="line">    startActivityForResult(intent, REQUEST_CODE_LOCATION_PROVIDER)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，上面危险权限和特殊权限的判断与申请，PermissionHelper都已经替你做好了封装，你只需要像平常一样在AndroidManifest.xml中静态地声明权限，然后在代码中动态地申请就行，下面我把危险权限和特殊权限都统称为动态权限，因为它们都是需要动态申请的。</p><h2 id="动态权限申请设计"><a href="#动态权限申请设计" class="headerlink" title="动态权限申请设计"></a>动态权限申请设计</h2><p>动态权限的申请依据不同的android版本和应用targetSdkVersion有着不同的行为，主要有两种处理，如下：</p><img src="/2021/09/23/%E4%BC%98%E9%9B%85%E5%9C%B0%E5%A4%84%E7%90%86%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90%E8%AF%B7%E6%B1%82/permission1.png" class="" title="permission"><ul><li><strong>android版本 &lt;= 5.1 或者 应用的targetSdkVersion &lt;= 22：</strong>当用户同意安装应用时，系统会要求用户授权应用声明的所有权限，包括动态权限，如果用户不同意授权，只能拒绝安装应用，如果用户同意全部授权，他们撤销权限的唯一方式就是卸载应用；</li><li><strong>android版本 &gt;= 6.0 且 应用的targetSdkVersion &gt;= 23：</strong>当用户同意安装应用时，系统不再强制用户必须授权动态权限，系统只会授权应用除动态权限之外的普通权限，而动态权限需要应用使用到相关功能时才动态申请，当申请动态权限时，用户可以选择授权或拒绝每项权限，即使用户同意授权权限，用户也可以随时进入应用的“Settings”中调整应用的动态权限授权，所以你每次使用到该权限的功能时，都要动态申请，因为用户有可能在“Settings”界面中把它再次关闭掉.</li></ul><p>在android版本 &lt;= 5.1 或者 应用的targetSdkVersion &lt;= 22时，系统使用的是<a href="https://developer.android.com/reference/android/app/AppOpsManager" target="_blank" rel="noopener">AppOps</a>来进行权限管理，这是android在4.4推出的一套应用程序操作权限管理，AppOps所管理的是所有可能涉及用户隐私和安全的操作，例如access notification、keep weak lock、display toast 等等，而运行时权限管理是android 6.0才出现，是基于AppOps的实现，进一步做了动态请求封装和明确的规范，同时当targetSdkVersion &lt;= 22的应用运行在 &gt;= 6.0的android系统上时，动态权限可以在“Settings”界面中关闭，应用运行过程中使用到相关功能时就会由于没有权限而出现崩溃，这时只能使用AppOps的 checkOp方法来检测对应的权限是否已经授权，没有权限就跳转到“Settings”界面，考虑到目前android 6.0已经推出了很久，应用商店也不允许targetSdkVersion &lt; 23的应用上架，所以为了减少框架的复杂度，动态权限申请设计就没有考虑兼容AppOps的权限管理操作，所以当你使用<a href="https://github.com/rain9155/PermissionHelper" target="_blank" rel="noopener">PermissionHelper</a>时应用的targetSdkVersion要 <strong>&gt;= 23</strong>。</p><p>PermissionHelper支持危险权限和特殊权限的申请，只需要一行代码就可以发起权限请求，具有生命周期感应能力，只在界面可见时才发起请求和回调结果，同时当系统配置更改例如屏幕旋转后能够恢复之前权限申请流程，不会中断权限申请流程，灵活性高，可以设置请求前、拒绝后回调，在回调发生时暂停权限申请流程，然后根据用户意愿再决定是否继续权限申请流程，整个申请过程如图：</p><img src="/2021/09/23/%E4%BC%98%E9%9B%85%E5%9C%B0%E5%A4%84%E7%90%86%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90%E8%AF%B7%E6%B1%82/permission2.png" class="" title="permission"><p>PermissionHelper可以通过设置回调在权限申请开始前和权限被拒绝后把要请求的权限和被拒绝的权限回调出去，在回调中你可以通过弹窗向用户解释要申请的权限对应用的必要性，引导用户继续授权或再次授权，PermissionHelper不定制弹窗UI，弹窗的UI由开发者自定义，开发者只需要在用户同意或拒绝后调用回调中的Process实例的相应方法就能让被暂停的权限申请流程恢复，然后在最终的结果回调中处理结果就行，整个过程都是链式的，关于向用户解释权限申请原因的弹窗，弹窗内容建议包含下面的3点：</p><p>1、包含需要授权的权限列表的描述；</p><p>2、包含确认按钮，用户可以点击确认按钮再次授权或跳转到”Settings“；</p><p>3、包含取消按钮，用户可以点击取消按钮放弃授权.</p><p>如果用户不授权这个权限，就会导致应用无法继续运行下去，可以考虑取消第3步的取消按钮，即无法取消这个弹窗，一定要用户再次授权或跳转到”Settings“去授权。</p><p>PermissionHelper整个框架的设计参考了<a href="https://juejin.cn/post/6844903945828040711" target="_blank" rel="noopener">okhttp的拦截器模式</a>，通过责任链模式的形式把危险权限申请、特殊权限申请、申请前处理和申请后处理划分为一个个节点，然后通过Chain串联起各个节点，每个节点只负责对应的内容，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> originalRequest = Request()    </span><br><span class="line"><span class="keyword">val</span> interceptors = listOf(</span><br><span class="line">    StartRequestNode(),</span><br><span class="line">    RequestLocationNode(),</span><br><span class="line">    RequestNormalNode(),</span><br><span class="line">    RequestSpecialNode(),</span><br><span class="line">    PostRequestNode(),</span><br><span class="line">    FinishRequestNode()</span><br><span class="line">)</span><br><span class="line">DefaultChain(originalRequest, interceptors).process(originalRequest)</span><br></pre></td></tr></table></figure><p>通过这样的形式PermissionHelper就可以很灵活的控制权限申请流程，对于生命周期感应能力的实现PermissionHelper使用了<a href="https://developer.android.com/topic/libraries/architecture/lifecycle" target="_blank" rel="noopener">Lifecycle</a>+<a href="https://developer.android.com/topic/libraries/architecture/livedata" target="_blank" rel="noopener">LiveData</a>组件，这两个都是官方支持的用于实现需要响应生命周期感应的操作，可以编写更轻量级和更易于维护的代码，避免界面销毁后的内存泄漏，对于系统配置更改后的数据恢复则使用到了<a href="https://developer.android.com/topic/libraries/architecture/viewmodel" target="_blank" rel="noopener">ViewModel</a>组件，这是官方支持的用于保存需要在<a href="https://developer.android.com/topic/libraries/architecture/saving-states#viewmodel" target="_blank" rel="noopener">配置更改</a>后恢复的数据，例如一些UI相关的数据，通过这三件套 + 责任链模式实现了一个简单易用的权限申请框架，更多详细使用和实现细节可以查看<a href="https://github.com/rain9155/PermissionHelper" target="_blank" rel="noopener">代码仓库</a>。</p><h2 id="权限申请相关变更"><a href="#权限申请相关变更" class="headerlink" title="权限申请相关变更"></a>权限申请相关变更</h2><p>自android 6.0推出动态权限申请之后，有一些申请行为也随着系统的迭代发生变化，目的都是更好的保护用户的隐私权，使得权限申请对用户感知：</p><p><a href="https://developer.android.com/about/versions/oreo/android-8.0-changes#rmp" target="_blank" rel="noopener">android 8.0</a>以后并且应用的targetSdkVersion &gt;= 28时，应用申请某个危险权限授权，用户同意后，系统不再错误地把该危险权限对应的权限组中的其他在AndroidManifest.xml中注册的权限一并授予给应用，系统只会授予应用明确请求的权限，然而，一旦用户应用同意授权某个危险权限，则后续对该危险权限的权限组中的其他权限请求都会被自动批准，而不会提示用户，例如某个应用在AndroidManifest.xml中注册READ_EXTERNAL_STORAGE和WRITE_EXTERNAL_STORAGE权限，应用申请READ_EXTERNAL_STORAGE权限并且用户同意，在android 8.0之前，系统在用户同意后还会一并授予WRITE_EXTERNAL_STORAGE权限，因为它和READ_EXTERNAL_STORAGE权限是同一个权限组并且也在AndroidManifest.xml中注册，但在android 8.0之后并且应用的targetSdkVersion &gt;= 28，系统在用户同意后只会授予READ_EXTERNAL_STORAGE权限，但是如果后来应用又申请WRITE_EXTERNAL_STORAGE权限，系统会立即授予该权限，而不会提示用户，换句话说，如果只申请了外部存储空间读取权限，在低版本下（android &lt; 8.0）对外部存储空间使用写入操作是没有问题的，但是在高版本（android &gt;= 8.0 &amp;&amp; targetSdkVersion &gt;= 28）下是会出现问题的，解决方案是将两个读和写的权限一起申请。</p><p><a href="https://developer.android.com/about/versions/pie/android-9.0-changes-all#privacy-changes-all" target="_blank" rel="noopener">android 9.0</a>增加了<a href="https://developer.android.com/reference/android/Manifest.permission_group#CALL_LOG" target="_blank" rel="noopener">CALL_LOG</a>（通话记录）权限组，并把READ_CALL_LOG、WRITE_CALL_LOG]、PROCESS_OUTGOING_CALLS权限从PHONE（电话）权限组移动到了CALL_LOG权限组，CALL_LOG权限组使得用户能够更好地控制需要访问电话通话记录敏感信息的应用程序，例如读取通话记录和识别电话号码。</p><p><a href="https://developer.android.com/about/versions/10/privacy/changes#top-changes" target="_blank" rel="noopener">android 10</a>引入了很多隐私变更，新增了<a href="https://developer.android.com/reference/android/Manifest.permission#ACTIVITY_RECOGNITION" target="_blank" rel="noopener">ACTIVITY_RECOGNITION</a>（身体活动）权限和权限组，允许应用检测用户的步数或分类用户的身体活动如步行、骑自行车等；同时android 10引入了作用域存储，当应用启用作用域存储时，<a href="https://developer.android.com/reference/android/Manifest.permission#WRITE_EXTERNAL_STORAGE" target="_blank" rel="noopener">WRITE_EXTERNAL_STORAGE</a>权限会失效，应用对WRITE_EXTERNAL_STORAGE权限的申请<a href="https://developer.android.com/training/data-storage#permissions" target="_blank" rel="noopener">不会对应用的存储访问权限产生任何影响</a>，并且WRITE_EXTERNAL_STORAGE会在未来被废弃，因为作用域存储的目的就是不让应用随意的修改应用沙盒外的外部存储；同时新增了<a href="https://developer.android.com/reference/android/Manifest.permission#ACCESS_BACKGROUND_LOCATION" target="_blank" rel="noopener">ACCESS_BACKGROUND_LOCATION</a>权限，归属于LOCATION权限组，用于后台运行的应用访问用户定位时申请，与ACCESS_FINE_LOCATION和ACCESS_COARSE_LOCATION这些前台定位权限区分开，当你的应用targetSdkVersion &gt;= 29并且运行在android 10以上时，应用在后台访问定位时需要动态的申请后台定位权限，当你把后台定位权限和前台定位权限一起申请时，弹窗授权框会有2个允许选项：<code>始终允许</code>和<code>仅在应用使用过程中允许</code>，点击<code>始终允许</code>表示同时授权后台定位权限和前台定位权限，点击<code>仅在应用使用过程中允许</code>表示仅授权前台定位权限，然后下次再次申请时只会单独申请后台定位权限，并且也会有2个允许选项，并且要点击<code>始终允许</code>才会让后台定位权限申请通过，当你的应用targetSdkVersion &lt; 29运行在android 10以上时，应用在申请前台定位权限时系统会把后台定位权限一并授予给应用；android 10还新增了<a href="https://developer.android.com/reference/android/Manifest.permission#ACCESS_MEDIA_LOCATION" target="_blank" rel="noopener">ACCESS_MEDIA_LOCATION</a>权限，归属于STORAGE (存储空间) 权限组，android 10以后，因为隐私问题，默认不再提供图片的地理位置信息，要获取该信息需要向用户申请ACCESS_MEDIA_LOCATION权限，并使用MediaStore.setRequireOriginal()接口更新文件Uri。</p><p><a href="https://developer.android.com/about/versions/11/privacy" target="_blank" rel="noopener">android 11</a>也引入了很多隐私变更，android 11强制新安装的应用(targetSdkVersion &gt;= 30)启用作用域存储，新增<a href="https://developer.android.com/reference/android/Manifest.permission#MANAGE_EXTERNAL_STORAGE" target="_blank" rel="noopener">MANAGE_EXTERNAL_STORAGE</a>用于代替WRITE_EXTERNAL_STORAGE权限，提供给手机管家、文件管理器这类需要<a href="https://developer.android.com/training/data-storage/manage-all-files" target="_blank" rel="noopener">管理整个SD卡上的文件</a>的应用申请；android 11中当用户开启“安装未知来源应用”权限后返回应用，应用会被杀死重启，该行为与强制分区存储有关；从android 11后，如果应用对某个权限<a href="https://developer.android.com/about/versions/11/privacy/permissions#dialog-visibility" target="_blank" rel="noopener">连续点击多次拒绝</a>，那么下一次请求该权限时系统会直接拒绝连授权弹窗都不会弹出，该行为等同于android 11之前勾选了don‘t ask again；android 11后还新增了<a href="https://developer.android.com/about/versions/11/privacy/permissions#one-time" target="_blank" rel="noopener">一次性权限</a>（One-time permissions）和<a href="https://developer.android.com/about/versions/11/privacy/permissions#auto-reset" target="_blank" rel="noopener">权限自动重置</a>功能（Permissions auto-reset），这些变更只要你正确的进行运行时权限请求就不需要做额外适配；同时android 11后当targetSdkVersion &lt; 30的应用把后台定位权限和前台定位权限一起申请时，弹窗授权框的允许选项中<a href="https://developer.android.com/about/versions/11/privacy/location#background-location-permission-dialog-changes" target="_blank" rel="noopener">不再会显示<code>始终允许</code>选项</a>，只有<code>本次允许</code>和<code>仅在应用使用过程中允许</code>，也就说点击允许时只会授予你前台定位权限<strong>不再默认授予你后台定位权限</strong>，而android 11后targetSdkVersion &gt;= 30的应用的ACCESS_BACKGROUND_LOCATION权限需要<a href="https://developer.android.com/about/versions/11/privacy/location#request-background-location-separately" target="_blank" rel="noopener">独立申请</a>，不能与前台权限一起申请，如果与前台权限一起申请，系统会直接拒绝连授权弹窗都不会弹出，系统推荐增量请求权限，这样对用户更友好，同时用户必须先同意前台权限后才能进入后台定位权限的申请。</p><p>可以看到从android 10引入ACCESS_BACKGROUND_LOCATION权限以来，后台定位权限的申请一直都非常特殊，它在android 10可以和前台定位权限一起申请，而在android 11又不可以一起申请还有先后申请顺序，针对这种特殊情况，申请后台定位权限时要做到：</p><ul><li>1、先请求前台定位权限，再请求后台定位权限；</li><li>2、单独请求后台定位权限，不要与其他权限一同请求.</li></ul><p>上面这些PermissionHelper都已经做好了处理，申请时只需要把后台定位权限和前台定位权限一起传进去就行。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文主要让让大家对权限的申请流程有进一步的认识，然后可以通过对动态权限的封装，将检测动态权限，请求动态权限，权限设置跳转，监听权限设置结果等处理和业务功能隔离开来，业务以后可以非常快速的接入动态权限支持，提高开发效率。</p><p>以上就是本文的全部内容！</p><p>参考资料：</p><p><a href="https://developer.android.google.cn/training/permissions/requesting" target="_blank" rel="noopener">Request app permissions</a></p><p><a href="https://mp.weixin.qq.com/s/w82temt7NjQb2eATONuEsA" target="_blank" rel="noopener">安卓系统权限，你真的了解吗？</a></p><p><a href="https://www.jianshu.com/p/6a4dff744031" target="_blank" rel="noopener">Android 6.0 运行权限解析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;从android 6.0(API 级别 23)开始，android引入了运行时权限，用户开始在应用运行时向其授予权限，而不是在应用安装时向其
      
    
    </summary>
    
    
      <category term="开源项目" scheme="http://yoursite.com/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>快速发布组件到mavenCentral</title>
    <link href="http://yoursite.com/2021/07/03/%E5%BF%AB%E9%80%9F%E5%8F%91%E5%B8%83%E7%BB%84%E4%BB%B6%E5%88%B0mavencentral/"/>
    <id>http://yoursite.com/2021/07/03/%E5%BF%AB%E9%80%9F%E5%8F%91%E5%B8%83%E7%BB%84%E4%BB%B6%E5%88%B0mavencentral/</id>
    <published>2021-07-03T05:55:40.000Z</published>
    <updated>2023-01-07T10:44:49.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在很久之前写过一篇<a href="https://blog.csdn.net/Rain_9155/article/details/90948189" target="_blank" rel="noopener">发布开源库到jcenter</a>的文章，但不幸的是几个月前Jfrog发布了终止Bintray服务的<a href="https://jfrog.com/blog/into-the-sunset-bintray-jcenter-gocenter-and-chartcenter/" target="_blank" rel="noopener">声明</a>，声明的大概意思是说2021年3月31号之后Jcenter仓库将不再接收用户的组件提交，同时将Jcenter设为只读代码仓库，无限期地提供现有组件供用户下载，也就是说目前Jcenter仓库的状态是你无法再提交组件的更新，但你可以继续下载你以前托管的组件版本，所以现在你要做的就是把你的组件的新版本发布到其他仓库，例如Jitpack和MavenCentral，我曾经写过一篇<a href="https://blog.csdn.net/Rain_9155/article/details/90516026" target="_blank" rel="noopener">快速发布开源库到jitpack</a>的文章，本篇文章的内容是教你如何发布组件到MavenCentral仓库，同时写了一个发布脚本简化发布过程，使用这个脚本之前先看一下本篇文章的前期准备内容。</p><p>脚本地址：<a href="https://github.com/rain9155/MavenPublishScript" target="_blank" rel="noopener">MavenPublishScript</a></p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>在讲解之前，有必要介绍一下Sonatype 、OSSRH、MavenCentral之间的关系，<a href="https://www.sonatype.com/" target="_blank" rel="noopener">Sonatype</a>是一间公司，它运营着<a href="https://search.maven.org/" target="_blank" rel="noopener">MavenCentral仓库</a>，我们想要发布组件到MavenCentral，必须要通过Sonatype的OSSRH，OSSRH即OSS Repository Hosting，对象存储仓库托管，Sonatype使用<a href="https://s01.oss.sonatype.org/#welcome" target="_blank" rel="noopener">Nexus Repository Manager</a>为组件提供存储库托管服务，我们发布组件时要先发布到Sonatype OSSRH上，然后才能同步到MavenCentral仓库，就好像我们之前使用Jcenter时，要先发布到Jfrog Bintray上，然后才能同步到Jcenter仓库。</p><h3 id="1、注册Sonatype账号"><a href="#1、注册Sonatype账号" class="headerlink" title="1、注册Sonatype账号"></a>1、注册Sonatype账号</h3><p>首先你需要注册一个Sonatype Jira账号，Sonatype使用Jira管理你的groupId申请过程，注册地址如下：</p><p><a href="https://issues.sonatype.org/secure/Signup!default.jspa" target="_blank" rel="noopener">Sonatype Jira - Sign up</a></p><p>点开注册地址后，如图：</p><img src="/2021/07/03/%E5%BF%AB%E9%80%9F%E5%8F%91%E5%B8%83%E7%BB%84%E4%BB%B6%E5%88%B0mavencentral/mavencentral1.png" class="" title="mavencentral"><p>按要求填入你的邮箱地址、姓名、用户名、密码即可，其中用户名最好不要有中文，记住你的用户名和密码，会在后面用到。</p><h3 id="2、申请groupId"><a href="#2、申请groupId" class="headerlink" title="2、申请groupId"></a>2、申请groupId</h3><p>我们平时使用托管在远程仓库的组件时都是通过它的GAV坐标来定位的，GAV即groupId、artifactId、version，其中groupId你可以理解为你自己在Sonatype OSSRH创建的仓库，groupId就是你仓库的名称，申请groupId就是在Sonatype OSSRH申请创建属于你的仓库，我们后面发布组件时要先发布到Sonatype OSSRH上名为groupId的仓库，然后才能同步到MavenCentral仓库。</p><p>还有申请的groupId并不是顺便填的，按照Sonatype的要求，groupId必须要是一个<strong>域名的反写</strong>，所以你要拥有一个域名，当你申请groupId时，Sonatype会用某种方式让你证明你是这个域名的所有者。</p><p>如果你拥有某个域名，例如example.com域名，你可以使用任何以com.example开头的groupId，例如com.example.test1、com.example.test2等，如果你没有自己的域名也没关系，Sonatype支持代码托管平台的Pages网站域名，例如Github，你可以在你的Github账号上开启你的Pages服务，这样你就拥有了一个与Github账号关联的个人域名，格式为{username}.github.io，例如我的Github Pages网站就是rain9155.github.io，很多人都是利用这种托管在三方平台的网站搭建自己的博客网站，除了Github，Sonatype还支持GitLab、Gitee等，下面表格列出这些常用的代码托管平台Pages服务开启的官方教程地址，和开启后对应的域名和相应的groupId：</p><table><thead><tr><th>代码托管平台</th><th>Pages服务开启教程地址</th><th>域名</th><th>groupId</th></tr></thead><tbody><tr><td>Github</td><td><a href="https://pages.github.com/" target="_blank" rel="noopener">https://pages.github.com/</a></td><td>{username}.github.io</td><td>io.github.{username}</td></tr><tr><td>Gitee</td><td><a href="https://gitee.com/help/articles/4136" target="_blank" rel="noopener">https://gitee.com/help/articles/4136</a></td><td>{username}.gitee.io</td><td>io.gitee.{username}</td></tr><tr><td>GitLab</td><td><a href="https://about.gitlab.com/stages-devops-lifecycle/pages/" target="_blank" rel="noopener">https://about.gitlab.com/stages-devops-lifecycle/pages/</a></td><td>{username}.gitlab.io</td><td>io.gitlab.{username}</td></tr></tbody></table><p>下面就以我的Github Pages网站域名rain9155.github.io为例，申请名为io.github.rain9155的groupId，首先打开Sonatype Jira网站, 地址如下：</p><p><a href="https://issues.sonatype.org/secure/Dashboard.jspa" target="_blank" rel="noopener">Sonatype Jira - Dashboard</a></p><p>首次进入需要你登陆，输入你刚才注册的Sonatype Jira用户名和密码登陆，然后就进入Sonatype Jira网站首页，然后点击导航栏的<strong>Create</strong>按钮，此时会弹出一个弹窗，会让你填一些申请groupId时需要的信息，其中Project选择Community Support - Open Source Project Repository Hosting (OSSRH)，Issue Type选择New Project，Summary填一个标题，Group Id就填你要申请的groupId，Project URL随便填一个你的组件仓库地址，SCM url也是随便填一个你的组件仓库版本控制地址，如下：</p><img src="/2021/07/03/%E5%BF%AB%E9%80%9F%E5%8F%91%E5%B8%83%E7%BB%84%E4%BB%B6%E5%88%B0mavencentral/mavencentral2.png" class="" title="mavencentral"><p>最后点击create按钮，它会创建一个issue，issue名称格式为OSSRH-{taskId}，如我这里为OSSRH-69596，你可以在All Projects面板中看到它，然后接下来就是等待Sonatype Jira的邮件通知，邮件会发送到你注册账号时填写的邮箱，它的第一封邮件会叫你在你的Github中创建一个名为OSSRH-{taskId}的空仓库，从而证明你是groupId对应域名的拥有者，当你创建之后，你需要到OSSRH-{taskId}下的comment面板中回复，当你回复后，它又会再发一封邮件给你，告诉你groupId已经申请完毕，此时你可以发布组件到Sonatype OSSRH中，如何发布请看后面的内容，当你发布后，你需要在Sonatype OSSRH中把你的组件同步到MavenCentral后才可以通过GAV引用它，如何同步请看后面的内容，当你同步后，你需要再次到OSSRH-{taskId}下的comment面板中回复，然后Sonatype OSSRH才会为你激活组件同步到MavenCentral的程序，整个交流过程可以参考我<a href="https://issues.sonatype.org/browse/OSSRH-69596" target="_blank" rel="noopener">OSSRH-69596</a>中的comment面板，如下：</p><img src="/2021/07/03/%E5%BF%AB%E9%80%9F%E5%8F%91%E5%B8%83%E7%BB%84%E4%BB%B6%E5%88%B0mavencentral/mavencentral3.png" class="" title="mavencentral"><p>回复的内容是什么不重要，只要你回复了就行，上述就是申请groupId和激活MavenCentral同步的整个流程，只需要在第一次发布组件时进行一次就行，以后发布组件时不需要再进行上面的过程，直接使用该groupId就行。</p><h3 id="3、生成gpg签名信息"><a href="#3、生成gpg签名信息" class="headerlink" title="3、生成gpg签名信息"></a>3、生成gpg签名信息</h3><p>Sonatype要求发布到MavenCentral仓库的组件中的每个文件都需要通过<a href="https://www.gnupg.org/" target="_blank" rel="noopener">gpg</a>签名，gpg是一个命令行工具，提供了对数据的签名和加密能力，支持主流的签名和加密算法，并提供了密钥管理系统，要使用gpg签名，我们必须先在电脑上安装gpg，然后使用gpg生成签名需要的密钥对。</p><p>我们首先来安装gpg，对于mac电脑，直接通过Homebrew安装就行，在命令行执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install gpg</span><br></pre></td></tr></table></figure><p>对于window电脑，我们可以下载gpg的执行文件安装，下载地址如下：</p><p><a href="https://gpg4win.org/download.html" target="_blank" rel="noopener">gpg download</a></p><p>安装完成后，在命令行输入<code>gpg --version</code> 输出gpg的版本信息表示安装完成，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ gpg --version</span><br><span class="line">gpg (GnuPG) 2.2.27</span><br><span class="line">libgcrypt 1.8.7</span><br><span class="line">Copyright (C) 2021 g10 Code GmbH</span><br><span class="line">License GNU GPL-3.0-or-later &lt;https://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">Home: C:/Users/HY/AppData/Roaming/gnupg</span><br><span class="line">Supported algorithms:</span><br><span class="line">Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA</span><br><span class="line">Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,</span><br><span class="line">        CAMELLIA128, CAMELLIA192, CAMELLIA256</span><br><span class="line">Hash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224</span><br><span class="line">Compression: Uncompressed, ZIP, ZLIB, BZIP2</span><br></pre></td></tr></table></figure><p>然后在命令行输入<code>gpg --full-generate-key</code> 进行密钥对生成，这个命令会让你一步步选择生成密钥对需要的信息，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">$ gpg --full-generate-key</span><br><span class="line">gpg (GnuPG) 2.2.27; Copyright (C) 2021 g10 Code GmbH</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">Please select what kind of key you want:</span><br><span class="line">   (1) RSA and RSA (default)</span><br><span class="line">   (2) DSA and Elgamal</span><br><span class="line">   (3) DSA (sign only)</span><br><span class="line">   (4) RSA (sign only)</span><br><span class="line">  (14) Existing key from card</span><br><span class="line">Your selection? 4</span><br><span class="line">RSA keys may be between 1024 and 4096 bits long.</span><br><span class="line">What keysize <span class="keyword">do</span> you want? (3072)</span><br><span class="line">Requested keysize is 3072 bits</span><br><span class="line">Please specify how long the key should be valid.</span><br><span class="line">         0 = key does not expire</span><br><span class="line">      &lt;n&gt;  = key expires <span class="keyword">in</span> n days</span><br><span class="line">      &lt;n&gt;w = key expires <span class="keyword">in</span> n weeks</span><br><span class="line">      &lt;n&gt;m = key expires <span class="keyword">in</span> n months</span><br><span class="line">      &lt;n&gt;y = key expires <span class="keyword">in</span> n years</span><br><span class="line">Key is valid <span class="keyword">for</span>? (0)</span><br><span class="line">Key does not expire at all</span><br><span class="line">Is this correct? (y/N) y</span><br><span class="line"></span><br><span class="line">GnuPG needs to construct a user ID to identify your key.</span><br><span class="line"></span><br><span class="line">Real name: rain9155</span><br><span class="line">Email address: jianyu9155@gmail.com</span><br><span class="line">Comment:</span><br><span class="line">You selected this USER-ID:</span><br><span class="line">    <span class="string">"rain9155 &lt;jianyu9155@gmail.com&gt;"</span></span><br><span class="line"></span><br><span class="line">Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o</span><br><span class="line">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class="line">some other action (<span class="built_in">type</span> on the keyboard, move the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance to gain enough entropy.</span><br><span class="line">gpg: key DF7B4B4D1A32FB02 marked as ultimately trusted</span><br><span class="line">gpg: revocation certificate stored as <span class="string">'C:/Users/HY/AppData/Roaming/gnupg/openpgp-revocs.d\9E02D0E104E3D3517B5B0E54DF7B4B4D1A32FB02.rev'</span></span><br><span class="line">public and secret key created and signed.</span><br><span class="line"></span><br><span class="line">Note that this key cannot be used <span class="keyword">for</span> encryption.  You may want to use</span><br><span class="line">the <span class="built_in">command</span> <span class="string">"--edit-key"</span> to generate a subkey <span class="keyword">for</span> this purpose.</span><br><span class="line">pub   rsa3072 2021-07-06 [SC]</span><br><span class="line">      9E02D0E104E3D3517B5B0E54DF7B4B4D1A32FB02</span><br><span class="line">uid                      rain9155 &lt;jianyu9155@gmail.com&gt;</span><br></pre></td></tr></table></figure><p>首先它会让你选择算法，我这里选择了RSA，仅用于签名，然后会让你输入密钥长度，默认是3072bits，然后会让你选择密钥的过期时间，我这里选择了永久有效，建议大家也选择永久有效，然后确认信息后会让你输入姓名、邮箱、注释来作为密钥的唯一标识，这里我生成的标识为”rain9155 &lt;<a href="mailto:jianyu9155@gmail.com">jianyu9155@gmail.com</a>&gt;“，最后确认后会弹出一个弹窗让你输入一个密码来保护你的私钥，记住你输入的密码后面会用到，点击确认后看到public and secret key created and signed这句话说明密钥对生成完毕，我们可以通过<code>gpg --list-keys</code>列出生成的公钥信息，通过<code>gpg --list-secret-keys</code>列出生成的私钥信息，但其实列出的信息是类似的，我们以<code>gpg --list-keys</code>为例，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ gpg --list-keys</span><br><span class="line">gpg: checking the trustdb</span><br><span class="line">gpg: marginals needed: 3  completes needed: 1  trust model: pgp</span><br><span class="line">gpg: depth: 0  valid:   2  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 2u</span><br><span class="line">C:/Users/HY/AppData/Roaming/gnupg/pubring.kbx</span><br><span class="line">---------------------------------------------</span><br><span class="line">pub   rsa3072 2021-07-06 [SC]</span><br><span class="line">      9E02D0E104E3D3517B5B0E54DF7B4B4D1A32FB02</span><br><span class="line">uid           [ultimate] rain9155 &lt;jianyu9155@gmail.com&gt;</span><br></pre></td></tr></table></figure><p>列出的信息首先有公钥的文件位置，这里为C:/Users/HY/AppData/Roaming/gnupg/pubring.kbx，接着是pub rsa3072 2021-07-06 [SC]，表示使用RSA算法，公钥长度为3072bits，创建日期为2021-07-06，接着是长长的一串id值9E02D0E104E3D3517B5B0E54DF7B4B4D1A32FB02，它表示公钥的id，我们使用时只需要用到它的后八位就行，所以我们后面使用这个公钥时只需要使用1A32FB02就行，最后是公钥的唯一标识uid，根据我们前面输入的姓名、邮箱、注释生成。</p><p>我们签名只需要用到私钥，而公钥需要上传到公钥服务器，这样我们用私钥签名的文件上传到MavenCenral后，它才能使用公钥验证这个文件，这里我选择了keyserver.ubuntu.com这个公钥服务器，上传公钥的命令格式为<code>gpg --keyserver 公钥服务器地址 --send-keys 公钥id</code>，如下我把刚刚生成的公钥1A32FB02上传到公钥服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gpg --keyserver keyserver.ubuntu.com --send-keys 1A32FB02</span><br><span class="line">gpg: sending key DF7B4B4D1A32FB02 to hkp://keyserver.ubuntu.com</span><br></pre></td></tr></table></figure><p>没有错误提示就表示上传成功，我们还可以使用<code>gpg --keyserver 公钥服务器地址 --recv-keys 公钥id</code>从公钥服务器导入公钥到本地从而验证公钥是否上传成功，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gpg --keyserver keyserver.ubuntu.com --recv-keys 1A32FB02</span><br><span class="line">gpg: key DF7B4B4D1A32FB02: <span class="string">"rain9155 &lt;jianyu9155@gmail.com&gt;"</span> not changed</span><br><span class="line">gpg: Total number processed: 1</span><br><span class="line">gpg:              unchanged: 1</span><br></pre></td></tr></table></figure><p>可以看到导入成功，表示公钥已经成功上传到公钥服务器。</p><p>还有最后一步，把私钥导出到一个文件中，这样我们发布组件时才能通过引用这个文件，从而使用私钥进行签名，命令格式为<code>gpg -o 导出的文件路径 --export-secret-key 私钥id</code>，执行导出私钥命令会弹出一个弹窗让你输入私钥密码，输入正确后才能成功导出，如下把私钥导出到名为1A32FB02.gpg的文件中，私钥id和公钥id是一样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gpg -o D:/File/keystore/1A32FB02.gpg --<span class="built_in">export</span>-secret-key 1A32FB02</span><br></pre></td></tr></table></figure><p>现在已经成功把私钥导出D:/File/keystore/1A32FB02.gpg中，记住你导出的私钥文件路径，后面会用到。</p><h2 id="发布到OSSRH"><a href="#发布到OSSRH" class="headerlink" title="发布到OSSRH"></a>发布到OSSRH</h2><p>现在万事俱备，可以发布组件了，发布组件使用<code>maven-publish</code>插件，我们主要发布的内容有组件的aar或jar文件、sources文件、javadoc文件，pom文件，还有这些文件的签名文件，以.asc为后缀，签名要使用<code>signing</code>插件，为了简化发布过程，我已经把发布过程编写成了一个gradle脚本 - <a href="https://github.com/rain9155/MavenPublishScript" target="_blank" rel="noopener">MavenPublishScript</a>，使用时只需要apply进来，然后填写发布的基本信息，执行发布任务就可以自动生成发布所需的所有文件并发布到OSSRH中，下面简单介绍如何使用这个gradle脚本。</p><p>首先在你的组件的build.gradle中apply该脚本：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">from:</span> <span class="string">'https://raw.githubusercontent.com/rain9155/MavenPublishScript/main/script/publication.gradle'</span></span><br></pre></td></tr></table></figure><p>接下来准备好你在前面注册的Sonatype账号、申请好的groupId、生成好的gpg私钥信息，然后在组件的gradle.properties(没有则创建)中添加组件信息，其中GAV坐标是必填信息，其他是可选信息：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">### GAV坐标</span><br><span class="line">publish.groupId=io.github.rain9155</span><br><span class="line">publish.artifactId=mavenpublishscript</span><br><span class="line">publish.version=<span class="number">1.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line">### 下面都是可选信息</span><br><span class="line"># 基本描述</span><br><span class="line">publish.description=发布组件到Maven仓库的gradle脚本，支持aar和jar发布</span><br><span class="line">publish.url=<span class="string">https:</span><span class="comment">//github.com/rain9155/MavenPublishScript</span></span><br><span class="line"># 开发者信息</span><br><span class="line">publish.developerName=rain9155</span><br><span class="line">publish.developerEmail=jianyu9155<span class="meta">@gmail</span>.com</span><br><span class="line"># license信息</span><br><span class="line">publish.licenseName=The Apache License, Version <span class="number">2.0</span></span><br><span class="line">publish.licenseUrl=<span class="string">http:</span><span class="comment">//www.apache.org/licenses/LICENSE-2.0.txt</span></span><br><span class="line"># scm信息，格式参考http://maven.apache.org/scm/scm-url-format.html</span><br><span class="line">publish.scmUrl=<span class="string">https:</span><span class="comment">//github.com/rain9155/MavenPublishScript/tree/master</span></span><br><span class="line">publish.scmConnection=<span class="string">scm:</span><span class="string">git:</span><span class="string">git:</span><span class="comment">//github.com/rain9155/MavenPublishScript.git</span></span><br><span class="line">publish.scmDeveloperConnection=<span class="string">scm:</span><span class="string">git:</span><span class="string">ssh:</span><span class="comment">//github.com:rain9155/MavenPublishScript.git</span></span><br><span class="line"># 如果发布的是android组件，当为false时不根据flavor动态生成组件的artifactId，如果你不想组件的artifactId拼接flavorName，可以设置为false，默认为true</span><br><span class="line">publish.artifactId.isAppendFavorName=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>然后在项目根目录的local.properties(没有则创建)中添加gpg签名信息和ossrh账号信息，记得要把local.properties从你的版本控制中移除，避免泄漏你的签名信息和账号信息：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># gpg签名信息</span><br><span class="line">signing.keyId=你的密钥id，例如<span class="number">1</span>A32FB02</span><br><span class="line">signing.password=你的私钥密码</span><br><span class="line">signing.secretKeyRingFile=你的私钥文件路径，例如<span class="string">D:</span><span class="regexp">/File/</span>keystore/<span class="number">1</span>A32FB02.gpg</span><br><span class="line"></span><br><span class="line"># ossrh账号信息</span><br><span class="line">ossrh.username=你的ossrh账号名，即Sonatype账号用户名</span><br><span class="line">ossrh.password=你的ossrh账号密码，即Sonatype账号密码</span><br></pre></td></tr></table></figure><p>最后在命令行执行gradle任务发布组件，如果你发布的是android组件(aar)，执行的任务的名称格式为<code>publish{flavorName}AndroidlibPublicationToMavenRepository</code>或<code>publish{flavorName}AndroidlibPublicationToMavenLocal</code>，其中flavorName为android组件的flavor的名称，首字母大写，没有则不填flavorName，如果你发布的是java组件(jar)，执行的任务名称为<code>publishJavalibPublicationToMavenRepository</code>或<code>publishJavalibPublicationToMavenLocal</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//发布android组件到maven本地仓库</span><br><span class="line">gradle publishAndroidlibPublicationToMavenLocal</span><br><span class="line"></span><br><span class="line">//发布android组件到maven远程release或snapshot仓库</span><br><span class="line">gradle publishAndroidlibPublicationToMavenRepository</span><br><span class="line"></span><br><span class="line">//假设android组件含有flavorName为china，发布china版本的android组件到maven本地仓库</span><br><span class="line">gradle publishChinaAndroidlibPublicationToMavenLocal</span><br><span class="line"></span><br><span class="line">//假设android组件含有flavorName为oversea，发布oversea版本的android组件到maven远程release或snapshot仓库</span><br><span class="line">gradle publishOverseaAndroidlibPublicationToMavenRepository</span><br><span class="line"></span><br><span class="line">//发布java组件到maven本地仓库</span><br><span class="line">gradle publishJavalibPublicationToMavenLocal</span><br><span class="line"></span><br><span class="line">//发布java组件到maven远程release或snapshot仓库</span><br><span class="line">gradle publishJavalibPublicationToMavenRepository</span><br><span class="line"></span><br><span class="line">//发布所有android组件和java组件到maven本地仓库</span><br><span class="line">gradle publishToMavenLocal</span><br><span class="line"></span><br><span class="line">//发布所有android组件和java组件到maven远程release或snapshot仓库</span><br><span class="line">gradle publishAllPublicationsToMavenRepository</span><br><span class="line"></span><br><span class="line">//发布所有android组件和java组件到maven本地仓库和maven远程release或snapshot仓库</span><br><span class="line">gradle publish</span><br></pre></td></tr></table></figure><p>上述发布任务根据组件发布的是android组件(aar)还是java组件(jar)来执行，同时发布android组件时支持flavor发布，publishXXToMavenRepository任务表示发布到远程仓库OSSRH中，publishXXToMavenLocal任务表示发布到maven本地仓库，maven本地仓库路径为{用户目录}/.m2/repository/，也可以在AS左侧的gradle面板中查看这些任务，如下：</p><img src="/2021/07/03/%E5%BF%AB%E9%80%9F%E5%8F%91%E5%B8%83%E7%BB%84%E4%BB%B6%E5%88%B0mavencentral/mavencentral4.png" class="" title="mavencentral"><p>选中合适的任务双击执行就行，如果你执行的是publishXXToMavenRepository任务，任务执行成功后你就可以到<a href="https://s01.oss.sonatype.org/#welcome" target="_blank" rel="noopener">OSSRH</a>查看你发布上去的组件，首次进入需要登陆，输入你的Sonatype用户名和密码登陆，然后点击左下侧的<strong>Staging Repository</strong>就可以看到你发布到OSSRH的组件，如下：</p><img src="/2021/07/03/%E5%BF%AB%E9%80%9F%E5%8F%91%E5%B8%83%E7%BB%84%E4%BB%B6%E5%88%B0mavencentral/mavencentral5.png" class="" title="mavencentral"><p>在Staging Repository的面板中可以浏览你发布的组件，选中它，然后点击下面的content面板就可以查看组件发布的详细文件。</p><h2 id="同步到MavenCentral"><a href="#同步到MavenCentral" class="headerlink" title="同步到MavenCentral"></a>同步到MavenCentral</h2><p>组件发布到OSSRH后，还不能通过GAV引用它，还要同步到MavenCentral后才能通过GAV引用它，首先要在OSSRH上<strong>Close</strong>组件，让它从open状态变为close状态，如下：</p><img src="/2021/07/03/%E5%BF%AB%E9%80%9F%E5%8F%91%E5%B8%83%E7%BB%84%E4%BB%B6%E5%88%B0mavencentral/mavencentral6.png" class="" title="mavencentral"><p>当你点击Close按钮后，会弹出一个弹窗叫你确认，确认后Close按钮会变灰，此时下方的Activity面板会显示close过程中进行的规则校验，例如校验你发布的文件是否有签名、是否含有javadoc文件、是否含有sources文件，pom文件是否合格等，当所有校验通过后你才可以同步组件到MavenCentral，当校验通过后你会收到Sonatype发送的邮件，此时你可以点击上方的<strong>Release</strong>按钮同步组件到MavenCentral，如下：</p><img src="/2021/07/03/%E5%BF%AB%E9%80%9F%E5%8F%91%E5%B8%83%E7%BB%84%E4%BB%B6%E5%88%B0mavencentral/mavencentral7.png" class="" title="mavencentral"><p>当你点击Release按钮后，会弹出一个弹窗叫你确认，确认后Release按钮会变灰，如果你是第一次发布组件，在<strong>申请groupId</strong>时我讲过，你还要到OSSRH-{taskid}的comment面板下回复它一次OSSRH才会为你激活同步程序，激活同步程序后大概十几分钟你的组件就会被同步到MavenCentral，这时你就可以在<a href="https://search.maven.org/" target="_blank" rel="noopener">MavenCentral网站</a>搜索到你的组件，并可以在gradle或maven等构建工具中通过GAV引用它，激活同步程序后，你下次Release组件时就会自动同步到MavenCentral而无需再做其他操作。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>发布到MavenCentral的步骤相比于发布到Jitpack要复杂的多，Jitpack只需要一个代码托管仓库账号，而MavenCentral需要准备Sonatype账号、个人域名、签名信息，但是MavenCentral比Jitpack成熟得多，它目前是最大的java组件和其他开源组件的托管仓库，也是很多构建系统如Maven的默认存储仓库，如何选择就看个人爱好了。</p><p>以上就是本文的所有内容！</p><p>参考资料：</p><p><a href="https://developer.android.google.cn/studio/build/jcenter-migration" target="_blank" rel="noopener">JCenter service update</a></p><p><a href="https://central.sonatype.org/publish/publish-guide/" target="_blank" rel="noopener">The Central Repository Documentation</a></p><p><a href="https://developer.android.com/studio/build/maven-publish-plugin" target="_blank" rel="noopener">Use the Maven Publish plugin</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在很久之前写过一篇&lt;a href=&quot;https://blog.csdn.net/Rain_9155/article/details/9094
      
    
    </summary>
    
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="mavenCentral" scheme="http://yoursite.com/tags/mavenCentral/"/>
    
      <category term="gradle" scheme="http://yoursite.com/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>揭秘kotlin协程中的CoroutineContext</title>
    <link href="http://yoursite.com/2021/01/21/%E6%8F%AD%E7%A7%98kotlin%E5%8D%8F%E7%A8%8B%E4%B8%AD%E7%9A%84CoroutineContext/"/>
    <id>http://yoursite.com/2021/01/21/%E6%8F%AD%E7%A7%98kotlin%E5%8D%8F%E7%A8%8B%E4%B8%AD%E7%9A%84CoroutineContext/</id>
    <published>2021-01-21T02:52:18.000Z</published>
    <updated>2023-01-07T10:44:49.139Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从kotlin1.1开始，协程就被添加到kotlin中作为实验性功能，直到kotlin1.3，协程在kotlin中的api已经基本稳定下来了，现在kotlin已经发布到了1.4，为协程添加了更多的功能并进一步完善了它，所以我们现在在kotlin代码中可以放心的引入kotlin协程并使用它，其实<a href="https://zh.wikipedia.org/wiki/%E5%8D%8F%E7%A8%8B" target="_blank" rel="noopener">协程</a>并不是kotlin独有的功能，它是一个广泛的概念，<a href="https://zh.wikipedia.org/wiki/%E5%8D%8F%E4%BD%9C%E5%BC%8F%E5%A4%9A%E4%BB%BB%E5%8A%A1" target="_blank" rel="noopener">协作式多任务</a>的实现，除了kotlin外，很多语言如Go、Python等都通过自己的方式实现了协程，本文阅读前希望你已经知道如何使用kotlin协程，如果不熟悉可以阅读一下官方文档：</p><p><a href="https://kotlinlang.org/docs/reference/coroutines/coroutines-guide.html" target="_blank" rel="noopener">kotlin coroutines guide</a></p><p>其实入门协程我还是非常推荐通过官方文档来进行学习，因为官方文档的例子是很全面的，跟着它的例子敲一遍代码，你也基本掌握了协程的使用，kotlin协程的源码被放在了两个库中，一部分是在kotlin标准库<a href="https://github.com/JetBrains/kotlin/tree/1.4.0/libraries/stdlib/src/kotlin/coroutines" target="_blank" rel="noopener">kotlin-stdlib</a>中，一部分是在kotlin协程实现库<a href="https://github.com/Kotlin/kotlinx.coroutines/tree/native-mt-1.4.20/kotlinx-coroutines-core" target="_blank" rel="noopener">kotlinx-coroutines</a>中，其中kotlinx-coroutines是基于kotlin-stdlib的，kotlin-stdlib库提供了实现协程所需的基本原语，而本文讲解的CoroutineContext的主要实现就是在kotlin-stdlib中。</p><blockquote><p>本文涉及到的源码都是基于kotlin1.4版本</p></blockquote><h2 id="Coroutine的简单理解"><a href="#Coroutine的简单理解" class="headerlink" title="Coroutine的简单理解"></a>Coroutine的简单理解</h2><p>提到协程，很对人会把它和线程进行比较，就像提到线程，很多人会把它和进程进行比较，线程和进程分别是操作系统中的CPU调度单位和资源划分单位，它们在操作系统中有专门的数据结构代表，而协程在操作系统中没有专门的数据结构代表，所以协程并不是由操作系统创建和调度，它而是<strong>由程序自己创建和调度</strong>，由于不需要操作系统调度，所以协程比线程更加的轻量，切换协程比切换线程的开销更小，即它的上下文切换比线程更快，因为操作系统切换线程时一般都会涉及到用户态内核态的转换，这是一个开销相对较大的操作。</p><p>协程的实现依赖于线程，它不能脱离线程而存在，因为线程才是CPU调度的基本单位，协程通过程序的调度可以执行在<strong>一个或多个线程之中</strong>，所以协程需要运行于线程之中，由于协程是由程序自己调度的，所以程序就需要实现调度逻辑，不同语言的调度的实现不一样，在kotlin中，通过<strong>Dispatcher</strong>来调度协程，而Dispatcher它通常是一个线程池的实现或者基于特定平台(例如Android)主线程的实现，通过调度让协程运行于一个或多个线程之中，这些协程可以在同一线程的不同时刻被执行，也可以在不同线程上的不同时刻被执行。</p><p>协程可以说是编程语言的能力， 是上层的能力，它并不需要操作系统和硬件的支持， 是编程语言为了让开发者更容易写出<strong>协作式任务</strong>的代码，而封装的一种任务调度能力，所以协程通常是包含一段<strong>特定逻辑的代码块</strong>，多个协程之间就组合成一段具有<strong>特定逻辑的代码流程</strong>，这些编程语言为了让开发者更方便的使用协程，它通常会提供一些关键字， 而这些关键字会通过编译器自动生成了一些支持型代码，例如kotlin中的<strong>suspend</strong>关键字，对于suspend修饰的方法，编译器会方法生成一些额外的代码。</p><p>上面就是我对协程的简单理解，总的来说：协程需要线程的承载运行，协程需要程序自己完成调度，协程让你更容易写出协作式任务。</p><h2 id="Coroutine的简单使用"><a href="#Coroutine的简单使用" class="headerlink" title="Coroutine的简单使用"></a>Coroutine的简单使用</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> scope = CoroutineScope(CoroutineName(<span class="string">"Coroutine-Name"</span>) + Dispatchers.IO)</span><br><span class="line">    <span class="keyword">val</span> job = scope.launch(start = CoroutineStart.DEFAULT)&#123;</span><br><span class="line">        println(<span class="string">"hello world"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进程保活1s，只有进程存活的前提下，协程才能会启动和执行</span></span><br><span class="line">    Thread.sleep(<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面首先构造了一个<strong>CoroutineScope</strong>，它是协程的作用域，用于控制协程的生命周期，构造CoroutineScope需要一个<strong>CoroutineContext</strong>，它是协程的上下文，用于提供协程启动和运行时需要的信息，这是我们后面需要重点介绍的，最后通过CoroutineScope的launch方法启动协程并输出hello world，其中启动协程时可以通过<strong>CoroutineStart</strong>指定协程的启动模式，它是一个枚举值，默认是立即启动，也通过指定CoroutineStart.LAZY变为延迟启动，延迟启动需要你主动调用返回的Job对象的start方法后协程才会启动，如果我们想取消掉这个协程的执行就可以调用CoroutineScope的cancel方法，或者调用launch方法返回的Job对象的cancel方法，其实CoroutineScope的cancel方法内部也是调用返回的Job对象的cancel方法来结束这个协程。</p><p>上面就是启动一个协程的简单步骤，需要用到CoroutineScope、CoroutineContext、CoroutineStart。</p><blockquote><p>通过自定义CoroutineScope，可以在应用程序的某一个层次开启或者控制协程的生命周期，例如Android，在ViewModel和Lifecycle类的生命周期里提供了CoroutineScope，分别是<a href="https://cs.android.com/androidx/platform/frameworks/support/+/androidx-main:lifecycle/lifecycle-viewmodel-ktx/src/main/java/androidx/lifecycle/ViewModel.kt" target="_blank" rel="noopener">ViewModelScope</a>和<a href="https://cs.android.com/androidx/platform/frameworks/support/+/androidx-main:lifecycle/lifecycle-runtime-ktx/src/main/java/androidx/lifecycle/LifecycleOwner.kt;l=29?q=lifecycleScope&ss=androidx%2Fplatform%2Fframeworks%2Fsupportdroidx%2Fplatform%2Fframeworks%2Fsupport" target="_blank" rel="noopener">LifecycleScope</a>，通过这两个CoroutineScope启动的所有协程可以在对应类的生命周期结束时自动被取消从而避免内存泄漏。</p></blockquote><h2 id="CoroutineContext的元素"><a href="#CoroutineContext的元素" class="headerlink" title="CoroutineContext的元素"></a>CoroutineContext的元素</h2><p>构造CoroutineScope使用到的CoroutineContext是一个特殊的集合，这个集合它既有Map的特点，也有Set的特点，集合的每一个元素都是Element，每个Element都有一个Key与之对应，对于相同Key的Element是不可以重复存在的，Element之间可以通过 <strong>+</strong> 号组合起来，后面我会详细介绍CoroutineContext这个特殊集合的结构，接下来我先简单讲解一下组成CoroutineContext的各个Element的作用，CoroutineContext主要由以下4个Element组成：</p><ul><li>Job：协程的唯一标识，用来控制协程的生命周期(new、active、completing、completed、cancelling、cancelled)；</li><li>CoroutineDispatcher：指定协程运行的线程(IO、Default、Main、Unconfined);</li><li>CoroutineName: 指定协程的名称，默认为coroutine;</li><li>CoroutineExceptionHandler: 指定协程的异常处理器，用来处理未捕获的异常.</li></ul><p>它们之间的关系如下：</p><img src="/2021/01/21/%E6%8F%AD%E7%A7%98kotlin%E5%8D%8F%E7%A8%8B%E4%B8%AD%E7%9A%84CoroutineContext/coroutine1.png" class="" title="coroutine"><p>下面分别介绍一下4个Element各自的作用：</p><h3 id="1、Job"><a href="#1、Job" class="headerlink" title="1、Job"></a>1、Job</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Job</span> : <span class="type">CoroutineContext.Element &#123;</span></span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">companion</span> <span class="keyword">object</span> Key : CoroutineContext.Key&lt;Job&gt; &#123;</span><br><span class="line">        <span class="keyword">init</span> &#123;</span><br><span class="line">            CoroutineExceptionHandler</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> isActive: <span class="built_in">Boolean</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> isCompleted: <span class="built_in">Boolean</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> isCancelled: <span class="built_in">Boolean</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">start</span><span class="params">()</span></span>: <span class="built_in">Boolean</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">cancel</span><span class="params">(cause: <span class="type">CancellationException</span>? = <span class="literal">null</span>)</span></span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">join</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> children: Sequence&lt;Job&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过CoroutineScope的扩展方法launch启动一个协程后，它会新建返回一个Job对象，它是协程的唯一标识，这个Job对象包含了这个协程任务的一系列状态，如下：</p><img src="/2021/01/21/%E6%8F%AD%E7%A7%98kotlin%E5%8D%8F%E7%A8%8B%E4%B8%AD%E7%9A%84CoroutineContext/coroutine2.png" class="" title="coroutine"><p>当一个协程<strong>创建</strong>后它就处于新建(New)状态，当调用Job的<strong>start/join</strong>方法后协程就处于活跃(Active)状态，这是运行状态，协程运行<strong>出错</strong>或者调用Job的<strong>cancel</strong>方法都会将当前协程置为取消中(Cancelling)状态, 处于取消中状态的协程会等所有子协程<strong>都完成</strong>后才进入取消 (Cancelled)状态，当协程执行<strong>完成</strong>后或者调用CompletableJob(CompletableJob是Job的一个子接口)的<strong>complete</strong>方法都会让当前协程进入完成中(Completing)状态， 处于完成中状态的协程会等所有子协程<strong>都完成</strong>后才进入完成(Completed)状态。</p><p>虽然协程有New、Cancelling、Completing状态，但是外部是无法感知这三个状态的，Job只提供了isActive、isCancelled、isCompleted属性来供外部判断协程是否处于Active、Cancelled、Completed状态，当协程处于<strong>Active</strong>状态时，<strong>isActive为true</strong>，isCancelled和isCompleted为false，当协程处于<strong>Cancelled</strong>状态时，<strong>isCancelled和isCompleted为true</strong>，isActive为false，当协程处于<strong>Completed</strong>状态时，<strong>isCompleted为true</strong>，isActive和isCancelled为false。</p><p>协程中有两种类型的Job，如果我们平时启动协程时没有特意地通过CoroutineContext指定一个Job，那么使用launch/async方法启动协程时返回的Job它会产生<strong>异常传播</strong>，我们知道协程有一个父子的概念，例如启动一个协程1，在协程中继续启动协程2、协程3，那么协程1就是协程2、协程3的父协程，协程2、协程3就是协程1的子协程，每个协程都会有一个对应的Job，<strong>协程之间的父子关系是通过Job对象维持的</strong>，像一颗树一样：</p><img src="/2021/01/21/%E6%8F%AD%E7%A7%98kotlin%E5%8D%8F%E7%A8%8B%E4%B8%AD%E7%9A%84CoroutineContext/coroutine3.png" class="" title="coroutine"><p>所以异常传播就是这个Job因为除了CancellationException以外的异常而失败时，那么父Job就会感知到并抛出异常，在抛出异常之前，父Job会取消所有子Job的运行，这也是结构化编程的一个特点，如果要抑制这种异常传播的行为，那么可以用到另外一种类型的Job - <strong>SupervisorJob</strong>，SupervisorJob它不是一个类，它是一个构造方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">SupervisorJob</span><span class="params">(parent: <span class="type">Job</span>? = <span class="literal">null</span>)</span></span> : CompletableJob = SupervisorJobImpl(parent)</span><br></pre></td></tr></table></figure><p>SupervisorJob方法会返回CompletableJob的一个supervisor实现，CompletableJob是Job的一个子接口，它比Job接口多了一个complete方法，这意味着它可以调用complete方法让协程任务进入完成状态，supervisor实现的意思是这个Job它不会产生异常传播，每个Job可以单独被管理，当SupervisorJob因为除了CancellationException以外的异常而失败时，并不会影响到父Job和其他子Job，下面是SupervisorJob的一个使用例子：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> parentJob = GlobalScope.launch &#123;</span><br><span class="line">       <span class="comment">//childJob是一个SupervisorJob</span></span><br><span class="line">        <span class="keyword">val</span> childJob = launch(SupervisorJob())&#123;</span><br><span class="line">            <span class="keyword">throw</span> NullPointerException()</span><br><span class="line">        &#125;</span><br><span class="line">        childJob.join()</span><br><span class="line">        println(<span class="string">"parent complete"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>childJob抛出异常并不会影响parentJob的运行，parentJob会继续运行并输出parent complete。</p><h3 id="2、CoroutineDispatcher"><a href="#2、CoroutineDispatcher" class="headerlink" title="2、CoroutineDispatcher"></a>2、CoroutineDispatcher</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CoroutineDispatcher</span> : <span class="type">AbstractCoroutineContextElement</span></span>(ContinuationInterceptor), ContinuationInterceptor &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">companion</span> <span class="keyword">object</span> Key : AbstractCoroutineContextKey&lt;ContinuationInterceptor, CoroutineDispatcher&gt;(</span><br><span class="line">    ContinuationInterceptor,</span><br><span class="line">    &#123; it <span class="keyword">as</span>? CoroutineDispatcher &#125;</span><br><span class="line">  )</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">isDispatchNeeded</span><span class="params">(context: <span class="type">CoroutineContext</span>)</span></span>: <span class="built_in">Boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">dispatch</span><span class="params">(context: <span class="type">CoroutineContext</span>, block: <span class="type">Runnable</span>)</span></span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CoroutineDispatcher可以指定协程的运行线程，CoroutineDispatcher里面有一个<strong>dispatch</strong>方法，这个dispatch方法用于把协程任务分派到特定线程运行，kotlin已经内置了CoroutineDispatcher的4个实现，可以通过Dispatchers的<strong>Default、IO、Main、Unconfined</strong>字段分别返回使用，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">actual</span> <span class="keyword">object</span> Dispatchers &#123;</span><br><span class="line">    <span class="meta">@JvmStatic</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">actual</span> <span class="keyword">val</span> Default: CoroutineDispatcher = createDefaultDispatcher()</span><br><span class="line">  </span><br><span class="line">     <span class="meta">@JvmStatic</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> IO: CoroutineDispatcher = DefaultScheduler.IO</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JvmStatic</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">actual</span> <span class="keyword">val</span> Unconfined: CoroutineDispatcher = kotlinx.coroutines.Unconfined</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@JvmStatic</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">actual</span> <span class="keyword">val</span> Main: MainCoroutineDispatcher <span class="keyword">get</span>() = MainDispatcherLoader.dispatcher</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1、Default、IO"><a href="#2-1、Default、IO" class="headerlink" title="2.1、Default、IO"></a>2.1、Default、IO</h4><p>Dispatchers.Default和Dispatchers.IO内部都是线程池实现，它们的含义是把协程运行在共享的线程池中，我们先看Dispatchers.Default的实现，看createDefaultDispatcher方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">actual</span> <span class="function"><span class="keyword">fun</span> <span class="title">createDefaultDispatcher</span><span class="params">()</span></span>: CoroutineDispatcher = <span class="keyword">if</span> (useCoroutinesScheduler) DefaultScheduler <span class="keyword">else</span> CommonPool</span><br></pre></td></tr></table></figure><p>DefaultScheduler和CommonPool都是CoroutineDispatcher的子类，不同的是DefaultScheduler内部依赖的是kotlin自己实现的线程池逻辑，而CommonPool内部依赖的是java类库中的Executor，默认情况下useCoroutinesScheduler为true，所以createDefaultDispatcher方法返回的是DefaultScheduler实例，我们看一下这个DefaultScheduler：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">object</span> DefaultScheduler : ExperimentalCoroutineDispatcher() &#123;</span><br><span class="line">    <span class="keyword">val</span> IO: CoroutineDispatcher = LimitingDispatcher(</span><br><span class="line">        <span class="keyword">this</span>,<span class="comment">//DefaultScheduler实例被传进了LimitingDispatcher中</span></span><br><span class="line">        systemProp(IO_PARALLELISM_PROPERTY_NAME, <span class="number">64</span>.coerceAtLeast(AVAILABLE_PROCESSORS)),</span><br><span class="line">        <span class="string">"Dispatchers.IO"</span>,</span><br><span class="line">        TASK_PROBABLY_BLOCKING</span><br><span class="line">    )</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DefaultScheduler中的IO字段就是Dispatchers.IO，它是LimitingDispatcher实例，所以Dispatchers.IO的实现是LimitingDispatcher，同时我们要注意到DefaultScheduler是用<strong>object</strong>字段修饰，这说明它是一个单例，并且DefaultScheduler实例被传进了LimitingDispatcher的构造方法中，所以LimitingDispatcher就会持有DefaultScheduler实例，而DefaultScheduler它的主要实现都在它的父类ExperimentalCoroutineDispatcher中：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@InternalCoroutinesApi</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">ExperimentalCoroutineDispatcher</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> corePoolSize: <span class="built_in">Int</span>,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> maxPoolSize: <span class="built_in">Int</span>,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> idleWorkerKeepAliveNs: <span class="built_in">Long</span>,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> schedulerName: String = <span class="string">"CoroutineScheduler"</span></span><br><span class="line">) : ExecutorCoroutineDispatcher() &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(</span><br><span class="line">        corePoolSize: <span class="built_in">Int</span> = CORE_POOL_SIZE,</span><br><span class="line">        maxPoolSize: <span class="built_in">Int</span> = MAX_POOL_SIZE,</span><br><span class="line">        schedulerName: String = DEFAULT_SCHEDULER_NAME</span><br><span class="line">    ) : <span class="keyword">this</span>(corePoolSize, maxPoolSize, IDLE_WORKER_KEEP_ALIVE_NS, schedulerName)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> coroutineScheduler = createScheduler()</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//返回CoroutineScheduler实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">createScheduler</span><span class="params">()</span></span> = CoroutineScheduler(corePoolSize, maxPoolSize, idleWorkerKeepAliveNs, schedulerName)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">dispatch</span><span class="params">(context: <span class="type">CoroutineContext</span>, block: <span class="type">Runnable</span>)</span></span>: <span class="built_in">Unit</span> =</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//dispatch方法委托给了CoroutineScheduler的dispatch方法</span></span><br><span class="line">            coroutineScheduler.dispatch(block)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: RejectedExecutionException) &#123;</span><br><span class="line">          <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">dispatchWithContext</span><span class="params">(block: <span class="type">Runnable</span>, context: <span class="type">TaskContext</span>, tailDispatch: <span class="type">Boolean</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//dispatchWithContext方法委托给了CoroutineScheduler的dispatch方法</span></span><br><span class="line">            coroutineScheduler.dispatch(block, context, tailDispatch)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: RejectedExecutionException) &#123;</span><br><span class="line">          <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再看Dispatchers.IO对应的LimitingDispatcher实现：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LimitingDispatcher</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> dispatcher: ExperimentalCoroutineDispatcher,<span class="comment">//外部传进的DefaultScheduler实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> parallelism: <span class="built_in">Int</span>,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> name: String?,</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> taskMode: <span class="built_in">Int</span></span><br><span class="line">) : ExecutorCoroutineDispatcher(), TaskContext, Executor &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> queue = ConcurrentLinkedQueue&lt;Runnable&gt;()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> inFlightTasks = atomic(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">dispatch</span><span class="params">(context: <span class="type">CoroutineContext</span>, block: <span class="type">Runnable</span>)</span></span> = dispatch(block, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">dispatch</span><span class="params">(block: <span class="type">Runnable</span>, tailDispatch: <span class="type">Boolean</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> taskToSchedule = block</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> inFlight = inFlightTasks.incrementAndGet()</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (inFlight &lt;= parallelism) &#123;</span><br><span class="line">            <span class="comment">//LimitingDispatcher的dispatch方法委托给了DefaultScheduler的dispatchWithContext方法</span></span><br><span class="line">                dispatcher.dispatchWithContext(taskToSchedule, <span class="keyword">this</span>, tailDispatch)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            queue.add(taskToSchedule)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (inFlightTasks.decrementAndGet() &gt;= parallelism) &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            taskToSchedule = queue.poll() ?: <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面分析得知，Dispatchers.Default的实现是<strong>DefaultScheduler</strong>，Dispatchers.IO的实现是<strong>LimitingDispatcher</strong>，而LimitingDispatcher持有DefaultScheduler实例，把dispatch操作委托给DefaultScheduler，DefaultScheduler内部持有<strong>CoroutineScheduler</strong>实例，把dispatch操作委托给CoroutineScheduler，而DefaultScheduler又是一个单例，所以Dispatchers.Default和Dispatchers.IO它们<strong>共用</strong>同一个CoroutineScheduler实例，它们之间的关系如下：</p><img src="/2021/01/21/%E6%8F%AD%E7%A7%98kotlin%E5%8D%8F%E7%A8%8B%E4%B8%AD%E7%9A%84CoroutineContext/coroutine4.png" class="" title="coroutine"><p><strong>CoroutineScheduler</strong>就是kotlin自己实现的共享线程池，是Dispatchers.Default和Dispatchers.IO内部的共同实现，Dispatchers.Default和Dispatchers.IO共享CoroutineScheduler中的线程，DefaultScheduler和LimitingDispatcher的主要作用是对CoroutineScheduler进行线程数、任务数等配置，CoroutineScheduler使用<strong>工作窃取算法</strong>(Work Stealing)重新实现了一套线程池的任务调度逻辑，它的性能、扩展性对协程的任务调度更友好，具体的逻辑可以查看这个类的dispatch方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">CoroutineScheduler</span></span>(</span><br><span class="line">    <span class="meta">@JvmField</span> <span class="keyword">val</span> corePoolSize: <span class="built_in">Int</span>,</span><br><span class="line">    <span class="meta">@JvmField</span> <span class="keyword">val</span> maxPoolSize: <span class="built_in">Int</span>,</span><br><span class="line">    <span class="meta">@JvmField</span> <span class="keyword">val</span> idleWorkerKeepAliveNs: <span class="built_in">Long</span> = IDLE_WORKER_KEEP_ALIVE_NS,</span><br><span class="line">    <span class="meta">@JvmField</span> <span class="keyword">val</span> schedulerName: String = DEFAULT_SCHEDULER_NAME</span><br><span class="line">) : Executor, Closeable &#123;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">execute</span><span class="params">(command: <span class="type">Runnable</span>)</span></span> = dispatch(command)</span><br><span class="line">  </span><br><span class="line">      <span class="function"><span class="keyword">fun</span> <span class="title">dispatch</span><span class="params">(block: <span class="type">Runnable</span>, taskContext: <span class="type">TaskContext</span> = NonBlockingContext, tailDispatch: <span class="type">Boolean</span> = <span class="literal">false</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> task = createTask(block, taskContext)</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">if</span> (task.mode == TASK_NON_BLOCKING) &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以这个线程池既可以运行两种类型的任务：CPU密集型任务和IO密集型任务，用一个mode来区别，当你为协程指定Dispatchers.Default时，Dispatcher会把协程的任务指定为CPU密集型任务，对应mode为<strong>TASK_NON_BLOCKING</strong>，当你为协程指定Dispatchers.IO时，Dispatcher会把协程的任务指定为IO密集型任务，对应mode为<strong>TASK_PROBABLY_BLOCKING</strong>，所以这时CoroutineScheduler就可以根据task mode作出不同的线程创建、调度、唤醒策略，当启动协程时没有指定Dispatcher，默认会使用Dispatchers.Default。</p><p>当运行CPU密集型任务时，CoroutineScheduler最多有corePoolSize个线程被创建，corePoolSize它的取值为<strong>max(2, CPU核心数)</strong>，即它会尽量的等于CPU核心数，当运行IO密集型任务时，它可以创建比corePoolSize更多的线程来运行IO型任务，但不能大于maxPoolSize，maxPoolSize会取一个很大的值，默认为max(corePoolSize, min(CPU核心数 * 128, 2^21 - 2))，即大于corePoolSize，小于2^21 - 2，而2^21 - 2是一个很大的数约为2M，但是CoroutineScheduler是不可能创建这么多线程的，所以就需要外部限制提交的任务数，而Dispatchers.IO构造时就通过<strong>LimitingDispatcher</strong>默认限制了最大线程并发数parallelism为<strong>max(64, CPU核心数)</strong>，即Dispatchers.IO最多只能提交parallelism个任务到CoroutineScheduler中执行，剩余的任务被放进一个队列中等待。</p><blockquote><p>CPU密集型任务：CPU密集型任务的特点是执行任务时CPU会处于忙碌状态，任务会消耗大量的CPU资源，例如计算复杂的算术、视频解码等，如果此时线程数太多，超过了CPU核心数，那么这些超出来的线程是得不到CPU的执行的，只会浪费内存资源，因为线程本身也有栈等空间，同时线程过多，频繁的线程切换带来的消耗也会影响线程池的性能，所以对于CPU密集型任务，线程池并发线程数等于CPU核心数才能让CPU的执行效率最大化；</p><p>IO密集型任务：IO密集型任务的特点是执行任务时CPU会处于闲置状态，任务不会消耗大量的CPU资源，例如网络请求、IO操作等，线程执行IO密集型任务时大多数处于阻塞状态，处于阻塞状态的线程是不占用CPU的执行时间，这时CPU就处于闲置状态，为了让CPU忙起来，执行IO密集型任务时理应让线程的创建数量更多一点，理想情况下线程数应该等于提交的任务数，对于这些多创建出来的线程，当它们闲置时，线程池一般会有一个超时回收策略，所以大部分情况下并不会占用大量的内存资源，但也会有极端情况，所以对于IO密集型任务，线程池并发线程数应尽可能地多才能提高CPU的吞吐量，这个尽可能地多的程度并不是无限大，而是根据业务情况设定，但肯定要大于CPU核心数。</p></blockquote><h4 id="2-2、Unconfined"><a href="#2-2、Unconfined" class="headerlink" title="2.2、Unconfined"></a>2.2、Unconfined</h4><p>Dispatchers.Unconfined的含义是不给协程指定运行的线程，在第一次被挂起(suspend)之前，由启动协程的线程执行它，但被挂起后, 会由恢复协程的线程继续执行,  如果一个协程会被挂起多次,  那么每次被恢复后,  都有可能被不同线程继续执行，看下面的一个例子：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    GlobalScope.launch(Dispatchers.Unconfined)&#123;</span><br><span class="line">        println(Thread.currentThread().name)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//挂起</span></span><br><span class="line">        withContext(Dispatchers.IO)&#123;</span><br><span class="line">            println(Thread.currentThread().name)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//恢复</span></span><br><span class="line">        println(Thread.currentThread().name)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//挂起</span></span><br><span class="line">        withContext(Dispatchers.Default)&#123;</span><br><span class="line">            println(Thread.currentThread().name)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//恢复</span></span><br><span class="line">        println(Thread.currentThread().name)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进程保活</span></span><br><span class="line">    Thread.sleep(<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行输出：</span><br><span class="line">main</span><br><span class="line">DefaultDispatcher-worker-<span class="number">1</span></span><br><span class="line">DefaultDispatcher-worker-<span class="number">1</span></span><br><span class="line">DefaultDispatcher-worker-<span class="number">3</span></span><br><span class="line">DefaultDispatcher-worker-<span class="number">3</span></span><br></pre></td></tr></table></figure><p>协程启动时指定了Dispatchers.Unconfined，所以第一次执行时是由启动协程的线程执行，上面在主线程中启动了协程，所以第一次输出主线程main，withContext方法是一个suspend方法，它可以挂起当前协程，并把指定的代码块运行到给定的上下文中，直到代码块运行完成并返回结果，第一个代码块通过withContext方法把它运行在Dispatchers.IO中，所以第二次输出了线程池中的某一个线程DefaultDispatcher-worker-1，第一个代码块执行完毕后，协程在DefaultDispatcher-worker-1线程中恢复，所以协程恢复后执行在DefaultDispatcher-worker-1线程中，所以第三次继续输出DefaultDispatcher-worker-1，第二个代码块同理。</p><p>那么Dispatchers.Unconfined是怎么做到的呢，我们看下Unconfined对应的CoroutineDispatcher实现 - kotlinx.coroutines.Unconfined：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">object</span> Unconfined : CoroutineDispatcher() &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isDispatchNeeded</span><span class="params">(context: <span class="type">CoroutineContext</span>)</span></span>: <span class="built_in">Boolean</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">dispatch</span><span class="params">(context: <span class="type">CoroutineContext</span>, block: <span class="type">Runnable</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">// It can only be called by the "yield" function. See also code of "yield" function.</span></span><br><span class="line">        <span class="keyword">val</span> yieldContext = context[YieldContext]</span><br><span class="line">        <span class="keyword">if</span> (yieldContext != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// report to "yield" that it is an unconfined dispatcher and don't call "block.run()"</span></span><br><span class="line">            yieldContext.dispatcherWasUnconfined = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> UnsupportedOperationException(<span class="string">"Dispatchers.Unconfined.dispatch function can only be used by the yield function. "</span> +</span><br><span class="line">            <span class="string">"If you wrap Unconfined dispatcher in your code, make sure you properly delegate "</span> +</span><br><span class="line">            <span class="string">"isDispatchNeeded and dispatch calls."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Unconfined他重写了CoroutineDispatcher的isDispatchNeeded方法和dispatch方法，isDispatchNeeded方法返回了false，表示不需要dispatch，而默认CoroutineDispatcher的isDispatchNeeded方法是返回true的，Dispatchers.Default和Dispatchers.IO都没有重写这个方法，Unconfined的dispatch方法没有任何任务调度的逻辑，只是写明了只有当调用<strong>yield</strong>方法时，Unconfined的dispatch方法才会被调用，yield方法是一个suspend方法，当在协程中调用这个方法时表示当前协程让出自己所在的线程给其他协程运行，所以正常情况下是不会调用Unconfined的dispatch方法的。</p><p>在kotlin中每个协程都有一个<strong>Continuation</strong>实例与之对应，当协程<strong>恢复</strong>时会调用Continuation的resumeWith方法，它的实现在<strong>DispatchedContinuation</strong>中，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatchedContinuation</span>&lt;<span class="type">in T</span>&gt;</span>(</span><br><span class="line">    <span class="meta">@JvmField</span> <span class="keyword">val</span> dispatcher: CoroutineDispatcher,<span class="comment">//协程的的CoroutineDispatcher实例</span></span><br><span class="line">    <span class="meta">@JvmField</span> <span class="keyword">val</span> continuation: Continuation&lt;T&gt;<span class="comment">//代表协程的Continuation实例</span></span><br><span class="line">) : DispatchedTask&lt;T&gt;(MODE_UNINITIALIZED), CoroutineStackFrame, Continuation&lt;T&gt; <span class="keyword">by</span> continuation &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">resumeWith</span><span class="params">(result: <span class="type">Result</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> context = continuation.context</span><br><span class="line">        <span class="keyword">val</span> state = result.toState()</span><br><span class="line">        <span class="keyword">if</span> (dispatcher.isDispatchNeeded(context)) &#123;</span><br><span class="line">            _state = state</span><br><span class="line">            resumeMode = MODE_ATOMIC</span><br><span class="line">            dispatcher.dispatch(context, <span class="keyword">this</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//Unconfined走这里的逻辑</span></span><br><span class="line">          <span class="comment">//调用executeUnconfined方法</span></span><br><span class="line">            executeUnconfined(state, MODE_ATOMIC) &#123;</span><br><span class="line">                <span class="comment">//withCoroutineContext方法的作用是查找context中的ThreadContextElement元素，然后调用ThreadContextElement的相应方法更新当前线程的上下文</span></span><br><span class="line">                withCoroutineContext(<span class="keyword">this</span>.context, countOrElement) &#123;</span><br><span class="line">                  <span class="comment">//调用Continuation的resumeWith方法</span></span><br><span class="line">                    continuation.resumeWith(result)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到<strong>by</strong>关键字，这是kotlin中的委托实现，DispatchedContinuation通过<strong>类委托加强</strong>了Continuation的resumeWith方法，即在调用Continuation的resumeWith方法之前增加了一些自己的逻辑，我们可以看到DispatchedContinuation的resumeWith方法中会根据CoroutineDispatcher的isDispatchNeeded方法返回值做出不同处理，当isDispatchNeeded方法返回true时，会调用协程的CoroutineDispatcher的dispatch方法，而当isDispatchNeeded方法返回false时，不会调用CoroutineDispatcher的dispatch方法而是调用<strong>executeUnconfined</strong>方法，上面讲到Unconfined的isDispatchNeeded方法返回了false，我们看executeUnconfined方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> DispatchedContinuation<span class="type">&lt;*&gt;</span>.<span class="title">executeUnconfined</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    contState: <span class="type">Any</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">  mode: <span class="type">Int</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">  doYield: <span class="type">Boolean</span> = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    block: () -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    assert &#123; mode != MODE_UNINITIALIZED &#125;</span><br><span class="line">  <span class="comment">//从ThreadLocal中取出EventLoop</span></span><br><span class="line">    <span class="keyword">val</span> eventLoop = ThreadLocalEventLoop.eventLoop</span><br><span class="line">    <span class="keyword">if</span> (doYield &amp;&amp; eventLoop.isUnconfinedQueueEmpty) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">//判断是否在执行Unconfined任务</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (eventLoop.isUnconfinedLoopActive) &#123;</span><br><span class="line">        _state = contState</span><br><span class="line">        resumeMode = mode</span><br><span class="line">      <span class="comment">//调用EventLoop的dispatchUnconfined方法把Unconfined任务放进EventLoop中</span></span><br><span class="line">        eventLoop.dispatchUnconfined(<span class="keyword">this</span>)</span><br><span class="line">        <span class="literal">true</span> </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//执行Unconfined任务</span></span><br><span class="line">        runUnconfinedEventLoop(eventLoop, block = block)</span><br><span class="line">        <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> DispatchedTask<span class="type">&lt;*&gt;</span>.<span class="title">runUnconfinedEventLoop</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    eventLoop: <span class="type">EventLoop</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    block: () -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> &#123;</span><br><span class="line">    eventLoop.incrementUseCount(unconfined = <span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//先执行block代码块，block()就是executeUnconfined方法传进的代码块, block()里面会调用Continuation的resumeWith方法</span></span><br><span class="line">        block()</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">          <span class="comment">//再调用EventLoop的processUnconfinedEvent方法执行EventLoop中的Unconfined任务，直到EventLoop中的所有Unconfined任务执行完才跳出循环</span></span><br><span class="line">            <span class="keyword">if</span> (!eventLoop.processUnconfinedEvent()) <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Throwable) &#123;</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        eventLoop.decrementUseCount(unconfined = <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到对于Unconfined任务，是在当前线程马上执行或者通过当前线程的EventLoop来执行的，EventLoop是存放在<a href="https://blog.csdn.net/Rain_9155/article/details/103447399" target="_blank" rel="noopener">ThreadLocal</a>中的，所以EventLoop它是跟当前线程相关联的，而EventLoop也是CoroutineDispatcher的一个子类：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">EventLoop</span> : <span class="type">CoroutineDispatcher</span></span>() &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> unconfinedQueue: ArrayQueue&lt;DispatchedTask&lt;*&gt;&gt;? = <span class="literal">null</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">dispatchUnconfined</span><span class="params">(task: <span class="type">DispatchedTask</span>&lt;*&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> queue = unconfinedQueue ?: ArrayQueue&lt;DispatchedTask&lt;*&gt;&gt;().also &#123; unconfinedQueue = it &#125;</span><br><span class="line">        queue.addLast(task)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">processUnconfinedEvent</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> queue = unconfinedQueue ?: <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">val</span> task = queue.removeFirstOrNull() ?: <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        task.run()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EventLoop中有一个双端队列用于存放Unconfined任务，Unconfined任务是指指定了Dispatchers.Unconfined的协程任务，EventLoop的dispatchUnconfined方法用于把Unconfined任务放进队列的尾部，processUnconfinedEvent方法用于从队列的头部移出Unconfined任务执行，所以<strong>executeUnconfined</strong>方法里面的策略就是：在当前线程立即执行Unconfined任务，如果当前线程已经在执行Unconfined任务，就暂时把它放进跟当前线程关联的EventLoop中，等待执行，同时Unconfined任务里面会调用Continuation的resumeWith方法恢复协程运行，这也是为什么指定了Dispatchers.Unconfined后协程恢复能够被恢复协程的线程执行的原因。</p><h4 id="2-3、Main"><a href="#2-3、Main" class="headerlink" title="2.3、Main"></a>2.3、Main</h4><p>Dispatchers.Main的含义是把协程运行在平台相关的只能操作UI对象的Main线程，所以它根据不同的平台有不同的实现，kotlin它支持下面三种平台：</p><ul><li>kotlin/js：kotlin/js是kotlin对JavaScript的支持，提供了转换kotlin代码，kotlin标准库的能力，npm包管理能力，在kotlin/js上Dispatchers.Main等效于Dispatchers.Default；</li><li>kotlin/native：kotlin/native是一种将kotlin代码编译为无需虚拟机就可运行的原生二进制文件的技术, 它的主要目的是允许对不需要或不可能使用虚拟机的平台进行编译，例如嵌入式设备或iOS，在kotlin/native上Dispatchers.Main等效于Dispatchers.Default；</li><li>kotlin/JVM：kotlin/JVM就是需要虚拟机才能编译的平台，例如Android就是属于kotlin/JVM，对于kotlin/JVM我们需要引入对应的dispatcher，例如Android就需要引入kotlinx-coroutines-android库，它里面有Android对应的Dispatchers.Main实现，其实就是把任务通过Handler运行在Android的主线程.</li></ul><p>我们再看Dispatchers.Main的实现 - MainDispatcherLoader.dispatcher:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">object</span> MainDispatcherLoader &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@JvmField</span></span><br><span class="line">    <span class="keyword">val</span> dispatcher: MainCoroutineDispatcher = loadMainDispatcher()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">loadMainDispatcher</span><span class="params">()</span></span>: MainCoroutineDispatcher &#123;</span><br><span class="line">        <span class="comment">//...主要是通过反射加载实现了MainCoroutineDispatcher的类</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以Dispatchers.Main的CoroutineDispatcher实现是MainCoroutineDispatcher，MainCoroutineDispatcher的具体实现就因平台的不同而不同了，如果你直接使用Dispatchers.Main而没有引入对应的库就会引发IllegalStateException异常。</p><h3 id="3、CoroutineName"><a href="#3、CoroutineName" class="headerlink" title="3、CoroutineName"></a>3、CoroutineName</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">CoroutineName</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String</span><br><span class="line">) : AbstractCoroutineContextElement(CoroutineName) &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">companion</span> <span class="keyword">object</span> Key : CoroutineContext.Key&lt;CoroutineName&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String = <span class="string">"CoroutineName(<span class="variable">$name</span>)"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CoroutineName就是协程的名字，它的结构很简单, 我们平时开发一般是不会去指定一个CoroutineName的，因为CoroutineName只在kotlin的debug模式下才会被用的, 它在debug模式下被用于设置协程运行线程的名字：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">CoroutineId</span></span>(</span><br><span class="line">    <span class="keyword">val</span> id: <span class="built_in">Long</span></span><br><span class="line">) : ThreadContextElement&lt;String&gt;, AbstractCoroutineContextElement(CoroutineId) &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">updateThreadContext</span><span class="params">(context: <span class="type">CoroutineContext</span>)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">val</span> coroutineName = context[CoroutineName]?.name ?: <span class="string">"coroutine"</span></span><br><span class="line">        <span class="keyword">val</span> currentThread = Thread.currentThread()</span><br><span class="line">        <span class="keyword">val</span> oldName = currentThread.name</span><br><span class="line">        <span class="keyword">var</span> lastIndex = oldName.lastIndexOf(DEBUG_THREAD_NAME_SEPARATOR)</span><br><span class="line">        <span class="keyword">if</span> (lastIndex &lt; <span class="number">0</span>) lastIndex = oldName.length</span><br><span class="line">        currentThread.name = buildString(lastIndex + coroutineName.length + <span class="number">10</span>) &#123;</span><br><span class="line">            append(oldName.substring(<span class="number">0</span>, lastIndex))</span><br><span class="line">            append(DEBUG_THREAD_NAME_SEPARATOR)</span><br><span class="line">            append(coroutineName)</span><br><span class="line">            append(<span class="string">'#'</span>)</span><br><span class="line">            append(id)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> oldName</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过设置key为<strong>kotlinx.coroutines.debug</strong>的SystemProp的值为<strong>on</strong>打开协程的debug模式，这样我们指定的CoroutineName就会出现运行协程的线程的名字上。</p><h3 id="4、CoroutineExceptionHandler"><a href="#4、CoroutineExceptionHandler" class="headerlink" title="4、CoroutineExceptionHandler"></a>4、CoroutineExceptionHandler</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CoroutineExceptionHandler</span> : <span class="type">CoroutineContext.Element &#123;</span></span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">companion</span> <span class="keyword">object</span> Key : CoroutineContext.Key&lt;CoroutineExceptionHandler&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">handleException</span><span class="params">(context: <span class="type">CoroutineContext</span>, exception: <span class="type">Throwable</span>)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CoroutineExceptionHandler就是协程的异常处理器，用来处理协程运行中未捕获的异常，如果我们没有指定它，那么协程中未捕获的异常默认会流转到Thread的uncaughtExceptionHandler中，我们可以在启动协程时通过CoroutineContext指定我们自定义的异常处理器，我们可以通过CoroutineExceptionHandler方法创建一个CoroutineExceptionHandler，它会返回一个CoroutineExceptionHandler的默认实现，默认实现的handleException方法中调用了我们传进的handler方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">CoroutineExceptionHandler</span><span class="params">(<span class="keyword">crossinline</span> handler: (<span class="type">CoroutineContext</span>, <span class="type">Throwable</span>) -&gt; <span class="type">Unit</span>)</span></span>: CoroutineExceptionHandler =</span><br><span class="line">    <span class="keyword">object</span> : AbstractCoroutineContextElement(CoroutineExceptionHandler), CoroutineExceptionHandler &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">handleException</span><span class="params">(context: <span class="type">CoroutineContext</span>, exception: <span class="type">Throwable</span>)</span></span> =</span><br><span class="line">            handler.invoke(context, exception)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>CoroutineExceptionHandler只对launch方法启动的根协程有效，而对async启动的根协程无效，因为async启动的<strong>根协程</strong>默认会捕获所有未捕获异常并把它放在Deferred中，等到用户调用Deferred的await方法才抛出，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//自定义CoroutineExceptionHandler</span></span><br><span class="line">    <span class="keyword">val</span> handler = CoroutineExceptionHandler&#123; coroutineContext, throwable -&gt;</span><br><span class="line">        println(<span class="string">"my coroutineExceptionHandler catch exception, msg = <span class="subst">$&#123;throwable.message&#125;</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//handler有效</span></span><br><span class="line">    <span class="keyword">val</span> job = GlobalScope.launch(handler)&#123;</span><br><span class="line">        <span class="keyword">throw</span> IndexOutOfBoundsException(<span class="string">"exception thrown from launch"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    job.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//handler无效</span></span><br><span class="line">    <span class="keyword">val</span> deferred = GlobalScope.async(handler)&#123;</span><br><span class="line">        <span class="keyword">throw</span> NullPointerException(<span class="string">"exception thrown from async"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    deferred.start()</span><br><span class="line"></span><br><span class="line">    Thread.sleep(<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">my coroutineExceptionHandler <span class="keyword">catch</span> exception, msg = exception thrown from launch</span><br></pre></td></tr></table></figure><p>其中只有launch启动的根协程抛出的异常才被CoroutineExceptionHandler处理，而对于async启动的根协程抛出的异常CoroutineExceptionHandler无效，需要我们调用Deferred的await方法时try catch。</p><p>还有子协程抛出的未捕获异常会委托父协程的CoroutineExceptionHandler处理，子协程设置的CoroutineExceptionHandler永远不会生效(SupervisorJob 除外)，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//根协程的Handler</span></span><br><span class="line">    <span class="keyword">val</span> parentHandler = CoroutineExceptionHandler&#123;coroutineContext, throwable -&gt;</span><br><span class="line">        println(<span class="string">"parent coroutineExceptionHandler catch exception, msg = <span class="subst">$&#123;throwable.message&#125;</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//启动根协程</span></span><br><span class="line">    <span class="keyword">val</span> parentJob = GlobalScope.launch(parentHandler)&#123;</span><br><span class="line">        <span class="comment">//子协程的Handler</span></span><br><span class="line">        <span class="keyword">val</span> childHandler = CoroutineExceptionHandler&#123;coroutineContext, throwable -&gt;</span><br><span class="line">            println(<span class="string">"child coroutineExceptionHandler catch exception, msg = <span class="subst">$&#123;throwable.message&#125;</span>"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//启动子协程</span></span><br><span class="line">        <span class="keyword">val</span> childJob = launch(childHandler)&#123;</span><br><span class="line">            <span class="keyword">throw</span> IndexOutOfBoundsException(<span class="string">"exception thrown from child launch"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        childJob.start()</span><br><span class="line">    &#125;</span><br><span class="line">    parentJob.start()</span><br><span class="line">    </span><br><span class="line">    Thread.sleep(<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">parent coroutineExceptionHandler <span class="keyword">catch</span> exception, msg = exception thrown from child launch</span><br></pre></td></tr></table></figure><p>可以看到子协程设置CoroutineExceptionHandler没有输出，只有根协程的CoroutineExceptionHandler输出了，但是也有例外，如果子协程是<strong>SupervisorJob</strong>，那么它设置的CoroutineExceptionHandler是生效的，前面也说过SupervisorJob不会产生异常传播。</p><p>当父协程的子协程同时抛出多个异常时，CoroutineExceptionHandler只会捕获第一个协程抛出的异常，后续协程抛出的异常被保存在第一个异常的suppressed数组中，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> handler = CoroutineExceptionHandler&#123;coroutineContext, throwable -&gt;</span><br><span class="line">        println(<span class="string">"my coroutineExceptionHandler catch exception, msg = <span class="subst">$&#123;throwable.message&#125;</span>, suppressed = <span class="subst">$&#123;throwable.suppressed.contentToString()&#125;</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> parentJob = GlobalScope.launch(handler)&#123;</span><br><span class="line">        launch &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                delay(<span class="number">200</span>)</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//第二个抛出的异常</span></span><br><span class="line">                <span class="keyword">throw</span> IndexOutOfBoundsException(<span class="string">"exception thrown from first child launch"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start()</span><br><span class="line"></span><br><span class="line">        launch &#123;</span><br><span class="line">            delay(<span class="number">100</span>)</span><br><span class="line">            <span class="comment">//第一个抛出的异常</span></span><br><span class="line">            <span class="keyword">throw</span> NullPointerException(<span class="string">"exception thrown from second child launch"</span>)</span><br><span class="line">        &#125;.start()</span><br><span class="line">    &#125;</span><br><span class="line">    parentJob.start()</span><br><span class="line"></span><br><span class="line">    Thread.sleep(<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">my coroutineExceptionHandler <span class="keyword">catch</span> exception, msg = exception thrown from second child launch, suppressed = [java.lang.IndexOutOfBoundsException: exception thrown from first child launch]</span><br></pre></td></tr></table></figure><p>可以看到CoroutineExceptionHandler只处理了第一个子协程抛出的异常，后续异常都放在了第一个抛出异常的suppressed数组中。</p><p>还有取消协程时会抛出一个CancellationException，它会被所有CoroutineExceptionHandler省略，但可以try catch它，同时当子协程抛出CancellationException时，并不会终止当前父协程的运行：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> handler = CoroutineExceptionHandler&#123;coroutineContext, throwable -&gt;</span><br><span class="line">        println(<span class="string">"my coroutineExceptionHandler catch exception, msg = <span class="subst">$&#123;throwable.message&#125;</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> parentJob = GlobalScope.launch(handler)&#123;</span><br><span class="line">        <span class="keyword">val</span> childJob = launch &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                delay(<span class="built_in">Long</span>.MAX_VALUE)</span><br><span class="line">            &#125;<span class="keyword">catch</span> (e: CancellationException)&#123;</span><br><span class="line">                println(<span class="string">"catch cancellationException thrown from child launch"</span>)</span><br><span class="line">                println(<span class="string">"rethrow cancellationException"</span>)</span><br><span class="line">                <span class="keyword">throw</span> CancellationException()</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                println(<span class="string">"child was canceled"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//取消子协程</span></span><br><span class="line">        childJob.cancelAndJoin()</span><br><span class="line">        println(<span class="string">"parent is still running"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    parentJob.start()</span><br><span class="line"></span><br><span class="line">    Thread.sleep(<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="keyword">catch</span> cancellationException thrown from child launch</span><br><span class="line">rethrow cancellationException</span><br><span class="line">child was canceled</span><br><span class="line">parent <span class="keyword">is</span> still running</span><br></pre></td></tr></table></figure><p>可以看到当抛出CancellationException时，我们可以try catch住它，同时当我们再次抛出它时，协程的CoroutineExceptionHandler并没有处理它，同时父协程不受影响，继续运行。</p><p>以上就是我们平时开发常用到的CoroutineContext元素，除了这四个元素，还有一些在特定场景下会使用到的元素，例如NonCancellable、ThreadContextElement等，其中NonCancellable可以把协程运行在不可取消的上下文中，ThreadContextElement可以让协程恢复/挂起前修改当前线程的上下文信息，例如修改线程的名字为当前运行协程的名字，前面讲的CoroutineName通过CoroutineId这个ThreadContextElement就是这么干的，除了这些内置的元素，我们还可以自定义CoroutineContext元素以满足我们的开发，后面会讲到如何自定义CoroutineContext的元素。</p><h2 id="CoroutineContext的结构"><a href="#CoroutineContext的结构" class="headerlink" title="CoroutineContext的结构"></a>CoroutineContext的结构</h2><p>我们再次看一下CoroutineContext的全家福：</p><img src="/2021/01/21/%E6%8F%AD%E7%A7%98kotlin%E5%8D%8F%E7%A8%8B%E4%B8%AD%E7%9A%84CoroutineContext/coroutine5.png" class="" title="coroutine"><p>上面讲解了组成CoroutineContext的Element，每一个Element都继承自CoroutineContext，而每一个Element都可以通过 <strong>+</strong> 号来组合，也可以通过类似map的 <strong>[key]</strong> 来取值，这和CoroutineContext的运算符重载逻辑和它的结构实现CombinedContext有关，我们先来看一下CoroutineContext类：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CoroutineContext</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">  <span class="comment">//操作符[]重载，可以通过CoroutineContext[Key]这种形式来获取与Key关联的Element</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;E : Element&gt;</span> <span class="title">get</span><span class="params">(key: <span class="type">Key</span>&lt;<span class="type">E</span>&gt;)</span></span>: E?</span><br><span class="line"></span><br><span class="line">    <span class="comment">//它是一个聚集函数，提供了从left到right遍历CoroutineContext中每一个Element的能力，并对每一个Element做operation操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;R&gt;</span> <span class="title">fold</span><span class="params">(initial: <span class="type">R</span>, operation: (<span class="type">R</span>, <span class="type">Element</span>) -&gt; <span class="type">R</span>)</span></span>: R</span><br><span class="line"></span><br><span class="line">    <span class="comment">//操作符+重载，可以CoroutineContext + CoroutineContext这种形式把两个CoroutineContext合并成一个</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(context: <span class="type">CoroutineContext</span>)</span></span>: CoroutineContext</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//返回一个新的CoroutineContext，这个CoroutineContext删除了Key对应的Element</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">minusKey</span><span class="params">(key: <span class="type">Key</span>&lt;*&gt;)</span></span>: CoroutineContext</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//Key定义，空实现，仅仅做一个标识</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Key</span>&lt;<span class="type">E : Element</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//Element定义，每个Element都是一个CoroutineContext</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Element</span> : <span class="type">CoroutineContext &#123;</span></span></span><br><span class="line">       </span><br><span class="line">      <span class="comment">//每个Element都有一个Key实例</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">val</span> key: Key&lt;*&gt;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了plus方法，CoroutineContext中的其他三个方法都被CombinedContext、Element、EmptyCoroutineContext重写，CombinedContext就是CoroutineContext集合结构的实现，它里面是一个<strong>递归定义</strong>，Element就是CombinedContext中的元素，而EmptyCoroutineContext就表示一个空的CoroutineContext，它里面是空实现。</p><h3 id="1、CombinedContext"><a href="#1、CombinedContext" class="headerlink" title="1、CombinedContext"></a>1、CombinedContext</h3><p>我们先看CombinedContext类：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CombinedContext只包含left和element两个成员：left可能为CombinedContext或Element实例，而element就是Element实例</span></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">CombinedContext</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> left: CoroutineContext,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> element: Element</span><br><span class="line">) : CoroutineContext, Serializable &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//CombinedContext的get操作的逻辑是：</span></span><br><span class="line">  <span class="comment">//1、先看element是否是匹配，如果匹配，那么element就是需要找的元素，返回element，否则说明要找的元素在left中，继续从left开始找，根据left是CombinedContext还是Element转到2或3</span></span><br><span class="line">  <span class="comment">//2、如果left又是一个CombinedContext，那么重复1</span></span><br><span class="line">  <span class="comment">//3、如果left是Element，那么调用它的get方法返回</span></span><br><span class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;E : Element&gt;</span> <span class="title">get</span><span class="params">(key: <span class="type">Key</span>&lt;<span class="type">E</span>&gt;)</span></span>: E? &#123;</span><br><span class="line">        <span class="keyword">var</span> cur = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//1</span></span><br><span class="line">            cur.element[key]?.let &#123; <span class="keyword">return</span> it &#125;</span><br><span class="line">            <span class="keyword">val</span> next = cur.left</span><br><span class="line">            <span class="keyword">if</span> (next <span class="keyword">is</span> CombinedContext) &#123;<span class="comment">//2</span></span><br><span class="line">                cur = next</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//3</span></span><br><span class="line">                <span class="keyword">return</span> next[key]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//CombinedContext的fold操作的逻辑是：先对left做fold操作，把left做完fold操作的的返回结果和element做operation操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;R&gt;</span> <span class="title">fold</span><span class="params">(initial: <span class="type">R</span>, operation: (<span class="type">R</span>, <span class="type">Element</span>) -&gt; <span class="type">R</span>)</span></span>: R =</span><br><span class="line">        operation(left.fold(initial, operation), element)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//CombinedContext的minusKey操作的逻辑是：</span></span><br><span class="line">  <span class="comment">//1、先看element是否是匹配，如果匹配，那么element就是需要删除的元素，返回left，否则说明要删除的元素在left中，继续从left中删除对应的元素，根据left是否删除了要删除的元素转到2或3或4</span></span><br><span class="line">  <span class="comment">//2、如果left中不存在要删除的元素，那么当前CombinedContext就不存在要删除的元素，直接返回当前CombinedContext实例就行</span></span><br><span class="line">  <span class="comment">//3、如果left中存在要删除的元素，删除了这个元素后，left变为了空，那么直接返回当前CombinedContext的element就行</span></span><br><span class="line">  <span class="comment">//4、如果left中存在要删除的元素，删除了这个元素后，left不为空，那么组合一个新的CombinedContext返回</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">minusKey</span><span class="params">(key: <span class="type">Key</span>&lt;*&gt;)</span></span>: CoroutineContext &#123;</span><br><span class="line">      <span class="comment">//1</span></span><br><span class="line">        element[key]?.let &#123; <span class="keyword">return</span> left &#125;</span><br><span class="line">        <span class="keyword">val</span> newLeft = left.minusKey(key)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">when</span> &#123;</span><br><span class="line">            newLeft === left -&gt; <span class="keyword">this</span><span class="comment">//2</span></span><br><span class="line">            newLeft === EmptyCoroutineContext -&gt; element<span class="comment">//3</span></span><br><span class="line">            <span class="keyword">else</span> -&gt; CombinedContext(newLeft, element)<span class="comment">//4</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现CombinedContext中的get、fold、minusKey操作都是递归形式的操作，递归的终点就是当这个left是一个Element，我们再看Element类：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Element</span> : <span class="type">CoroutineContext &#123;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> key: Key&lt;*&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Element的get方法逻辑：如果key和自己的key匹配，那么自己就是要找的Element，返回自己，否则返回null</span></span><br><span class="line">    public override operator fun &lt;E : Element&gt; get(key: Key&lt;E&gt;): E? =</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.key == key) <span class="keyword">this</span> <span class="keyword">as</span> E <span class="keyword">else</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//Element的fold方法逻辑：对传入的initial和自己做operation操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;R&gt;</span> <span class="title">fold</span><span class="params">(initial: <span class="type">R</span>, operation: (<span class="type">R</span>, <span class="type">Element</span>) -&gt; <span class="type">R</span>)</span></span>: R =</span><br><span class="line">    operation(initial, <span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Element的minusKey方法逻辑：如果key和自己的key匹配，那么自己就是要删除的Element，返回EmptyCoroutineContext(表示删除了自己)，否则说明自己不需要被删除，返回自己</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">minusKey</span><span class="params">(key: <span class="type">Key</span>&lt;*&gt;)</span></span>: CoroutineContext =</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.key == key) EmptyCoroutineContext <span class="keyword">else</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们把CombinedContext和Element结合来看，那么CombinedContext的整体结构如下：</p><img src="/2021/01/21/%E6%8F%AD%E7%A7%98kotlin%E5%8D%8F%E7%A8%8B%E4%B8%AD%E7%9A%84CoroutineContext/coroutine6.png" class="" title="coroutine"><p>有点像是一个链表，left就是指向下一个结点的指针，有了这个图我们再从整体看当调用CombinedContext的get、fold、minusKey操作时的访问顺序：get、minusKey操作大体逻辑都是先访问当前element，不满足，再访问left的element，顺序都是从right到left，而fold的操作大体逻辑是先访问left，直到递归到最后的element，然后再从left到right的返回，从而访问了所有的element。</p><h3 id="2、CoroutineContext的plus操作"><a href="#2、CoroutineContext的plus操作" class="headerlink" title="2、CoroutineContext的plus操作"></a>2、CoroutineContext的plus操作</h3><p>现在我们来看CoroutineContext唯一没有被重写的方法 - <strong>plus</strong>方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CoroutineContext</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(context: <span class="type">CoroutineContext</span>)</span></span>: CoroutineContext =</span><br><span class="line">        <span class="keyword">if</span> (context === EmptyCoroutineContext) <span class="keyword">this</span> <span class="keyword">else</span> </span><br><span class="line">            context.fold(<span class="keyword">this</span>) &#123; acc, element -&gt;</span><br><span class="line">                <span class="keyword">val</span> removed = acc.minusKey(element.key)</span><br><span class="line">                <span class="keyword">if</span> (removed === EmptyCoroutineContext) element <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">val</span> interceptor = removed[ContinuationInterceptor]</span><br><span class="line">                    <span class="keyword">if</span> (interceptor == <span class="literal">null</span>) CombinedContext(removed, element) <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">val</span> left = removed.minusKey(ContinuationInterceptor)</span><br><span class="line">                        <span class="keyword">if</span> (left === EmptyCoroutineContext) CombinedContext(element, interceptor) <span class="keyword">else</span></span><br><span class="line">                            CombinedContext(CombinedContext(left, element), interceptor)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法看起来有点复杂，为了方便我们理解，我把它简化一下，我把对ContinuationInterceptor的处理去掉，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CoroutineContext</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(context: <span class="type">CoroutineContext</span>)</span></span>: CoroutineContext =</span><br><span class="line">  <span class="comment">//如果要相加的CoroutineContext为空，那么不做任何处理，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (context === EmptyCoroutineContext) <span class="keyword">this</span> <span class="keyword">else</span> </span><br><span class="line">  <span class="comment">//如果要相加的CoroutineContext不为空，那么对它进行fold操作</span></span><br><span class="line">            context.fold(<span class="keyword">this</span>) &#123; acc, element -&gt; <span class="comment">//我们可以把acc理解成+号左边的CoroutineContext，element理解成+号右边的CoroutineContext的某一个element</span></span><br><span class="line">                <span class="comment">//首先从左边CoroutineContext中删除右边的这个element</span></span><br><span class="line">                <span class="keyword">val</span> removed = acc.minusKey(element.key)</span><br><span class="line">                <span class="comment">//如果removed为空，说明左边CoroutineContext删除了和element相同的元素后为空，那么返回右边的element即可</span></span><br><span class="line">                <span class="keyword">if</span> (removed === EmptyCoroutineContext) element <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="comment">//如果removed不为空，说明左边CoroutineContext删除了和element相同的元素后还有其他元素，那么构造一个新的CombinedContext返回</span></span><br><span class="line">                  <span class="keyword">return</span> CombinedContext(removed, element)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>plus方法大部分情况最终下返回一个CombinedContext，即我们把两个CoroutineContext相加后，返回一个CombinedContext，在组合成CombinedContext时，+号右边的CoroutineContext中的元素会<strong>覆盖</strong>+号左边的CoroutineContext中的含有相同key的元素，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(Dispatchers.Main, <span class="string">"name"</span>) + (Dispatchers.IO) = (Dispatchers.IO, <span class="string">"name"</span>)</span><br></pre></td></tr></table></figure><p>这个覆盖操作就在fold方法的参数<strong>operation代码块</strong>中完成，通过<strong>minusKey</strong>方法删除掉重复元素，前面讲过当调用CombinedContext的fold方法时，会从left到right到访问所有的element，即会从left到right的把每一个element传入operation方法中，作为operation方法的第二个参数，而operation方法第一个参数acc的初始值为fold方法传入的initial值，然后它会不断的更新，每次更新的值为上一次调用operation方法的返回值，所以当两个CoroutineContext相加时，puls方法可以理解为下面的伪代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> acc = 左边的CoroutineContext</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> element <span class="keyword">in</span> 右边的CoroutineContext)&#123;</span><br><span class="line">   acc = operation(acc, element)<span class="comment">//operation操作中会让element覆盖掉acc中与element相同的元素</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> acc<span class="comment">//所以plus方法最终返回的CoroutineContext是不存在key相同的element的</span></span><br></pre></td></tr></table></figure><p>所以puls方法最终返回的CoroutineContext是不存在key相同的element的，+号右边的CoroutineContext中的元素会覆盖+号左边的CoroutineContext中的含有相同key的元素，这像是Set的特性。</p><p>现在我们再看回简化前的plus方法，它里面有个对ContinuationInterceptor的处理，目的是让ContinuationInterceptor在每次相加后都能变成CoroutineContext中的<strong>最后</strong>一个元素， ContinuationInterceptor它也是继承自Element，通常叫做协程上下文拦截器，它的主要作用是在协程执行前拦截它，从而在协程执行前做出一些其他的操作，前面我们讲到CoroutineDispatcher它本身也继承自ContinuationInterceptor，ContinuationInterceptor有一个interceptContinuation方法用于返回拦截协程的行为，而这个行为就是前面我们所讲到Dispatchers.Unconfined时的<strong>DispatchedContinuation</strong>，DispatchedContinuation在恢复协程前根据协程的CoroutineDispatcher类型做出不同的协程分派行为，通过把ContinuationInterceptor放在最后面，协程在查找上下文的element时，总能最快找到拦截器，避免了递归查找，从而让拦截行为前置执行。</p><h2 id="自定义CoroutineContext元素"><a href="#自定义CoroutineContext元素" class="headerlink" title="自定义CoroutineContext元素"></a>自定义CoroutineContext元素</h2><p>通过前面对CoroutineContext结构的介绍，我们知道CoroutineContext中的Element和Key是一一对应的，我们可以自定义Element和对应的Key把它们放进协程的CoroutineContext中，然后在适当的时候从CoroutineContext中根据Key取出我们自定义的Element并执行相应的逻辑，你可以把协程的CoroutineContext简单地类比为线程的<a href="https://blog.csdn.net/Rain_9155/article/details/103447399" target="_blank" rel="noopener">ThreadLocal</a>，CoroutineContext保存的是跟协程运行相关的上下文信息，而ThreadLocal保存的是跟线程相关的上下文信息，与线程的ThreadLocal不同的是协程的CoroutineContext的是<strong>不可变的</strong>而线程的ThreadLocal是<strong>可变的</strong>，所以我们每次对CoroutineContext的修改返回的都是一个新的CoroutineContext，自定义的Element推荐继承自<strong>AbstractCoroutineContextElement</strong>，例如应用中有些方法需要登陆后才能调用，所以我们可以自定义一个名为的User的Element：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(<span class="keyword">val</span> name: String) : AbstractCoroutineContextElement(User) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> Key : CoroutineContext.Key&lt;User&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在启动协程时根据是否登陆把用户信息保存到CoroutineContext中：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">mian</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">val</span> context = <span class="keyword">if</span>(isLogin) &#123;</span><br><span class="line">        User(<span class="string">"rain9155"</span>) + Dispatchers.Main</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        Dispatchers.Main</span><br><span class="line">    &#125;</span><br><span class="line">    GlobalScope.launch(context) &#123;</span><br><span class="line">        <span class="comment">//...调用其他方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在执行每个需要登陆态的方法前都检查一下当前协程的CoroutineContext中是否有登陆后的用户信息：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">performAction</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> name = coroutineContext[User]?.name ?: <span class="keyword">throw</span> IllegalAccessException(<span class="string">"unauthorized"</span>)</span><br><span class="line">    <span class="comment">//...根据登陆后的用户信息执行其他操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>coroutineContext</strong>是kotlin.coroutines包中的一个字段，可以获取当前运行协程的上下文，在每个suspend方法中都可以访问这个字段，同时由于User的Key是一个伴生对象，所以我们可以直接通过User名使用Key实例。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文主要介绍了kotlin协程的CoroutineContext的元素组成和结构，CoroutineContext它是一个K-V数据结构，保存了跟协程相关联的运行上下文例如协程的线程调度策略、异常处理逻辑、日志记录、运行标识、名字等，理解CoroutineContext对于理解协程使用有很大的帮助，因为协程的启动时就离不开CoroutineContext，同时如果你以后想要更深入的学习协程，例如协程的调度过程、Continuation概念、suspend关键字等，本篇文章也能给你一个抛砖引玉的效果。</p><p>以上就是本文的所有内容，希望大家有所收获！</p><p>参考文章：</p><p><a href="https://www.jianshu.com/p/9f720b9ccdea" target="_blank" rel="noopener">开始使用Kotlin协程</a></p><p><a href="https://medium.com/androiddevelopers/coroutines-first-things-first-e6187bf3bb21" target="_blank" rel="noopener">协程中的核心概念</a></p><p><a href="https://medium.com/androiddevelopers/exceptions-in-coroutines-ce8da1ec060c" target="_blank" rel="noopener">协程中的异常处理</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;从kotlin1.1开始，协程就被添加到kotlin中作为实验性功能，直到kotlin1.3，协程在kotlin中的api已经基本稳定下来了
      
    
    </summary>
    
    
      <category term="kotlin" scheme="http://yoursite.com/categories/kotlin/"/>
    
    
      <category term="协程" scheme="http://yoursite.com/tags/%E5%8D%8F%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>自定义Gradle插件检测函数耗时</title>
    <link href="http://yoursite.com/2020/09/29/%E8%87%AA%E5%AE%9A%E4%B9%89Gradle%E6%8F%92%E4%BB%B6%E6%A3%80%E6%B5%8B%E5%87%BD%E6%95%B0%E8%80%97%E6%97%B6/"/>
    <id>http://yoursite.com/2020/09/29/%E8%87%AA%E5%AE%9A%E4%B9%89Gradle%E6%8F%92%E4%BB%B6%E6%A3%80%E6%B5%8B%E5%87%BD%E6%95%B0%E8%80%97%E6%97%B6/</id>
    <published>2020-09-29T08:35:11.000Z</published>
    <updated>2023-01-07T10:44:49.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>上一篇文章：<a href="https://rain9155.github.io/2020/06/26/Gradle的快速入门学习/" target="_blank" rel="noopener">Gradle的快速入门学习</a></li></ul><p>上一篇文章讲解了Gralde的入门知识，其中讲到了如何自定义Gralde插件，本文就通过<strong>Asm</strong>和<strong>Transfrom</strong>来自定义一个简单的Gradle插件，这个Gradle插件它可以统计方法的耗时，并当方法的耗时超过阀值时，通过Log打印在控制台上，然后我们通过Log可以定位到耗时方法的位置，帮助我们找出耗时方法，一个很简单的功能，原理也很简单，这其中需要使用到Asm知识和Transfrom知识，所以本文首先会介绍Asm和Transfrom相关知识点，最后再介绍如何使用Asm和Transform来实现这个Gradle插件，如果你对Asm和Transfrom已经很熟悉了，可以跳过这两节。</p><blockquote><p>源码位置在文末</p></blockquote><h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><p>由于这个是本地插件，所以直接在app/build.gradle中apply就行，然后可以通过time扩展配置它(可选)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: com.example.plugin.TimeCostPlugin</span><br><span class="line"><span class="comment">//函数耗时阀值为200ms，只对应用内的函数做插桩(排除第三方库)</span></span><br><span class="line">time&#123;</span><br><span class="line">    threshold = <span class="number">200</span></span><br><span class="line">    appPackage = <span class="string">'com.example.plugindemo'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后特意定义几个耗时函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method1();</span><br><span class="line">            method2();</span><br><span class="line">            method3();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">300</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后编译运行一下，就会在在控制台打印耗时函数的信息出来：</p><img src="/2020/09/29/%E8%87%AA%E5%AE%9A%E4%B9%89Gradle%E6%8F%92%E4%BB%B6%E6%A3%80%E6%B5%8B%E5%87%BD%E6%95%B0%E8%80%97%E6%97%B6/plugin1.png" class="" title="plugin"><p>点击方法行号就可以直接定位到耗时函数处。</p><h2 id="Asm"><a href="#Asm" class="headerlink" title="Asm"></a>Asm</h2><p>官方地址：<a href="https://asm.ow2.io/" target="_blank" rel="noopener">ASM</a></p><p>官方教程：<a href="https://asm.ow2.io/asm4-guide.pdf" target="_blank" rel="noopener">ASM4-guide(英文版)</a>、<a href="https://github.com/rain9155/PluginDemo/blob/master/doc/ASM4-guide(中文版).pdf" target="_blank" rel="noopener">ASM4-guide(中文版)</a></p><p>Asm是一个通用的Java字节码操作和分析框架, 它提供了一些简单易用的字节码操作方法，可以直接以二进制的形式修改现有类或动态生成类，简单地来说，Asm就是一个<strong>字节码操作框架</strong>，通过Asm，我们可以凭空生成一个类，或者修改现有的类，Asm相比其他的字节码操作框架如Javasist、AspectJ等的优点就是体积小、性能好、效率高，但它的缺点就是学习成本高，不过现在已经有IntelliJ插件<a href="https://plugins.jetbrains.com/auth#access_token=1597742367104.6ee795af-5472-40b9-b586-e882ffbff43d.7334cf3f-10b4-47a4-9e77-07e382775999.0-0-0-0-0%3B1.MC0CFQCMwSIpa4MbttWs1X4KLFJ%2BhHK7IAIUDDKsMI4XaK2gN2DfsT21DYjWgGc%3D&token_type=Bearer&expires_in=3600&scope=0-0-0-0-0&state=f0b84383-ffef-42c2-81a4-d201d8cdf52f" target="_blank" rel="noopener">ASM Bytecode Outline</a>可以替我们自动的生成Asm代码，所以对于想要入门Asm的人来说，它还是很简单的，我们只需要简单的学习一下Asm的相关api的含义，在此之前希望你已经对JVM的基础知识：类型描述符、方法描述符、Class文件结构有一定的了解。</p><p>Asm中有两类api，一种是基于树模型的tree api，一种是基于访问者模式的visitor api，其中visitor api是Asm最核心和基本的api，所以对于入门者，我们需要知道visitor api的使用，在visitor api中有三个主要的类用于<strong>读取、访问和生成</strong>class字节码：</p><ul><li><p><strong>ClassVisitor</strong>： 它是用于<strong>访问</strong>calss字节码，它里面有很多visitXX方法，每调用一个visitXX方法，就表示你在<strong>访问</strong>class文件的某个结构，如Method、Field、Annotation等，我们通常会扩展ClassVisitor，利用<a href="https://juejin.im/post/6844903978342301709" target="_blank" rel="noopener">代理模式</a>，把扩展的ClassVisitor的每一个visitXX方法的调用委托给另外一个ClassVisitor，在委托的前后我们可以添加自己的逻辑从而达到<strong>转换</strong>、<strong>修改</strong>这个类的class字节码的目的；</p></li><li><p><strong>ClassReader</strong>：它用于<strong>读取</strong>以字节数组形式给出的class字节码，它有一个<strong>accept</strong>方法，用于接收一个ClassVisitor实例，<strong>accept</strong>方法内部会调用ClassVisitor的visitXX方法来访问已<strong>读取</strong>的class文件；</p></li><li><p><strong>ClassWriter</strong>：它继承自ClassVisitor，可以以二进制形式<strong>生成</strong>class字节码，它有一个<strong>toByteArray</strong>方法，可以把已<strong>生成</strong>的二进制形式的class字节码转换成字节数组形式返回.</p><p>ClassVisitor、ClassReader、ClassWriter这三个之间一般都是需要组合使用的，下面通过一些实际的例子快速掌握，首先我们需要在build.gradle中引入Asm，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">//核心api，提供visitor api</span></span><br><span class="line">    implementation <span class="string">'org.ow2.asm:asm:7.0'</span></span><br><span class="line">    <span class="comment">//可选，提供了一些基于核心api的预定义类转换器</span></span><br><span class="line">    implementation <span class="string">'org.ow2.asm:asm-commons:7.0'</span></span><br><span class="line">    <span class="comment">//可选，提供了一些基于核心api的工具类</span></span><br><span class="line">    implementation <span class="string">'org.ow2.asm:asm-util:7.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1、读取、访问一个类"><a href="#1、读取、访问一个类" class="headerlink" title="1、读取、访问一个类"></a>1、读取、访问一个类</h3><p>读取类之前，首先介绍一下ClassVisitor中的visitXX方法，ClassVisitor的主要结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ASM的版本, 版本数值定义在Opcodes接口中，最低为ASM4，目前最新为ASM7</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> api;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//委托的ClassVisitor，可传空</span></span><br><span class="line">    <span class="keyword">protected</span> ClassVisitor cv;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassVisitor</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> api)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(api, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassVisitor</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> api, <span class="keyword">final</span> ClassVisitor cv)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">this</span>.api = api;</span><br><span class="line">        <span class="keyword">this</span>.cv = cv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表示开始访问这个类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(<span class="keyword">int</span> version, <span class="keyword">int</span> access, String name, String signature, String superName, String[] interfaces)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cv != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cv.visit(version, access, name, signature, superName, interfaces);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表示访问这个类的源文件名(如果有的话)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitSource</span><span class="params">(String source, String debug)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cv != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cv.visitSource(source, debug);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表示访问这个类的外部类(如果有的话)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitOuterClass</span><span class="params">(String owner, String name, String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cv != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cv.visitOuterClass(owner, name, desc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表示访问这个类的注解(如果有的话)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AnnotationVisitor <span class="title">visitAnnotation</span><span class="params">(String desc, <span class="keyword">boolean</span> visible)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cv != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cv.visitAnnotation(desc, visible);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表示访问这个类的内部类(如果有的话)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitInnerClass</span><span class="params">(String name, String outerName,</span></span></span><br><span class="line"><span class="function"><span class="params">            String innerName, <span class="keyword">int</span> access)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cv != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cv.visitInnerClass(name, outerName, innerName, access);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表示访问这个类的字段(如果有的话)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FieldVisitor <span class="title">visitField</span><span class="params">(<span class="keyword">int</span> access, String name, String desc,</span></span></span><br><span class="line"><span class="function"><span class="params">            String signature, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cv != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cv.visitField(access, name, desc, signature, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表示访问这个类的方法(如果有的话)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodVisitor <span class="title">visitMethod</span><span class="params">(<span class="keyword">int</span> access, String name, String desc,</span></span></span><br><span class="line"><span class="function"><span class="params">            String signature, String[] exceptions)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cv != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cv.visitMethod(access, name, desc, signature, exceptions);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表示结束对这个类的访问</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cv != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cv.visitEnd();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//...省略了一些其他visitXX方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，ClassVisitor的所有visitXX方法都把逻辑委托给另外一个ClassVisitor的visitorXX方法，我们知道，当一个类被加载进JVM中时，它的class的大概结构如下：</p><img src="/2020/09/29/%E8%87%AA%E5%AE%9A%E4%B9%89Gradle%E6%8F%92%E4%BB%B6%E6%A3%80%E6%B5%8B%E5%87%BD%E6%95%B0%E8%80%97%E6%97%B6/plugin2.png" class="" title="plugin"><p>所以把class文件结构和ClassVisitor中的方法做对比，可以发现，ClassVisitor中除了visitEnd方法，其他visitXX方法的访问都对应class文件的某个结构，如字段、方法、属性等，每个visitXX方法的参数都表示字段、方法、属性等的相关信息，例如：access表示修饰符、signature表示泛型、desc表示描述符、name表示名字或全权限定名，我们还注意到有些visitXX方法会返回一个XXVisitor类实例，这些XXVisitor类里面又会有类似的visitXX方法，这表示外部可以继续调用返回的XXVisitor实例的visitXX方法，从而继续访问相应结构中的子结构，这个后面再解释。</p><p>知道了ClassVisitor中方法的作用后，我们自定义一个类，使用<strong>ClassReader</strong>和<strong>ClassVisitor</strong>把这个类的信息读取、打印出来，首先自定义一个名为OuterClass的类，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mData = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OuterClass</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mData = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OuterClass类有注解、字段、方法、内部类，然后再自定义一个名为PrintClassVisitor的类扩展自ClassVisitor，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintClassVisitor</span> <span class="keyword">extends</span> <span class="title">ClassVisitor</span> <span class="keyword">implements</span> <span class="title">Opcodes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassPrinter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(ASM7);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(<span class="keyword">int</span> version, <span class="keyword">int</span> access, String name, String signature, String superName, String[] interfaces)</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">" extends "</span> + superName + <span class="string">"&#123;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitSource</span><span class="params">(String source, String debug)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" source name = "</span> + source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitOuterClass</span><span class="params">(String owner, String name, String descriptor)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" outer class = "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AnnotationVisitor <span class="title">visitAnnotation</span><span class="params">(String descriptor, <span class="keyword">boolean</span> visible)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" annotation = "</span> + descriptor);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitInnerClass</span><span class="params">(String name, String outerName, String innerName, <span class="keyword">int</span> access)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" inner class = "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FieldVisitor <span class="title">visitField</span><span class="params">(<span class="keyword">int</span> access, String name, String descriptor, String signature, Object value)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" field = "</span>  + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodVisitor <span class="title">visitMethod</span><span class="params">(<span class="keyword">int</span> access, String name, String descriptor, String signature, String[] exceptions)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" method = "</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中Opcodes接口中定义了很多常量，ASM7就是来自Opcodes，在每个visitXX方法把类的相关信息打印出来，最后使用ClassReader读取OuterClass的class字节码，在accept方法中传入ClassVisitor实例，完成对OuterClass的访问，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="comment">//创建ClassVisitor实例</span></span><br><span class="line">  ClassPrinter printClassVisitor = <span class="keyword">new</span> ClassPrinter();</span><br><span class="line">  <span class="comment">//从构造传入OuterClass的全权限定名，ClassReader会读取OuterClass字节码为字节数组</span></span><br><span class="line">  ClassReader classReader = <span class="keyword">new</span> ClassReader(OuterClass<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">  <span class="comment">//在ClassReader的accept传入ClassVisitor实例，开启访问，第二个参数表示访问模式，先不用管，传入0</span></span><br><span class="line">  classReader.accept(printClassVisitor, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行输出：</span><br><span class="line">com/example/plugindemo/OuterClass extends java/lang/Object&#123;</span><br><span class="line"> source name = OuterClass.java</span><br><span class="line"> annotation = Ljava/lang/Deprecated;</span><br><span class="line"> inner <span class="class"><span class="keyword">class</span> </span>= com/example/plugindemo/OuterClass$InnerClass</span><br><span class="line"> field = mData</span><br><span class="line"> method = &lt;init&gt;</span><br><span class="line"> method = getData</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ClassReader的构造除了可以接受类的全限定名，还可以接受class文件的输入流，最终都是把class字节码读取到内存中，变成字节数组，ClassReader的accept方法会利用内存偏移量解析构造中读取到的class字节码的字节数组，把class字节码的结构信息从字节数组中解析出来，然后调用传入的ClassVisitor实例的visitorXX方法来访问解析出来的结构信息，而且从运行输出的结果可以看出，accept方法中对于ClassVisitor的visitorXX方法的调用会有一定的顺序，以visit方法开头，以visitEnd方法结束，中间穿插调用其他的visitXX方法，其大概顺序如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">visit </span><br><span class="line">[visitSource] </span><br><span class="line">[visitOuterClass] </span><br><span class="line">[visitAnnotation]</span><br><span class="line">[visitInnerClass | visitField | visitMethod]</span><br><span class="line">visitEnd</span><br><span class="line"></span><br><span class="line"><span class="comment">//其中[]表示可选，｜表示平级</span></span><br></pre></td></tr></table></figure><h3 id="2、生成一个类"><a href="#2、生成一个类" class="headerlink" title="2、生成一个类"></a>2、生成一个类</h3><p>前面知道了ClassReader可以用来读取一个类，ClassVisitor可以用来访问一个类，而ClassWirter它可以凭空生成一个类，接下来我们来生成一个名为Person的接口，该接口结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String NAME = <span class="string">"rain9155"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用ClassWriter生成Person接口的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.objectweb.asm.Opcodes.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建一个ClassWriter，构造传入修改类的行为模式，传0就行</span></span><br><span class="line">    ClassWriter classWriter = <span class="keyword">new</span> ClassWriter(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//生成类的头部</span></span><br><span class="line">    classWriter.visit(V1_7, ACC_PUBLIC + ACC_ABSTRACT + ACC_INTERFACE, <span class="string">"com/example/plugindemo/Person"</span>, <span class="keyword">null</span>, <span class="string">"java/lang/Object"</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//生成文件名</span></span><br><span class="line">    classWriter.visitSource(<span class="string">"Person.java"</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//生成名为NAME，值为rain9155的字段</span></span><br><span class="line">    FieldVisitor fileVisitor = classWriter.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC, <span class="string">"NAME"</span>, <span class="string">"Ljava/lang/String;"</span>, <span class="keyword">null</span>, <span class="string">"rain9155"</span>);</span><br><span class="line">    fileVisitor.visitEnd();</span><br><span class="line"><span class="comment">//生成名为getAge，返回值为int的方法</span></span><br><span class="line">    MethodVisitor methodVisitor = classWriter.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, <span class="string">"getAge"</span>, <span class="string">"()I"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    methodVisitor.visitEnd();</span><br><span class="line"><span class="comment">//生成类完毕</span></span><br><span class="line">    classWriter.visitEnd();</span><br><span class="line">    <span class="comment">//生成的类可以通过toByteArray方法以字节数组形式返回</span></span><br><span class="line">    <span class="keyword">byte</span>[] bytes = classWriter.toByteArray();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>ClassWirter继承自ClassVisitor，它扩展了ClassVisitor的visitorXX方法，使得它具有<strong>生成class字节码</strong>的能力，最终toByteArray方法返回的字节数组可以通过ClassLoader动态加载为一个Class对象，由于我这里生成的是一个接口，所以getAge方法没有方法体，所以visitMethod方法返回的MethodVisitor只是简单的调用了visitEnd就完成了getAge方法头的生成，如果需要生成getAge方法的内部逻辑，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么在调用MethodVisitor的visitEnd方法之前，还需要调用MethodVisitor的其他visitXX方法来生成方法的内部逻辑，MethodVisitor的visitXX方法就是在模拟的JVM的字节码指令，例如入栈、出栈等，对于visitField方法返回的FieldVisitor和visitAnnotation方法返回的AnnotationVisitor的含义和MethodVisitor类似。</p><p>可以看到使用ClassWirter生成一个简单的接口的代码量就如此繁琐，如果这是一个类，并且类中的方法有方法体，代码会更加的复杂，所幸的是我们可以通过<a href="https://plugins.jetbrains.com/auth#access_token=1597742367104.6ee795af-5472-40b9-b586-e882ffbff43d.7334cf3f-10b4-47a4-9e77-07e382775999.0-0-0-0-0%3B1.MC0CFQCMwSIpa4MbttWs1X4KLFJ%2BhHK7IAIUDDKsMI4XaK2gN2DfsT21DYjWgGc%3D&token_type=Bearer&expires_in=3600&scope=0-0-0-0-0&state=f0b84383-ffef-42c2-81a4-d201d8cdf52f" target="_blank" rel="noopener">ASM Bytecode Outline</a>插件来完成这繁琐的过程，首先你要在你的AS或IntelliJ IDE中安装这个插件，然后在你想要查看的Asm代码的类<strong>右键 -&gt; Show Bytecode outline</strong>，就会在侧边窗口中显示这个类的字节码(Bytecode)和Asm代码(ASMified)，点击ASMified栏目就会显示这个类的Asm码，例如下图就是Person接口的通过插件生成的Asm代码：</p><img src="/2020/09/29/%E8%87%AA%E5%AE%9A%E4%B9%89Gradle%E6%8F%92%E4%BB%B6%E6%A3%80%E6%B5%8B%E5%87%BD%E6%95%B0%E8%80%97%E6%97%B6/plugin3.png" class="" title="plugin"><p>可以看到，使用ClassWriter来生成Person接口。</p><h3 id="3、转换一个类"><a href="#3、转换一个类" class="headerlink" title="3、转换一个类"></a>3、转换一个类</h3><p>ClassReader可以用来读取一个类，ClassVisitor可以用来访问一个类，ClassWirter可以生成一个类，所以当把它们三个组合在一起时，我们可以把<strong>class字节码通过ClassReader读取，把读取到的class字节码通过扩展的ClassVisitor转换，转换后，再通过ClassWirter重新生成这个类</strong>，就可以达到转换一个类的目的，下面我们把前面的OuterClass类的注解通过转换移除掉，首先自定义一个ClassVisitor，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoveAnnotationClassVisitor</span> <span class="keyword">extends</span> <span class="title">ClassVisitor</span> <span class="keyword">implements</span> <span class="title">Opcodes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RemoveAnnotationClassVisitor</span><span class="params">(ClassVisitor classVisitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(ASM7, classVisitor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AnnotationVisitor <span class="title">visitAnnotation</span><span class="params">(String descriptor, <span class="keyword">boolean</span> visible)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//返回null</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我只重写了ClassVisitor的visitAnnotation方法，在visitAnnotation方法中返回null，这样调用者就无法使用返回的AnnotationVisitor生成类的注解，然后使用这个RemoveAnnotationClassVisitor，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="comment">//读取OuterClass类的字节码到ClassReader</span></span><br><span class="line">ClassReader classReader = <span class="keyword">new</span> ClassReader(OuterClass<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">  <span class="comment">//定义用于生成类的ClassWriter</span></span><br><span class="line">  ClassWriter classWriter = <span class="keyword">new</span> ClassWriter(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//把ClassWriter传进RemoveAnnotationClassVisitor的构造中</span></span><br><span class="line">  RemoveAnnotationClassVisitor removeAnnotationClassVisitor = <span class="keyword">new</span> RemoveAnnotationClassVisitor(classWriter);</span><br><span class="line">    <span class="comment">//在ClassReader的accept方法中传入RemoveAnnotationClassVisitor实例，开启访问</span></span><br><span class="line">   classReader.accept(removeAnnotationClassVisitor, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//最终使用ClassWriter的toByteArray方法返回转换后的OuterClass类的字节数组</span></span><br><span class="line">  <span class="keyword">byte</span>[] bytes = classWriter.toByteArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码只是把前面所讲的读取、访问、生成一个类的知识结合在一起，ClassVisitor的构造可以传进一个ClassVisitor，从而代理传进的ClassVisitor，而ClassWriter是继承自ClassVisitor的，所以RemoveAnnotationClassVisitor代理了ClassWriter，RemoveAnnotationClassVisitor把OuterClass转换完后就交给了ClassWriter，最终我们可以通过ClassWriter的toByteArray方法返回转换后的OuterClass类的字节数组。</p><p>上面是只有简单的一个ClassVisitor进行转换的代码，如果我们把它扩展，我们还可以定义RemoveMethodClassVisitor、AddFieldClassVisitor等多个具有不同功能的ClassVisitor，然后把所有的ClassVisitor串成一条<strong>转换链</strong>，把ClassReader想象成头，ClassWriter想象成尾，中间是一系列的ClassVisitor，ClassReader把读取到的class字节码经过一系列的ClassVisitor转换后到达ClassWriter，最终被ClassWriter生成新的class，这个过程如图：</p><img src="/2020/09/29/%E8%87%AA%E5%AE%9A%E4%B9%89Gradle%E6%8F%92%E4%BB%B6%E6%A3%80%E6%B5%8B%E5%87%BD%E6%95%B0%E8%80%97%E6%97%B6/plugin4.png" class="" title="plugin"><p>Asm的入门知识就讲解到这里，如果想要了解更多关于Asm的知识请查阅开头给出的官方教程，下面我们来学习Transform相关知识。</p><h2 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h2><p>官网：<a href="https://developer.android.com/reference/tools/gradle-api/com/android/build/api/transform/Transform" target="_blank" rel="noopener">Transform</a></p><p>Transform是android gradle api中的一部分，它可以在android项目的.class文件编译为.dex文件之前，得到所有的.class文件，然后我们可以在Transform中对所有的.class文件进行处理，所以Transform提供了一种可以让我们得到android项目的字节码的能力，如图红色标志的位置为Transform的作用点：</p><img src="/2020/09/29/%E8%87%AA%E5%AE%9A%E4%B9%89Gradle%E6%8F%92%E4%BB%B6%E6%A3%80%E6%B5%8B%E5%87%BD%E6%95%B0%E8%80%97%E6%97%B6/plugin5.png" class="" title="plugin"><p>上图就是android打包流程的一部分，而android的打包流程是交给android gradle plugin完成的，所以如果我们想要自定义Transform，必须要注入到android gradle plugin中才能产生效果，而plugin的执行单元是Task，但Transform并不是Task，那么Transform是怎么被执行的呢？android gradle plugin会为每一个Transform创建对应的TransformTask，由相应的TransformTask执行相应的Transform。</p><p>接下来我们来介绍Transform，首先我们需要在build.gradle中引入Transform，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">   <span class="comment">//引用android gradle api, 里面包含transform api</span></span><br><span class="line">    implementation <span class="string">'com.android.tools.build:gradle:4.0.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为transform api是android gradle api的一部分，所以我们引入android gradle api就行，自定义一个名为MyTransform的Transform，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTransform</span> <span class="keyword">extends</span> <span class="title">Transform</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//用来生成TransformTask的名称</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MyTransform"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;QualifiedContent.ContentType&gt; getInputTypes() &#123;</span><br><span class="line">        <span class="comment">//输入类型</span></span><br><span class="line">        <span class="keyword">return</span> TransformManager.CONTENT_CLASS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;? <span class="keyword">super</span> QualifiedContent.Scope&gt; getScopes() &#123;</span><br><span class="line">        <span class="comment">//输入的作用域</span></span><br><span class="line">        <span class="keyword">return</span> TransformManager.SCOPE_FULL_PROJECT;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIncremental</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//是否开启增量编译</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(TransformInvocation transformInvocation)</span></span>&#123;</span><br><span class="line">        <span class="comment">//在这里处理class文件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Transform是一个抽象类，所以它会强制要求我们实现几个方法，还要重写transform方法，下面分别讲解这几个方法的含义：</p><h3 id="1、getName方法"><a href="#1、getName方法" class="headerlink" title="1、getName方法"></a>1、getName方法</h3><p>前面讲过android gradle plugin会为每一个Transform创建一个对应的TransformTask，而创建的TransformTask的名称一般的格式为transform<strong>XX1</strong>With<strong>XX2</strong>For<strong>XX3</strong>，其中XX1是inputType类型，XX2的值就是getName方法的返回值，而XX3的值就是当前构建环境的Build Variants，例如Debug、Release等，所以如果你自定义的的Transform名为MyTransform，Build Variants为Debug，inputType为Class文件，那么该Transform对应的Task名为transformClassesWithMyTransformForDebug。</p><h3 id="2、getInputTypes和getScopes方法"><a href="#2、getInputTypes和getScopes方法" class="headerlink" title="2、getInputTypes和getScopes方法"></a>2、getInputTypes和getScopes方法</h3><p>getInputTypes方法和getScopes方法都返回一个Set集合，其中集合的元素类型分别为ContentType接口和Scope枚举，在Transform中，<strong>ContentType</strong>表示Transform输入的<strong>类型</strong>，<strong>Scope</strong>表示Transform输入的<strong>作用域</strong>，Transform从ContentType和Scope这两个维度来<strong>过滤</strong>Transform的输入，某个输入只有同时满足了getInputTypes方法返回的ContentType集合和getScopes方法返回的Scope集合，才会被Transform消费。</p><p>在Transform中，主要有两种类型的输入，它们分别为CLASSES和RESOURCES，以实现了ContentType接口的枚举<a href="https://developer.android.com/reference/tools/gradle-api/com/android/build/api/transform/QualifiedContent.DefaultContentType" target="_blank" rel="noopener">DefaultContentType</a>表示，各枚举含义如下：</p><table><thead><tr><th>DefaultContentType</th><th>含义</th></tr></thead><tbody><tr><td>CLASSES</td><td>表示在jar或文件夹中的.class文件</td></tr><tr><td>RESOURCES</td><td>表示标准的java源文件</td></tr></tbody></table><p>同理，在Transform中，输入的作用域也以枚举<a href="https://developer.android.com/reference/tools/gradle-api/com/android/build/api/transform/QualifiedContent.Scope" target="_blank" rel="noopener">Scope</a>表示，主要有PROJECT、SUB_PROJECTS、EXTERNAL_LIBRARIES、TESTED_CODE、PROVIDED_ONLY这五种作用域，各枚举含义如下：</p><table><thead><tr><th>Scope</th><th>含义</th></tr></thead><tbody><tr><td>PROJECT</td><td>只处理当前项目</td></tr><tr><td>SUB_PROJECTS</td><td>只处理当前项目的子项目</td></tr><tr><td>EXTERNAL_LIBRARIES</td><td>只处理当前项目的外部依赖库</td></tr><tr><td>TESTED_CODE</td><td>只处理当前项目构建环境的测试代码</td></tr><tr><td>PROVIDED_ONLY</td><td>只处理当前项目使用provided-only依赖的库</td></tr></tbody></table><p>ContentType和Scope都可以分别进行组合，已Set集合的形式返回，在<strong>TransformManager</strong>类中定义了一些我们常用的组合，我们可以直接使用，如MyTransform的ContentType为<strong>CONTENT_CLASS</strong>， Scope为<strong>SCOPE_FULL_PROJECT</strong>，定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformManager</span> <span class="keyword">extends</span> <span class="title">FilterableStreamCollection</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;ContentType&gt; CONTENT_CLASS = ImmutableSet.of(CLASSES);</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;ScopeType&gt; SCOPE_FULL_PROJECT = ImmutableSet.of(Scope.PROJECT, Scope.SUB_PROJECTS, Scope.EXTERNAL_LIBRARIES);</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//...还有其他很多组合</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到CONTENT_CLASS由CLASSES组成，SCOPE_FULL_PROJECT由PROJECT、SUB_PROJECTS、EXTERNAL_LIBRARIES组成，所以MyTransform只会处理来自当前项目(包括子项目)和外部依赖库的.class文件输入。</p><h3 id="3、isIncremental方法"><a href="#3、isIncremental方法" class="headerlink" title="3、isIncremental方法"></a>3、isIncremental方法</h3><p>isIncremental方法的返回值表示当前Transform是否支持<strong>增量编译</strong>，返回true表示支持，其实在Gradle中只有Task才有增量编译这一说，Transform最终会被TransformTask执行，所以Transform是依赖Task来实现增量编译的，Gradle Task通过检测它的输入与输出来实现增量编译：当检测到输入有文件changed时，Gradle判定本次编译为<strong>增量编译</strong>，Task内部根据changed文件做增量输出，即只对changed文件产生输出；当检测到输入与上一次输入没有发生任何changed时，Gradle判定本次编译<strong>UP-TO-DATA</strong>，可以跳过执行；当检测到输出被deleted时，Gradle判定本次编译为<strong>全量编译</strong>，会触发该Task的全量输出，即对所有输入文件产生输出。</p><p>当Transform被判定为增量编译后，在transform方法中就可以根据输入文件的<strong><a href="https://developer.android.com/reference/tools/gradle-api/com/android/build/api/transform/Status" target="_blank" rel="noopener">Status</a></strong>来处理每个输入的文件产生增量输出，Status也是一个枚举，各枚举含义如下：</p><table><thead><tr><th>Status</th><th>含义</th></tr></thead><tbody><tr><td>NOTCHANGED</td><td>该文件自上次构建以来没有发生变化</td></tr><tr><td>ADDED</td><td>该文件为新增文件</td></tr><tr><td>CHANGED</td><td>该文件自上次构建以来发生变化(被修改)</td></tr><tr><td>REMOVED</td><td>该文件已被删除</td></tr></tbody></table><p>开启增量编译可以大大的提高Gradle的构建速度。</p><blockquote><p> 注意：如果你的isIncremental方法返回true，那么自定义的Transform的transform方法中必须提供对增量编译的支持，即根据Status来对输入的文件作出处理，否则增量编译是不生效的，这在后面的插件实现中可以看到如何提供对增量编译的支持。</p></blockquote><h3 id="4、transform方法"><a href="#4、transform方法" class="headerlink" title="4、transform方法"></a>4、transform方法</h3><p>transform方法就是Transform中处理输入的地方，TransformTask执行时就是执行Transform的transform方法，transform方法的参数是<strong>TransfromInvocation</strong>，它包含的当前Transform的输入和输出信息，可以使用TransfromInvocation的<strong>getInputs</strong>方法来获取Transform的输入，使用TransformInvocation的<strong>getOutputProvider</strong>方法来生成Transform的输出，还可以通过TransfromInvocation的<strong>isIncremental</strong>方法的返回值判断本次transform是否是增量编译。</p><p>TransfromInvocation的getInputs方法返回一个元素类型为<strong>TransformInput</strong>的集合，其中TransformInput可以获取两种类型的输入，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransformInput</span> </span>&#123;</span><br><span class="line">  <span class="comment">//getJarInputs方法返回JarInput集合</span></span><br><span class="line">    <span class="function">Collection&lt;JarInput&gt; <span class="title">getJarInputs</span><span class="params">()</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//getDirectoryInputs方法返回DirectoryInput集合</span></span><br><span class="line">    <span class="function">Collection&lt;DirectoryInput&gt; <span class="title">getDirectoryInputs</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种类型的输入又抽象为<strong>JarInput</strong>和<strong>DirectoryInput</strong>，JarInput代表输入为.Jar文件，DirectoryInput代表输入为文件夹类型，JarInput有一个<strong>getStatus</strong>方法来获取该jar文件的Status，而DirectoryInput<strong>getChangedFiles</strong>方法来获取一个Map&lt;File, Status&gt;集合，所以可以遍历这个Map集合，然后根据File对应的Status来对File进行增量处理。</p><p>TransfromInvocation的getOutputProvider方法返回一个<strong>TransformOutputProvider</strong>，它可以用来创建Transform的输出位置，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransformOutputProvider</span> </span>&#123;</span><br><span class="line">    <span class="comment">//删除所有输出</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据参数给的name、ContentType、Scope、Format来创建输出位置</span></span><br><span class="line">    <span class="function">File <span class="title">getContentLocation</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @NonNull String name,</span></span></span><br><span class="line"><span class="function"><span class="params">            @NonNull Set&lt;QualifiedContent.ContentType&gt; types,</span></span></span><br><span class="line"><span class="function"><span class="params">            @NonNull Set&lt;? <span class="keyword">super</span> QualifiedContent.Scope&gt; scopes,</span></span></span><br><span class="line"><span class="function"><span class="params">            @NonNull Format format)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用getContentLocation方法就可以创建一个输出位置并返回该位置代表的File实例，如果存在就直接返回，通过getContentLocation方法创建的输出位置一般位于<strong>/app/build/intermediates/transforms/build variants/transform名称/</strong>目录下，其中<strong>build variants</strong>就是当前的构建环境如debug、release等，<strong>Transform名称</strong>就是getName方法的返回值，例如在debug构建下MyTransform的输出位置就是/app/build/intermediates/transforms/debug/MyTransform/目录下，该目录下都是Transform输出的jar文件或文件夹，名称是以0、1、2、…递增的命名形式命名，调用deleteAll方法就可以把getContentLocation方法创建的输出位置下的所有文件删除掉。</p><p>所以如果不支持增量编译的话，transform方法里面一般会这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(TransformInvocation transformInvocation)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">//通过TransformInvocation的getInputs方法获取所有输入，是一个集合，TransformInput代表一个输入</span></span><br><span class="line">       Collection&lt;TransformInput&gt; transformInputs = transformInvocation.getInputs();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//通过TransformInvocation的getOutputProvider方法获取输出的提供者，通过TransformOutputProvider可以创建Transform的输出</span></span><br><span class="line">       TransformOutputProvider outputProvider = transformInvocation.getOutputProvider();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//遍历所有的输入，每一个输入里面包含jar和directory两种输入类型的文件集合</span></span><br><span class="line">       <span class="keyword">for</span>(TransformInput transformInput : transformInputs)&#123;</span><br><span class="line">           Collection&lt;JarInput&gt; jarInputs = transformInput.getJarInputs();</span><br><span class="line">           <span class="comment">//遍历，处理jar文件</span></span><br><span class="line">           <span class="keyword">for</span>(JarInput jarInput : jarInputs)&#123;</span><br><span class="line">               File dest = outputProvider.getContentLocation(</span><br><span class="line">                       jarInput.getName(),</span><br><span class="line">                       jarInput.getContentTypes(),</span><br><span class="line">                       jarInput.getScopes(),</span><br><span class="line">                       Format.JAR</span><br><span class="line">               );</span><br><span class="line">               <span class="comment">//这里只是简单的把jar文件复制到输出位置</span></span><br><span class="line">               FileUtils.copyFile(jarInput.getFile(), dest);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           Collection&lt;DirectoryInput&gt; directoryInputs = transformInput.getDirectoryInputs();</span><br><span class="line">           <span class="comment">//遍历，处理文件夹</span></span><br><span class="line">           <span class="keyword">for</span>(DirectoryInput directoryInput : directoryInputs)&#123;</span><br><span class="line">               File dest = outputProvider.getContentLocation(</span><br><span class="line">                       directoryInput.getName(),</span><br><span class="line">                       directoryInput.getContentTypes(),</span><br><span class="line">                       directoryInput.getScopes(),</span><br><span class="line">                       Format.DIRECTORY</span><br><span class="line">               );</span><br><span class="line">               <span class="comment">//这里只是简单的把文件夹中的所有文件递归地复制到输出位置</span></span><br><span class="line">               FileUtils.copyDirectory(directoryInput.getFile(), dest);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>就是获取到输入，遍历输入中的所有JarInput和DirectoryInput，然后把相应的输入简单地重定向到输出位置中，在这过程中，我们还可以获取jar文件和文件夹中的class文件，对class文件进行修改后再进行重定向到输出，这就达到了在编译期间修改字节码的目的，这也是后面插件实现的核心。</p><p>每一个Transform的输出会作为下一个Transform的输入，这些Transform会被串行执行，如下：</p><img src="/2020/09/29/%E8%87%AA%E5%AE%9A%E4%B9%89Gradle%E6%8F%92%E4%BB%B6%E6%A3%80%E6%B5%8B%E5%87%BD%E6%95%B0%E8%80%97%E6%97%B6/plugin6.png" class="" title="plugin"><p>现在对于Asm和Transform都有了一个大概的了解，就可以动手实现函数耗时检测插件。</p><h2 id="插件实现"><a href="#插件实现" class="headerlink" title="插件实现"></a>插件实现</h2><p>检测函数耗时很简单，只需要在每个方法的开头和结尾增加耗时检测的代码逻辑即可，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> startTime = System.currentTimeMillis();<span class="comment">//start</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">long</span> endTime = System.currentTimeMillis();<span class="comment">//end</span></span><br><span class="line">  <span class="keyword">long</span> costTime = endTime - startTime;</span><br><span class="line">  <span class="keyword">if</span>(costTime &gt; <span class="number">100</span>)&#123;</span><br><span class="line">    StackTraceElement thisMethodStack = (<span class="keyword">new</span> Exception()).getStackTrace()[<span class="number">0</span>];<span class="comment">//获得当前方法的StackTraceElement</span></span><br><span class="line">    Log.e(<span class="string">"TimeCost"</span>, String.format(</span><br><span class="line">      <span class="string">"===&gt; %s.%s(%s:%s)方法耗时 %d ms"</span>,</span><br><span class="line">      thisMethodStack.getClassName(), <span class="comment">//类的全限定名称</span></span><br><span class="line">      thisMethodStack.getMethodName(),<span class="comment">//方法名</span></span><br><span class="line">      thisMethodStack.getFileName(),  <span class="comment">//类文件名称</span></span><br><span class="line">      thisMethodStack.getLineNumber(),<span class="comment">//行号</span></span><br><span class="line">      costTime                        <span class="comment">//方法耗时</span></span><br><span class="line">    )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们不可能手动的替应用内的每个方法的开头结尾加上上述代码，应用内的方法太多了，所以我们需要Gradle插件替我们完成这重复的过程，在项目编译的过程中，通过Transform拿到项目中每个类的字节码，然后使用Asm对每个类的的每个方法的开头结尾增加上述函数耗时检测的字节码，如果你不知道自定义一个Gradle插件的步骤，请移步上一篇文章，我把Gradle插件的实现代码放在<strong>buildSrc</strong>目录下，整个项目的目录结构如下：</p><img src="/2020/09/29/%E8%87%AA%E5%AE%9A%E4%B9%89Gradle%E6%8F%92%E4%BB%B6%E6%A3%80%E6%B5%8B%E5%87%BD%E6%95%B0%E8%80%97%E6%97%B6/plugin7.png" class="" title="plugin"><p>有关Plugin和Transform实现的代码放在com.example.plugin下，有关Asm实现的代码放在com.example.asm下。</p><h3 id="1、自定义Plugin"><a href="#1、自定义Plugin" class="headerlink" title="1、自定义Plugin"></a>1、自定义Plugin</h3><p>自定义Plugin对应代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeCostPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当函数运行时间大于threshold阀值时判定为耗时函数，单位ms</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> sThreshold = <span class="number">100L</span>;</span><br><span class="line">    <span class="comment">//当package有值时，只打印package包内的耗时函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String sPackage = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(Project project)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过project实例注册一个名为time的扩展</span></span><br><span class="line">            Time time = project.getExtensions().create(<span class="string">"time"</span>, Time<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">//在project构建完成后获取time扩展中的赋值情况</span></span><br><span class="line">            project.afterEvaluate(project1 -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(time.getThreshold() &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    sThreshold = time.getThreshold();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(time.getAppPackage().length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    sPackage = time.getAppPackage();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//通过project实例获取android gradle plugin中的名为android的扩展实例</span></span><br><span class="line">            AppExtension appExtension = (AppExtension) project.getExtensions().getByName(<span class="string">"android"</span>);</span><br><span class="line">            <span class="comment">//调用android的扩展实例即appExtension的registerTransform方法往android gradle plugin中注册我们自定义的Transform</span></span><br><span class="line">            appExtension.registerTransform(<span class="keyword">new</span> TimeCostTransform());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (UnknownDomainObjectException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩展对应的bean类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Time</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> mThreshold = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">private</span> String mPackage = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Time</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getThreshold</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mThreshold;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setThreshold</span><span class="params">(<span class="keyword">long</span> threshold)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.mThreshold = threshold;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getAppPackage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mPackage;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAppPackage</span><span class="params">(String p)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.mPackage = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TimeCostPlugin做了两件事：</p><p>1、定义了一个名为time的扩展，扩展对应的bean类为Time类，通过这个扩展我们可以在build.gradle中配置我们的插件，在这里我定义了函数耗时阀值threshold和通过package过滤打印的函数，然后我们在app/build.gradle中就可以这样使用：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> com.example.plugin.TimeCostPlugin</span><br><span class="line"><span class="comment">//函数耗时阀值为200ms，只对应用内的函数做插桩(排除第三方库)</span></span><br><span class="line">time&#123;</span><br><span class="line">    threshold = <span class="number">200</span></span><br><span class="line">    filter = <span class="string">'com.example.plugindemo'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展属性的赋值情况要在project构建完毕后才能获取，所以注册了project的afterEvaluate回调，在里面获取time扩展属性的赋值情况。</p><p>2、把我们自定义的Transform注入到android gradle plugin中去，android gradle plugin的名为android的扩展对应的bean类为AppExtension类，AppExtension中有一个元素类型为Transform的List集合，我们调用registerTransform方法就是把TimeCostTransform放入到这个集合中，这个Transform集合会在android gradle plugin中被使用，android gradle plugin也注册了project的afterEvaluate回调，在回调中它会为每个Transform生成TransformTask.</p><h3 id="2、自定义Transform"><a href="#2、自定义Transform" class="headerlink" title="2、自定义Transform"></a>2、自定义Transform</h3><p>自定义Transform对应部分代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeCostTransform</span> <span class="keyword">extends</span> <span class="title">Transform</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = TimeCostTransform<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;<span class="comment">//类名</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TAG;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;QualifiedContent.ContentType&gt; getInputTypes() &#123;</span><br><span class="line">        <span class="keyword">return</span> TransformManager.CONTENT_CLASS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;? <span class="keyword">super</span> QualifiedContent.Scope&gt; getScopes() &#123;</span><br><span class="line">        <span class="keyword">return</span> TransformManager.SCOPE_FULL_PROJECT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIncremental</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(TransformInvocation transformInvocation)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"transform(), ---------------------------start------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        Collection&lt;TransformInput&gt; transformInputs = transformInvocation.getInputs();</span><br><span class="line">        TransformOutputProvider outputProvider = transformInvocation.getOutputProvider();</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//通过TransformInvocation的isIncremental方法判断本次Transform任务是否是增量，如果Transform的isIncremental方法返回false，TransformInvocation的isIncremental方法永远返回false</span></span><br><span class="line">        <span class="keyword">boolean</span> isIncremental = transformInvocation.isIncremental();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"transform(), isIncremental = "</span> + isIncremental);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果不是增量，就删除之前所有产生的输出，重头来过</span></span><br><span class="line">        <span class="keyword">if</span>(!isIncremental)&#123;</span><br><span class="line">            outputProvider.deleteAll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历所有的输入，每一个输入里面包含jar和directory两种输入类型的文件集合</span></span><br><span class="line">        <span class="keyword">for</span>(TransformInput transformInput : transformInputs)&#123;</span><br><span class="line">            Collection&lt;JarInput&gt; jarInputs = transformInput.getJarInputs();</span><br><span class="line">            <span class="comment">//遍历所有的jar文件输入</span></span><br><span class="line">            <span class="keyword">for</span>(JarInput jarInput : jarInputs)&#123;</span><br><span class="line">                <span class="comment">//判断本次Transform任务是否增量</span></span><br><span class="line">                <span class="keyword">if</span>(isIncremental)&#123;</span><br><span class="line">                    <span class="comment">//增量处理Jar文件</span></span><br><span class="line">                    handleJarIncremental(jarInput, outputProvider);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//非增量处理Jar文件</span></span><br><span class="line">                    handleJar(jarInput, outputProvider);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Collection&lt;DirectoryInput&gt; directoryInputs = transformInput.getDirectoryInputs();</span><br><span class="line">            <span class="comment">//遍历所有的directory文件输入</span></span><br><span class="line">            <span class="keyword">for</span>(DirectoryInput directoryInput : directoryInputs)&#123;</span><br><span class="line">                <span class="comment">//判断本次Transform任务是否增量</span></span><br><span class="line">                <span class="keyword">if</span>(isIncremental)&#123;</span><br><span class="line">                    <span class="comment">//增量处理目录文件</span></span><br><span class="line">                    handleDirectoryIncremental(directoryInput, outputProvider);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//非增量处理目录文件</span></span><br><span class="line">                    handleDirectory(directoryInput, outputProvider);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"transform(), ---------------------------end------------------------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//... </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据前面Transform的讲解，TimeCostTransform中每个方法的含义应该是比较好理解的了，其中最重要的就是transform方法，由于我在isIncremental方法返回了true表示TimeCostTransform支持增量编译，所以就需要在transform方法中需要根据是否是增量编译分别做出全量处理和增量处理，由于jar文件的处理和directory文件的处理雷同，下面就以jar文件的处理为例讲解，对于directory文件的处理可以查看文末源码链接：</p><p>1、handleJar方法，全量处理jar文件输入，产生新的输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleJar</span><span class="params">(JarInput jarInput, TransformOutputProvider outputProvider)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="comment">//获取输入的jar文件</span></span><br><span class="line">  File srcJar = jarInput.getFile();</span><br><span class="line">  <span class="comment">//使用TransformOutputProvider的getContentLocation方法根据输入构造输出位置</span></span><br><span class="line">  File destJar = outputProvider.getContentLocation(</span><br><span class="line">    jarInput.getName(),</span><br><span class="line">    jarInput.getContentTypes(),</span><br><span class="line">    jarInput.getScopes(),</span><br><span class="line">    Format.JAR</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">//遍历srcJar的所有内容, 在遍历的过程中把srcJar中的内容一条一条地复制到destJar</span></span><br><span class="line">  <span class="comment">//如果发现这个内容条目是class文件，就把它通过asm修改后再复制到destJar中</span></span><br><span class="line">  foreachJarWithTransform(srcJar, destJar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>handleJar方法中确定输入输出然后调用foreachJarWithTransform方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">foreachJarWithTransform</span><span class="params">(File srcJar, File destJar)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="keyword">try</span>(</span><br><span class="line">    JarFile srcJarFile = <span class="keyword">new</span> JarFile(srcJar);</span><br><span class="line">    JarOutputStream destJarFileOs = <span class="keyword">new</span> JarOutputStream(<span class="keyword">new</span> FileOutputStream(destJar))</span><br><span class="line">  )&#123;</span><br><span class="line">    Enumeration&lt;JarEntry&gt; enumeration = srcJarFile.entries();</span><br><span class="line">    <span class="comment">//遍历srcJar中的每一条条目</span></span><br><span class="line">    <span class="keyword">while</span> (enumeration.hasMoreElements())&#123;</span><br><span class="line">      JarEntry entry = enumeration.nextElement();</span><br><span class="line">      <span class="keyword">try</span>(</span><br><span class="line">        <span class="comment">//获取每一条条目的输入流</span></span><br><span class="line">        InputStream entryIs = srcJarFile.getInputStream(entry)</span><br><span class="line">      )&#123;</span><br><span class="line">        destJarFileOs.putNextEntry(<span class="keyword">new</span> JarEntry(entry.getName()));</span><br><span class="line">        <span class="keyword">if</span>(entry.getName().endsWith(<span class="string">".class"</span>))&#123;<span class="comment">//如果是class文件</span></span><br><span class="line">          <span class="comment">//通过asm修改源class文件</span></span><br><span class="line">          ClassReader classReader = <span class="keyword">new</span> ClassReader(entryIs);</span><br><span class="line">          ClassWriter classWriter = <span class="keyword">new</span> ClassWriter(<span class="number">0</span>);</span><br><span class="line">          TimeCostClassVisitor timeCostClassVisitor = <span class="keyword">new</span> TimeCostClassVisitor(classWriter);</span><br><span class="line">          classReader.accept(timeCostClassVisitor, ClassReader.EXPAND_FRAMES);</span><br><span class="line">          <span class="comment">//然后把修改后的class文件复制到destJar中</span></span><br><span class="line">          destJarFileOs.write(classWriter.toByteArray());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">//如果不是class文件</span></span><br><span class="line">          <span class="comment">//原封不动地复制到destJar中</span></span><br><span class="line">          destJarFileOs.write(IOUtils.toByteArray(entryIs));</span><br><span class="line">        &#125;</span><br><span class="line">        destJarFileOs.closeEntry();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于该输入是jar文件，而jar文件本质是一个zip文件，所以foreachJarWithTransform中就像在解压这个jar文件，然后遍历解压后的jar文件中的所有文件，通过后缀名判断该文件是否是.class文件，如果是.class文件就通过asm处理后输出，如果不是就是原封不动地复制到输出中去，逻辑还是很简单的，关于asm的处理在后面再讲。</p><p>2、handleJarIncremental方法, 增量处理jar文件输入, 可能产生新的输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleJarIncremental</span><span class="params">(JarInput jarInput, TransformOutputProvider outputProvider)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="comment">//获取输入文件的状态</span></span><br><span class="line">  Status status = jarInput.getStatus();</span><br><span class="line">  <span class="comment">//根据文件的Status做出不同的操作</span></span><br><span class="line">  <span class="keyword">switch</span> (status)&#123;</span><br><span class="line">    <span class="keyword">case</span> ADDED:</span><br><span class="line">    <span class="keyword">case</span> CHANGED:</span><br><span class="line">      handleJar(jarInput, outputProvider);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> REMOVED:</span><br><span class="line">      <span class="comment">//删除所有输出</span></span><br><span class="line">      outputProvider.deleteAll();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> NOTCHANGED:</span><br><span class="line">      <span class="comment">//do nothing</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>理解了前面handleJar方法的全量处理，那么handleJarIncremental方法中的增量处理就很好理解了，其实就是根据输入的jar文件的Status来做出不同处理，对于ADDED和CHANGED都判定为changed文件，只对changed文件做处理，所以直接调用handleJar方法处理就行，对于REMOVED表示输入被删除了，那么就删除对应的输出，对于NOTCHANGED表示输入没有变化，不做处理，跳过。</p><h3 id="3、asm处理class文件"><a href="#3、asm处理class文件" class="headerlink" title="3、asm处理class文件"></a>3、asm处理class文件</h3><p>前面transform方法中当判定为某个文件为class文件后就使用asm处理class文件，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(entry.getName().endsWith(<span class="string">".class"</span>))&#123;<span class="comment">//如果是class文件</span></span><br><span class="line">  <span class="comment">//通过asm修改源class文件</span></span><br><span class="line">  ClassReader classReader = <span class="keyword">new</span> ClassReader(entryIs);</span><br><span class="line">  ClassWriter classWriter = <span class="keyword">new</span> ClassWriter(<span class="number">0</span>);</span><br><span class="line">  TimeCostClassVisitor timeCostClassVisitor = <span class="keyword">new</span> TimeCostClassVisitor(classWriter);</span><br><span class="line">  classReader.accept(timeCostClassVisitor, ClassReader.EXPAND_FRAMES);</span><br><span class="line">  <span class="comment">//然后把修改后的class文件复制到destJar中</span></span><br><span class="line">  destJarFileOs.write(classWriter.toByteArray());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据前面asm的讲解，这是使用asm转换一个类的步骤，首先使用ClassReader读取这个class文件，然后调用ClassReader的accept方法使用TimeCostClassVisitor开启对class文件的访问，最终通过ClassWriter的toByteArray方法获取转换后的class字节流，所以对class文件修改的逻辑都在TimeCostClassVisitor中，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeCostClassVisitor</span> <span class="keyword">extends</span> <span class="title">ClassVisitor</span> <span class="keyword">implements</span> <span class="title">Opcodes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mPackage;<span class="comment">//包名</span></span><br><span class="line">    <span class="keyword">private</span> String mCurClassName;<span class="comment">//当前访问的类的全限定名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isExcludeOtherPackage;<span class="comment">//是否排除不属于package的类</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimeCostClassVisitor</span><span class="params">(ClassVisitor classVisitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(ASM7, classVisitor);</span><br><span class="line">        mPackage = TimeCostPlugin.sPackage;</span><br><span class="line">        <span class="keyword">if</span>(mPackage.length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            mPackage = mPackage.replace(<span class="string">"."</span>, <span class="string">"/"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        isExcludeOtherPackage = mPackage.length() &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(<span class="keyword">int</span> version, <span class="keyword">int</span> access, String name, String signature, String superName, String[] interfaces)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.visit(version, access, name, signature, superName, interfaces);</span><br><span class="line">        mCurClassName = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodVisitor <span class="title">visitMethod</span><span class="params">(<span class="keyword">int</span> access, String name, String descriptor, String signature, String[] exceptions)</span> </span>&#123;</span><br><span class="line">        MethodVisitor methodVisitor = <span class="keyword">super</span>.visitMethod(access, name, descriptor, signature, exceptions);</span><br><span class="line">        <span class="keyword">if</span>(isExcludeOtherPackage)&#123;</span><br><span class="line">           <span class="comment">//如果该方法对应的类在package中就处理</span></span><br><span class="line">            <span class="keyword">if</span>(mCurClassName.startsWith(mPackage) &amp;&amp; !<span class="string">"&lt;init&gt;"</span>.equals(name))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> TimeCostMethodVisitor(methodVisitor, access, descriptor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="string">"&lt;init&gt;"</span>.equals(name))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> TimeCostMethodVisitor(methodVisitor, access, descriptor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> methodVisitor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TimeCostClassVisitor继承自ClassVisitor，因为我们只需要修改class文件中的方法，所以只重写了ClassVisitor的visit方法和visitMethod方法，其中visit方法中获取了当前访问的类的全限定名，它在visitMethod方法中与TimeCostPlugin扩展获取的package包名结合判定这个类的方法是否需要被过滤掉，如果这个类不属于package中的类，那么就不对这个类的class文件的方法做修改，跳过，如果这个类属于package中的类，就返回TimeCostMethodVisitor，在TimeCostMethodVisitor中修改class文件的方法，所以对于class文件中方法的修改的逻辑都在TimeCostMethodVisitor中，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeCostMethodVisitor</span> <span class="keyword">extends</span> <span class="title">LocalVariablesSorter</span> <span class="keyword">implements</span> <span class="title">Opcodes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//局部变量</span></span><br><span class="line">  <span class="keyword">int</span> startTime, endTime, costTime, thisMethodStack;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TimeCostMethodVisitor</span><span class="params">(MethodVisitor methodVisitor, <span class="keyword">int</span> access, String desc)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(ASM7, access, desc, methodVisitor);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.visitCode();</span><br><span class="line">    <span class="comment">//...方法开头</span></span><br><span class="line">    <span class="comment">//long startTime = System.currentTimeMillis();</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitInsn</span><span class="params">(<span class="keyword">int</span> opcode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(opcode == RETURN)&#123;</span><br><span class="line">      <span class="comment">//...方法结尾</span></span><br><span class="line">      <span class="comment">//long endTime = System.currentTimeMillis();</span></span><br><span class="line">      <span class="comment">//long costTime = endTime - startTime;</span></span><br><span class="line">      <span class="comment">//if(costTime &gt; 100)&#123;</span></span><br><span class="line">      <span class="comment">//  StackTraceElement thisMethodStack = (new Exception()).getStackTrace()[0];//获得当前方法的StackTraceElement</span></span><br><span class="line">     <span class="comment">//   Log.e("TimeCost", String.format(</span></span><br><span class="line">     <span class="comment">//     "===&gt; %s.%s(%s:%s)方法耗时 %d ms",</span></span><br><span class="line">     <span class="comment">//     thisMethodStack.getClassName(), //类的全限定名称</span></span><br><span class="line">     <span class="comment">//     thisMethodStack.getMethodName(),//方法名</span></span><br><span class="line">     <span class="comment">//     thisMethodStack.getFileName(),  //类文件名称</span></span><br><span class="line">     <span class="comment">//     thisMethodStack.getLineNumber(),//行号</span></span><br><span class="line">     <span class="comment">//     costTime                        //方法耗时</span></span><br><span class="line">     <span class="comment">//   )</span></span><br><span class="line">     <span class="comment">//       );</span></span><br><span class="line">     <span class="comment">//&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">super</span>.visitInsn(opcode);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要做的就是在方法前后插入函数耗时检测逻辑的代码，而visitCode方法是开始生成方法字节码的时候调用，即方法开始时调用，而visitInsn方法在访问RETURN指令时就是表示访问到方法的return语句，即方法正常结束时调用，所以我们只需要在上述地方加入函数耗时检测逻辑的asm代码即可，asm会自动的替我们把asm代码转换为字节码，这样最终生成的方法字节码就会包含我们的函数耗时检测逻辑的字节码，TimeCostMethodVisitor继承自LocalVariablesSorter，而LocalVariablesSorter继承自MethodVisitor，LocalVariablesSorter扩展了MethodVisitor，使得我们很方便的在MethodVisitor的visitXX方法中通过asm代码使用局部变量，如：startTime、 endTime、 costTime、thisMethodStack。</p><p>那么我们可以通过前面介绍的ASM插件生成函数耗时检测的asm代码，如下：</p><img src="/2020/09/29/%E8%87%AA%E5%AE%9A%E4%B9%89Gradle%E6%8F%92%E4%BB%B6%E6%A3%80%E6%B5%8B%E5%87%BD%E6%95%B0%E8%80%97%E6%97%B6/plugin8.png" class="" title="plugin"><p>由于生成的asm代码篇幅太长截图不完全，去除onCreate方法头、结尾和super.onCreate(savedInstanceState)这句代码的asm代码，剩下的就属于函数耗时检测逻辑的asm代码，我做了一些精简，把一些无用的visitLabel、visitLineNumber去掉，然后把它复制到TimeCostMethodVisitor中，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeCostMethodVisitor</span> <span class="keyword">extends</span> <span class="title">LocalVariablesSorter</span> <span class="keyword">implements</span> <span class="title">Opcodes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//局部变量</span></span><br><span class="line">    <span class="keyword">int</span> startTime, endTime, costTime, thisMethodStack;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimeCostMethodVisitor</span><span class="params">(MethodVisitor methodVisitor, <span class="keyword">int</span> access, String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(ASM7, access, desc, methodVisitor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.visitCode();</span><br><span class="line">        <span class="comment">//long startTime = System.currentTimeMillis();</span></span><br><span class="line">        mv.visitMethodInsn(INVOKESTATIC, <span class="string">"java/lang/System"</span>, <span class="string">"currentTimeMillis"</span>, <span class="string">"()J"</span>, <span class="keyword">false</span>);</span><br><span class="line">        startTime = newLocal(Type.LONG_TYPE);</span><br><span class="line">        mv.visitVarInsn(LSTORE, startTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitInsn</span><span class="params">(<span class="keyword">int</span> opcode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(opcode == RETURN)&#123;</span><br><span class="line">            <span class="comment">//long endTime = System.currentTimeMillis();</span></span><br><span class="line">            mv.visitMethodInsn(INVOKESTATIC, <span class="string">"java/lang/System"</span>, <span class="string">"currentTimeMillis"</span>, <span class="string">"()J"</span>, <span class="keyword">false</span>);</span><br><span class="line">            endTime = newLocal(Type.LONG_TYPE);</span><br><span class="line">            mv.visitVarInsn(LSTORE, endTime);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//long costTime = endTime - startTime;</span></span><br><span class="line">            mv.visitVarInsn(LLOAD, endTime);</span><br><span class="line">            mv.visitVarInsn(LLOAD, startTime);</span><br><span class="line">            mv.visitInsn(LSUB);</span><br><span class="line">            costTime = newLocal(Type.LONG_TYPE);</span><br><span class="line">            mv.visitVarInsn(LSTORE, costTime);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断costTime是否大于sThreshold</span></span><br><span class="line">            mv.visitVarInsn(LLOAD, costTime);</span><br><span class="line">            mv.visitLdcInsn(<span class="keyword">new</span> Long(TimeCostPlugin.sThreshold));<span class="comment">//阀值由TimeCostPlugin的扩展属性threshold控制</span></span><br><span class="line">            mv.visitInsn(LCMP);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//if costTime &lt;= sThreshold,就跳到end标记处，否则继续往下执行</span></span><br><span class="line">            Label end = <span class="keyword">new</span> Label();</span><br><span class="line">            mv.visitJumpInsn(IFLE, end);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//StackTraceElement thisMethodStack = (new Exception()).getStackTrace()[0]</span></span><br><span class="line">            mv.visitTypeInsn(NEW, <span class="string">"java/lang/Exception"</span>);</span><br><span class="line">            mv.visitInsn(DUP);</span><br><span class="line">            mv.visitMethodInsn(INVOKESPECIAL, <span class="string">"java/lang/Exception"</span>, <span class="string">"&lt;init&gt;"</span>, <span class="string">"()V"</span>, <span class="keyword">false</span>);</span><br><span class="line">            mv.visitMethodInsn(INVOKEVIRTUAL, <span class="string">"java/lang/Exception"</span>, <span class="string">"getStackTrace"</span>, <span class="string">"()[Ljava/lang/StackTraceElement;"</span>, <span class="keyword">false</span>);</span><br><span class="line">            mv.visitInsn(ICONST_0);</span><br><span class="line">            mv.visitInsn(AALOAD);</span><br><span class="line">            thisMethodStack = newLocal(Type.getType(StackTraceElement<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">            mv.visitVarInsn(ASTORE, thisMethodStack);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Log.e("rain", String.format（"===&gt; %s.%s(%s:%s)方法耗时 %d ms", thisMethodStack.getClassName(), thisMethodStack.getMethodName(),thisMethodStack.getFileName(),thisMethodStack.getLineNumber(),costTime));</span></span><br><span class="line">            mv.visitLdcInsn(<span class="string">"TimeCost"</span>);</span><br><span class="line">            mv.visitLdcInsn(<span class="string">"===&gt; %s.%s(%s:%s)\u65b9\u6cd5\u8017\u65f6 %d ms"</span>);</span><br><span class="line">            mv.visitInsn(ICONST_5);</span><br><span class="line">            mv.visitTypeInsn(ANEWARRAY, <span class="string">"java/lang/Object"</span>);</span><br><span class="line">            mv.visitInsn(DUP);</span><br><span class="line">            mv.visitInsn(ICONST_0);</span><br><span class="line">            mv.visitVarInsn(ALOAD, thisMethodStack);</span><br><span class="line">            mv.visitMethodInsn(INVOKEVIRTUAL, <span class="string">"java/lang/StackTraceElement"</span>, <span class="string">"getClassName"</span>, <span class="string">"()Ljava/lang/String;"</span>, <span class="keyword">false</span>);</span><br><span class="line">            mv.visitInsn(AASTORE);</span><br><span class="line">            mv.visitInsn(DUP);</span><br><span class="line">            mv.visitInsn(ICONST_1);</span><br><span class="line">            mv.visitVarInsn(ALOAD, thisMethodStack);</span><br><span class="line">            mv.visitMethodInsn(INVOKEVIRTUAL, <span class="string">"java/lang/StackTraceElement"</span>, <span class="string">"getMethodName"</span>, <span class="string">"()Ljava/lang/String;"</span>, <span class="keyword">false</span>);</span><br><span class="line">            mv.visitInsn(AASTORE);</span><br><span class="line">            mv.visitInsn(DUP);</span><br><span class="line">            mv.visitInsn(ICONST_2);</span><br><span class="line">            mv.visitVarInsn(ALOAD, thisMethodStack);</span><br><span class="line">            mv.visitMethodInsn(INVOKEVIRTUAL, <span class="string">"java/lang/StackTraceElement"</span>, <span class="string">"getFileName"</span>, <span class="string">"()Ljava/lang/String;"</span>, <span class="keyword">false</span>);</span><br><span class="line">            mv.visitInsn(AASTORE);</span><br><span class="line">            mv.visitInsn(DUP);</span><br><span class="line">            mv.visitInsn(ICONST_3);</span><br><span class="line">            mv.visitVarInsn(ALOAD, thisMethodStack);</span><br><span class="line">            mv.visitMethodInsn(INVOKEVIRTUAL, <span class="string">"java/lang/StackTraceElement"</span>, <span class="string">"getLineNumber"</span>, <span class="string">"()I"</span>, <span class="keyword">false</span>);</span><br><span class="line">            mv.visitMethodInsn(INVOKESTATIC, <span class="string">"java/lang/Integer"</span>, <span class="string">"valueOf"</span>, <span class="string">"(I)Ljava/lang/Integer;"</span>, <span class="keyword">false</span>);</span><br><span class="line">            mv.visitInsn(AASTORE);</span><br><span class="line">            mv.visitInsn(DUP);</span><br><span class="line">            mv.visitInsn(ICONST_4);</span><br><span class="line">            mv.visitVarInsn(LLOAD, costTime);</span><br><span class="line">            mv.visitMethodInsn(INVOKESTATIC, <span class="string">"java/lang/Long"</span>, <span class="string">"valueOf"</span>, <span class="string">"(J)Ljava/lang/Long;"</span>, <span class="keyword">false</span>);</span><br><span class="line">            mv.visitInsn(AASTORE);</span><br><span class="line">            mv.visitMethodInsn(INVOKESTATIC, <span class="string">"java/lang/String"</span>, <span class="string">"format"</span>, <span class="string">"(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;"</span>, <span class="keyword">false</span>);</span><br><span class="line">            mv.visitMethodInsn(INVOKESTATIC, <span class="string">"android/util/Log"</span>, <span class="string">"e"</span>, <span class="string">"(Ljava/lang/String;Ljava/lang/String;)I"</span>, <span class="keyword">false</span>);</span><br><span class="line">            mv.visitInsn(POP);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//end标记处，即方法的末尾</span></span><br><span class="line">            mv.visitLabel(end);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.visitInsn(opcode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面每一句注释都表示了注释下面asm代码的含义，对于局部变量使用了LocalVariablesSorter的newLocal方法生成，其实如果你仔细观察生成的asm代码，它们还是很有规律的，使用MethodVisitor的visitXX方法生成方法字节码时它们的调用顺序如下（忽略注解注释）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[visitCode]</span><br><span class="line">[visitLabel | visitLineNumber | visitFrame | visitXXInsn | visitLocalVariable | visitTryCatchBlock]</span><br><span class="line">[visitMax]</span><br><span class="line">visitEnd</span><br><span class="line"></span><br><span class="line"><span class="comment">//其中[]表示可选，｜表示平级</span></span><br></pre></td></tr></table></figure><p>与ClassVisitor类似，但以visitCode开头，表示开始生成方法体字节码，中间调用visitLabel、visitXXInsn等生成方法体字节码，然后以一个visitMax结尾，最终一定要调用一个visitEnd结束，如果这个方法没有方法体，那么调用一个visitEnd就行。</p><p>到这里这个函数耗时检测插件就完成了，使用方法就和平时使用gradle插件一样。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这个gradle插件还是很简陋，还可以继续扩展它，例如耗时阀值支持ns、发现耗时函数时把函数的调用栈打印出来等，不过本文的目的还是主要学习自定义个gradle插件的过程，还有asm和transform知识， 其实android gradle api从3.6开始很多apk打包时用到的内置transform基本都变成了直接使用Task来实现，如DesugarTransform -&gt; DesugarTask, MergeClassesTransform -&gt; MergeClassesTask等，可能是为了提高构建效率，这也说明了transform本质是依赖task来完成的，它只是android gradle api提供给外部，方便外部操作字节码的工具，同时android gradle api中也有很多apk构建时用的的插件，如<a href="https://android.googlesource.com/platform/tools/base/+/refs/tags/gradle_3.4.0/build-system/gradle-core/src/main/java/com/android/build/gradle/AppPlugin.java" target="_blank" rel="noopener">AppPlugin</a>、<a href="https://android.googlesource.com/platform/tools/base/+/refs/tags/gradle_3.4.0/build-system/gradle-core/src/main/java/com/android/build/gradle/LibraryPlugin.java" target="_blank" rel="noopener">LibrayPlugin</a>等，我们编写gradle插件时也可以选择一个作为参考。</p><p>以上就是本文的全部内容！</p><p><a href="https://github.com/rain9155/PluginDemo" target="_blank" rel="noopener">本文源码地址</a></p><p>参考资料：</p><p><a href="https://www.jianshu.com/p/811b0d0975ef" target="_blank" rel="noopener">Android Gradle Plugin打包Apk过程中的Transform API</a></p><p><a href="http://quinnchen.cn/2018/09/13/2018-09-13-asm-transform/#timing-plugin" target="_blank" rel="noopener">一起玩转Android项目中的字节码</a></p><p><a href="https://juejin.im/post/6844903728525361165#heading-2" target="_blank" rel="noopener">一文读懂 AOP</a></p><p><a href="https://juejin.im/post/6844903844749508622#heading-9" target="_blank" rel="noopener">Android Gradle Plugin 主要流程分析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;上一篇文章：&lt;a href=&quot;https://rain9155.github.io/2020/06/26/Gradle的快速入门
      
    
    </summary>
    
    
      <category term="gradle" scheme="http://yoursite.com/categories/gradle/"/>
    
    
      <category term="gradle" scheme="http://yoursite.com/tags/gradle/"/>
    
      <category term="asm" scheme="http://yoursite.com/tags/asm/"/>
    
      <category term="aop" scheme="http://yoursite.com/tags/aop/"/>
    
  </entry>
  
  <entry>
    <title>Gradle的快速入门学习</title>
    <link href="http://yoursite.com/2020/06/26/Gradle%E7%9A%84%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/06/26/Gradle%E7%9A%84%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-06-26T14:36:22.000Z</published>
    <updated>2023-01-07T10:44:48.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Gradle是一个灵活和高效自动化构建工具，它的构建脚本采用Groovy或kotlin语言编写，Groovy或Kotlin都是基于JVM的语言，它们的语法和java的语法有很多的类似并且兼容java的语法，所以对于java开发者，只需很少的学习成本就能快速上手Gradle开发，同时Gradle也是Android官方的构建工具，学习Gradle，能够帮助我们更好的了解Android项目的构建过程，当项目构建出现问题时，我们也能更好的排查问题，所以Gradle的学习能帮助我们更好的管理Android项目，Gradle的官方地址如下：</p><p><a href="https://docs.gradle.org/current/userguide/userguide.html" target="_blank" rel="noopener">Gradle官网</a></p><p><a href="https://github.com/gradle/gradle" target="_blank" rel="noopener">Github地址</a></p><h2 id="Gradle的特点"><a href="#Gradle的特点" class="headerlink" title="Gradle的特点"></a>Gradle的特点</h2><p>1、Gradle构建脚本采用Groovy或Kotlin语言编写，如果采用Groovy编写，构建脚本后缀为.gradle，在里面可以使用Groovy语法，如果采用Kotlin编写，构建脚本后缀为.gradle.kts，在里面可以使用Kotlin语法；</p><p>2、因为Groovy或Kotlin都是面向对象语言，所以在Gradle中处处皆对象，Gradle的.gradle或.gradle.kts脚本本质上是一个Project对象，在脚本中一些带名字的配置项如buildscript、allprojects等本质上就是对象中的方法，而配置项后面的闭包{}就是参数，所以我们在使用这个配置项时本质上是在调用对象中的一个方法；</p><p>3、在Groovy或Kotlin中，函数和类一样都是一等公民，它们都提供了很好的闭包{}支持，所以它们很容易的编写出具有<a href="https://zh.wikipedia.org/wiki/%E9%A2%86%E5%9F%9F%E7%89%B9%E5%AE%9A%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">DSL</a>风格的代码，用DSL编写构建脚本的Gradle比其他采用xml编写构建脚本的构建工具如maven、Ant等的可读性更强，动态性更好，整体更简洁；</p><p>4、Gradle中主要有Project和Task对象，Project是Gradle中构建脚本的表示，一个构建脚本对应一个Project对象，Task是Gradle中最小的执行单元，它表示一个独立的任务，Project为Task提供了执行的上下文。</p><h2 id="Groovy基础入门"><a href="#Groovy基础入门" class="headerlink" title="Groovy基础入门"></a>Groovy基础入门</h2><p>本文的所有示例都是采用Groovy语言编写，在阅读本文前先简单的入门Groovy：</p><p><a href="https://blog.csdn.net/zhaoyanjun6/article/details/70313790" target="_blank" rel="noopener">Groovy 使用完全解析</a></p><p>下面主要讲Groovy与java的主要区别：</p><p>1、Groovy语句后面的分号可以忽略</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num1 = <span class="number">1</span></span><br><span class="line"><span class="keyword">int</span> num2 = <span class="number">2</span></span><br><span class="line"><span class="keyword">int</span> result = add(num1, num2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> add(<span class="keyword">int</span> a, <span class="keyword">int</span> b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、Groovy支持动态类型推导，使用def来定义变量和方法时可以不指定变量的类型和方法的返回值类型，同时定义方法时参数可以不指定类型</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> num1 = <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> num2 = <span class="number">2</span></span><br><span class="line"><span class="keyword">def</span> result = add(num1, num2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> add(a, b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、Groovy的方法调用传参时可以不添加括号，方法不指定return语句时，最后一行默认为返回值</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> result = add <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> add(a, b)&#123;</span><br><span class="line">  a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、Groovy可以用单、双、三引号来表示字符串，其中单引号表示普通字符串，双引号表示的字符串可以使用取值运算符<strong>${}</strong>，而<strong>$</strong>在单引号只只是表示一个普通的字符，三引号表示的字符串又称为模版字符串，它可以保留文本的换行和缩进格式，三引号同样不支持<strong>$</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> world = <span class="string">'world'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> str1 = <span class="string">'hello $&#123;world&#125;'</span></span><br><span class="line"><span class="keyword">def</span> str2 = <span class="string">"hello $&#123;world&#125;"</span></span><br><span class="line"><span class="keyword">def</span> str3 = <span class="string">'''hello</span></span><br><span class="line"><span class="string">&amp;&#123;world&#125;'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出：</span></span><br><span class="line"><span class="comment">//hello $&#123;world&#125;</span></span><br><span class="line"><span class="comment">//hello world</span></span><br><span class="line"><span class="comment">//hello</span></span><br><span class="line"><span class="comment">//&amp;&#123;world&#125;</span></span><br></pre></td></tr></table></figure><p>5、Groovy会为类中每个没有可见性修饰符的字段生成get/set方法，我们访问这个字段其实是调用它的get/set方法，同时如果类中的方法以get/set开头，我们也可以像普通字段一样访问这个方法</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line">    <span class="keyword">def</span> name</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">def</span> country</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">def</span> setNation(nation)&#123;</span><br><span class="line">        <span class="keyword">this</span>.country = nation</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">def</span> getNation()&#123;</span><br><span class="line">        <span class="keyword">return</span> country</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> person = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="comment">//访问字段</span></span><br><span class="line">person.name = <span class="string">'rain9155'</span></span><br><span class="line">println person.name</span><br><span class="line"><span class="comment">//像字段一样访问这个以get/set开头的方法</span></span><br><span class="line">person.nation = <span class="string">"china"</span></span><br><span class="line">println person.nation</span><br></pre></td></tr></table></figure><p>6、Groovy中的闭包是用<strong>{参数列表 -&gt; 代码体}</strong>表示的代码块，当参数 &lt;= 1个时，<strong>-&gt;</strong>箭头可以省略，同时当只有一个参数时，如果不指定参数名默认以<strong>it</strong>为参数名，在Groovy中闭包对应的类型是<a href="https://groovy-lang.org/closures.html" target="_blank" rel="noopener">Closure</a>，所以闭包可以作为参数传递，同时闭包有一个delegate字段,  通过delegate可以把闭包中的执行代码委托给任意对象来执行</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line">    <span class="keyword">def</span> name</span><br><span class="line">    <span class="keyword">def</span> age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> person = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="comment">//定义一个闭包</span></span><br><span class="line"><span class="keyword">def</span> closure = &#123;</span><br><span class="line">    name = <span class="string">'rain9155'</span></span><br><span class="line">    age = <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把闭包委托给person对象执行</span></span><br><span class="line">closure.delegate = person</span><br><span class="line"><span class="comment">//执行闭包，或者调用closure.call()也可以执行闭包</span></span><br><span class="line">closure()</span><br><span class="line"></span><br><span class="line"><span class="comment">//以上代码把闭包委托给person对象执行，所以闭包就执行时就处于person对象上下文</span></span><br><span class="line"><span class="comment">//所以闭包就可以访问到person对象中的name和age字段，完成赋值</span></span><br><span class="line">println person.name<span class="comment">//输出：rain9155</span></span><br><span class="line">println person.age<span class="comment">//输出：21</span></span><br></pre></td></tr></table></figure><p>在Gradle中很多地方都使用了闭包的委托机制，通过闭包完成一些特定对象的配置，在Gradle中，如果你没有指定闭包的delegate，delegate默认为当前项目的Project对象。</p><p>以上Groovy知识，认为对于有java基础的人来说，用于学习Gradle足够了，当然对于一些集合操作、文件操作等，等以后使用到时可以到<a href="http://www.groovy-lang.org/single-page-documentation.html" target="_blank" rel="noopener">Groovy官网</a>来查漏补缺。</p><h2 id="Gradle的安装配置"><a href="#Gradle的安装配置" class="headerlink" title="Gradle的安装配置"></a>Gradle的安装配置</h2><p>官方教程：<a href="https://gradle.org/install/" target="_blank" rel="noopener">Installing Gradle</a></p><p>安装Gradle前需要确保你的电脑已经配置好JDK，JDK的版本要求是8或更高，可以通过包管理器自动安装Gradle或手动下载Gradle安装两种方式，在Window平台下我推荐使用手动安装，在Mac平台下我推荐使用Homebrew包管理器自动安装：</p><h3 id="1、Window平台"><a href="#1、Window平台" class="headerlink" title="1、Window平台"></a>1、Window平台</h3><ul><li>1、在Gradle的<a href="https://gradle.org/releases/" target="_blank" rel="noopener">安装页面</a>选择一个Gradle版本，下载它的binary-only或complete版本，binary-only版本表示下载的Gradle压缩包只包含Gradle的源码，complete版本表示下载的Gradle压缩包包含Gradle的源码和源码文档说明，这里我下载了gradle-6.5-bin版本；</li><li>2、下载好Gradle后，把它解压到特定目录，如我这里解压到：D:/gradle，然后像配置java环境一样把D:/gradle/gradle-6.5/bin路径添加到系统的PATH变量下；</li><li>3、打开cmd，输入<code>gradle -v</code>校验是否配置成功，输出以下类似信息则配置成功.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\HY&gt;gradle -v</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Gradle 6.5</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Build time:   2020-06-02 20:46:21 UTC</span><br><span class="line">Revision:     a27f41e4ae5e8a41ab9b19f8dd6d86d7b384dad4</span><br><span class="line"></span><br><span class="line">Kotlin:       1.3.72</span><br><span class="line">Groovy:       2.5.11</span><br><span class="line">Ant:          Apache Ant(TM) version 1.10.7 compiled on September 1 2019</span><br><span class="line">JVM:          10.0.2 (<span class="string">"Oracle Corporation"</span> 10.0.2+13)</span><br><span class="line">OS:           Windows 10 10.0 amd64</span><br></pre></td></tr></table></figure><h3 id="2、Mac平台"><a href="#2、Mac平台" class="headerlink" title="2、Mac平台"></a>2、Mac平台</h3><ul><li>1、安装<a href="https://brew.sh/index_zh-cn" target="_blank" rel="noopener">Homebrew</a>；</li><li>2、打开终端，输入<code>brew install gradle</code>，它默认会下载安装binary-only版本;</li><li>3、当Homebrew安装Gradle完成后，在终端输入<code>gradle -v</code>校验是否安装成功.</li></ul><h2 id="Gradle的项目结构"><a href="#Gradle的项目结构" class="headerlink" title="Gradle的项目结构"></a>Gradle的项目结构</h2><p>Gradle项目可以使用Android Studio、IntelliJ IDEA等IDE工具或文本编辑器来编写，这里我以Mac平台为例采用文本编辑器配合命令行来编写，Window平台类似。</p><p>新建一个目录，如我这里为：～/GradleDemo，打开命令行，输入<code>cd ~/GradleDemo</code>切换到这个目录，然后输入<code>gradle init</code>，接着gradle会执行<code>init</code>这个task任务，它会让你选择生成的项目模版、编写脚本的语言、项目名称等，我选择了basic模版(即原始的Gradle项目)、Groovy语言、项目名称为GradleDemo，如下：</p><img src="/2020/06/26/Gradle%E7%9A%84%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/gradle1.png" class="" title="gradle1"><p>这样会<code>init</code>任务就会自动替你生成相应的项目模版，如下：</p><img src="/2020/06/26/Gradle%E7%9A%84%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/gradle2.png" class="" title="gradle1"><p>忽略掉以<strong>.</strong>开头的隐藏文件或目录，gradle init为我们自动生成了以下文件或目录：</p><h3 id="1、build-gradle"><a href="#1、build-gradle" class="headerlink" title="1、build.gradle"></a>1、build.gradle</h3><p>它表示Gradle的项目构建脚本，在里面我们可以通过Groovy来编写脚本，在Gradle中，一个build.gradle就对应一个项目，build.gradle放在Gradle项目的根目录下，表示它对应的是根项目，build.gradle放在Gradle项目的其他子目录下，表示它对应的是子项目，Gradle构建时会为每一个build.gradle创建一个对应的<a href="https://docs.gradle.org/current/dsl/org.gradle.api.Project.html#org.gradle.api.Project" target="_blank" rel="noopener">Project</a>对象，这样编写build.gradle时就可以使用Project接口中的方法。</p><h3 id="2、settings-gradle"><a href="#2、settings-gradle" class="headerlink" title="2、settings.gradle"></a>2、settings.gradle</h3><p>它表示Gradle的多项目配置脚本，存放在Gradle项目的根目录下，在里面可以通过include来决定哪些子项目会参与构建，Gradle构建时会为settings.gradle创建一个对应的<a href="https://docs.gradle.org/current/dsl/org.gradle.api.initialization.Settings.html#org.gradle.api.initialization.Settings" target="_blank" rel="noopener">Settings</a>对象，include也只是Settings接口中的一个方法。</p><h3 id="3、Gradle-Wrapper"><a href="#3、Gradle-Wrapper" class="headerlink" title="3、Gradle Wrapper"></a>3、Gradle Wrapper</h3><p><code>gradle init</code>执行时会同时执行<code>wrapper</code>任务，<code>wrapper</code>任务会创建gradle/wrapper目录，并创建gradle/wrapper目录下的gradle-wrapper.jar、gradle-wrapper.properties这两个文件，还同时创建gradlew、gradlew.bat这两个脚本，它们统称为Gradle Wrapper，是对Gradle的一层包装。</p><p>Gradle Wrapper的作用就是可以让你的电脑在<strong>不安装配置Gradle环境</strong>的前提下运行Gradle项目，例如当你的Gradle项目被用户A clone下来时，而用户A的电脑上没有安装配置Gradle环境，用户A通过Gradle构建项目时，Gradle Wrapper就会从指定下载位置下载Gradle，并解压到电脑的指定位置，然后用户A就可以在不配置Gradle系统变量的前提下在Gradle项目的命令行中运行gradlew或gradlew.bat脚本来使用gradle命令，假设用户A要运行<code>gradle -v</code>命令，在linux平台下只需要运行<code>./gradlew -v</code>，在window平台下只需要运行<code>gradlew -v</code>，只是把<code>gradle</code>替换成<code>gradlew</code>。</p><p>Gradle Wrapper的每个文件含义如下：</p><p><strong>1、gradlew</strong>：用于在linux平台下执行gradle命令的脚本；</p><p><strong>2、gradlew.bat</strong>：用于在window平台下执行gradle命令的脚本；</p><p><strong>3、gradle-wrapper.jar</strong>：包含Gradle Wrapper运行时的逻辑代码；</p><p><strong>4、gradle-wrapper.properties</strong>：用于指定Gradle的下载位置和解压位置；</p><p>gradle-wrapper.properties中各个字段解释如下：</p><table><thead><tr><th>字段名</th><th>解释</th></tr></thead><tbody><tr><td>distributionBase</td><td>下载的Gradle的压缩包解压后的主目录，为GRADLE_USER_HOME，在window中它表示<strong>C:/用户/你电脑登录的用户名/.gradle/</strong>，在mac中它表示<strong>～/.gradle/</strong></td></tr><tr><td>distributionPath</td><td>相对于distributionBase的解压后的Gradle的路径，为wrapper/dists</td></tr><tr><td>distributionUrl</td><td>Grade压缩包的下载地址，在这里可以修改下载的Gradle的版本和版本类型(binary或complete)，例如gradle-6.5-all.zip表示Gradle 6.5的complete版本，gradle-6.5-bin.zip表示Gradle 6.5的binary版本</td></tr><tr><td>zipStoreBase</td><td>同distributionBase，不过是表示存放下载的Gradle的压缩包的主目录</td></tr><tr><td>zipStorePath</td><td>同distributionPath，不过是表示存放下载的Gradle的压缩包的路径</td></tr></tbody></table><p>使用Gradle Wrapper后，就可以统一项目在不同用户电脑上的Gradle版本，同时不必让运行这个Gradle项目的人安装配置Gradle环境，提高了开发效率。</p><h2 id="Gradle的多项目配置"><a href="#Gradle的多项目配置" class="headerlink" title="Gradle的多项目配置"></a>Gradle的多项目配置</h2><p>现在我们创建的Gradle项目默认已经有一个根项目了，它的build.gradle文件就处于Gradle项目的根目录下，如果我们想要添加多个子项目，这时就需要通过settings.gradle进行配置。</p><p>首先我们在GradleDemo中创建多个文件夹，这里我创建了4个文件夹，分别为：subproject_1、subproject_2，subproject_3，subproject_4，然后在每个新建的文件夹下创建build.gradle文件，如下：</p><img src="/2020/06/26/Gradle%E7%9A%84%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/gradle3.png" class="" title="gradle1"><p>接着打开settings.gradle，添加如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include <span class="string">':subproject_1'</span>, <span class="string">':subproject_2'</span>, <span class="string">':subproject_3'</span>, <span class="string">':subproject_4'</span></span><br></pre></td></tr></table></figure><p>这样就完成了子项目的添加，打开命令行，切换到GradleDemo目录处，输入<code>gradle projects</code>，执行projects任务展示所有项目之间的依赖关系，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in ~/GradleDemo </span></span><br><span class="line">$ gradle projects     </span><br><span class="line"></span><br><span class="line">&gt; Task :projects</span><br><span class="line">Root project <span class="string">'GradleDemo'</span></span><br><span class="line">+--- Project <span class="string">':subproject_1'</span></span><br><span class="line">+--- Project <span class="string">':subproject_2'</span></span><br><span class="line">+--- Project <span class="string">':subproject_3'</span></span><br><span class="line">\--- Project <span class="string">':subproject_4'</span></span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL <span class="keyword">in</span> 540ms</span><br><span class="line">1 actionable task: 1 executed</span><br></pre></td></tr></table></figure><p>可以看到，4个子项目依赖于根项目，接下来我们来配置项目，配置项目一般在当前项目的build.gradle中进行，可以通过buildscript方法、repositories方法、dependencies方法等Project接口提供的方法进行配置，但是如果有多个项目时，而每个项目的某些配置又一样，那么在每个项目的build.gradle进行相同的配置是很浪费时间，而Gradle的Project接口为我们提供了allprojects和subprojects方法，在根项目的build.gradle中使用这两个方法可以全局的为所有子项目进行配置，allprojects和subprojects的区别是：<strong>allprojects的配置包括根项目而subprojects的配置不包括根项目</strong>，例如:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根项目的build.gradle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//为所有项目添加maven repo地址</span></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为所有子项目添加groovy插件</span></span><br><span class="line">subprojects &#123;</span><br><span class="line">    apply <span class="string">plugin:</span> <span class="string">'groovy'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Gradle构建的生命周期"><a href="#Gradle构建的生命周期" class="headerlink" title="Gradle构建的生命周期"></a>Gradle构建的生命周期</h2><p>当在命令行输入<code>gradle build</code>构建整个项目或<code>gradle task名称</code>执行某个任务时就会进行Gradle的构建，它的构建过程分为3个阶段：</p><p><strong>init(初始化阶段) -&gt; configure(配置阶段) -&gt; execute(执行阶段)</strong></p><ul><li><strong>init</strong>：初始化阶段主要是解析settings.gradle，生成Settings对象，确定哪些项目需要参与构建，为需要构建的项目创建Project对象；</li><li><strong>configure</strong>：配置阶段主要是解析build.gradle，配置init阶段生成的Project对象，构建根项目和所有子项目，同时生成和配置在build.gradle中定义的Task对象，构造Task的关系依赖图，关系依赖图是一个有向无环图；</li><li><strong>execute</strong>：根据configure阶段的关系依赖图执行Task.</li></ul><p>Gradle在上面3个阶段中每一个阶段的开始和结束都会hook一些监听，暴露给开发者使用，方便开发者在Gradle的不同生命周期阶段做一些事情。</p><p>settings.gradle和build.gradle分别代表Settings对象和Project对象，它们都有一个<a href="https://docs.gradle.org/current/dsl/org.gradle.api.invocation.Gradle.html#org.gradle.api.invocation.Gradle" target="_blank" rel="noopener">Gradle</a>对象，我们可以在Gradle项目根目录的settings.gradle或build.gradle中获取到Gradle对象，然后进行生命周期监听，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//build.gradle或settings.gradle</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.gradle.buildStarted &#123;</span><br><span class="line">    println <span class="string">"Gradle构建开始"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------init开始--------------------------------</span></span><br><span class="line"><span class="keyword">this</span>.gradle.settingsEvaluated &#123;</span><br><span class="line">    println <span class="string">"settings.gradle解析完成"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.gradle.projectsLoaded &#123;</span><br><span class="line">    println <span class="string">"所有项目从settings加载完成"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---------------------init结束--------------------------------</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//-------------------configure开始-----------------------------</span></span><br><span class="line"><span class="keyword">this</span>.gradle.beforeProject &#123;project -&gt;</span><br><span class="line">    <span class="comment">//每一个项目构建之前被调用</span></span><br><span class="line">    println <span class="string">"$&#123;project.name&#125;项目开始构建"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.gradle.afterProject &#123;project -&gt;</span><br><span class="line">    <span class="comment">//每一个项目构建完成被调用</span></span><br><span class="line">    println <span class="string">"$&#123;project.name&#125;项目构建完成"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.gradle.projectsEvaluated &#123;</span><br><span class="line">    println <span class="string">"所有项目构建完成"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.gradle.taskGraph.whenReady &#123;</span><br><span class="line">    println(<span class="string">"task图构建完成"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------configure结束-----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------execute开始-----------------------------</span></span><br><span class="line"><span class="keyword">this</span>.gradle.taskGraph.beforeTask &#123;task -&gt;</span><br><span class="line">    <span class="comment">//每个task开始执行时会调用这个方法</span></span><br><span class="line">    println(<span class="string">"$&#123;task.name&#125;task开始执行"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.gradle.taskGraph.afterTask &#123;task -&gt;</span><br><span class="line">    <span class="comment">//每个task执行结束时会调用这个方法</span></span><br><span class="line">    println(<span class="string">"$&#123;task.name&#125;task执行完成"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------execute结束-----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.gradle.buildFinished &#123;</span><br><span class="line">    println <span class="string">"Gradle构建结束"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面监听方法的放置顺序就是整个Gradle构建的顺序，但是要注意的是Gradle的buildStarted方法永远不会被回调，因为我们注册监听的时机太晚了，当解析settings.gradle或build.gradle时，Gradle就已经构建开始了，所以这个方法也被Gradle标记为废弃的了，因为我们没有机会监听到Gradle构建开始，同时如果你是在build.gradle中添加上面的所有监听，那么Gradle的settingsEvaluated和projectsLoaded方法也不会被回调，因为settings.gradle的解析是在build.gradle之前，在build.gradle中监听这两个方法的时机也太晚了。</p><blockquote><p>也可以通过Gradle对象的addBuildListener方法添加<a href="https://docs.gradle.org/current/javadoc/org/gradle/BuildListener.html" target="_blank" rel="noopener">BuildListener</a>来监听Gradle的整个生命周期回调</p></blockquote><p>上面是监听整个Gradle构建的生命周期回调监听，那么我怎么监听我的当前单个项目的构建开始和结束呢？只需要在你当前项目的build.gradle中添加：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//build.gradle</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.beforeEvaluate &#123;</span><br><span class="line">    println <span class="string">'项目开始构建'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.afterEvaluate &#123;</span><br><span class="line">    println <span class="string">'项目构建结束'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是要注意的是在根项目的build.gradle添加上述方法，其beforeEvaluate方法是无法被回调的，因为注册时机太晚，解析根项目的build.gradle时根项目已经开始构建了，但是子项目的build.gradle添加上述方法是可以监听到项目构建的开始和结束，因为根项目构建完成后才会轮到子项目的构建。</p><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><h3 id="1、Task的创建"><a href="#1、Task的创建" class="headerlink" title="1、Task的创建"></a>1、Task的创建</h3><p><a href="https://docs.gradle.org/current/dsl/org.gradle.api.Task.html#org.gradle.api.Task" target="_blank" rel="noopener">Task</a>是Gradle中最小执行单元，它是一个接口，默认实现类为<a href="https://docs.gradle.org/current/dsl/org.gradle.api.DefaultTask.html#org.gradle.api.DefaultTask" target="_blank" rel="noopener">DefaultTask</a>，在Project中提供了task方法来创建Task，所以Task的创建必须要处于Project上下文中，这里我在subproject_1/build.gradle中创建Task，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//subproject_1/build.gradle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过Project的task方法创建一个Task</span></span><br><span class="line">task task1&#123;</span><br><span class="line">  doFirst&#123;</span><br><span class="line">    println <span class="string">'one'</span></span><br><span class="line">  &#125;</span><br><span class="line">  doLast&#123;</span><br><span class="line">    println <span class="string">'two'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码通过task方法创建了一个名为task1的Task，在创建Task的同时可以通过闭包配置它的doFirst和doLast动作，doFirst和doLast都是Task中的方法，其中doFirst方法会在Task的action执行前执行，doLast方法会在Task的action执行后执行，而action就是Task的执行单元，在后面自定义Task会介绍到，除此之外还可以在创建Task之后再指定它的doFirst和doLast动作，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//subproject_1/build.gradle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过Project的task方法创建一个Task</span></span><br><span class="line"><span class="keyword">def</span> t = task task2</span><br><span class="line">t.doFirst &#123;</span><br><span class="line">  println <span class="string">'one'</span></span><br><span class="line">&#125;</span><br><span class="line">t.doLast&#123;</span><br><span class="line">  println <span class="string">'two'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面通过Project的task方法创建的Task默认被放在Project的<a href="https://docs.gradle.org/current/dsl/org.gradle.api.tasks.TaskContainer.html#org.gradle.api.tasks.TaskContainer" target="_blank" rel="noopener">TaskContainer</a>类型的容器中，我们可以通过Project的getTasks方法获取到这个容器，而TaskContainer提供了create方法来创建Task，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//subproject_1/build.gradle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过TaskContainer的create方法创建一个Task</span></span><br><span class="line">tasks.create(<span class="string">name:</span> <span class="string">'task3'</span>)&#123;</span><br><span class="line">  doFirst&#123;</span><br><span class="line">    println <span class="string">'one'</span></span><br><span class="line">  &#125;</span><br><span class="line">  doLast&#123;</span><br><span class="line">    println <span class="string">'two'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是创建Task最常用的几种方式，创建Task之后，就可以执行它，执行一个Task只需要把task名称接在<code>gradle</code>命令后，如下我在命令行输入<code>gradle task1</code>执行了task1:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in ~/GradleDemo </span></span><br><span class="line">$ gradle task1   </span><br><span class="line"></span><br><span class="line">&gt; Task :subproject_1:task1</span><br><span class="line">one</span><br><span class="line">two</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL <span class="keyword">in</span> 463ms</span><br><span class="line">1 actionable task: 1 executed</span><br></pre></td></tr></table></figure><p>如果你想精简输出的信息，只需要添加<code>-q</code>参数，如：<code>gradle -q task1</code>，这样输出就只包含task1的输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in ~/GradleDemo </span></span><br><span class="line">$ gradle -q task1</span><br><span class="line">one</span><br><span class="line">two</span><br></pre></td></tr></table></figure><p>如果要执行多个Task，多个task名称接在<code>gradle</code>命令后用空格隔开就行，如：<code>gradle task1 task2 task3</code>。</p><h3 id="2、Task的属性配置"><a href="#2、Task的属性配置" class="headerlink" title="2、Task的属性配置"></a>2、Task的属性配置</h3><p>Gradle为每个Task定义了默认的属性(Property)， 比如description、group、dependsOn、inputs、outputs等, 我们可以配置这些Property，如下配置Task的描述和分组：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//subproject_2/build.gradle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//我们可以在定义Task时对这些Property进行赋值</span></span><br><span class="line">task task1&#123;</span><br><span class="line">  group = <span class="string">'MyGroup'</span></span><br><span class="line">  description = <span class="string">'Hello World'</span></span><br><span class="line"></span><br><span class="line">  doLast&#123;</span><br><span class="line">    println <span class="string">"task分组：$&#123;group&#125;"</span></span><br><span class="line">    println <span class="string">"task描述：$&#123;description&#125;"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Gradle在执行一个Task之前，会先配置这个Task的Property，然后再执行这个Task的执行代码块，所以配置Task的代码块放在哪里都无所谓，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//subproject_2/build.gradle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在定义Task之后才对Task进行配置</span></span><br><span class="line">task task2&#123;</span><br><span class="line">  doLast&#123;</span><br><span class="line">    println <span class="string">"task分组：$&#123;group&#125;"</span></span><br><span class="line">    println <span class="string">"task描述：$&#123;description&#125;"</span> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">task2&#123;</span><br><span class="line">  group = <span class="string">'MyGroup'</span></span><br><span class="line">  description = <span class="string">'Hello World'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等效于task2</span></span><br><span class="line">task task3&#123;</span><br><span class="line">  doLast&#123;</span><br><span class="line">    println <span class="string">"task分组：$&#123;group&#125;"</span></span><br><span class="line">    println <span class="string">"task描述：$&#123;description&#125;"</span> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">task3.description = <span class="string">'Hello World!'</span></span><br><span class="line">task3.group = <span class="string">"MyGroup"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//等效于task3</span></span><br><span class="line">task task4&#123;</span><br><span class="line">  doLast&#123;</span><br><span class="line">    println <span class="string">"task分组：$&#123;group&#125;"</span></span><br><span class="line">    println <span class="string">"task描述：$&#123;description&#125;"</span> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">task4.configure&#123;</span><br><span class="line">  group = <span class="string">'MyGroup'</span></span><br><span class="line">  description = <span class="string">'Hello World'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过Task的<strong>dependsOn</strong>属性指定Task之间的依赖关系，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//subproject_2/build.gradle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Task时通过dependsOn声明Task之间的依赖关系</span></span><br><span class="line">task task5(<span class="string">dependsOn:</span> task4)&#123;</span><br><span class="line">  doLast&#123;</span><br><span class="line">    println <span class="string">'Hello World'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者在创建Task之后再声明task之间的依赖关系</span></span><br><span class="line">task4.dependsOn task3</span><br></pre></td></tr></table></figure><p>上述的依赖关系是task3 -&gt; task4 -&gt; task5，依赖的Task先执行，所以当我在命令行输入<code>gradle task5</code>执行task5时，输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in ~/GradleDemo </span></span><br><span class="line">$ gradle task5  </span><br><span class="line"></span><br><span class="line">&gt; Task :subproject_2:task3</span><br><span class="line">task分组：MyGroup</span><br><span class="line">task描述：Hello World!</span><br><span class="line"></span><br><span class="line">&gt; Task :subproject_2:task4</span><br><span class="line">task分组：MyGroup</span><br><span class="line">task描述：Hello World</span><br><span class="line"></span><br><span class="line">&gt; Task :subproject_2:task5</span><br><span class="line">Hello World</span><br><span class="line">task5task执行完成</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL <span class="keyword">in</span> 2s</span><br><span class="line">3 actionable tasks: 3 executed</span><br></pre></td></tr></table></figure><p>依次执行task3、 task4 、task5。</p><h3 id="3、自定义Task"><a href="#3、自定义Task" class="headerlink" title="3、自定义Task"></a>3、自定义Task</h3><p>前面创建的Task默认都是<a href="https://docs.gradle.org/current/dsl/org.gradle.api.DefaultTask.html#org.gradle.api.DefaultTask" target="_blank" rel="noopener">DefaultTask</a>类型，我们可以通过继承DefaultTask来自定义Task类型，Gradle中也内置了很多具有特定功能的Task，它们都间接继承自DefaultTask，如Copy(复制文件)、Delete(文件清理)等，我们可以直接在build.gradle中自定义Task，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//subproject_3/build.gradle</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">DefaultTask</span>&#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> message = <span class="string">'hello world from myCustomTask'</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@TaskAction</span></span><br><span class="line">  <span class="keyword">def</span> println1()&#123;</span><br><span class="line">    println <span class="string">"println1: $message"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@TaskAction</span></span><br><span class="line">  <span class="keyword">def</span> println2()&#123;</span><br><span class="line">    println <span class="string">"println2: $message"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在MyTask中，通过<strong>@TaskAction</strong>注解的方法就是该Task的action，action是Task最主要的组成，它表示Task的一个执行动作，当Task中有多个action时，多个action的执行顺序按照<strong>@TaskAction</strong>注解的方法放置的逆顺序，所以执行一个Task的过程就是：doFirst方法 -&gt; action方法 -&gt; doLast方法，在MyTask中定义了两个action，接下来我们使用这个Task，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//subproject_3/build.gradle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在定义Task时通过type指定Task的类型</span></span><br><span class="line">task myTask(<span class="string">type:</span> MyTask)&#123;</span><br><span class="line">  message = <span class="string">'custom message'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在定义Task时通过<strong>type</strong>指定Task的类型，同时还可以通过闭包配置MyTask中的message参数，在命令行输入<code>gradle myTask</code>执行这个Task，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in ~/GradleDemo </span></span><br><span class="line">$ gradle myTask        </span><br><span class="line"></span><br><span class="line">&gt; Task :subproject_3:myTask</span><br><span class="line">println2: custom message</span><br><span class="line">println1: custom message</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL <span class="keyword">in</span> 611ms</span><br><span class="line">1 actionable task: 1 executed</span><br></pre></td></tr></table></figure><p>我们自定义的Task本质上就是一个类，除了直接在build.gradle文件中编写自定义Task，还可以在Gradle项目的根目录下新建一个buildSrc目录，在buildSrc/src/main/[java/kotlin/groovy]目录中定义编写自定义Task，可以采用java、kotlin、groovy三种语句之一，或者在一个独立的项目中编写自定义Task然后发布到远程仓库托管平台，在后面自定义Plugin时会讲到这几种方式。</p><h3 id="4、让Task支持增量式构建"><a href="#4、让Task支持增量式构建" class="headerlink" title="4、让Task支持增量式构建"></a>4、让Task支持增量式构建</h3><p>上述我们自定义的Task每次执行时，它的action都会被执行，进行全量构建，其实Gradle支持增量式构建的Task，增量式构建就是<strong>当Task的输入和输出没有变化时，跳过action的执行，当Task输入或输出发生变化时，在action中只对发生变化的输入或输出进行处理</strong>，这样就可以避免一个没有变化的Task被反复构建，还有当Task发生变化时只处理变化部分，这样就会提高整个Gradle的构建效率，大大缩短整个Gradle的构建时间，所以当我们编写复杂的Task时，让Task支持增量式构建是很有必要的，让Task支持增量式构建只需要做到两步：</p><p>1、让Task的inputs和outputs参与Gradle的<a href="https://docs.gradle.org/current/userguide/more_about_tasks.html#sec:up_to_date_checks" target="_blank" rel="noopener">Up-to-date检查</a>；</p><p>2、让Task的action支持<a href="https://docs.gradle.org/current/userguide/custom_tasks.html#incremental_tasks" target="_blank" rel="noopener">增量式构建</a>;</p><p>下面我们通过这两步自定义一个简单的、支持增量式构建的Copy任务，这个Copy任务的作用是把输入的文件复制到输出的位置中：</p><p>首先我们要让Copy任务的inputs和outputs参与Gradle的Up-to-date检查，每一个Task都有inputs和outputs属性，它们的类型分别为<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/TaskInputs.html" target="_blank" rel="noopener">TaskInputs</a>和<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/TaskOutputs.html" target="_blank" rel="noopener">TaskOutputs</a>，Task的inputs和outputs主要有以下三种类型：</p><ul><li>可序列化类型：可序列化类型是指实现了Serializable的类或者一些基本类型如int、string等；</li><li>文件类型：文件类型是指标准的<a href="https://docs.oracle.com/javase/8/docs/api/java/io/File.html" target="_blank" rel="noopener">java.io.File</a>或者Gradle衍生的文件类型如<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/file/FileCollection.html" target="_blank" rel="noopener">FileCollection</a>、<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/file/FileSystemLocation.html" target="_blank" rel="noopener">FileSystemLocation</a>等；</li><li>自定义类型：自定义类型是指自己定义的类，这个类含有Task的部分输入和输出属性，或者说任务的部分输入和输出属性嵌套在这个类中.</li></ul><p>我们可以在自定义Task时通过<strong>注解</strong>指定Task的inputs和outputs，通过注解指定的inputs和outputs会参与Gradle的Up-to-date检查，它是编写增量式Task的前提，Up-to-date检查是指Gradle每次执行Task前都会检查Task的输入和输出，如果一个Task的输入和输出自上一次构建以来没有发生变化，Gradle就判定这个Task是可以跳过执行的，这时你就会看到Task构建旁边会有一个<strong>UP-TO-DATE</strong>文本，Gradle提供了很多注解让我们指定Task的inputs和outputs，<strong>常用</strong>的如下：</p><table><thead><tr><th>注解</th><th>对应的类型</th><th>含义</th></tr></thead><tbody><tr><td>@<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/Input.html" target="_blank" rel="noopener">Input</a></td><td>可序列化类型</td><td>指单个输入可序列化的值，如基本类型int、string或者实现了Serializable的类</td></tr><tr><td>@<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/InputFile.html" target="_blank" rel="noopener">InputFile</a></td><td>文件类型</td><td>指单个输入文件，不表示文件夹，如File、RegularFile等</td></tr><tr><td>@<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/InputDirectory.html" target="_blank" rel="noopener">InputDirectory</a></td><td>文件类型</td><td>指单个输入文件夹，不表示文件，如File、Directory等</td></tr><tr><td>@<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/InputFiles.html" target="_blank" rel="noopener">InputFiles</a></td><td>文件类型</td><td>指多个输入的文件或文件夹，如FileCollection、FileTree等</td></tr><tr><td>@<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/OutputFile.html" target="_blank" rel="noopener">OutputFile</a></td><td>文件类型</td><td>指单个输出文件，不表示文件夹，如File、RegularFile等</td></tr><tr><td>@<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/OutputDirectory.html" target="_blank" rel="noopener">OutputDirectory</a></td><td>文件类型</td><td>指单个输出文件夹，不表示文件，如File、Directory等</td></tr><tr><td>@<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/OutputFiles.html" target="_blank" rel="noopener">OutputFiles</a></td><td>文件类型</td><td>指多个输出的文件，如FileCollection、Map&lt;String, File&gt;等</td></tr><tr><td>@<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/OutputDirectories.html" target="_blank" rel="noopener">OutputDirectories</a></td><td>文件类型</td><td>指多个输出的文件夹，如FileCollection、Map&lt;String, File&gt;等</td></tr><tr><td>@<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/Nested.html" target="_blank" rel="noopener">Nested</a></td><td>自定义类型</td><td>指一种自定义的类，这个类它可能没有实现Serializable，但这个类里面至少有一个属性使用本表中的一个注解标记，即这个类会含有Task的输入或输出</td></tr><tr><td>@<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/Internal.html" target="_blank" rel="noopener">Internal</a></td><td>任何类型</td><td>它可以用在可序列化类型、文件类型、还有自定义类型上，它指该属性只在Task的内部使用，即不是Task的输入也不是Task的输出，通过@Internal注解的属性不参与Up-to-date检查</td></tr><tr><td>@<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/Optional.html" target="_blank" rel="noopener">Optional</a></td><td>任何类型</td><td>它可以用在可序列化类型、文件类型、还有自定义类型上，它指该属性是可选的，通过@Optional注解的属性可以不为它赋值，关闭校验</td></tr><tr><td>@<a href="https://docs.gradle.org/current/javadoc/org/gradle/work/Incremental.html" target="_blank" rel="noopener">Incremental</a></td><td>Provider&lt;FileSystemLocation&gt; 或者 FileCollection</td><td>它和@InputFiles或@InputDirectory一起使用，它用来指示Gradle跟踪文件属性的更改，通过@Incremental注解的文件属性可以通过InputChanges的getFileChanges方法查询文件的更改，帮助实现增量构建Task</td></tr><tr><td>@<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/SkipWhenEmpty.html" target="_blank" rel="noopener">SkipWhenEmpty</a></td><td>文件类型</td><td>它和@InputFiles或@InputDirectory一起使用，它用来告诉Gradle如果相应的文件或文件夹为空就跳过该Task，通过@SkipWhenEmpty注解的所有输入属性如果都为空，就会导致Gradle跳过这个Task，从而在控制台产出一个<strong>NO-SOURCE</strong>输出结果</td></tr></tbody></table><p>我们自定义Task时可以使用表中的注解来指定输入和输出，其中@InputXX是用来指定输入属性，@OuputXX是用来指定输出属性，@Nested是用来指定自定义类，这个类里面至少含有一个使用@InputXX或@OuputXX指定的属性，而@Internal和@Optional是可以用来指定输入或输出的，最后的@Incremental和@SkipWhenEmpty是用来与@InputFiles或@InputDirectory一起使用的，用于支持增量式构建任务，后面会讲，还有一点要注意的是这些注解只有声明在属性的get方法中才有效果，前面讲过groovy的字段默认都生成了get/set方法，而如果你是用java自定义Task的，要记得声明在属性的get方法中，我们来看Copy任务的实现，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//subproject_3/build.gradle</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CopyTask</span> <span class="keyword">extends</span> <span class="title">DefaultTask</span>&#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//使用@InputFiles注解指定输入</span></span><br><span class="line">  <span class="meta">@InputFiles</span></span><br><span class="line">  FileCollection from</span><br><span class="line"></span><br><span class="line">  <span class="comment">//使用@OutputDirectory注解指定输出</span></span><br><span class="line">  <span class="meta">@OutputDirectory</span></span><br><span class="line">  Directory to</span><br><span class="line"></span><br><span class="line">  <span class="comment">//复制过程：把from的文件复制到to文件夹</span></span><br><span class="line">  <span class="meta">@TaskAction</span></span><br><span class="line">  <span class="keyword">void</span> execute()&#123;</span><br><span class="line">    File file = from.getSingleFile()</span><br><span class="line">    <span class="keyword">if</span>(file.isDirectory())&#123;</span><br><span class="line">      from.getAsFileTree().each &#123;</span><br><span class="line">        copyFileToDir(it, to)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      copyFileToDir(from, to)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> copyFileToDir(File src, Directory dir)&#123;</span><br><span class="line">    File dest = <span class="keyword">new</span> File(<span class="string">"$&#123;dir.getAsFile().path&#125;/$&#123;src.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">if</span>(!dest.exists())&#123;</span><br><span class="line">      dest.createNewFile()</span><br><span class="line">    &#125;</span><br><span class="line">    dest.withOutputStream &#123;</span><br><span class="line">      it.write(<span class="keyword">new</span> FileInputStream(src).getBytes())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里Copy任务只使用了@InputFiles和@OutputDirectory，通过@InputFiles指定Copy任务复制的来源文件，通过@OutputDirectory指定Copy任务复制的目标文件夹，然后在action方法中执行复制步骤，然后我们来使用这个Copy任务，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//subproject_3/build.gradle</span></span><br><span class="line"></span><br><span class="line">task copyTask(<span class="string">type:</span> CopyTask)&#123;</span><br><span class="line">  from = files(<span class="string">'from'</span>)</span><br><span class="line">  to = layout.projectDirectory.dir(<span class="string">'to'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了使用这个Copy任务，我在subproject_3目录下创建了一个from文件夹，里面只有一个名为text1.txt的文本文件，然后把from文件夹指定为Copy任务的输入，to文件夹指定为Copy任务的输出，在命令行输入<code>gradle copyTask</code>执行这个Task，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in ~/GradleDemo </span></span><br><span class="line">$ gradle copyTask</span><br><span class="line"></span><br><span class="line">&gt; Task :subproject_3:copyTask</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL <span class="keyword">in</span> 2s</span><br><span class="line">1 actionable task: 1 executed</span><br></pre></td></tr></table></figure><p>任务执行成功后就可以把from文件夹中的文件复制到to文件夹，此时文件结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">subproject_3</span><br><span class="line">|_ build.gradle</span><br><span class="line">|_ from</span><br><span class="line">|  |_ text1.txt </span><br><span class="line">|_ to</span><br><span class="line">   |_ text1.txt</span><br></pre></td></tr></table></figure><p>接着我们再次在命令行输入<code>gradle copyTask</code>执行这个Task，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in ~/GradleDemo </span></span><br><span class="line">$ gradle copyTask</span><br><span class="line"></span><br><span class="line">&gt; Task :subproject_3:copyTask UP-TO-DATE</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL <span class="keyword">in</span> 634ms</span><br><span class="line">1 actionable task: 1 up-to-date</span><br></pre></td></tr></table></figure><p>再次执行时由于Copy任务的输入和输出都没有变化，所以Gradle判定为UP-TO-DATE，跳过执行。</p><p>目前Copy任务已经支持Up-to-date检查，但还不支持增量构建，即如果此时我们往from文件夹新增一个text2.txt文件，由于Copy任务的输入发生变化，这时重新执行Copy任务时就会重新执行action方法，进行全量构建，把text1.txt、text2.txt文件复制到to文件夹中，你会发现text1.txt被重复复制了，我们希望的是每次from中新增或修改文件时，只对新增或修改的文件进行复制，而之前没有变化的文件不进行复制，所以要做到这一步，还要让Task的action方法支持增量构建，要让Task的action方法支持增量式构建，只需要让action方法带一个<a href="https://docs.gradle.org/current/dsl/org.gradle.work.InputChanges.html#org.gradle.work.InputChanges" target="_blank" rel="noopener">InputChanges</a>类型的参数就可以，带<strong>InputChanges</strong>类型参数的action方法表示这是一个增量任务操作方法，该参数告诉Gradle，该action方法仅需要处理更改的输入，此外，Task还需要通过使用<strong>@Incremental或@SkipWhenEmpty</strong>来指定至少一个增量文件输入属性，我们继续看Copy任务的实现，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//subproject_3/build.gradle</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CopyTask</span> <span class="keyword">extends</span> <span class="title">DefaultTask</span>&#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//新增@Incremental注解</span></span><br><span class="line">  <span class="meta">@Incremental</span></span><br><span class="line">  <span class="meta">@InputFiles</span></span><br><span class="line">  FileCollection from</span><br><span class="line"></span><br><span class="line">  <span class="meta">@OutputDirectory</span></span><br><span class="line">  Directory to</span><br><span class="line"></span><br><span class="line">  <span class="comment">// @TaskAction</span></span><br><span class="line">  <span class="comment">// void execute()&#123;</span></span><br><span class="line">  <span class="comment">//    File file = from.getSingleFile()</span></span><br><span class="line">  <span class="comment">//    if(file.isDirectory())&#123;</span></span><br><span class="line">  <span class="comment">//        from.getAsFileTree().each &#123;</span></span><br><span class="line">  <span class="comment">//            copyFileToDir(it, to)</span></span><br><span class="line">  <span class="comment">//        &#125;</span></span><br><span class="line">  <span class="comment">//    &#125;else&#123;</span></span><br><span class="line">  <span class="comment">//        copyFileToDir(from, to)</span></span><br><span class="line">  <span class="comment">//    &#125;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//带有InputChanges类型参数的action方法</span></span><br><span class="line">  <span class="meta">@TaskAction</span></span><br><span class="line">  <span class="keyword">void</span> executeIncremental(InputChanges inputChanges) &#123;</span><br><span class="line">    println <span class="string">"execute: isIncremental = $&#123;inputChanges.isIncremental()&#125;"</span></span><br><span class="line">    inputChanges.getFileChanges(from).each &#123;change -&gt;</span><br><span class="line">      <span class="keyword">if</span>(change.fileType != FileType.DIRECTORY)&#123;</span><br><span class="line">        println <span class="string">"changeType = $&#123;change.changeType&#125;, changeFile = $&#123;change.file.name&#125;"</span></span><br><span class="line">        <span class="keyword">if</span>(change.changeType != ChangeType.REMOVED)&#123;</span><br><span class="line">          copyFileToDir(change.file, to)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> copyFileToDir(File src, Directory dir)&#123;</span><br><span class="line">    File dest = <span class="keyword">new</span> File(<span class="string">"$&#123;dir.getAsFile().path&#125;/$&#123;src.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">if</span>(!dest.exists())&#123;</span><br><span class="line">      dest.createNewFile()</span><br><span class="line">    &#125;</span><br><span class="line">    dest.withOutputStream &#123;</span><br><span class="line">      it.write(<span class="keyword">new</span> FileInputStream(src).getBytes())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Copy任务中通过@Incremental指定了需要增量处理的输入，然后在action方法中通过InputChanges进行增量复制文件，我们可以通过InputChanges的<strong>getFileChanges</strong>方法获取变化的文件，该方法接收一个FileCollection类型的参数，传入的参数必须要通过@Incremental或@SkipWhenEmpty注解，getFileChanges方法返回的是一个<a href="https://docs.gradle.org/current/javadoc/org/gradle/work/FileChange.html" target="_blank" rel="noopener">FileChange</a>列表，FileChange持有变化的文件File、文件类型<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/file/FileType.html" target="_blank" rel="noopener">FileType</a>和文件的变化类型<a href="https://docs.gradle.org/current/javadoc/org/gradle/work/ChangeType.html" target="_blank" rel="noopener">ChangeType</a>，这样我们就可以根据<strong>变化的文件、ChangeType、FileType</strong>进行增量输出，ChangeType有三种取值：</p><ul><li>ADDED：表示这个文件是新增的；</li><li>MODIFIED：表示这个文件被修改了；</li><li>REMOVED：表示这个文件被删除了.</li></ul><p>同时并不是每次执行都是增量构建，我们可以通过InputChanges的<strong>isIncremental</strong>方法判断本次构建是否是增量构建，当处于以下情况时，Task会以非增量形式即全量执行：</p><ul><li>该Task是第一次执行；</li><li>该Task只有输入没有输出；</li><li>该Task的upToDateWhen条件返回了false；</li><li>自上次构建以来，该Task的某个输出文件已更改;</li><li>自上次构建以来，该Task的某个属性输入发生了变化，例如一些基本类型的属性；</li><li>自上次构建以来，该Task的某个非增量文件输入发生了变化，非增量文件输入是指没有使用@Incremental或@SkipWhenEmpty注解的文件输入.</li></ul><p>当Task处于非增量构建时，即InputChanges的isIncremental方法返回false时，通过InputChanges的getFileChanges方法能获取到所有的输入文件，并且每个文件的ChangeType都为ADDED，当Task处于增量构建时，即InputChanges的isIncremental方法返回true时，通过InputChanges的getFileChanges方法能获取到只发生变化的输入文件。</p><p>接下来让我们在上面的基础下执行Copy任务，在命令行输入<code>gradle copyTask</code>执行这个Task，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in ~/GradleDemo </span></span><br><span class="line">$ gradle copyTask</span><br><span class="line"></span><br><span class="line">&gt; Task :subproject_3:copyTask</span><br><span class="line">execute: isIncremental = <span class="literal">false</span></span><br><span class="line">changeType = ADDED, changeFile = text1.txt</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL <span class="keyword">in</span> 22s</span><br><span class="line">1 actionable task: 1 executed</span><br></pre></td></tr></table></figure><p>可以看到第一次执行Task，以非增量方式执行，把from/text1.txt文件复制到了to文件夹，接下来，我们在from文件夹下新增text2.txt、text3.text，然后再次在命令行输入<code>gradle copyTask</code>执行Copy任务，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in ~/GradleDemo </span></span><br><span class="line">$ gradle copyTask</span><br><span class="line"></span><br><span class="line">&gt; Task :subproject_3:copyTask</span><br><span class="line">execute: isIncremental = <span class="literal">true</span></span><br><span class="line">changeType = ADDED, changeFile = text2.txt</span><br><span class="line">changeType = ADDED, changeFile = text3.txt</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL <span class="keyword">in</span> 2s</span><br><span class="line">1 actionable task: 1 executed</span><br></pre></td></tr></table></figure><p>可以看到当我们新增文件后第二次执行Task，以增量方式执行，只把新增的text2.txt、 text3.txt复制到to文件夹，而text1.txt没有被重复复制，此时文件结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">subproject_3</span><br><span class="line">|_ build.gradle</span><br><span class="line">|_ from</span><br><span class="line">|  |_ text1.txt </span><br><span class="line">|  |_ text2.txt</span><br><span class="line">|  |_ text3.txt</span><br><span class="line">|_ to</span><br><span class="line">   |_ text1.txt</span><br><span class="line">   |_ text2.txt</span><br><span class="line">   |_ text3.txt</span><br></pre></td></tr></table></figure><p>接下来我们把text1.txt修改在里面添加一行hello world，然后再次在命令行输入<code>gradle copyTask</code>执行Copy任务，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in ~/GradleDemo </span></span><br><span class="line">$ gradle copyTask</span><br><span class="line"></span><br><span class="line">&gt; Task :subproject_3:copyTask</span><br><span class="line">execute: isIncremental = <span class="literal">true</span></span><br><span class="line">changeType = MODIFIED, changeFile = text1.txt</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL <span class="keyword">in</span> 2s</span><br><span class="line">1 actionable task: 1 executed</span><br></pre></td></tr></table></figure><p>可以看到当我们修改文件后第三次执行Task，以增量方式执行，只把修改的text1.txt复制到to文件夹，而其他文件没有被重复复制，接下来我们把to文件夹里的text1.txt删除，然后再次在命令行输入<code>gradle copyTask</code>执行Copy任务，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in ~/GradleDemo </span></span><br><span class="line">$ gradle copyTask</span><br><span class="line"></span><br><span class="line">&gt; Task :subproject_3:copyTask</span><br><span class="line">execute: isIncremental = <span class="literal">false</span></span><br><span class="line">changeType = ADDED, changeFile = text1.txt</span><br><span class="line">changeType = ADDED, changeFile = text2.txt</span><br><span class="line">changeType = ADDED, changeFile = text3.txt</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL <span class="keyword">in</span> 2s</span><br><span class="line">1 actionable task: 1 executed</span><br></pre></td></tr></table></figure><p>可以看到当我们删除某个输出文件后第四次执行Task，以非增量方式执行，把from文件夹下的文件重新复制到to文件夹，并且所有的文件状态都是ADDED，此时如果我们不做任何操作，再次在命令行输入<code>gradle copyTask</code>执行Copy任务会输出UP-TO-DATE。</p><p>到现在我们就实现了一个支持增量式构建的Copy任务，通过Gradle提供的注解和InputChanges，我们很容易就自定义一个支持增量构建的Task，当你编写的Task支持增量构建后，你还可以考虑更进一步，让你的Task的支持延迟配置 - <a href="https://docs.gradle.org/current/userguide/lazy_configuration.html" target="_blank" rel="noopener">Lazy Configuration</a>，这是Gradle提供的对属性的一种状态管理，就不在本文展开了。</p><h2 id="自定义Plugin"><a href="#自定义Plugin" class="headerlink" title="自定义Plugin"></a>自定义Plugin</h2><p>Plugin可以理解为一系列Task的集合，通过实现<strong>Plugin<T></strong>接口的<strong>apply</strong>方法就可以自定义Plugin，自定义的Plugin本质上也是一个类，所以和Task类似，在Gradle中也提供了3种方式来编写自定义Plugin：</p><ul><li><strong>1、在build.gradle中直接编写</strong>：可以在任何一个build.gradle文件中编写自定义Plugin，此方式自定义的Plugin只对该build.gradle对应的项目可见；</li><li><strong>2、在buildSrc目录下编写</strong>：可以在Gradle项目根目录的buildSrc/src/main/[java/kotlin/groovy]目录中编写自定义Plugin，可以采用java、kotlin、groovy三种语句之一，Gradle在构建时会自动的编译buildSrc/src/main/[java/kotlin/groovy]目录下的所有类文件为class文件，供本项目所有的build.gradle引用，所以此方式自定义的Plugin只对本Gradle项目可见；</li><li><strong>3、在独立项目中编写</strong>：可以新建一个Gradle项目，在该Gradle项目中编写自定义Plugin，然后把Plugin源码打包成jar，发布到maven、lvy等托管平台上，这样其他项目就可以引用该插件，所以此方式自定义的Plugin对所有Gradle项目可见.</li></ul><p>由于在上面自定义Task的介绍中已经讲过了如何在build.gradle中直接编写，自定义Plugin也类似，所以下面就主要介绍<strong>2、3</strong>两种方式，而且这两种方式也是平时开发中自定义Plugin最常用的方式。</p><h3 id="1、在buildSrc目录下编写"><a href="#1、在buildSrc目录下编写" class="headerlink" title="1、在buildSrc目录下编写"></a>1、在buildSrc目录下编写</h3><p>在GradleDemo中新建一个buildSrc目录，然后在buildSrc目录新建src/main/groovy目录，如果你要使用java或kotlin，则新建src/main/java或src/main/kotlin，src/main/groovy目录下你还可以继续创建package，这里我的package为com.example.plugin，然后在该package下新建一个类MyPlugin.groovy，该类继承自Plugin接口，如下：</p><img src="/2020/06/26/Gradle%E7%9A%84%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/gradle4.png" class="" title="gradle1"><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt;&#123;</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">void</span> apply(Project project)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在MyPlugin中没有任何逻辑，我们平时是在build.gradle中通过<strong>apply plugin: ‘Plugin名’</strong>来引用一个Plugin，而apply plugin中的apply就是指apply方法中的逻辑，而apply方法的参数project指的就是引用该Plugin的build.gradle对应的Project对象，接下来我们让我们在apply方法中编写逻辑，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.plugin</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.gradle.api.*</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt;&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> apply(Project project)&#123;</span><br><span class="line">      <span class="comment">//通过project的ExtensionContainer的create方法创建一个名为outerExt的扩展，扩展对应的类为OuterExt</span></span><br><span class="line">      OuterExt outerExt = project.extensions.create(<span class="string">'outerExt'</span>, OuterExt<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">      //通过<span class="title">project</span>的<span class="title">task</span>方法创建一个名为<span class="title">showExt</span>的<span class="title">Task</span></span></span><br><span class="line"><span class="class">      <span class="title">project</span>.<span class="title">task</span>('<span class="title">showExt</span>')&#123;</span></span><br><span class="line">        doLast&#123;</span><br><span class="line">          <span class="comment">//使用OuterExt实例</span></span><br><span class="line">          println <span class="string">"outerExt = $&#123;outerExt&#125;"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 自定义插件的扩展对应的类</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterExt</span>&#123;</span></span><br><span class="line"></span><br><span class="line">      String message</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      String toString()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"[message = $&#123;message&#125;]"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述我在apply方法中创建了一个扩展和一个Task，其中Task好理解，那么扩展是什么？我们平时引用android插件时，一定见过这样类似于android这样的命名空间，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">  compileSdkVersion <span class="number">29</span></span><br><span class="line">  buildToolsVersion <span class="string">"29.0.3"</span></span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它并不是一个名为android的方法，它而是android插件中名为android的扩展，该扩展对应一个bean类，该bean类中有compileSdkVersion、buildToolsVersion等方法，所以配置android就是在配置andorid对应的bean类，现在回到我们的MyPlugin中，MyPlugin也定义了一个bean类：OuterExt，该bean类有messag字段，Groovy会自动为我们生成messag的get/set方法，而apply方法中通过project实例的ExtensionContainer的create方法创建一个名为outerExt的扩展，扩展对应的bean类为OuterExt，扩展的名字可以随便起，其中<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/ExtensionContainer.html" target="_blank" rel="noopener">ExtensionContainer</a>类似于TaskContainer，它也是Project中的一个容器，这个容器存放Project中所有的扩展，通过ExtensionContainer的<strong>create</strong>方法可以创建一个扩展，create方法返回的是扩展对应的类的实例，这样我们使用MyPlugin就可以这样使用，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//subproject_4/build.gradle</span></span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> com.example.plugin.MyPlugin</span><br><span class="line"></span><br><span class="line">outerExt &#123;</span><br><span class="line">  message <span class="string">'hello'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行gradle showExt, 输出:</span></span><br><span class="line"><span class="comment">//outerExt = [message = hello]</span></span><br></pre></td></tr></table></figure><p>扩展的特点就是可以通过闭包来配置扩展对应的类，这样就可以通过扩展outerExt来配置我们的Plugin，很多自定义Plugin都是都通过添加扩展这种方式来配置自定义的Plugin，很多人就问了，那么类似于android的嵌套DSL如何实现，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">  compileSdkVersion <span class="number">29</span></span><br><span class="line">  buildToolsVersion <span class="string">"29.0.3"</span></span><br><span class="line"></span><br><span class="line">  defaultConfig &#123;</span><br><span class="line">    applicationId <span class="string">"com.example.myapplication"</span></span><br><span class="line">    minSdkVersion <span class="number">16</span></span><br><span class="line">    targetSdkVersion <span class="number">29</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>android{}中有嵌套了一个defaultConfig{}，但是defaultConfig并不是一个扩展，而是一个名为defaultConfig的方法，参数为<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/Action.html" target="_blank" rel="noopener">Action</a>类型，它是一个接口，里面只有一个execute方法，这里就我参考android 插件的内部实现实现了嵌套DSL，嵌套DSL可以简单的理解为<strong>扩展对应的类中再定义一个类</strong>，MyPlugin的实现如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.plugin</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.gradle.api.*</span><br><span class="line"><span class="keyword">import</span> org.gradle.api.model.* <span class="comment">//新引入</span></span><br><span class="line"><span class="keyword">import</span> javax.inject.Inject <span class="comment">//新引入</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt;&#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">void</span> apply(Project project)&#123;</span><br><span class="line"></span><br><span class="line">    OuterExt outerExt = project.extensions.create(<span class="string">'outerExt'</span>, OuterExt<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">project</span>.<span class="title">task</span>('<span class="title">showExt</span>')&#123;</span></span><br><span class="line">      doLast&#123;</span><br><span class="line">        <span class="comment">//使用OuterExt实例和InnerExt实例</span></span><br><span class="line">        println <span class="string">"outerExt = $&#123;outerExt&#125;, innerExt = $&#123;outerExt.innerExt&#125;"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterExt</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    String message</span><br><span class="line"></span><br><span class="line">    <span class="comment">//嵌套类</span></span><br><span class="line">    InnerExt innerExt</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个使用@Inject注解的、抽象的获取ObjectFactory实例的get方法</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">abstract</span> ObjectFactory getObjectFactory()</span><br><span class="line"></span><br><span class="line">    OuterExt()&#123;</span><br><span class="line">      <span class="comment">//通过ObjectFactory的newInstance方法创建嵌套类innerExt实例</span></span><br><span class="line">      <span class="keyword">this</span>.innerExt = getObjectFactory().newInstance(InnerExt<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    //定义一个方法，方法名为可以随意起，方法的参数类型为<span class="title">Action</span>，泛型类型为嵌套类<span class="title">InnerExt</span></span></span><br><span class="line"><span class="class">    <span class="title">void</span> <span class="title">inner</span>(<span class="title">Action</span>&lt;<span class="title">InnerExt</span>&gt; <span class="title">action</span>)&#123;</span></span><br><span class="line">      <span class="comment">//调用Action的execute方法，传入InnerExt实例</span></span><br><span class="line">      action.execute(innerExt)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    String toString()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"[message = $&#123;message&#125;]"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerExt</span>&#123;</span></span><br><span class="line"></span><br><span class="line">      String message</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      String toString()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"[message = $message]"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用MyPlugin就可以这样使用，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//subproject_4/build.gradle</span></span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> com.example.plugin.MyPlugin</span><br><span class="line"></span><br><span class="line">outerExt &#123;</span><br><span class="line">  message <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//使用inner方法</span></span><br><span class="line">  inner&#123;</span><br><span class="line">    message <span class="string">'word'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行gradle showExt, 输出:</span></span><br><span class="line"><span class="comment">//outerExt = [message = hello], innerExt = [message = word]</span></span><br></pre></td></tr></table></figure><p>outerExt {}中嵌套了inner{}，其中inner是一个方法，参数类型为Action，Gradle内部会把inner方法后面的闭包配置给InnerExt类，这是Gradle中的一种转换机制，总的来说，定义嵌套DSL的大概步骤如下：</p><ul><li>1、定义嵌套的DSL对应的bean类，如这里为InnerExt；</li><li>2、定义一个使用@Inject注解的、抽象的获取ObjectFactory实例的get方法，或者定义一个使用@Inject注解的带ObjectFactory类型参数的构造，@Inject是javax包下的，<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/model/ObjectFactory.html" target="_blank" rel="noopener">ObjectFactory</a>是属于Gradle的model包下的类，当Gradle实例化OuterExt时，它会自动注入通过@Inject注解的实例，例如这里就自动注入了ObjectFactory实例，需要注意的是通过@Inject注解的方法或构造必须是public的；</li><li>3、在构造中通过ObjectFactory对象的newInstance方法来创建bean类实例，通过ObjectFactory实例化的对象可以被闭包配置；</li><li>4、定义一个方法，该方法的参数类型为Action，泛型类型为嵌套的DSL对应的bean类，方法名随便起，如这里为inner，然后在方法中调用Action的<strong>execute</strong>方法，传入bean类实例.</li></ul><p>上面4步就是定义嵌套DSL时需要在自定义Plugin中做的事，还有一点要注意的是，对于扩展对应的bean类，如果你把它定义在自定义的Plugin的类文件中，一定要用<strong>static</strong>修饰，如这里的OuterExt类、InnerExt类使用了static修饰，或者把它们定义在单独的类文件中。</p><p>除了以上这种为单个对象配置的方式，Gradle还为我们提供了更为灵活地对多个相同类型对象进行配置的方式，又名命名对象容器，它类似于android中buildType{}, 如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  buildTypes &#123;</span><br><span class="line">    release &#123;</span><br><span class="line">      <span class="comment">//..</span></span><br><span class="line">    &#125;</span><br><span class="line">    debug &#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面buildTypes中定义了2个命名空间，分别为：release、debug，每个命名空间都会生成一个BuildType配置，在不同的场景下使用，并且我还可以根据使用场景定义更多的命名空间如：test、testDebug等，buildTypes{}中的命名空间的<strong>数量不定</strong>、<strong>名字不定</strong>，这是因为buildTypes是通过<a href="https://docs.gradle.org/current/dsl/org.gradle.api.NamedDomainObjectContainer.html#org.gradle.api.NamedDomainObjectContainer" target="_blank" rel="noopener">NamedDomainObjectContainer</a>容器实现的，下面在前面的基础上实现OuterExt对应的命名对象容器：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.plugin</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.gradle.api.*</span><br><span class="line"><span class="keyword">import</span> org.gradle.api.model.*</span><br><span class="line"><span class="keyword">import</span> javax.inject.Inject</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt;&#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">void</span> apply(Project project)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过project的ObjectFactory的domainObjectContainer方法创建OuterExt的Container实例</span></span><br><span class="line">    NamedDomainObjectContainer&lt;OuterExt&gt; outerExtContainer = project.objects.domainObjectContainer(OuterExt<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    //然后再通过<span class="title">project</span>的<span class="title">ExtensionContainer</span>的<span class="title">add</span>方法添加名称和<span class="title">OuterExt</span>的<span class="title">Container</span>实例的映射</span></span><br><span class="line"><span class="class">    <span class="title">project</span>.<span class="title">extensions</span>.<span class="title">add</span>('<span class="title">outerExts</span>', <span class="title">outerExtContainer</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    //通过<span class="title">project</span>的<span class="title">task</span>方法创建一个名为<span class="title">showExts</span>的<span class="title">Task</span></span></span><br><span class="line"><span class="class">    <span class="title">project</span>.<span class="title">task</span>('<span class="title">showExts</span>')&#123;</span></span><br><span class="line">      doLast&#123;</span><br><span class="line">        <span class="comment">//遍历OuterExt的Container实例，逐个输出配置的值</span></span><br><span class="line">        outerExtContainer.each&#123;ext -&gt;</span><br><span class="line">          println <span class="string">"$&#123;ext.name&#125;: outerExt = $&#123;ext&#125;, innerExt = $&#123;ext.innerExt&#125;"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterExt</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    String message</span><br><span class="line"></span><br><span class="line">    InnerExt innerExt</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">abstract</span> ObjectFactory getObjectFactory()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//NamedDomainObjectContainer要求它的元素必须要有一个只可读的、名为name的常量字符串</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只可读的name表示name要私有的，并且提供一个get方法，name的值在构造函数中注入</span></span><br><span class="line">    String getName()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过@Inject注解带有String类型参数的构造</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    OuterExt(String name)&#123;</span><br><span class="line">      <span class="comment">//在构造中为name赋值</span></span><br><span class="line">      <span class="keyword">this</span>.name = name</span><br><span class="line">      <span class="keyword">this</span>.innerExt = getObjectFactory().newInstance(InnerExt<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">void</span> <span class="title">inner</span>(<span class="title">Action</span>&lt;<span class="title">InnerExt</span>&gt; <span class="title">action</span>)&#123;</span></span><br><span class="line">      action.execute(innerExt)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    String toString()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"[message = $&#123;message&#125;]"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerExt</span>&#123;</span></span><br><span class="line"></span><br><span class="line">      String message</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      String toString()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"[message = $&#123;message&#125;]"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用MyPlugin就可以这样使用，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//subproject_4/build.gradle</span></span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> com.example.plugin.MyPlugin</span><br><span class="line"></span><br><span class="line">outerExts&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//定义名为ext1的命名空间</span></span><br><span class="line">  ext1&#123;</span><br><span class="line">    message <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">    inner&#123;</span><br><span class="line">      message <span class="string">'word'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//定义名为ext2的命名空间</span></span><br><span class="line">  ext2&#123;</span><br><span class="line">    message <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">    inner&#123;</span><br><span class="line">      message <span class="string">'word'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行gradle showExts, 输出:</span></span><br><span class="line"><span class="comment">//ext1: outerExt = [message = hello], innerExt = [message = word]</span></span><br><span class="line"><span class="comment">//ext2: outerExt = [message = hello], innerExt = [message = word]</span></span><br></pre></td></tr></table></figure><p>outerExts可以想象为一个容器，然后容器的元素就是OuterExt，放进容器中的元素都要有一个名字，这个名字是任意的，上面我们通过DSL在outerExts扩展中配置了两个OuterExt，一个名为ext1，一个名为ext2，然后我们在Plugin中就可以通过遍历outerExts获取每个元素对应的配置，所以总的来说，定义命名对象容器作为扩展的大概步骤如下：</p><ul><li><p>1、首先要确定NamedDomainObjectContainer容器的元素类型，如我这里为OuterExt类，容器中的每个元素必须要有一个只可读的、名为name的常量字符串，然后提供一个使用@Inject注解的带有String类型参数的构造，在构造中为name赋值，这个name就对应你在DSL中填写的命名，如我这里为ext1、ext2，当我们在DSL中添加命名空间时，其实就是在往容器中添加元素，这时Gradle会自动调用元素带有String类型参数的构造来实例化它，并在构造中传入命名字符串；</p></li><li><p>2、通过Project的getObjects方法获取ObjectFactory实例，调用ObjectFactory的<strong>domainObjectContainer</strong>方法创建容器实例，前面讲过通过ObjectFactory实例化的对象可以被闭包配置，如我这里创建的容器为NamedDomainObjectContainer&lt;OuterExt&gt;；</p></li><li><p>3、然后再通过Project的getExtensions方法获取ExtensionContainer实例，调用ExtensionContainer的<strong>add</strong>方法添加扩展名和容器实例的映射，如我这里添加了名为outerExts的扩展，扩展对应的类为NamedDomainObjectContainer&lt;OuterExt&gt;.</p></li></ul><p>上面3步就是定义命名对象容器作为扩展时需要在自定义Plugin中做的事，1、2步骤是如何定义一个命名对象容器，2步骤是把命名对象容器添加为一个扩展，但是往往命名对象容器只是作为某个扩展中的一个嵌套DSL，而不是直接作为扩展，这时我们只需要结合前面讲过的定义扩展步骤、定义嵌套DSL步骤和这里的1、2步骤就行，这时我们就可以实现下面的DSL写法：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//扩展</span></span><br><span class="line">outerExt&#123;</span><br><span class="line">  message <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//通过命名对象容器配置</span></span><br><span class="line">  exts&#123;</span><br><span class="line">    ext1&#123;</span><br><span class="line">      message <span class="string">'word'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ext2&#123;</span><br><span class="line">      message <span class="string">'word'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时我们已经很接近android gradle plugin提供的android{}扩展的DSL写法了，在自定义Plugin中如何实现就留给大家自己实现了，只要结合一下前面所讲过的方法就行，上面所介绍的扩展、嵌套DSL、命名对象容器已经能满足自定义Plugin开发时获取配置的大部分场景了。</p><h3 id="2、在独立项目中编写"><a href="#2、在独立项目中编写" class="headerlink" title="2、在独立项目中编写"></a>2、在独立项目中编写</h3><p>在独立项目中编写和在buildSrc目录下编写是一样的，只是多了一个<strong>发布</strong>过程，这里我为了方便就不新建一个独立项目了，而是在GradleDemo中新增一个名为gradle_plugin的子项目，然后在gradle_plugin下新建一个src/main/groovy和src/main/resources目录，接着把刚刚在buildSrc编写的com.example.plugin.MyPlugin复制到src/main/groovy下，最后在GradleDemo新建一个repo目录，当作待会发布插件时的仓库，此时GradleDemo结构如下：</p><img src="/2020/06/26/Gradle%E7%9A%84%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/gradle5.png" class="" title="gradle1"><p>在Gradle中有两种方式在脚本中引入一个Plugin，一种是在buildScript中引入类路径，然后通过apply plugin引入插件，如下</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//build.gradle</span></span><br><span class="line">buildscript &#123;</span><br><span class="line">  repositories &#123;</span><br><span class="line">    <span class="comment">//定义插件所属仓库</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dependencies &#123;</span><br><span class="line">    classpath <span class="string">'插件类路径'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'插件id'</span></span><br></pre></td></tr></table></figure><p>一种是直接通过plugins DSL引入，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//setting.gradle</span></span><br><span class="line">pluginManagement&#123;</span><br><span class="line">  repositories&#123;</span><br><span class="line">    <span class="comment">//定义插件所属仓库</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//build.gradle</span></span><br><span class="line">plugins&#123;</span><br><span class="line">  id <span class="string">'插件id'</span> version <span class="string">'插件版本'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种方式分别对应着两种类型的发布方式，下面分别介绍：</p><h4 id="2-1、自定义META-INF发布"><a href="#2-1、自定义META-INF发布" class="headerlink" title="2.1、自定义META-INF发布"></a>2.1、自定义META-INF发布</h4><p>因为gradle_plugin项目中的MyPlugin.groovy使用了Gradle的相关api，如Project等，所以你要在gradle_plugin/build.gradle中引进Gradle api，打开gradle_plugin/build.gradle，添加如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gradle_plugin/build.gradle</span></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">  <span class="comment">//这样gradle_plugin/src/main/groovy/中就可以使用Gradle和Groovy语法</span></span><br><span class="line">  implementation gradleApi()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在MyPlugin已经有了，我们需要给插件起一个名字，在gradle_plugin/src/main/resources目录下新建<strong>META-INF/gradle-plugins</strong>目录，然后在该目录下新建一个<strong>XX.properties</strong>文件，XX就是你想要给插件起的名字，就是apply plugin后填写的插件名字，也称为插件id，例如andorid gradle plugin的插件id叫com.android.application，所以它的properties文件为com.android.application.properties，这里我给我的MyPlugin插件起名为<strong>myplugin</strong>，所以我新建myplugin.properties，如下：</p><img src="/2020/06/26/Gradle%E7%9A%84%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/gradle6.png" class="" title="gradle1"><p>打开myplugin.properties文件，添加如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在这里指明自定义插件的实现类</span><br><span class="line">implementation-<span class="class"><span class="keyword">class</span>=<span class="title">com</span>.<span class="title">example</span>.<span class="title">plugin</span>.<span class="title">MyPlugin</span></span></span><br></pre></td></tr></table></figure><p>通过implementation-class指明你要发布的插件的实现类，如这里为com.example.plugin.MyPlugin，接下来我们就来发布插件。</p><p>发布插件你可以选择你要发布到的仓库，如maven、lvy，我们最常用的就是maven了，所以这里我选择maven，Gradle提供了<a href="https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven" target="_blank" rel="noopener">maven-publish插件</a>来帮助我们发布到maven仓库，在gradle_plugin/build.gradle添加如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gradle_plugin/build.gradle</span></span><br><span class="line"></span><br><span class="line">plugins&#123;</span><br><span class="line">  <span class="comment">//引入maven-publish, maven-publish属于Gradle核心插件，核心插件可以省略version</span></span><br><span class="line">  id <span class="string">'maven-publish'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//publishing是maven-publish提供的扩展，通过repositories定义发布的maven仓库位置，可以指定本地目录地址或远端repo地址</span></span><br><span class="line">publishing.repositories &#123;</span><br><span class="line">  <span class="comment">//这里我指定了项目根目录下的repo目录</span></span><br><span class="line">  maven &#123;</span><br><span class="line">    url <span class="string">'../repo'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//可以指定远端repo地址</span></span><br><span class="line">  <span class="comment">//maven&#123;</span></span><br><span class="line">  <span class="comment">//    url 'https://xxx'</span></span><br><span class="line">  <span class="comment">//    credentials &#123;</span></span><br><span class="line">  <span class="comment">//        username 'xxx'</span></span><br><span class="line">  <span class="comment">//        password xxx</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过publications定义发布的组件</span></span><br><span class="line">publishing.publications  &#123;</span><br><span class="line">  <span class="comment">//类似于命令容器对象，添加名为myplugin的的发布</span></span><br><span class="line">  myplugin(MavenPublication)&#123;</span><br><span class="line">    <span class="comment">//配置自定义插件的groupId、artifactId和version</span></span><br><span class="line">    groupId = <span class="string">'com.example.customplugin'</span></span><br><span class="line">    artifactId = <span class="string">'myplugin'</span></span><br><span class="line">    version = <span class="string">'1.0'</span></span><br><span class="line">    <span class="comment">//通过from引入打包jar的components</span></span><br><span class="line">    from components.java</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们首先通过repositories{}定义了发布仓库，这里为本地目录，然后在publications{}中定义了名为myplugin的<a href="https://docs.gradle.org/current/dsl/org.gradle.api.publish.maven.MavenPublication.html" target="_blank" rel="noopener">发布</a>，它会被maven-publish插件用来生成发布任务，在其中通过groupId、artifactId和version配置了插件的<strong>GAV</strong>坐标，这样发布后我们就可以通过GAV坐标引用插件，即在dependencies{}中使用<strong>groupId:artifactId:version</strong>的形式来引用我们发布的插件，同时还引入了components.java，它是java插件为我们提供的把代码打包成jar的能力，当你做完这一切后，同步Gradle项目，maven-publish插件会为我们生成两种类型的发布任务：<strong>publishXXPublicationToMavenRepository</strong>和<strong>publishXXPublicationToMavenLocal</strong>，publishXXPublicationToMavenRepository任务表示把插件发布到maven远程仓库中，publishXXPublicationToMavenLocal任务表示把插件发布到maven本地仓库，其中XX就是在publications{}定义的发布名字，如我这里为myplugin。</p><p>接着在Gradle项目所处目录的命令行输入<code>gradle publishMypluginPublicationToMavenLocal</code>把myplugin插件发布到maven本地仓库，任务执行成功后，在maven本地仓库(mac下为～/.m/repository/，在window下为：C:/用户/用户名/.m/repository/)中会看到发布的插件jar和pom文件，如下：</p><img src="/2020/06/26/Gradle%E7%9A%84%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/gradle7.png" class="" title="gradle1"><p>接着在Gradle项目所处目录的命令行输入<code>gradle publishMypluginPublicationToMavenRepository</code>把myplugin插件发布到maven远程仓库，任务执行成功后，在GradleDemo/repo/中会看到发布的插件jar和pom文件，如下：</p><img src="/2020/06/26/Gradle%E7%9A%84%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/gradle8.png" class="" title="gradle1"><p>现在MyPlugin 1.0已经发布成功了，接下来让我们使用这个插件，在subproject_4/build.gradle中添加如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//subproject_4/build.gradle</span></span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">  repositories &#123; </span><br><span class="line">    <span class="comment">//添加maven本地仓库</span></span><br><span class="line">    mavenLocal()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加发布时指定的maven远程仓库</span></span><br><span class="line">    maven &#123;</span><br><span class="line">      url uri(<span class="string">'../repo'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以添加maven中央仓库</span></span><br><span class="line">    <span class="comment">//mavenCentral()</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dependencies &#123;</span><br><span class="line">    <span class="comment">//classpath填写插件的GAV坐标，gradle编译时会扫描该classpath下的所有jar文件并引入</span></span><br><span class="line">    classpath <span class="string">'com.example.customplugin:myplugin:1.0'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了Project的<strong>buildscript</strong>方法，通过该方法可以为当前项目的build.gradle脚本导入外部依赖，在该方法中可以使用repositories方法和dependencies方法指定外部依赖的所在仓库和类路径，当前项目在构建时会去repositories定义的仓库地址寻找classpath指定路径下的所有jar文件并引入，如我这里repositories方法中指定了mavenLocal()和maven {url uri(‘../repo’)}，其中mavenLocal()对应maven的本地仓库即/.m/repository，maven {url uri(‘../repo’)}就是刚刚发布时指定的maven远程仓库，如果你通过发布任务发布插件到了maven中央仓库，则可以新增mavenCentral()，它代表maven中央仓库的远端地址，而dependencies方法中则通过classpath指定了myplugin插件在仓库下的类路径即GAV坐标: com.example.customplugin:myplugin:1.0，现在我们可以通过apply plugin使用myplugin了，在subproject_4/build.gradle中添加如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//subproject_4/build.gradle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过插件id引用插件</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'myplugin'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用DSL配置插件的属性</span></span><br><span class="line">outerExt&#123;</span><br><span class="line">  message <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">  inner&#123;</span><br><span class="line">    message <span class="string">'word'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行gradle showExt，输出：</span></span><br><span class="line"><span class="comment">//outerExt = [message = hello], innerExt = [message = word]</span></span><br></pre></td></tr></table></figure><p>其中apply plugin后面的插件id就是我们在gradle_plugin/src/main/resources/META-INF/gradle-plugins目录下编写的properties文件的名称。</p><p>现在已经成功发布了一个插件并引入使用，但是上面的发布过程和引入插件过程不免有点繁琐，Gradle为我们提供了<a href="https://docs.gradle.org/current/userguide/java_gradle_plugin.html#java_gradle_plugin" target="_blank" rel="noopener">java-gradle-plugin</a>用于简化我们的发布过程，同时根据java-gradle-plugin发布的插件使用时只需要直接引入插件id就行，而无需在buildscript中指定classpath。</p><h4 id="2-2、使用java-gradle-plugin生成META-INF发布"><a href="#2-2、使用java-gradle-plugin生成META-INF发布" class="headerlink" title="2.2、使用java-gradle-plugin生成META-INF发布"></a>2.2、使用java-gradle-plugin生成META-INF发布</h4><p>还是上面MyPlugin的例子，我们在gradle_plugin/build.gradle中引入java-gradle-plugin插件，通过java-gradle-plugin提供的<strong>gradlePlugin{}</strong>扩展配置插件的META-INF信息，同时通过Project的<strong>setGroup</strong>方法和<strong>setVersion</strong>方法定义插件发布的groupId和version，我们还要引入maven-publish插件，因为要依赖它提供的发布能力，如下:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gradle_plugin/build.gradle</span></span><br><span class="line"></span><br><span class="line">plugins&#123;</span><br><span class="line">  <span class="comment">//用来生成插件元数据(META-INF)和插件标记工件(Plugin Marker Artifact)</span></span><br><span class="line">  id <span class="string">'java-gradle-plugin'</span></span><br><span class="line">  <span class="comment">//用来生成发布插件任务</span></span><br><span class="line">  id <span class="string">'maven-publish'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过maven-publish提供的publishing.repositories&#123;&#125;定义发布的maven仓库位置</span></span><br><span class="line">publishing.repositories&#123;</span><br><span class="line">  maven &#123;</span><br><span class="line">    url <span class="string">'../repo'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插件发布的groupId</span></span><br><span class="line">group = <span class="string">'com.example.customplugin'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里没有定义artifactId，maven-publish会自动取当前项目的名字作为artifactId，这里为gradle_plugin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插件发布的version</span></span><br><span class="line">version = <span class="string">'2.0'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过java-gradle-plugin提供的gradlePlugin&#123;&#125;配置插件</span></span><br><span class="line">gradlePlugin &#123;</span><br><span class="line">  plugins &#123;</span><br><span class="line">    <span class="comment">//配置myplugin插件</span></span><br><span class="line">    myplugin&#123;</span><br><span class="line">      <span class="comment">//插件id</span></span><br><span class="line">      id = <span class="string">'com.example.customplugin.myplugin'</span></span><br><span class="line">      <span class="comment">//插件实现类</span></span><br><span class="line">      implementationClass = <span class="string">'com.example.plugin.MyPlugin'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//myplugin2&#123;</span></span><br><span class="line">    <span class="comment">//    id = 'xxx'</span></span><br><span class="line">    <span class="comment">//    implementationClass = 'xxx'</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//以此类推可以配置多个插件</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过在gradlePlugin{}中的配置，执行发布任务时java-gradle-plugin会自动为我们生成插件的META-INF信息并打包进插件的jar中，同时java-gradle-plugin会自动为我们在dependencies引入gradleApi()，除此之外，执行发布任务时java-gradle-plugin还为插件生成了一个<strong>插件标记工件</strong> - <a href="https://docs.gradle.org/current/userguide/plugins.html#sec:plugin_markers" target="_blank" rel="noopener">Plugin Marker Artifact</a>，它的作用就是用来定位插件的位置，我们在<strong>plugins DSL</strong>中通过插件id来引用插件时并不需要定义插件的classpath即GAV坐标就可以直接使用插件，那么Gradle是如何根据插件id定位到插件的呢？答案就是插件标记工件，它跟插件发布时一起发布，它里面只有一个pom文件，pom文件里面依赖了插件真正的GAV坐标，这样通过插件id来引用插件时就会先下载这个pom文件，从而解析到插件的GAV坐标，再根据插件的GAV坐标把插件的jar文件引入，那么Gradle又是如何定位到插件标记工件的呢？答案就是使用插件id按一定的规则生成插件标记工件的GAV坐标，插件标记工件的GAV生成规则为<strong>pluginId:pluginId.gradle.plugin:pluginVersion</strong>，如这里myplugin的插件标记工件生成的GAV为com.example.customplugin.myplugin:com.example.customplugin.myplugin.gradle.plugin:2.0，发布插件时会同时把插件标记工件发布到生成的GAV处，然后通过插件id引用时又根据插件id拼接出相同的GAV从而定位到插件标记工件，这么说有点绕，让我们执行发布任务看看生成的产物就懂了。</p><p>我们在Gradle项目所处目录的命令行输入<code>gradle publishPluginMavenPublicationToMavenRepository publishMypluginPluginMarkerMavenPublicationToMavenRepository</code>来执行插件发布任务和插件标记工件发布任务，这两个任务都是maven-publish根据java-gradle-plugin定义的发布过程为我们生成好的，除此之外还生成了发布到maven本地仓库的任务，这里只以发布到maven远程仓库任务做示例，两个任务执行成功后，在GradleDemo/repo/中会看到发布的插件和插件标识工件，如下：</p><img src="/2020/06/26/Gradle%E7%9A%84%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/gradle9.png" class="" title="gradle1"><p>可以看到在repo下发布了两个组件，一个为插件，artifactId为gradle_plugin，一个为插件标识工件，artifactId为com.example.customplugin.myplugin.gradle.plugin，它们都处于com.example.customplugin空间下，版本都为2.0，我们看一下插件标识工件里面的内容，如下：</p><img src="/2020/06/26/Gradle%E7%9A%84%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/gradle10.png" class="" title="gradle1"><p>可以看到插件标识工件中并没有jar文件只有pom文件，我们打开它的pom文件，如下：</p><img src="/2020/06/26/Gradle%E7%9A%84%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/gradle11.png" class="" title="gradle1"><p>可以看到依赖了真正的插件的GAV坐标，为com.example.customplugin:gradle_plugin:2.0，这样通过插件id引用时就可以根据插件标识工件定位到插件，通过java-gradle-plugin这种方式发布插件时还有一点要注意的是，插件的id最好以groupId为前缀，这样才能保证插件标识工件和插件发布时都处于同一个仓库路径。</p><p>现在MyPlugin 2.0已经发布成功了，接下来让我们使用这个插件，需要通过plugins DSL引用的插件不需要定义classpath，但还是要定义仓库位置，我们在settings.gradle中添加如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//settings.gradle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一定要放在settings.gradle中的第一行</span></span><br><span class="line">pluginManagement&#123;</span><br><span class="line">  repositories&#123;</span><br><span class="line">    <span class="comment">//添加发布时指定的maven远程仓库</span></span><br><span class="line">    maven &#123;</span><br><span class="line">      url uri(<span class="string">'repo'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>plugins DSL通过<strong>pluginManagement{}</strong>管理插件仓库还有插件，而且pluginManagement{}必须要放在settings.gradle脚本的头部，然后我们可以通过plugins DSL使用myplugin了，在subproject_4/build.gradle中添加如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//subproject_4/build.gradle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过插件id引用插件</span></span><br><span class="line">plugins&#123;</span><br><span class="line">  id <span class="string">'com.example.customplugin.myplugin'</span> version <span class="string">'2.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用DSL配置插件的属性</span></span><br><span class="line">outerExt&#123;</span><br><span class="line">  message <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">  inner&#123;</span><br><span class="line">    message <span class="string">'word'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行gradle showExt，输出：</span></span><br><span class="line"><span class="comment">//outerExt = [message = hello], innerExt = [message = word]</span></span><br></pre></td></tr></table></figure><p>plugins DSL根据插件id寻找插件时默认会先从Gradle中央仓库 - <a href="https://plugins.gradle.org/" target="_blank" rel="noopener">Gradle Plugin Portal</a>找，找不到再从pluginManagement中指定的仓库找。</p><blockquote><p>上面发布时为了讲解原理把发布任务逐个执行，其实maven-publish还为我们生成了更为方便的publishAllPublicationsToMavenRepository 、publishToMavenLocal、publish发布任务，只需要执行一个任务就可以把多个发布任务同时执行：</p><p>执行publishAllPublicationsToMavenRepository任务表示执行所有发布到maven远程仓库的任务；</p><p>执行publishToMavenLocal任务表示执行所有发布到maven本地仓库的任务；</p><p>执行publish任务表示执行publishAllPublicationsToMavenRepository和publishToMavenLocal任务</p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文通过Gradle的特点、项目结构、生命周期、Task、自定义Plugin等来全面的学习Gradle，掌握上面的知识已经足够让你入门Gradle，但是如果你想要更进一步的学习Gradle，掌握本文的知识点是完全不足的，你可能还需要熟悉掌握Project中各个api的使用、能独立的自定义一个有完整功能的Plugin、能熟练地编写Gradle脚本来管理项目等，下面有一份Gradle DSL Reference，你可以在需要来查找Gradle相关配置项的含义和用法：</p><p><a href="https://docs.gradle.org/current/dsl/index.html" target="_blank" rel="noopener">Gradle DSL Reference</a></p><p>对于android开发者，我们引入的android插件中也有很多配置项，下面的Android  Plugin DSL Reference，你可以在需要来查找android 插件相关配置项的含义和用法：</p><p><a href="https://developer.android.com/reference/tools/gradle-api" target="_blank" rel="noopener">Android Plugin DSL Reference</a></p><p>本文的源码位置：</p><p><a href="https://github.com/rain9155/GradleDemo" target="_blank" rel="noopener">GradleDemo</a></p><p>以上就是本文的全部内容，希望大家有所收获！</p><p>参考内容：</p><p><a href="https://docs.gradle.org/current/userguide/userguide.html" target="_blank" rel="noopener">Gradle官网</a></p><p><a href="https://www.cnblogs.com/davenkin/p/gradle-learning-1.html" target="_blank" rel="noopener">Gradle学习系列</a></p><p><a href="https://juejin.im/post/5ccf02e36fb9a0322e73a3db#heading-52" target="_blank" rel="noopener">Gradle插件从入门到进阶</a></p><p><a href="https://juejin.cn/post/6844903858641043463#heading-30" target="_blank" rel="noopener">Gradle 源码分析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Gradle是一个灵活和高效自动化构建工具，它的构建脚本采用Groovy或kotlin语言编写，Groovy或Kotlin都是基于JVM的语
      
    
    </summary>
    
    
      <category term="gradle" scheme="http://yoursite.com/categories/gradle/"/>
    
    
      <category term="gradle" scheme="http://yoursite.com/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>java学习总结之I/O操作</title>
    <link href="http://yoursite.com/2020/05/30/java%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    <id>http://yoursite.com/2020/05/30/java%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</id>
    <published>2020-05-30T15:20:42.000Z</published>
    <updated>2023-01-07T10:44:48.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>I/O(Input/Output)操作，即输入输出操作，它是一个相对的过程，我们一般站在位于内存中的程序的角度来思考这个操作的过程，<strong>输入</strong>就是程序需要数据，把数据从数据源中流入程序，<strong>输出</strong>就是程序需要保存或传输数据，把数据从程序中流出到数据源，这个<strong>数据源</strong>一般为文件、网络、压缩包等，所以数据源和程序就通过数据流通道组成了一个半双工的输入/输出模式，如下：</p><img src="/2020/05/30/java%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/io1.png" class="" title="I&#x2F;O1"><p>java从更高层次把输入和输出抽象出来，封装成一些对程序员友好的API，我们只需要操作这些I/O接口就能简单的实现I/O操作，了解了输入输出模式的大体结构后，下面进入正文讲解。</p><h2 id="I-O框架"><a href="#I-O框架" class="headerlink" title="I/O框架"></a>I/O框架</h2><img src="/2020/05/30/java%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/io2.png" class="" title="I&#x2F;O1"><p>有关I/O的类主要都在java .io包中，从上图可以看出，java中的I/O流根据数据的单位划分可以分为字节流和字符流，两类都有输入和输出操作：</p><ul><li><strong>字节流</strong>：字节流主要用来处理字节(byte)或二进制对象，字节流的标志就是以Stream结尾，在字节流中，输入数据使用InputStream，输出数据使用OutputStream，InputStream/OutputStream是其他所有输入/输出字节流的抽象父类；</li><li><strong>字符流</strong>：字符流主要用来处理字符(char)或字符串，字符流的标志就是以Reader或Writer结尾，在字符流中，输入数据使用Reader，输出数据使用Writer，Reader/Writer是其他所有输入/输出字符流的抽象父类.</li></ul><p>不管是字节流还是字符流，它们都有一个close方法，用来关闭资源，因为它们都实现了Closeable接口，所以我们在通过这些流对象操作了文件后，记得调用close方法关闭资源，不然流对象就会一直关联着文件，导致文件无法释放，造成内存泄漏。</p><blockquote><p>在磁盘上保存或在网络上传输的数据最终都是二进制字节数据而不是字符数据，之所以存在字符流，是因为字符流中增加了对编码的处理，对多国语言支持比较好，所以如果需要处理文本、字符串等建议使用字符流，但是如果是处理音频、视频、图片等建议使用字节流。</p></blockquote><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h3 id="1、InputStream"><a href="#1、InputStream" class="headerlink" title="1、InputStream"></a>1、InputStream</h3><img src="/2020/05/30/java%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/io3.png" class="" title="I&#x2F;O1"><p>InputStream是所有字节输入流的抽象父类，为所有字节输入流提供一个标准的、基本的读取字节的方法，它常用方法如下：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>int read()</td><td>从输入流中读取下一个字节数据(0~255)，已到达最后没有可读取数据时返回-1</td></tr><tr><td>int read(byte[] b)</td><td>从输入流中读取b.length个字节到数组b中，并返回实际读取的字节数，已到达最后没有可读取数据时返回-1</td></tr><tr><td>int read(byte[] b, int off, int len)</td><td>读取字节保存在b数组的下标off到len - 1处，已到达最后没有可读取数据时返回-1</td></tr><tr><td>int available()</td><td>返回可以从输入流中读取的字节数(估计值)</td></tr></tbody></table><p>InputStream的常用子类如下：</p><table><thead><tr><th>InputStream子类</th><th>描述</th></tr></thead><tbody><tr><td>FileInputStream</td><td>文件字节输入流，用于从文件中读取信息</td></tr><tr><td>ByteArrayInputSream</td><td>字节数组输入流，允许将内存的缓冲区作为输入流使用，用于读取其内置缓存字节数组中的字节</td></tr><tr><td>ObjectInputStream</td><td>对象字节输入流，从输入流中读取对象</td></tr><tr><td>BufferedInputStream</td><td>缓冲字节输入流，使用缓冲区的输入流，它常常用来装饰其他字节输入流，为其提供缓冲功能，提高访问效率</td></tr><tr><td>DataInputStream</td><td>数据字节输入流，可以从输入流中读取基本的数据类型，如int、char、long等</td></tr></tbody></table><p>使用InputStream读取数据的大概流程如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    InputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">"file.txt"</span>);</span><br><span class="line">    <span class="keyword">int</span> size = in.available();</span><br><span class="line">    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[size];</span><br><span class="line">    <span class="keyword">int</span> len = in.read(b, <span class="number">0</span>, size);</span><br><span class="line">    String value = <span class="keyword">new</span> String(b);</span><br><span class="line">    System.out.println(<span class="string">"读取出的内容：value = "</span> + value);</span><br><span class="line">    in.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、OutputStream"><a href="#2、OutputStream" class="headerlink" title="2、OutputStream"></a>2、OutputStream</h3><img src="/2020/05/30/java%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/io4.png" class="" title="I&#x2F;O1"><p>OutputStream是所有字节输出流的抽象父类，为所有字节输出流提供一个标准的、基本的写入字节的方法，它常用方法如下：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>void write()</td><td>将指定的字节写入到输出流中</td></tr><tr><td>void write(byte[] b)</td><td>将字节数组b的内容写入到输出流中</td></tr><tr><td>void write(byte[] b, int off, int len)</td><td>将字节数组中下标off到len - 1的字节写入到输出流中</td></tr><tr><td>void flush()</td><td>清除输出流中的缓存，强制写出任何输出缓冲中的字节</td></tr></tbody></table><p>OutputStream的常用子类如下：</p><table><thead><tr><th>OutputStream子类</th><th>描述</th></tr></thead><tbody><tr><td>FileOutputStream</td><td>文件字节输出流，用于把字节写入到文件中</td></tr><tr><td>ByteArrayOutputSream</td><td>字节数组输出流，允许将内存的缓冲区作为输出流使用，用于把字节写入到内置缓存字节数组中</td></tr><tr><td>ObjectOutputStream</td><td>对象字节输出流，用于把对象写入到输出流中</td></tr><tr><td>BufferedOutputStream</td><td>缓冲字节输出流，使用缓冲区的输出流，它常常用来装饰其他字节输出流，为其提供缓冲功能，提高访问效率</td></tr><tr><td>DataOutputStream</td><td>数据字节输出流，可以把基本的数据类型写入到输出流中</td></tr></tbody></table><p>使用OutputStream写入数据的大概流程如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"file.txt"</span>, <span class="keyword">true</span>);</span><br><span class="line">    String content = <span class="string">"待写入的内容"</span>;</span><br><span class="line">    os.write(content.getBytes());</span><br><span class="line">    os.flush();</span><br><span class="line">    os.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><h3 id="1、Reader"><a href="#1、Reader" class="headerlink" title="1、Reader"></a>1、Reader</h3><img src="/2020/05/30/java%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/io5.png" class="" title="I&#x2F;O1"><p> Reader是所有字符输入流的抽象父类，为所有字符输入流提供一个标准的、基本的读取字符的方法，它常用方法如下：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>int read()</td><td>从输入流中读取下一个字符(0~65535)，已到达最后没有可读取数据时返回-1</td></tr><tr><td>int read(char[] cbuf)</td><td>从输入流中读取b.length个字符到数组b中，并返回实际读取的字符数，已到达最后没有可读取数据时返回-1</td></tr><tr><td>int read(char[] cbuffer,int off,int len)</td><td>读取字符保存在b数组的下标off到len - 1处，已到达最后没有可读取数据时返回-1</td></tr><tr><td>boolean ready()</td><td>判断输入流是否做好读的准备</td></tr></tbody></table><p>Reader的常用子类如下：</p><table><thead><tr><th>Reader子类</th><th>描述</th></tr></thead><tbody><tr><td>CharArrayReader</td><td>字符数组输入流，实现了字符缓冲区的输入流，将其内置字符缓存数组中的数据（通过构造方法传入）读取到程序中</td></tr><tr><td>InputStreamReader</td><td>字节转换流，用于将字节流转换成字符流，它读取字节，并使用指定的charset将其解码为字符</td></tr><tr><td>FileReader</td><td>文件字符输入流，以字符的形式读取文件中的内容</td></tr><tr><td>BufferedReader</td><td>缓冲字符输入流，它是一个装饰类，装饰其他字符输入流，为其提供缓冲功能，提高效率</td></tr></tbody></table><p>使用Reader读取数据的大概流程如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    FileReader reader = <span class="keyword">new</span> FileReader(<span class="string">"file.txt"</span>);</span><br><span class="line">    BufferedReader bReader = <span class="keyword">new</span> BufferedReader(reader);</span><br><span class="line">    StringBuilder content = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    String line;</span><br><span class="line">    <span class="comment">//readLine方法是BufferedReader中的方法，它一次读取一行，比read方法一次读取一个字符的效率快很多</span></span><br><span class="line">    <span class="keyword">while</span>((line = bReader.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">        content.append(line);</span><br><span class="line">        content.append(<span class="string">"\r\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"读取到的内容：content"</span> + content);</span><br><span class="line">    bReader.close();</span><br><span class="line">    reader.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//将字节流转换为Buffer字符流，同样可以使用readLine方法一行一行地读</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    StringBuilder content = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    String line;</span><br><span class="line">    BufferedReader reader = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">        <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"file.txt"</span>))</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">while</span>((line = reader.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">        content.append(line);</span><br><span class="line">        content.append(<span class="string">"\r\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"读取到的内容：content"</span> + content);</span><br><span class="line">    reader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、Writer"><a href="#2、Writer" class="headerlink" title="2、Writer"></a>2、Writer</h3><img src="/2020/05/30/java%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/io6.png" class="" title="I&#x2F;O1"><p>Writer是所有字符输出流的抽象父类，为所有字符输出流提供一个标准的、基本的写入字符的方法，它常用方法如下：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>void write()</td><td>将指定字符写入到输出流中</td></tr><tr><td>void write(char[] cbuf)</td><td>将字符数组b的内容写入到输出流中</td></tr><tr><td>void write(char[] cbuffer,int off,int len)</td><td>将字符数组中下标off到len - 1的字符写入到输出流中</td></tr><tr><td>void flush()</td><td>将缓存区中的所有数据写到文件中</td></tr></tbody></table><p>Writer的常用子类如下：</p><table><thead><tr><th>Reader子类</th><th>描述</th></tr></thead><tbody><tr><td>CharArrayWriter</td><td>字符数组输出流，实现了字符缓冲区的输出流，将字符写入到内置的字符缓存数组中</td></tr><tr><td>InputStreamWriter</td><td>字节转换流，用于将字节流转换成字符流，它可以使用指定的charset来写入字符</td></tr><tr><td>FileWriter</td><td>文件字符输出流，将字符写入到指定的文件中</td></tr><tr><td>BufferedWriter</td><td>缓冲字符输出流，它是一个装饰类，装饰其他字符输出流，为其提供缓冲功能，提高效率</td></tr></tbody></table><p>使用Writer写入数据的大概流程如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    FileWriter writer = <span class="keyword">new</span> FileWriter(<span class="string">"file.txt"</span>, <span class="keyword">true</span>);</span><br><span class="line">    BufferedWriter bWriter = <span class="keyword">new</span> BufferedWriter(writer);</span><br><span class="line">    StringBuilder content = <span class="keyword">new</span> StringBuilder(<span class="string">"待写入的内容"</span>);</span><br><span class="line">    writer.write(content.toString());</span><br><span class="line">    bWriter.flush();</span><br><span class="line">    bWriter.close();</span><br><span class="line">    writer.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RandomAccessFile"><a href="#RandomAccessFile" class="headerlink" title="RandomAccessFile"></a>RandomAccessFile</h2><p>RandomAccessFile它是属于IO系统的一部分，在java中，RandomAccessFile用来表示<strong>可随机访问</strong>的文件，前面我们所讲的字符流或字节流都是一种顺序流，通过顺序流打开的文件只能按顺序地从上往下地访问，不能说从后往前，或者说从中间开始访问，而通过RandomAccessFile打开的文件可以让我们不按顺序地读取文件，RandomAccessFile内部其实是通过称为file point的指针来进行文件地读写，我们可以设置指针在文件中的位置，从而达到从任意位置开始读写的目的，它的常用方法如下：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>RandomAccessFile(File f, String mode)</td><td>使用指定的File对象和模式(r/rw)创建随机文件流</td></tr><tr><td>long getFilePointer()</td><td>返回以字节计算的文件偏移量(从文件开始计算)，作为下一个read或writer的起点</td></tr><tr><td>long length() / setLength(long)</td><td>返回文件中的字节数 / 为文件设置新的长度</td></tr><tr><td>int read() / int read(byte[])</td><td>从文件中读取字节数据</td></tr><tr><td>void seek(long pos)</td><td>设置文件偏移量，以字节为单位</td></tr><tr><td>int skipBytes(int n)</td><td>跳过n个字节</td></tr><tr><td>void write(byte[] b)</td><td>将指定的字节数组写入到文件中，从当前的文件指针开始写</td></tr></tbody></table><p>下面是它的一些基本使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从指定的位置开始读取数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    File file=<span class="keyword">new</span> File(<span class="string">"file.txt"</span>);</span><br><span class="line">    RandomAccessFile randomFile = <span class="keyword">new</span> RandomAccessFile(file,<span class="string">"r"</span>);</span><br><span class="line">    <span class="comment">// 获取 RandomAccessFile对象文件指针的位置，初始位置为0</span></span><br><span class="line">    System.out.print(<span class="string">"输入内容："</span> + randomFile.getFilePointer());</span><br><span class="line">    <span class="comment">//移动文件记录指针的位置</span></span><br><span class="line">    randomFile.seek(<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] b=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> hasRead = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((hasRead = randomFile.read(b))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//输出文件读取的内容</span></span><br><span class="line">        System.out.print(<span class="keyword">new</span> String(b, <span class="number">0</span>, hasRead));</span><br><span class="line">    &#125;</span><br><span class="line">    randomFile.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过RandomAccessFile很容易地实现断点下载。</p><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><p>文件是输入/输出流的操作对象之一，java中用File代表文件，File类中封装了很多对文件或文件夹操作的方法，我把File类中常用的方法分为四类：状态检测、路径和名称操作、文件操作、目录操作。</p><p>File中的状态检测方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean canExecute()</td><td>判断此File实例对应的文件是否是可执行文件</td></tr><tr><td>int length()</td><td>返回此File实例对应文件的长度，单位为字节</td></tr><tr><td>boolean canRead()</td><td>判断此File实例对应的文件是否可读</td></tr><tr><td>boolean canWrite()</td><td>判断此File实例对应的文件是否可写</td></tr><tr><td>boolean isHidden()</td><td>判断此File实例对应的文件是否是隐藏文件</td></tr><tr><td>long lastModified()</td><td>返回此File实例的最后修改时间</td></tr></tbody></table><p>File路径和名称操作方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>String getAbsolutePath()</td><td>获取此File实例对应文件或文件夹的绝对路径</td></tr><tr><td>String getPath()</td><td>获取此File实例对应文件或文件夹的相对路径</td></tr><tr><td>String getName()</td><td>获取此File实例对应文件或文件夹的名称</td></tr><tr><td>File getParentFile()</td><td>获取此File实例对应文件的上级目录文件</td></tr><tr><td>String getParent()</td><td>获取此File实例对应文件的上级目录路径</td></tr></tbody></table><p>File中的文件操作方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean exists()</td><td>判断此File实例对应的文件是否存在</td></tr><tr><td>boolean isFile()</td><td>判断此File实例是否是一个标准文件</td></tr><tr><td>boolean delete()</td><td>删除此File实例对应的文件</td></tr><tr><td>boolean createNewFile()</td><td>根据File实例创建新的文件</td></tr><tr><td>void deleteOnExit()</td><td>在JVM终止时删除File实例对应的文件</td></tr><tr><td>boolean renameTo(File dest)</td><td>根据dest重命名此File实例对应的文件</td></tr><tr><td>static File createTempFile(String prefix, String suffix, File directory)</td><td>在directory目录下创建prefix.suffix临时文件</td></tr></tbody></table><p>File中的目录(文件夹)操作方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean isDirectory()</td><td>判断此File实例是否是一个文件夹</td></tr><tr><td>boolean mkdir()</td><td>根据File实例对应的文件夹创建当前目录（一级目录）</td></tr><tr><td>boolean mkdirs()</td><td>根据File实例对应的文件夹创建当前目录和上级目录（多级目录）</td></tr><tr><td>String[] list()</td><td>根据File实例对应的文件夹列出当前目录中所有文件和文件夹的路径</td></tr><tr><td>File[] listFiles()</td><td>根据File实例对应的文件夹列出当前目录中所有文件和文件夹的File实例</td></tr><tr><td>static File[] listRoots()</td><td>列出可用的文件系统盘符(根路径)</td></tr><tr><td>File[] listFiles(FileFilter filter)</td><td>返回一个File数组，表示当前File实例下满足指定过滤器filter的所有文件和目录</td></tr></tbody></table><p>我们可以发现File中的方法只能获取或设置文件相应的<strong>信息</strong>，并不能获取或设置文件里面的<strong>内容</strong>，想要获取或设置文件里面的内容需要通过前面讲过的<strong>流操作</strong>来完成，除此之外File还有一些静态字段用来表示与系统无关的属性，例如目录分隔符separator、属性分隔符pathSeparator，这些分隔符在不同的操作系统上的表示是不一样的，例如在window上通过File的separator和pathSeparator获取到的输出是 \ 和 ; ，在Unix上获取到的输出是 / 和 ：。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文从字节流、字符流，文件操作等介绍了java的IO系统，同时这些基于流的IO操作又被称为传统的IO操作，为什么说它是传统的呢，因为早在java4就推出<strong>NIO</strong>，即New IO，NIO相对与传统的IO的主要区别是NIO是基于通道和缓冲区的，同时NIO是非阻塞的，所以它比传统的IO更高效，所以在java4之后，NIO完全可以替代传统的IO，但是话虽是这么说，传统的IO也十分重要，毕竟在一些简单的场景下它的使用还是更加的方便，NIO更多地是使用在高并发的服务端上。</p><p>参考资料：</p><p><a href="https://www.jianshu.com/p/d30893c4d6bb" target="_blank" rel="noopener">Java：带你全面了解神秘的Java NIO</a></p><p><a href="https://blog.csdn.net/jssg_tzw/article/details/77991749" target="_blank" rel="noopener">Java IO体系架构图</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;I/O(Input/Output)操作，即输入输出操作，它是一个相对的过程，我们一般站在位于内存中的程序的角度来思考这个操作的过程，&lt;str
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="I/O" scheme="http://yoursite.com/tags/I-O/"/>
    
  </entry>
  
  <entry>
    <title>java学习总结之反射</title>
    <link href="http://yoursite.com/2020/03/19/java%E5%8F%8D%E5%B0%84/"/>
    <id>http://yoursite.com/2020/03/19/java%E5%8F%8D%E5%B0%84/</id>
    <published>2020-03-19T06:59:32.000Z</published>
    <updated>2023-01-07T10:44:48.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在java中，反射就是在程序<strong>运行时</strong>动态的获取某一个类的元数据(metadata，描述数据的数据)的过程，这些元数据包括构造器、方法、成员变量、内部类、接口、父类等，通过反射，我们可以在程序<strong>运行时</strong>动态地去操作类的方法、成员变量等信息，所以，在java中，反射为我们提供了一种<strong>动态访问、修改</strong>类的能力，掌握反射，对我们加深java语言的理解很有帮助，反射大部分所使用到的类都在<strong>java.lang.reflect</strong>包下。</p><h2 id="为什么使用反射"><a href="#为什么使用反射" class="headerlink" title="为什么使用反射"></a>为什么使用反射</h2><p>首先我们要知道在java中，对象分为<strong>编译时类型</strong>和<strong>运行时类型</strong>，例如：<strong>Object obj = new String(“123”)；</strong> 其中obj变量的编译时类型为Object类型，运行时类型为String类型，编译时类型在<strong>编译期</strong>就确定了变量的类型，而运行时类型则在<strong>运行期</strong>才确定变量的类型。</p><p>这时假设我需要通过obj 变量调用String中的length()方法，当我写下<strong>obj.length()</strong>这句代码时，编译就会报错，因为编译时会检查obj变量的编译时类型Object，发现它不存在length()方法，编译不通过，报错，这时的解决方法是：把obj强转成String，然后再调用length()方法，如：<strong>((String)obj).length()；</strong>这时编译就通过了。</p><p>但是如果此时我并不知道obj变量的运行时类型是String，我怎么强转，我怎么调用它的length()方法？这时就要通过反射来实现了，例如下面的场景：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//外部调用getLen方法，把obj变量传入方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Object obj = <span class="keyword">new</span> String(<span class="string">"123"</span>);</span><br><span class="line">    System.out.println(getLen(obj));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在方法内部的我们只知道obj的编译时类型为Object，并不知道它的运行时类型是什么？</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLen</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">    <span class="comment">//通过反射调用obj的length()方法</span></span><br><span class="line">    Method method = obj.getClass().getMethod(<span class="string">"length"</span>);</span><br><span class="line">    <span class="keyword">return</span> (Integer) method.invoke(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述我们在执行一个getLen方法，方法传入了一个Object类型的对象，但是我们却需要调用对象运行时类型的方法length()，我们此时并不知道该对象的运行时类型，只知道对象编译时类型是Object，这时就需要通过反射来实现该方法的调用，obj变量在运行时是String类型，所以上述代码在运行时通过反射调用了obj的length()方法。</p><p>所以为什么要使用反射呢？这是因为有时候<strong>我们在编译时无法预知对象的运行时类型，但却需要使用对象的运行时类型的信息</strong>，这时就需要通过反射来实现。</p><h2 id="反射的基本使用"><a href="#反射的基本使用" class="headerlink" title="反射的基本使用"></a>反射的基本使用</h2><h3 id="1、获取Class对象"><a href="#1、获取Class对象" class="headerlink" title="1、获取Class对象"></a>1、获取Class对象</h3><p>每个类被加载进JVM时，JVM会为这个类创建一个java.lang.Class对象，Class对象就是类的元数据，通过这个Class对象，我们可以在代码运行时访问到这个类的所有信息，Class对象是代码运行时访问类信息的唯一入口，所以要想使用反射，我们首先要获取到类的Class对象，获取Class对象主要有以下3种方法：</p><ul><li>1、<strong>使用Class的forName(String className)方法</strong>：该方法需要传入类的全限定名，通过类的全限定名加载这个类进入JVM，并返回该类的Class对象，如果无法加载这个类就抛出一个ClassNotFoundException异常；</li><li>2、<strong>调用某个类的class属性</strong>：每个类都有一个class属性，调用类.class会返回该类的Class对象；</li><li>3、<strong>调用某个对象的getClass方法</strong>：getClass方法是Object类中的一个方法，所以java中的所有对象都可以调用这个方法，getClass方法会返回该对象所属类的Class对象；</li></ul><p>下面使用上面的3种方法获取String类的Class对象，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">//1、使用Class的forName(String className)方法</span></span><br><span class="line">    Class&lt;?&gt; stringClass1 = Class.forName(<span class="string">"java.lang.String"</span>);</span><br><span class="line">    <span class="comment">//2、调用String类的class属性</span></span><br><span class="line">    Class&lt;String&gt; stringClass2 = String<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    <span class="comment">//3、调用String对象的getClass方法</span></span><br><span class="line">    Class&lt;?&gt; stringClass3 = <span class="keyword">new</span> String().getClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在JDK5之后，Class添加了<strong>泛型支持</strong>，允许使用泛型来限制Class的类型，例如上面的String.class，它的Class类型为Class&lt;String&gt;，它表示Class对应的类为String类，如果Class对应的类未知，可以使用Class&lt;?&gt;或Class表示，在java中，通过forName或getClass方法获取的Class对象的对应的类是<strong>未知的</strong>，而通过某个类的class属性返回的Class对象的对应的类是<strong>确定的</strong>，通过泛型限制，可以避免使用反射创建对象时进行强制类型转换。</p><p>在java中，除了类有对应的Class对象外，<strong>8大基本数据类型+void类型</strong>都有自己的Class对象，但是这些基本类型并不是对象，所以它们不能通过getClass方法获取Class对象，同时基本类型也没有类名的概念，所以它们也不能通过forName方法获取Class对象，它们只能通过XX.class的方式获取相应的Class对象，如：int.class、byte.class、short.class、long.class、double.class、float.class、char.class、boolean.class和void.class，JVM中会内置这九大类型的Class对象，无需我们从外部加载，同时在这九大类型的对应的包装类中都有一个<strong>TYPE</strong>常量，这个TYPE常量就是对应基本类的Class对象，但是包装类的Class对象并不等于基本类的Class对象，以int为例，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">    System.out.println(<span class="keyword">int</span><span class="class">.<span class="keyword">class</span> </span>== Integer.TYPE);<span class="comment">//输出true</span></span><br><span class="line">    System.out.println(<span class="keyword">int</span><span class="class">.<span class="keyword">class</span> </span>== Integer<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">//输出false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在java中，数组也是一个引用类型，也是一个对象，所以数组也有自己的Class对象，数组可以通过getClass方法和XX.class方式获取自己的Class对象，以int[]为例，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] ints = &#123;&#125;;</span><br><span class="line">    <span class="comment">//1、通过XX.class方式获取数组的Class对象</span></span><br><span class="line">    Class&lt;<span class="keyword">int</span>[]&gt; intsClass1 = <span class="keyword">int</span>[]<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    <span class="comment">//2、通过getClass方法获取数组的Class对象</span></span><br><span class="line">    Class&lt;?&gt; intsClass2 = ints.getClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、通过Class对象获取类信息"><a href="#2、通过Class对象获取类信息" class="headerlink" title="2、通过Class对象获取类信息"></a>2、通过Class对象获取类信息</h3><p>一旦获取到类的Class对象后，就可以通过Class对象获取类中的所有信息，这些信息包括：构造器、方法、成员变量、内部类、外部类、接口、父类、注解、类的修饰符，类名、类所在包等，但是我们常用的类信息只有<strong>构造器、方法、成员变量</strong>，它们的元数据代表如下：</p><ul><li><strong>Constructor</strong>：代表类的构造器对象；</li><li><strong>Method</strong>：代表类的方法对象；</li><li><strong>Field</strong>：代表类的成员变量对象；</li></ul><p>在Class类中都有这些元数据的相应的获取方法，通过Class对象获取这些元数据的相应方法的名称命名都有一个规律：如果获取方法中<strong>不带Declared</strong>关键字的，那么这个方法只能获取到类的<strong>public</strong>属性，<strong>包括继承的</strong>；而如果这个获取方法<strong>带Declared</strong>关键字，那么这个方法就能获取到类的所有<strong>public、protected、default、private</strong>属性，但<strong>不包括继承的</strong>，而子类是无法继承父类的构造器的，所以通过子类获取构造器时，是无法获取到父类的构造器，只能获取到属于子类的构造器，而对于方法、成员变量它们是可以继承自父类的。</p><p>下面分别介绍它们的获取方法和使用场景：</p><h4 id="2-1、获取类的Constructor"><a href="#2-1、获取类的Constructor" class="headerlink" title="2.1、获取类的Constructor"></a>2.1、获取类的Constructor</h4><p>下面的4个方法可以获取Class对应类的构造器对象Constructor：</p><ul><li>1、<strong>Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;… parameterTypes)</strong>：返回此Class对应类的、带指定形参列表的<strong>public</strong>构造器对象，传入的形参也要用对应类型的Class对象表示；</li><li>2、<strong>Constructor&lt;?&gt;[] getConstructors()</strong>：以数组的形式返回此Class对应类的所有<strong>public</strong>构造器对象；</li><li>3、 *<em>Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;… parameterTypes) *</em>：返回此Class对应类的、带指定形参列表的构造器对象，与访问权限无关，传入的形参也要用对应类型的Class对象表示；</li><li>4、<strong>Constructor&lt;?&gt;[] getDeclaredConstructors()</strong>：以数组的形式返回此Class对应类的所有构造器对象，与访问权限无关.</li></ul><p>获得到构造器对象Constructor后，就可以调用Constructor的<strong>newInstance(Object … initargs)方法</strong>创建对应类的实例，newInstance方法的initargs参数就是构造器中需要传入的参数，它是一个可变参数，如下我通过反射创建了一个值为123的String对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过反射创建对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException </span>&#123;</span><br><span class="line">    <span class="comment">//1、获取String类的Class对象</span></span><br><span class="line">    Class&lt;String&gt; stringClass = String<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    <span class="comment">//2、通过Class对象获取一个带String类型参数的构造器Constructor</span></span><br><span class="line">    Constructor&lt;String&gt; stringConstructor = stringClass.getConstructor(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//3、使用Constructor的newInstance方法创建String对象，并传入该构造器需要的参数“123”</span></span><br><span class="line">    String string = stringConstructor.newInstance(<span class="string">"123"</span>);</span><br><span class="line">    <span class="comment">//输出：123</span></span><br><span class="line">    System.out.println(string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你需要调用类的默认构造器来创建对象，这时调用Constructor的newInstance方法时就不需要传入参数，类的默认构造器就是没有参数的那个构造器，同时为了简化获取Constructor这一步骤，java允许我们直接使用<strong>Class对象的newInstance()</strong>方法来调用类的<strong>默认构造器</strong>来创建对象，如下我通过Class对象的newInstance方法创建了一个空String对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过反射创建对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException</span>&#123;</span><br><span class="line">    <span class="comment">//1、获取String类的Class对象</span></span><br><span class="line">    Class&lt;String&gt; stringClass = String<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    <span class="comment">//2、调用String类的默认构造器来创建对象</span></span><br><span class="line">    String string = stringClass.newInstance();</span><br><span class="line">    System.out.println(string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Class对象的newInstance方法从java9之后就被标记为Deprecated，java9之后推荐使用Constructor的newInstance方法来反射创建对象实例。</p></blockquote><p>为什么要使用Constructor来创建对象呢，直接使用new不行吗？这是因为某些场景下我们无法直接调用某个类的构造器，例如在一些框架中，传给我们的都是关于类的字符串(类的全限定名)，我们只能通过Class的forName方法获取到Class对象，然后获取到Constructor对象，然后通过Constructor对象来创建实例。</p><h4 id="2-2、获取类的Method"><a href="#2-2、获取类的Method" class="headerlink" title="2.2、获取类的Method"></a>2.2、获取类的Method</h4><p>下面的4个方法可以获取Class对应类的方法对象Method：</p><ul><li>1、<strong>Method getMethod(String name, Class&lt;?&gt;… parameterTypes) **：返回此Class对应类的、指定名称的、带指定形参列表的</strong>public**方法对象，传入的形参也要用对应类型的Class对象表示；</li><li>2、<strong>Method[] getMethods() **：以数组的形式返回此Class对应类的所有</strong>public**方法对象；</li><li>3、<strong>Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes) **：返回此Class对应类的、</strong>非继承的**、指定名称的、带指定形参列表的方法对象，与访问权限无关，传入的形参也要用对应类型的Class对象表示；</li><li>4、 <strong>Method[] getDeclaredMethods() **：以数组的形式返回此Class对应类的、</strong>非继承的**所有方法对象，与访问权限无关.</li></ul><p>获取到方法对象Method后，就可以通过Method的<strong>invoke(Object obj, Object… args)</strong>方法来调用Method对应的方法，其中invoke方法的返回值就是被调用方法的返回值，而invoke方法的obj参数表示被调用方法的所属对象，args参数表示被调用方法的需要传入的参数，如下我通过反射调用String对象的length方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过反射调用方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException </span>&#123;</span><br><span class="line">     <span class="comment">//1、获取String类的Class对象</span></span><br><span class="line">    Class&lt;String&gt; stringClass = String<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    <span class="comment">//2、通过Class对象获取名称为length、没有参数的方法对象method</span></span><br><span class="line">    Method method = stringClass.getMethod(<span class="string">"length"</span>);</span><br><span class="line">    <span class="comment">//3、通过invoke方法执行String对象的length方法，返回String的长度</span></span><br><span class="line">    Integer len = (Integer) method.invoke(stringClass.newInstance());</span><br><span class="line">    <span class="comment">//输出：0</span></span><br><span class="line">    System.out.println(len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要调用的是<strong>静态方法</strong>，那么invoke方法的第一个参数obj参数就要<strong>传入null</strong>，因为静态方法不属于任何对象，静态方法只属于对应的类，如下我通过反射调用String的valueOf(int)静态方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过反射调用静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException </span>&#123;</span><br><span class="line">    <span class="comment">//1、获取String类的Class对象</span></span><br><span class="line">    Class&lt;String&gt; stringClass = String<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    <span class="comment">//2、通过Class对象获取名称为valueOf、参数类型为int的方法对象method</span></span><br><span class="line">    Method method = stringClass.getMethod(<span class="string">"valueOf"</span>, <span class="keyword">int</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//3、通过invoke方法执行String类的valueOf方法，返回字符串“123”</span></span><br><span class="line">    <span class="comment">//注意：这里第一个参数传入了null，而不是String实例</span></span><br><span class="line">    String num = (String) method.invoke(<span class="keyword">null</span>, <span class="number">123</span>);</span><br><span class="line">    <span class="comment">//输出：123</span></span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要调用的方法有一个<strong>数组类型或可变参数类型</strong>的参数，那么调用时就需要注意，而可变参数底层实现其实就是数组，下面我以数组为例，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过反射调用参数含有数组类型的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="comment">//获取Main类的Class对象</span></span><br><span class="line">        Class&lt;Main&gt; mainClass = Main<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//情况1：数组的元素类型为基本数据类型</span></span><br><span class="line">        Method method1 = mainClass.getMethod(<span class="string">"doWork"</span>, <span class="keyword">int</span>[]<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//method1.invoke(null, 1, 2, 3);//错误</span></span><br><span class="line">        method1.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);<span class="comment">//正确</span></span><br><span class="line">        method1.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;&#125;);<span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//情况2：数组的元素类型为引用类型</span></span><br><span class="line">        Method method2 = mainClass.getMethod(<span class="string">"doWork"</span>, String[]<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//method2.invoke(null, "1", "2", "3");//错误</span></span><br><span class="line">        <span class="comment">//method2.invoke(null, new String[]&#123;"1", "2", "3"&#125;);//错误</span></span><br><span class="line">        method2.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> String[]&#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>&#125;&#125;);<span class="comment">//正确</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//数组的元素类型为基本数据类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            System.out.print(num + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组的元素类型为引用类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">(String[] strs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(String str : strs)&#123;</span><br><span class="line">            System.out.print(str + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到反射调用的方法的参数含有数组类型，在执行invoke方法时传参会很容易出错，所以为了保险起见，建议以后反射调用参数含有数组类型的方法时，<strong>把被调用方法的实际参数统统作为Object数组的元素即可，如：Method对象.invoke(方法所属对象，new Object[]{参数1，参数2，…})</strong>。</p><h4 id="2-3、获取类的Field"><a href="#2-3、获取类的Field" class="headerlink" title="2.3、获取类的Field"></a>2.3、获取类的Field</h4><p>下面的4个方法可以获取Class对应类的成员变量对象Field：</p><ul><li>1、<strong>Field getField(String name) **：返回此Class对应类的、指定名称的</strong>public**成员变量对象；</li><li>2、<strong>Field[] getFields() **：以数组的形式返回此Class对应类的所有</strong>public**成员变量对象；</li><li>3、<strong>Field getDeclaredField(String name) **：返回此Class对应类的、</strong>非继承的**、指定名称的成员变量对象，与访问权限无关；</li><li>4、<strong>Field[] getDeclaredFields() **：以数组的形式返回此Class对应类的、</strong>非继承的**所有成员变量对象，与访问权限无关.</li></ul><p>获得成员变量对象Field后，就可以通过Field的<strong>setXX(Object obj)</strong>方法和<strong>getXX(Object obj)</strong>方法为成员变量<strong>赋值</strong>和向成员变量<strong>取值</strong>，其中setXX或getXX方法中的obj参数表示成员变量所属的对象实例，而XX对应8种基本数据类型，如果成员变量为引用类型，则取消setXX或getXX方法中XX，例如下面我通过反射为一个引用类型变量和一个基本数据类型变量赋值和取值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//引用类型</span></span><br><span class="line">    <span class="keyword">public</span> String str = <span class="string">"123"</span>;</span><br><span class="line">    <span class="comment">//基本数据类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//通过反射访问成员变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        Main mainInstance = <span class="keyword">new</span> Main();</span><br><span class="line">        <span class="comment">//1、获取Main类的Class对象</span></span><br><span class="line">        Class&lt;Main&gt; mainClass = Main<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        <span class="comment">//2、通过Class对象分别获取名为str和名为num的成员变量对象Field</span></span><br><span class="line">        Field field1 = mainClass.getField(<span class="string">"str"</span>);</span><br><span class="line">        Field field2 = mainClass.getField(<span class="string">"num"</span>);</span><br><span class="line">        <span class="comment">//3、分别通过Field的setXX方法赋值，getXX方法取值</span></span><br><span class="line">        <span class="comment">//重新赋值，如果是引用类型就直接调用set方法就行，如果是基本数据类型就可以调用setXX方法</span></span><br><span class="line">        field1.set(mainInstance, <span class="string">"321"</span>);</span><br><span class="line">        field2.setInt(mainInstance, <span class="number">321</span>);</span><br><span class="line">        <span class="comment">//取值，如果是引用类型就直接调用get方法就行，如果是基本数据类型就可以调用getXX方法</span></span><br><span class="line">        String str = (String) field1.get(mainInstance);</span><br><span class="line">        <span class="keyword">int</span> num = (Integer)field2.getInt(mainInstance);</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        System.out.println(str);<span class="comment">//输出：321</span></span><br><span class="line">        System.out.println(num);<span class="comment">//输出：321</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果成员变量为静态成员变量，那么调用setXX或getXX方法时第一个参数就直接传<strong>null</strong>，如果这个成员变量是一个<strong>私有变量</strong>，那么还要调用<strong>setAccessible(true)</strong>方法后才能访问这个变量，如下我通过反射访问了一个名为data的私有变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过反射访问私有成员变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        Main mainInstance = <span class="keyword">new</span> Main();</span><br><span class="line">        <span class="comment">//1、获取Main类的Class对象</span></span><br><span class="line">        Class&lt;Main&gt; mainClass = Main<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        <span class="comment">//2、通过Class对象获取名为data的成员变量对象Field，这里使用了getDeclaredField方法，因为getDeclaredField方法可以获取到私有变量</span></span><br><span class="line">        Field field = mainClass.getDeclaredField(<span class="string">"data"</span>);</span><br><span class="line">        <span class="comment">//注意：这里调用了setAccessible(true)方法把私有成员变量设置为可访问</span></span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//3、通过Field的getXX方法取值</span></span><br><span class="line">        <span class="keyword">int</span> data = field.getInt(mainClass.newInstance());</span><br><span class="line">        <span class="comment">//输出：123</span></span><br><span class="line">        System.out.println(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对变量调用了setAccessible(true)后，就会在使用时关闭访问权限的检查，该变量就不会受访问权限的控制，我们就可以任意的修改和访问它。</p><p>其实不止Field可以调用setAccessible方法，对于Constructor、Method等也可以调用setAccessible方法，因为setAccessible方法是在<strong>AccessibleObject</strong>类中，而Field、Constructor、Method都继承自AccessibleObject，所以当以后想要通过Class对象访问<strong>private</strong>的Field、Constructor、Method时，都需要先调用<strong>setAccessible(true)</strong>关闭访问权限的检查后才能访问。</p><h3 id="3、小结"><a href="#3、小结" class="headerlink" title="3、小结"></a>3、小结</h3><p>以上就是反射的基本使用，下面再总结一下：</p><p>通过反射创建对象，需要通过下面三个步骤：</p><ul><li>1、获取该类的Class对象；</li><li>2、利用Class对象的getConstructor或getDeclaredConstructor方法来获取指定的构造器对象Constructor；</li><li>3、调用Constructor的newInstance方法来创建相应的对象.</li></ul><p>通过反射调用方法，需要通过下面三个步骤：</p><ul><li>1、获取该类的Class对象；</li><li>2、利用Class对象的getMethod或getDeclaredMethod方法来获取指定的方法对象Method;</li><li>3、调用Method的invoke方法来执行相应的方法.</li></ul><p>通过反射访问成员变量，需要通过下面三个步骤：</p><ul><li>1、获取该类的Class对象；</li><li>2、利用Class对象的getField或getDeclaredField方法来获取指定的成员变量对象Field;</li><li>3、调用Field的setXX和getXX方法来访问相应的成员变量。</li></ul><p>如果通过Class对象获取到的属性是私有的，还要调用setAccessible(true)方法关闭访问权限的检查。</p><h2 id="通过反射获取变量的类型"><a href="#通过反射获取变量的类型" class="headerlink" title="通过反射获取变量的类型"></a>通过反射获取变量的类型</h2><p>在JDK5之前，java中只有原始类型(raw types)和基本类型(primitive types)，它们都用Class类表示，从JDK5开始引入了泛型(ParameterizedType)，这时为了统一表示这些类型就引入了<strong>Type</strong>接口，同时为了扩展java的泛型，还引入了数组类型(GenericArrayType)、类型变量(TypeVariable)、通配符类型(WildcardType)，这5种类型的父接口都是Type，他们的各自含义如下：</p><ul><li><strong>Class</strong>：原始类型或基本类型，原始类型表示我们平常所使用的类、注解、枚举、数组等，基本类型表示基本数据类型，如int、byte、short等，它们都用Class类表示；</li><li><strong>ParameterizedType</strong>：参数化类型，表示java5引入的泛型类型，如List&lt;String&gt;、Map&lt;String, Integer&gt;等；</li><li><strong>GenericArrayType</strong>：数组类型，表示带有泛型的数组，如T[]、List&lt;String&gt;[]等；</li><li><strong>TypeVariable</strong>：类型变量，表示泛型的尖括号中的类型，如T、K、V等；</li><li><strong>WildcardType</strong>：通配符类型，表示泛型尖括号中带有上限或下限的通配符表达式，如? extends String、? super String等.</li></ul><p>泛型经过编译后会被自动擦除，所以最终JVM中运行的都是Class文件，Class类是反射的基础。</p><p>当一个成员变量被定义在类中的时候，它的编译时类型就已经确定，当我们通过Class对象获取到这个成员变量的Field对象后，就可以通过Field的<strong>getType</strong>方法返回它的编译时类型，即这个成员变量的数据类型，getType方法会返回一个Class对象，代表这个数据类型的Class对象，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String str = <span class="string">"123"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        Class&lt;Main&gt; mainClass = Main<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Field field = mainClass.getField(<span class="string">"str"</span>);</span><br><span class="line">        <span class="comment">//调用Field的getType方法返回Field对应变量的数据类型</span></span><br><span class="line">        Class&lt;?&gt; type = field.getType();</span><br><span class="line">        <span class="comment">//输出：java.lang.String</span></span><br><span class="line">        System.out.println(type.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果这个成员变量的类型是一个泛型，那么Field的getType方法返回的Class对象就会丢失了泛型尖括号中的类型参数，例如：Map&lt;Integer, String&gt; map = new HashMap&lt;&gt;()；获取到map变量的Field对象后，调用getType方法返回的Class类就是java.util.Map，丢失了尖括号中的类型参数信息，所以如果成员变量的类型是一个泛型，你可以通过Field的<strong>getGenericType</strong>方法返回它的参数化类型ParameterizedType，通过ParameterizedType就可以获取到泛型信息，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException</span>&#123;</span><br><span class="line">        Class&lt;Main&gt; mainClass = Main<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Field field = mainClass.getField(<span class="string">"map"</span>);</span><br><span class="line">        <span class="comment">//调用Field的getGenericType方法返回Field对应变量的数据类型</span></span><br><span class="line">        <span class="comment">//注意：getGenericType方法的返回值是一个Type类型，这说明它可以向下转型为Class、ParameterizedType、GenericArrayType、TypeVariable、WildcardType中的一个</span></span><br><span class="line">        Type type = field.getGenericType();</span><br><span class="line">        <span class="comment">//我们已经知道它是一个泛型</span></span><br><span class="line">        <span class="keyword">if</span> (type <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">            <span class="comment">//强转为参数化类型ParameterizedType</span></span><br><span class="line">            ParameterizedType parameterizedType = (ParameterizedType) type;</span><br><span class="line">            <span class="comment">//通过ParameterizedType的getRawType方法返回它的原始类型</span></span><br><span class="line">            Type rawType = parameterizedType.getRawType();</span><br><span class="line">            <span class="comment">//通过ParameterizedType的getActualTypeArguments方法返回泛型中的类型信息</span></span><br><span class="line">            Type[] types = parameterizedType.getActualTypeArguments();</span><br><span class="line">            System.out.println(<span class="string">"原始类型："</span> + rawType.getTypeName());</span><br><span class="line">            <span class="keyword">for</span>(Type t : types)&#123;</span><br><span class="line">                System.out.println(<span class="string">"类型形参： "</span> + t.getTypeName());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出：</span></span><br><span class="line">            <span class="comment">//原始类型：java.util.Map</span></span><br><span class="line">            <span class="comment">//类型形参： java.lang.Integer</span></span><br><span class="line">            <span class="comment">//类型形参： java.lang.String</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，如果成员变量的类型是一个泛型，就可以通过ParameterizedType的<strong>getRawType</strong>方法返回它的没有泛型信息的原始类型，通过ParameterizedType的<strong>getActualTypeArguments</strong>方法返回它的泛型信息，getActualTypeArguments方法它的返回值是一个Type数组，因为泛型的&lt;&gt;中会有多个Type，所以如果泛型的&lt;&gt;中某个Type是一个类型变量T，那么就可以把这个Type转成<strong>TypeVariable</strong>，通过TypeVariable的相应方法获取更多关于T的信息，如果&lt;&gt;中某个Type是一个通配符类型? extends XX或？super XX，那么就可以把这个Type转成<strong>WildcardType</strong>，通过WildcardType的相应方法获取更多关于通配符的信息，<strong>GenericArrayType</strong>同理。</p><p>所以对于数据类型为基本类型或原始类型的成员变量来说，通过getType方法就可以获取它的相应类型的Class对象；对于数据类型含有泛型的成员变量来说，就可以通过getGenericType方法获取它的相应类型，它返回一个Type，这个Type可以向下转型为ParameterizedType、GenericArrayType、TypeVariable中的一个，通过实际类型的相应方法获取泛型信息。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文通过对Class、Constructor、Method、Field、Type的基本使用来简单的介绍了一下java的反射，正是由于反射的存在，才使得java具有动态性、灵活性，反射在一些java的框架上应用非常广泛，如Spring等，对于我们平常开发的应用，主要就是本文的内容，同时反射也会和一些设计模式结合使用，让设计模式具有更好的扩展性，具体可以查看以下两篇文章:</p><p><a href="https://blog.csdn.net/Rain_9155/article/details/82942275" target="_blank" rel="noopener">工厂方法模式</a></p><p><a href="https://juejin.im/post/5db2fbd0518825645a5ba18b" target="_blank" rel="noopener">静态和动态代理模式</a></p><p>但同时反射也有它的缺点，反射的缺点就是执行效率低，因为反射需要按名称来检索类和方法，有一定的时间开销，同时反射会很容易破坏类的原本结构，所以在一些不必要的场景下不要频繁的使用反射。</p><p>以上就是本文的全部内容，希望大家有所收获！</p><p>参考资料：</p><p><a href="https://www.cnblogs.com/linghu-java/p/8067886.html" target="_blank" rel="noopener">java中的Type</a></p><p><a href="https://blog.csdn.net/carson_ho/article/details/80921333" target="_blank" rel="noopener">了解神秘的Java反射机制</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在java中，反射就是在程序&lt;strong&gt;运行时&lt;/strong&gt;动态的获取某一个类的元数据(metadata，描述数据的数据)的过程，这
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="反射" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>这是一份关于HTTP协议的学习总结</title>
    <link href="http://yoursite.com/2020/01/17/Http%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%B5%85%E6%9E%90/"/>
    <id>http://yoursite.com/2020/01/17/Http%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%B5%85%E6%9E%90/</id>
    <published>2020-01-17T07:33:15.000Z</published>
    <updated>2023-04-23T09:46:37.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着互联网的发展，网络已经越来越普及了，绝大多数的网络请求都是基于HTTP协议的，因此在开发中，了解HTTP的基本原理是必要的，在TCP/IP四层体系结构中，HTTP协议位于应用层，它是应用层主要使用的协议，应用层往下一层就是运输层，HTTP在运输层采用的是TCP协议来保证可靠传输，知道这些后，接下来详细介绍一下 Http。</p><a id="more"></a><h2 id="一、HTTP协议版本演变"><a href="#一、HTTP协议版本演变" class="headerlink" title="一、HTTP协议版本演变"></a>一、HTTP协议版本演变</h2><img src="/2020/01/17/Http%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%B5%85%E6%9E%90/http1.png" class="" title="http"><p>我们先来简单了解一下 HTTP 协议的历史演变：</p><ul><li><strong>HTTP/1.0</strong>：1996年，HTTP/1.0 版本发布，可以传输文字，图像、视频、二进制文件，它的特点是每次请求都需要建立一个单独的TCP连接，发送数据完毕，连接就关闭，如果还要请求其他资源，就必须再新建一个连接，上一次请求和下一次请求完全分离，这种非持续连接过程又叫做<strong>短连接</strong>。它的特点也是它的缺点，客户端和服务端每次请求都要建立TCP连接，而建立TCP连接和关闭TCP连接都是相对比较费时的过程，严重影响客户端和服务端的性能。</li><li><strong>HTTP/1.1</strong>：1997年，HTTP/1.1 版本发布，1999年广泛应用于各大浏览器网络请求中，直到现在HTTP/1.1也是使用最为广泛的HTTP协议，它进一步完善了HTTP/1.0，HTTP/1.1支持在一个TCP连接上传送多个HTTP请求和响应，即一个TCP连接可以被多个请求复用，减少了建立和关闭连接的消耗延迟，一定程度上弥补了HTTP/1.0每次请求都要创建连接的缺点，这种持续连接过程又叫做<strong>长连接</strong>，HTTP/1.1默认使用长连接。</li><li><strong>HTTP/2.0</strong>：2015年，HTTP/2 .0版本发布，前面的两个版本都是<strong>基于超文本</strong>的协议，HTTP 2.0把基于超文本的协议改成了<strong>基于二进制</strong>的，把HTTP请求和响应变成数据帧，这样易于实现<strong>多路复用</strong>，在一个TCP连接上可以同时“混合”发送多个HTTP的请求和响应，效率大大提高。</li></ul><p>*<em>长连接和多路复用的区别: *</em></p><p>上面讲到HTTP/1.1的长连接和HTTP 2.0的多路复用都是复用TCP连接，它们之间有什么区别呢？在讲解它们的区别之前先来聊一聊HTTP/1.1的长连接，HTTP/1.1的长连接可以分为非流水线和流水线工作方式：</p><ul><li><strong>非流水线</strong>：在同一个TCP连接下，客户端的下一个请求只有收到当前请求的响应后才能发出；</li><li><strong>流水线</strong>：又称Pipelining、管道化，在同一个TCP连接下，客户端可以连续的发送请求，而不用等待响应返回，当请求一个接着一个到达服务器时，服务器能够连续发回响应；</li></ul><p>如图：</p><img src="/2020/01/17/Http%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%B5%85%E6%9E%90/http2.png" class="" title="http1"><p>所以你会发现非流水线工作方式的长连接的若干个请求只能排队发送，后面的请求等待前面请求的响应返回才能获得执行机会，一旦有某请求处理超时，后续请求只能被阻塞，这样会导致TCP连接空闲，浪费资源；而流水线工作方式的长连接就可以连续的发送多个请求而不必等待响应的返回，这样看起来效率提高了一些。</p><p>所以流水线工作方式就是好的吗？这里根据我查到的<a href="https://www.thinbug.com/q/45583861" target="_blank" rel="noopener">资料</a>是：<strong>Pipelining在现代浏览器中是默认关闭</strong>的，因为由于技术和安全的关系，实现Pipelining在HTTP/1.X上是很复杂，同时Pipelining技术不支持所有的请求方法，而且就算开启了，由于<a href="https://zh.wikipedia.org/wiki/%E9%98%9F%E5%A4%B4%E9%98%BB%E5%A1%9E" target="_blank" rel="noopener">队头阻塞</a>的存在，它的效率也不会提高多少，假设多个请求按顺序 (现实情况可能由于网络拥堵不会按顺序到达) 到达服务端，多个请求会在服务端缓存那边排队，如果第一个请求处理时间过长，会导致后面的请求阻塞，而且很有可能后面有优先级更高的请求，这样导致高优先级请求不能被优先处理，所以不管有没有流水线工作方式，请求还是要排队处理，队头阻塞还是存在，流水线工作方式只能说是对非流水线方式的一种改进。</p><p>那么就没有办法提高响应效率了吗？为了解决这些问题，HTTP1.x支持在<strong>同一个域名(host)下建立多个TCP连接</strong>，现代浏览器支持同时建立<strong>5~10</strong>个TCP连接，即支持<strong>并行</strong>发送请求，每个浏览器都有一个Max-Connection最大连接限制，例如谷歌浏览器的Max-Connection值为6，即同一个域名下最多建立6个TCP连接，一次最多同时发送6个请求，超过限制后续请求就会被阻塞。</p><p>所以，综上所述，由于Pipelining技术在浏览器中默认是<strong>关闭</strong>的，所以HTTP1.1<strong>长连接</strong>的工作方式是<strong>非流水线形式</strong>，为了实现<strong>并行</strong>发送请求只能通过建立<strong>多个TCP</strong>连接，这在HTTP1.x时代中已经很不错了，但是随着技术的发展，现在一个网站每秒简简单单就上百个请求，而频繁的建立和保留TCP连接又是一件工作量不小的工作，所以并行TCP连接带来的效率有时也会很低。</p><p>所以为了解决以上所有问题，HTTP/2.0就诞生了，HTTP/2.0的<strong>多路复用(multiplexing)</strong>才是做到了<strong>同一个TCP</strong>连接下的真正的<strong>并发</strong>请求，多个请求可同时在一个TCP连接上并行发送，某个请求任务超时，不会影响到其它连接的正常执行，而且每个请求都可以分配优先级，优先级高的先执行。</p><p>如图：</p><img src="/2020/01/17/Http%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%B5%85%E6%9E%90/http3.png" class="" title="http1"><p>HTTP/2.0从协议的层面改进了HTTP，是未来的应用，对于HTTP2.0的更多优点可以查看<a href="https://juejin.im/post/5a4dfb2ef265da43305ee2d0" target="_blank" rel="noopener">HTTP2.0新特性</a>,  由于HTTP/2.0还未大规模应用，所以下面的讨论都是围绕<strong>HTTP/1.x</strong>。</p><blockquote><p>HTTP1.1的长连接在浏览器中是<strong>默认开启</strong>的，通过指定首部<strong>Connection：Keep-Alive</strong>，后面会讲到长连接的工作原理。</p></blockquote><h2 id="二、HTTP工作过程"><a href="#二、HTTP工作过程" class="headerlink" title="二、HTTP工作过程"></a>二、HTTP工作过程</h2><img src="/2020/01/17/Http%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%B5%85%E6%9E%90/http4.png" class="" title="http1"><p>HTTP是基于TCP的应用层协议，从更高层次封装了TCP的使用细节，使得网络操作更为简单，一个HTTP请求就是一个典型的C/S模式，HTTP协议首先要和服务端建立TCP连接，当建立TCP连接的三报文握手的前两次报文握手完成后，在第三次握手，客户端就把HTTP请求报文作为第三个握手报文的数据发送给服务端，服务端收到请求报文后，就把所请求的文档作为响应报文返回给客户端，如下：</p><img src="/2020/01/17/Http%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%B5%85%E6%9E%90/http5.png" class="" title="http3"><p>HTTP的工作特点可以总结为以下3点：</p><ul><li>1、<strong>面向无连接的</strong>：即通信双方在交换HTTP报文时不需要向建立HTTP连接，但HTTP使用了面向连接的TCP作为运输层协议；</li><li>2、<strong>无状态的</strong>：服务端不会记得每个客户访问的状态，同一个客户访问两次服务端上的页面时，服务端响应与第一次访问相同，所以出现了<strong>Cookie/Session机制</strong>维护连接的状态；</li><li>3、<strong>面向事务的</strong>：即对一系列信息的交换，要么所有信息交换都完成，要么一次交换都不进行。</li></ul><h2 id="三、HTTP的请求方法"><a href="#三、HTTP的请求方法" class="headerlink" title="三、HTTP的请求方法"></a>三、HTTP的请求方法</h2><img src="/2020/01/17/Http%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%B5%85%E6%9E%90/http6.png" class="" title="http1"><p>HTTP协议提供了几种请求方式，大家熟知的请求方式有8种GET、POST、DELETE、PUT、HEAD、TRACE、OPTIONS、CONNECT，其中最常用的是PUT（增）、DELETE(删)、POST（改）、GET（查）。下面以一张表来看看它们各自的作用。</p><table><thead><tr><th align="center">请求</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center"><strong>GET</strong></td><td align="left"><strong>获取资源</strong>：客户端通过URL获取服务端中的某个资源，请求参数放在URL中，然后服务端返回对应资源给客户端</td></tr><tr><td align="center"><strong>POST</strong></td><td align="left"><strong>传输实体主体</strong>：POST请求通常会用来提交HTML表单，把数据填在表单中，传给服务器，然后服务器对这些数据进行处理，虽然GET方法也可以用来传输主体实体，但是一般采用POST方法</td></tr><tr><td align="center"><strong>PUT</strong></td><td align="left"><strong>传输文件</strong>：与GET相反，PUT向服务器写入数据，一般用来传输文件，把需要传输的文件放在请求报文的主体上，然后保存到URL指定的位置</td></tr><tr><td align="center"><strong>DELETE</strong></td><td align="left"><strong>删除文件</strong>：与PUT相反，DELETE请求求服务器删除URL所指定的资源，请求参数放在URL中，但是服务端可以在客户端不知情下撤销此请求</td></tr><tr><td align="center"><strong>HEAD</strong></td><td align="left"><strong>获取报文首部</strong>：HEAD与GET类似，但服务器在响应中只返回首部不会返回主体部分，HEAD是用来在不获取资源的情况下获取资源的首部进行检查，如查看响应的状态码，看看资源是否被修改，对象是否存在</td></tr><tr><td align="center"><strong>TRACE</strong></td><td align="left"><strong>追踪路径</strong>：客户端发起一个请求时，可能要穿过防火墙，代理，网关等，每一个中间点都会修改HTTP原始请求报文，TRACE允许请求最终发送给服务端时，看看它最终变成什么样，服务端会返回一个状态码200 OK的响应报文，报文主体包含了TARCE信息</td></tr><tr><td align="center"><strong>OPTIONS</strong></td><td align="left"><strong>询问支持的方法</strong>：OPTIONS询问服务端支持的用来查询指定URL资源的方法，这就让客户端不用访问那些实际的资源就能判定访问各种资源的最优方法</td></tr><tr><td align="center"><strong>CONNECT</strong></td><td align="left"><strong>要求使用隧道协议连接代理</strong>：CONNECT要求在与代理服务器通信时建立隧道，实现用隧道进行TCP通信，隧道就是经过加密的通信信路，一般使用SSL/TLS协议把通信内容加密后经隧道传输</td></tr></tbody></table><p>HTTP/1.0支持的方法有：</p><p>GET、POST、PUT、HEAD、DELETE；</p><p>HTTP/1.1新增的方法有：</p><p>OPTIONS、TARCE、CONNECT。</p><blockquote><p>代理服务器：代理服务器是一种具有转发功能的服务器，它扮演了服务器和客户端之间的中间人角色，它可以接收客户端发来的请求并转发给服务端，也可以接收服务端返回的响应并转发给客户端，在这个过程中它不会改变任何URL，报文每经过一个代理服务器，都需要在首部via字段的末尾插入一个可以代表代理服务器的独特的字符串,  代理服务器主要作用有：缓存代理(减少网络带宽)、访问控制(提高安全性)等。</p></blockquote><h2 id="四、HTTP的报文格式"><a href="#四、HTTP的报文格式" class="headerlink" title="四、HTTP的报文格式"></a>四、HTTP的报文格式</h2><img src="/2020/01/17/Http%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%B5%85%E6%9E%90/http7.png" class="" title="http1"><p>用于HTTP协议交换的信息称为HTTP报文，客户端发出的HTTP报文叫做请求报文，服务端返回的HTTP报文叫做响应报文，它们都是由多行数据构成的字符串文本，用<strong>CR + LF (回车符 + 换行符) 作为换行符</strong>，HTTP报文大体分为<strong>报文首部</strong>和<strong>报文主体</strong>两块，由第一个出现的空行(CR + LF)划分，其中报文主体不是必须的，如下：</p><img src="/2020/01/17/Http%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%B5%85%E6%9E%90/http8.png" class="" title="http"><p>其中报文首部又可以分为：开始行、首部行；开始行根据报文的不同又分为：请求行、状态行；首部行根据报文的不同与首部字段的作用又可以分为：请求首部字段、响应首部字段、通用首部字段、实体首部字段。</p><p>下面分别简单介绍一下HTTP的请求报文和响应报文：</p><h3 id="1、请求报文"><a href="#1、请求报文" class="headerlink" title="1、请求报文"></a>1、请求报文</h3><p>一个HTTP的请求报文通常由请求行，请求首部，空行(CR + LF)，请求主体4个部分组成，如图：</p><ul><li><p><strong>请求行</strong></p><p>又叫起始行，就是报文的第一行，在请求报文中说明要以什么方式做什么请求；</p></li><li><p><strong>请求首部</strong><br>又叫首部，在请求行之后，由零个或多个首部字段组成，每个字段包含一个key和value，用冒号 <strong>:</strong> 分割，如Connection：keep-Alive，每个首部字段以一个CR + LF结束；</p></li><li><p><strong>请求主体</strong><br>又叫主体，其中可以包含任意类型的数据，如图片，视频、文本等，而请求首部和请求行只能是文本形式，在请求主体中包括了要发送给Web服务端的数据。</p></li></ul><p>不同的请求方式，它们的请求报文格式可能有点差别的，有些请求方式它的请求主体为空，有些则不为空，但是请求行和请求首部是必须存在的，下面以GET、POST请求报文举例：</p><h4 id="1-1、GET的请求报文"><a href="#1-1、GET的请求报文" class="headerlink" title="1.1、GET的请求报文"></a>1.1、GET的请求报文</h4><p>对于GET方法来说，它所有的请求参数都是拼接在<strong>URL</strong>最后，第一个参数前通过”?”连接，然后请求参数按照”key=value”格式进行追加，每个请求参数之间通过”&amp;”连接，如 ：</p><p> <strong><a href="http://www.myhost.com/text/?id=1&amp;name=rain" target="_blank" rel="noopener">http://www.myhost.com/text/?id=1&amp;name=rain</a></strong> </p><p>这个URL对于GET请求表示获取  <strong><a href="http://www.myhost.com/text/" target="_blank" rel="noopener">http://www.myhost.com/text/</a></strong>  位置下用户<strong>id为1</strong>，<strong>名为rain</strong>的文本，相应的请求报文格式如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/text/?id=1&amp;name=rain</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: www.myhost.com</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br></pre></td></tr></table></figure><p>从上面的HTTP请求报文格式知，第一行为请求行，表明请求方式为<strong>GET</strong>，子路径为 <strong>/text/?id=1&amp;name=rain</strong>，HTTP版本为<strong>1.1</strong>，后两行为请求首部，<strong>Host</strong>为主机地址，<strong>Cache-Control</strong>为<strong>no-cache</strong>，表示客户端不接受服务端缓存过的资源，而GET的请求参数都在URL中，所以请求主体为空。</p><blockquote><p>注意：对于URL的最长长度，不同的浏览器又不同的限制，大约为1024字节（1KB）。</p></blockquote><h4 id="1-2、POST的请求报文"><a href="#1-2、POST的请求报文" class="headerlink" title="1.2、POST的请求报文"></a>1.2、POST的请求报文</h4><p>对于POST方法来说，它们的报文格式一般是表单格式，也就是说请求参数存储在请求主体位置上，如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/local/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: www.myhost.com</span><br><span class="line"><span class="attribute">Accept-Encoding：gzip</span></span><br><span class="line"><span class="attribute">Content-Length</span>: 222222</span><br><span class="line"><span class="attribute">Content-Type</span>: multipart/from-data；boundary=dRGP2cPPTxE6WRTssnh4jC7HJLcSde</span><br><span class="line"><span class="attribute">Connection：Keep-Alive</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">--dRGP2cPPTxE6WRTssnh4jC7HJLcSde</span></span><br><span class="line">Content-Disposition：from-data；name=“username”  //name = username</span><br><span class="line">Content-Type：text/plain：charset=UTF-8</span><br><span class="line"><span class="attribute">Content-Transfer-Encoding</span>: 8bit</span><br><span class="line"></span><br><span class="line">rain//value = rain</span><br><span class="line">--dRGP2cPPTxE6WRTssnh4jC7HJLcSde</span><br><span class="line">Content-Diaposition:from-data:name="image"      //name = image</span><br><span class="line">filename="/storage/emulated/0/image/1234.png"</span><br><span class="line"><span class="attribute">Content-Type:application/octet-stream</span></span><br><span class="line"><span class="attribute">Content-Transfer-Encoding:binary</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line">//...省略二进制数据        //value = 二进制数据</span><br><span class="line">--dRGP2cPPTxE6WRTssnh4jC7HJLcSde--</span><br></pre></td></tr></table></figure><p>上述的请求报文的含义是向  <strong><a href="http://www.myhost.com/local/" target="_blank" rel="noopener">http://www.myhost.com/local/</a></strong>  这个地址发送一个POST请求，接受的内容编码方式为<strong>gzip</strong>，请求的数据长度为<strong>222222</strong>字节，请求的数据格式为 <strong>multipart/from-data（表单）</strong>，报文的<strong>boundary</strong>值为<strong>dRGP2cPPTxE6WRTssnh4jC7HJLcSde</strong>，<strong>Keep-Alive</strong>为开启长连接，空行之后，接下来就是请求报文的主体，主体有<strong>两个</strong>请求参数：</p><p>一个是<strong>名为username</strong>，<strong>值为rain</strong>的文本；</p><p>一个是<strong>名为image</strong>，<strong>值为二进制数据</strong>的图片.</p><p>请求参数是以<strong>两横杠+boundary</strong>开始的，然后是请求参数的一些首部，又称实体首部字段，如参数名，格式等，然后加上一个空行，最后才是参数的值，如上述的<strong>username=name</strong>，其表示如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--dRGP2cPPTxE6WRTssnh4jC7HJLcSde       //两横杠加boundary作为参数的开始</span><br><span class="line">Content-Disposition：from-data；name=“username” //name = username</span><br><span class="line">Content-Type：text/plain：charset=UTF-8</span><br><span class="line"><span class="attribute">Content-Transfer-Encoding</span>: 8bit</span><br><span class="line">                    </span><br><span class="line">rain                 //value = rain</span><br></pre></td></tr></table></figure><p>当报文主体中包含多个参数时，都要遵守这种格式：<strong>每个参数以两横杠+boundary分隔，参数首部字段与值之间有一个空行</strong>。</p><p>请求主体的最后是以<strong>两横杆+boundary+两横杠</strong>作为整个报文的<strong>结束符</strong>，如上面报文的最后一个参数 (图片二进制数据) 最后的<strong>- -dRGP2cPPTxE6WRTssnh4jC7HJLcSde- -</strong>，如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--dRGP2cPPTxE6WRTssnh4jC7HJLcSde //两横杠加boundary作为参数的开始</span><br><span class="line">Content-Diaposition:from-data:name="image"    //name = image</span><br><span class="line">filename="/storage/emulated/0/image/1234.png" </span><br><span class="line"><span class="attribute">Content-Type:application/octet-stream</span></span><br><span class="line"><span class="attribute">Content-Transfer-Encoding:binary</span></span><br><span class="line">  //不可省略的空行</span><br><span class="line">//...省略二进制数据  //value = 二进制数据</span><br><span class="line">--dRGP2cPPTxE6WRTssnh4jC7HJLcSde--          //整个报文的结束符</span><br></pre></td></tr></table></figure><h3 id="2、响应报文"><a href="#2、响应报文" class="headerlink" title="2、响应报文"></a>2、响应报文</h3><p>一个HTTP的响应报文通常由状态行、响应首部、空行(CR + LF)、响应主体组成，如下：</p><ul><li><p><strong>状态行</strong></p><p>在响应报文中粗略的说明了报文的执行结果；</p></li><li><p><strong>响应首部</strong></p><p>又叫首部，在状态行之后，由零个或多个首部字段组成，每个字段包含一个key和value，用冒号 <strong>:</strong> 分割，每个首部以一个CR + LF结束；</p></li><li><p><strong>响应主体</strong></p><p>其中可以包含任意类型的数据，如图片，视频、文本等，而首部和状态行只能是文本形式，在响应主体中包含了服务端要返回给客户端的数据.</p></li></ul><p>可以看到响应报文与请求报文的格式类似，最大的不同的就是第一行用状态信息代替了请求信息，格式如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP-Version Status-Code Reason-Phrase CRLF</span><br></pre></td></tr></table></figure><p>其中HTTP-Version代表HTTP协议版本，Status-Code代表响应状态码，Reason-Phrase代表状态码的文本描述，其中状态码的5种取值范围如下：</p><table><thead><tr><th align="center">取值范围</th><th align="left">含义</th></tr></thead><tbody><tr><td align="center">100~199</td><td align="left">信息状态码，表示请求已被接收，正在处理</td></tr><tr><td align="center">200~299</td><td align="left">成功状态码，表示请求已被成功处理</td></tr><tr><td align="center">300~399</td><td align="left">重定向状态码，表示完成请求必须要进行进一步的操作</td></tr><tr><td align="center">400~499</td><td align="left">客户端错误状态码，表示客户端请求有语法错误或请求无法实现</td></tr><tr><td align="center">500~599</td><td align="left">服务端错误状态码，表示服务端处理请求时出错</td></tr></tbody></table><p>例如这是一个GET请求的返回的响应报文格式：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP1.1 200 OK</span><br><span class="line">Data:Sat, 30, Dec 2006 23:23:00 GMT</span><br><span class="line">Content-Type:text/html；charset=UTF-8</span><br><span class="line"><span class="attribute">Content-Length:852</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="zh-CN"&gt;</span><br><span class="line">//...省略文档内容</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>上面HTTP响应报文表示，HTTP协议版本为<strong>1.1</strong>，响应状态码为<strong>200</strong>，表示请求成功，返回数据的类型为<strong>text/html（html）</strong>,  编码为<strong>UTF-8</strong>，返回数据的内容长度为<strong>852</strong>字节，空行之后，接下来就是返回的数据，是一个html文档。</p><h2 id="五、常见的状态码"><a href="#五、常见的状态码" class="headerlink" title="五、常见的状态码"></a>五、常见的状态码</h2><img src="/2020/01/17/Http%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%B5%85%E6%9E%90/http11.png" class="" title="http"><p>状态码的职责是当客户端向服务端发送请求时，描述服务端返回的请求结果，借助状态码，我们就可以得知服务端是正常处理了请求，还是出现了错误，下面是开发中经常遇见的状态码：</p><h3 id="1、2XX成功"><a href="#1、2XX成功" class="headerlink" title="1、2XX成功"></a>1、2XX成功</h3><p>2XX的响应结果表示请求被正常处理了.</p><ul><li><strong>200 OK</strong>：该状态码表示从客户端发来的请求在服务端被正常处理了，在返回的响应报文中，随状态码返回的信息会因为请求方法的不同而不同。例如GET方法，响应报文的主体会包含请求的资源，而对于HEAD方法，响应报文不包含主体部分，只包含响应首部；</li><li><strong>204 No Content</strong>：该状态码表示服务端接收的请求已成功处理，但是在返回的响应报文中不包含主体部分，这说明请求处理成功，但是没有任何资源返回。比如当浏览器发出的请求处理后，返回204响应，那么浏览器显示的页面将不会发生任何更新；</li><li><strong>206 Partial Content</strong>: 该状态码表示客户端进行了范围请求，而服务端成功返回了这一部分范围的资源，即响应报文的主体部分中会包含由Content-Range指定范围的内容。</li></ul><h3 id="2、3XX重定向"><a href="#2、3XX重定向" class="headerlink" title="2、3XX重定向"></a>2、3XX重定向</h3><p>3XX的响应结果表示客户端需要执行某些特殊操作后，服务端才能继续处理请求.</p><ul><li><strong>301 Moved Permanently</strong>：永久性重定向，该状态码表示请求的资源<strong>已被</strong>分配了新的URL，<strong>以后</strong>都应使用新的URL来访问该资源，这时响应报文首部的Location字段会提示新的URL。例如你使用这个最后忘记加斜杠 <strong>/</strong> 的地址 <strong><a href="http://www.myhost.com" target="_blank" rel="noopener">http://www.myhost.com</a></strong> 来访问服务端，就会返回301状态码，提示你使用正确的地址访问，不过这些重定向的操作浏览器在背后已经替我们处理了，所以用户是无法感知的；</li><li><strong>302 Found</strong>：临时重定向，该状态码表示请求的资源<strong>暂时</strong>被分配了新的URL，<strong>本次</strong>应使用新的URL来访问该资源，302和304的区别就是一个是临时性，一个是永久性，302代表资源不是被永久移动，而是临时移动，即本次会重定向到地址a，下一次可能会重定向到地址b或者不变，所以响应报文首部的Location字段提示的新URL并不是永久性的，而是临时性的；</li><li><strong>303 See Other</strong>：临时重定向，该状态码表示请求的资源<strong>暂时</strong>被分配了新的URL，<strong>本次</strong>应使用新的URL通过<strong>GET</strong>方法来访问该资源，303和302功能相似，但是303明确表示客户端重定向时应采用GET方法获取资源，而302就没有这个要求。（但是在现实中，大部分浏览器都没有遵循规范，不管是301、302还是303，都会把POST改成GET，然后重新获取资源）；</li><li><strong>304 Not Modified</strong>：304虽然被划分在3XX中，但是它和重定向没有任何关系，该状态码表示客户端访问的资源存在，但是未符合请求的附带条件，不允返回，这时返回的304响应报文不包含主体部分，请求的附带条件是指请求报文中包含If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since中任一首部。例如客户端想要检查本地资源缓存是否过期，就在GET请求中附带If-Modified-Since条件，If-Modified-Since的值是本地资源的Last-Modified(上一次修改时间)的值，服务端接收请求后，就会检查资源在服务端的上一次修改的时间是否比If-Modified-Since的值更新，如果没有，说明资源没有被修改过，返回304响应报文，告诉客户端可以继续使用本地缓存。(关于HTTP的缓存机制可以查看<a href="https://my.oschina.net/leejun2005/blog/369148#h1_1" target="_blank" rel="noopener">HTTP 协议缓存机制详解 </a>)。</li></ul><h3 id="3、4XX客户端错误"><a href="#3、4XX客户端错误" class="headerlink" title="3、4XX客户端错误"></a>3、4XX客户端错误</h3><p>4XX的响应结果表示客户端发生错误的原因所在.</p><ul><li><strong>400 Bad Request</strong>：该状态码表示客户端的请求报文中有语法错误，不能被服务端理解，当发生该错误后需要修改请求内容后再次发送；</li><li><strong>401 Unauthorized</strong>：该状态码表示发送的请求需要有通过HTTP认证的认证信息，401的响应报文会包含一个被请求资源的WWW-Authenticate首部用来质询用户信息，当浏览器初次接收到401响应，会弹出认证窗口，当浏览器第二次收到401响应，表示认证失败；</li><li><strong>403 Forbidden</strong>：该状态码表示服务端收到了请求，但是拒绝提供服务，服务端不会给出拒绝的详细理由，例如没有文件的访问权限等都会返回404响应；</li><li><strong>404 Not Found</strong>：该状态码表示请求资源在服务端上不存在，或者服务端拒绝请求但不想说明理由也会返回404；</li></ul><h3 id="4、5XX服务端错误"><a href="#4、5XX服务端错误" class="headerlink" title="4、5XX服务端错误"></a>4、5XX服务端错误</h3><p>5XX的响应结果表示服务端发送错误的原因所在.</p><ul><li><strong>500 Internal Server Error</strong>：该状态码表示服务端执行请求时发生了不可预估的错误，它表明服务端Web应用存在bug或其他故障；</li><li><strong>503 Server Unavailable</strong>：该状态码表示服务端当前不能处理客户端请求，一段时间后可能恢复正常，它表明服务端暂时处于超负载或停机维护状态，如果服务端得知故障恢复时间，它会在响应报文的Retry-After首部字段写入返回给客户端。</li></ul><blockquote><p>更多状态码信息请访问<a href="https://www.runoob.com/http/http-status-codes.html" target="_blank" rel="noopener">HTTP状态码</a></p></blockquote><h2 id="六、常见的首部字段"><a href="#六、常见的首部字段" class="headerlink" title="六、常见的首部字段"></a>六、常见的首部字段</h2><img src="/2020/01/17/Http%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%B5%85%E6%9E%90/http12.png" class="" title="http"><p>下面列举了HTTP/1.1中的47种常见首部字段，分为通用首部字段、请求首部字段、响应首部字段、实体首部字段：</p><h3 id="1、通用首部字段"><a href="#1、通用首部字段" class="headerlink" title="1、通用首部字段"></a>1、通用首部字段</h3><p>表示请求报文和响应报文双方都会使用的首部。</p><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>Cache-Control</td><td>控制缓存的行为</td></tr><tr><td>Connection</td><td>允许客户端和服务端指定与请求/响应连接相关的选项</td></tr><tr><td>Date</td><td>创建报文的日期时间</td></tr><tr><td>Pragma</td><td>报文指令</td></tr><tr><td>Trailer</td><td>报文末端的首部一览</td></tr><tr><td>Transfer-Encoding</td><td>告知接收端为了保证报文的可靠传输性，对报文采用了什么的编码方式</td></tr><tr><td>Upgrade</td><td>升级为其他协议</td></tr><tr><td>Via</td><td>代理服务器的相关信息</td></tr><tr><td>Warning</td><td>错误通知</td></tr></tbody></table><h3 id="2、实体首部字段"><a href="#2、实体首部字段" class="headerlink" title="2、实体首部字段"></a>2、实体首部字段</h3><p>表示请求报文和响应报文的主体的实体部分使用的首部，主要作用是补充资源内容的更新时间与实体相关的信息，可以看到大多都是以Content开头的。</p><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>Allow</td><td>资源可支持的 HTTP 方法</td></tr><tr><td>Content-Encoding</td><td>实体主体适用的编码方式</td></tr><tr><td>Content-Language</td><td>实体主体的自然语言</td></tr><tr><td>Content-Length</td><td>实体主体的大小</td></tr><tr><td>Content-Location</td><td>替代对应资源的 URI</td></tr><tr><td>Content-MD5</td><td>实体主体的报文摘要</td></tr><tr><td>Content-Range</td><td>实体主体的位置范围</td></tr><tr><td>Content-Type</td><td>实体主体的媒体类型</td></tr><tr><td>Expires</td><td>实体主体过期的日期时间</td></tr><tr><td>Last-Modified</td><td>资源的最后修改日期时间</td></tr></tbody></table><h3 id="3、请求首部字段"><a href="#3、请求首部字段" class="headerlink" title="3、请求首部字段"></a>3、请求首部字段</h3><p>表示从客户端向服务端发送请求报文时使用的首部，主要作用是补充请求的附加内容、客户端信息、响应内容相关优先级、编码等信息。</p><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>Accept</td><td>客户端可识别的内容类型列表</td></tr><tr><td>Accept-Charset</td><td>客户端可识别的字符集</td></tr><tr><td>Accept-Encoding</td><td>客户端可识别的数据编码</td></tr><tr><td>Accept-Language</td><td>客户端可识别的语言（自然语言）</td></tr><tr><td>Authorization</td><td>Web 认证信息</td></tr><tr><td>Expect</td><td>期待服务器的特定行为</td></tr><tr><td>From</td><td>用户的电子邮箱地址</td></tr><tr><td>Host</td><td>请求的主机名</td></tr><tr><td>If-Match</td><td>比较实体标记（ETag）</td></tr><tr><td>If-Modified-Since</td><td>比较资源的更新时间</td></tr><tr><td>If-None-Match</td><td>比较实体标记（与 If-Match 相反）</td></tr><tr><td>If-Range</td><td>资源未更新时发送实体 Byte 的范围请求</td></tr><tr><td>If-Unmodified-Since</td><td>比较资源的更新时间（与 If-Modified-Since 相反）</td></tr><tr><td>Max-Forwards</td><td>最大传输逐跳数</td></tr><tr><td>Proxy-Authorization</td><td>代理服务器要求客户端的认证信息</td></tr><tr><td>Range</td><td>实体的字节范围请求</td></tr><tr><td>Referer</td><td>对请求中 URI 的原始获取方</td></tr><tr><td>TE</td><td>传输编码的优先级</td></tr><tr><td>User-Agent</td><td>发出请求的浏览器类型，可以自行设置</td></tr></tbody></table><h3 id="4、响应首部字段"><a href="#4、响应首部字段" class="headerlink" title="4、响应首部字段"></a>4、响应首部字段</h3><p>表示服务端向客户端返回响应报文时使用的首部，主要作用是补充响应的附加内容、要求客户端附加额外的内容等信息</p><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>Accept-Ranges</td><td>是否接受字节范围请求</td></tr><tr><td>Age</td><td>推算资源创建经过时间</td></tr><tr><td>ETag</td><td>资源的匹配信息</td></tr><tr><td>Location</td><td>令客户端重定向至指定 URI</td></tr><tr><td>Proxy-Authenticate</td><td>代理服务器对客户端的认证信息</td></tr><tr><td>Retry-After</td><td>对再次发起请求的时机要求</td></tr><tr><td>Server</td><td>HTTP 服务器的安装信息</td></tr><tr><td>Vary</td><td>代理服务器缓存的管理信息</td></tr><tr><td>WWW-Authenticate</td><td>服务器对客户端的认证信息</td></tr></tbody></table><p>下面列举几个对HTTP首部的常见使用。</p><h3 id="5、具体应用"><a href="#5、具体应用" class="headerlink" title="5、具体应用"></a>5、具体应用</h3><h4 id="5-1、-长连接原理"><a href="#5-1、-长连接原理" class="headerlink" title="5.1、 长连接原理"></a>5.1、 长连接原理</h4><p>从HTTP/1.1起，默认都开启了长连接保持连接特性，通过在首部指定<strong>Connection：Keep-Alive</strong>，Keep-Alive也是一个首部，简单地说，当一个网页打开完成后，客户端和服务端之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务端上的网页，会继续使用这一条已经建立的TCP连接，Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同服务端软件中设置这个时间。</p><p>那么，长连接是如何工作的呢？长短连接是运输层（TCP）的概念，HTTP是应用层协议，它只能说告诉运输层我打算一段时间内复用TCP通道，而没有自己去建立、释放TCP通道的能力，那么HTTP是如何告诉运输层复用TCP通道的呢？分为以下几个步骤：</p><ul><li>1、客户端第一次发送请求报文时，顺带发送一个<strong>Connection: Keep-Alive</strong>的Header，表示需要保持连接，同时客户端可以顺带发送<strong>Keep-Alive: timeout=5, max=100</strong>这个Header给服务端；</li><li>2、然后服务端识别<strong>Connection: Keep-Alive</strong>这个Header，并且通过响应报文Header带同样的<strong>Connection: Keep-Alive</strong>，告诉客户端我可以保持连接；</li><li>3、客户端和服务端之间通过保持的TCP连接收发数据；</li><li>4、当客户端最后一次发送请求报文，顺带发送<strong>Connection：close</strong>这个Header，表示长连接关闭。</li></ul><p><strong>Keep-Alive: timeout=5,max=100</strong>表示TCP连接空闲时最多保持5秒，长连接接受100次请求就断开，长连接虽好，但是长时间的TCP连接容易导致系统资源无效占用，浪费系统资源，所以需要有一些限制。</p><blockquote><p>Connection首部除了用于管理连接外，还能控制不再转发的首部，格式为：Connection: 不再转发的首部，当经过代理服务器时，代理服务器会把Connection首部字段中指定的首部删除后，再把报文转发给服务端。</p></blockquote><h4 id="5-2、内容协商"><a href="#5-2、内容协商" class="headerlink" title="5.2、内容协商"></a>5.2、内容协商</h4><p>一个网站在服务器中可能有多种语言版本、有多份相同内容的页面，例如英文版的网页和中文版的网页，在HTTP通信时客户端与服务端进行内容协商，让服务端返回最合适的内容给客户端，内容协商会以类型、字符集、编码、语言等方式为标准返回合适的响应资源。</p><p>客户端可以在请求报文中设定特定的<strong>Accept-XX</strong>首部字段，例如 Accept、Accept-Charset、Accept-Encoding、Accept-Language等，服务端根据这些字段返回特定的资源，这些字段的解释如下:</p><ul><li><p><strong>Accept</strong>：</p><p><strong>示例：Accept: text/html，image/jepg;q=0.8，video/mpeg;q=0.5，*/*;q=0.1</strong></p><p>客户端在Accept首部中列举了它支持的内容类型，服务端从这些内容类型中挑选出一个优先级最高的类型，返回这个类型的内容给客户端，内容类型一般是<strong>type/subtybe</strong>形式，例如文本类型text/html、text/plain、…，图片类型image/jepg、image/gif、…，视频类型video/mpeg、…，等，多个类型之间用逗号 <strong>,</strong> 分隔，可以用 <strong>*** 通配符表示接受所有类型，通过</strong>q=<strong>表示优先级，与类型用分号 **;</strong> 分隔, q值越大，优先级越高，q值得范围是(0~1），如果不指定优先级，默认优先级都是1.0，内容类型放置顺序按优先级排序；</p></li><li><p><strong>Accept-Charset</strong></p><p><strong>示例：Accept-Charset: iso-8859，unicode-1-1;q=0.5</strong></p><p>客户端在Accept-Charset首部中列举了它支持的字符集，服务端从这些字符集中挑选出一个优先级最高的字符集，返回这个字符集的内容给客户端，与Accept相同，可以通过<strong>q=</strong>指定字符集的优先级，并且和Accept一样，字符集的放置顺序按优先级排序；</p></li><li><p><strong>Accept-Encoding</strong></p><p><strong>示例：Accept-Encoding: gzip，compress，deflate;q=0.5</strong></p><p>客户端在Accept-Encoding首部中列举了它支持的内容压缩格式，服务端从这些内容压缩格式中挑选出一个优先级最高的，把响应内容用这种格式压缩后再返回给客户端，客户端收到压缩的内容后，用相应的解压算法解压内容，再显示出来，与Accept相同，可以通过<strong>q=</strong>指定优先级，通过 ***** 通配符表示支持任意压缩格式；</p></li><li><p><strong>Accept-Language</strong></p><p><strong>示例：Accept-Language: zh-cn，en-us;q=0.5</strong></p><p>客户端在Accept-Language首部中列举了它支持的语言，服务端从这些语言中挑选出一个优先级最高的，返回相应语言版本的内容给客户端，如果没有优先级最高的语言版本，就返回次优先级的语言版本，例如示例中，没有中文版时，就返回英文版。</p></li></ul><p>当服务器从各种选择列表中挑选出客户端支持的类型、字符集、编码、语言后，就会在响应报文的首部指定<strong>Content-XX</strong>首部字段，告诉客户端响应内容的类型、字符集、编码、语言，例如Content-Type、Content-Encoding、Content-Language等，Content-Type表示内容类型，还会指明内容的字符集，Content-Encoding表示内容的编码类型，Content-Language表示内容的语言。</p><blockquote><p>上述的内容协商叫做<strong>服务器驱动协商</strong>，即由客户端通过首部告诉服务端它支持的东西，然后服务端做出选择，但是对于用户来说，浏览器替我们做的决定不一定是最优的，例如我看不懂英文，浏览器根据代理地理位置做了判断，返回了英文版的内容，这然对用户来说不是最优的，所以还有一种叫做<strong>客户端驱动协商</strong>，由用户告诉服务端他想要什么类型的内容，这时浏览器会弹出选择列表让用户选择，用户选择后，浏览器把用户的选择填入Accept-XX首部，再发送给服务端。</p></blockquote><h4 id="5-3、Cookie机制"><a href="#5-3、Cookie机制" class="headerlink" title="5.3、Cookie机制"></a>5.3、Cookie机制</h4><p>Cookie是用来管理客户端和服务端之间的状态，它是服务器发送到客户端并保存在本地的小型文本文件，其内容为一系列的键值对，Cookie并不属于HTTP/1.x的规范，但是由于HTTP的无状态特性，Cookie被广泛应用于各大Web网站的状态管理及用户识别。</p><p>Cookie的工作过程主要使用到了<strong>Set-Cookie</strong>和<strong>Cookie</strong>这两个首部，Set-Cookie首部存在于响应报文中，Set-Cookie首部包含服务端返回给客户端状态管理使用的Cookie信息，客户端收到响应后会从Set-Cookie首部中取出Cookie信息保存到本地；Cookie首部存在于请求报文中，Cookie首部包含客户端从服务端接收到的Cookie信息，每次客户端发起请求时，都会在请求报文的Cookie首部中携带Cookie信息发送给服务端。</p><p>Cookie需要和服务端的Session配合使用，Cookie是存储在客户端中，而Session是存储在服务器端中，Session是服务端保存用户状态的方式，它们的工作过程大概如下：</p><ul><li>1、当用户登陆网站时，填入账号、密码等信息，然后提交表单，这些信息会被放入HTTP的请求报文，然后发送给服务端；</li><li>2、服务端收到请求后，验证该用户名和密码，如果正确，则为该用户创建一个<strong>Session</strong>对象，Session对象中保存了用户的状态信息，并生成Session对象的唯一ID，称为<strong>Session ID</strong>，然后把Session对象存储到内存或数据库中，根据Session ID可以从内存或数据库获取到Session对象；</li><li>3、接着服务端把<strong>Session ID</strong>的值以<strong>name=value</strong>的形式放入响应报文的<strong>Set-Cookie</strong>首部中，其中name为Session ID的名字，value就是Session ID的值，name=value形式的Session ID就称为<strong>Cookie</strong>，Set-Cookie首部除了Session ID之外，还有一些其他信息，如Cookie的有效期、Cookie的域名范围等，然后把这个响应报文发送给客户端；</li><li>4、客户端收到响应报文之后从<strong>Set-Cookie</strong>首部中取出所有<strong>Cookie信息</strong>，然后把它保存到本地，客户端有时候会收到不止一个Set-Cookie首部，如果有多个，每个Set-Cookie首部中的Cookie信息都要保存；</li><li>5、客户端之后对同一个服务端进行请求时都会从本地取出Cookie信息，这时可以校验Cookie的有效期、路径、域名等信息，然后取出其中的<strong>Cookie值</strong>放入请求报文的<strong>Cookie</strong>首部字段，如果有多个Cookie值，Cookie首部中就用 <strong>;</strong> 分隔，然后把这个请求报文发送给服务端；</li><li>6、服务器收到请求后，从<strong>Cookie</strong>首部中取出Cookie，从Cookie中取出<strong>Session ID</strong>，然后用Session ID从内存或数据库取出用户信息，恢复用户之前的操作状态。</li></ul><p>下面是我登陆<a href="https://juejin.im/user/5b437173e51d45191d79c27a/activities" target="_blank" rel="noopener">掘金</a>时在响应报文找到的Set-Cookie首部，如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line">//...省略很多首部</span><br><span class="line"><span class="attribute">Set-Cookie</span>: ab=&#123;&#125;; path=/; expires=Fri, 15 Jan 2021 11:13:21 GMT; secure; httponly</span><br><span class="line"><span class="attribute">Set-Cookie</span>: auth.sig=nl1rsPof1lOURBJ1F81MyhGsoxs; path=/; expires=Thu, 23 Jan 2020 11:13:21 GMT; secure; httponly</span><br><span class="line"><span class="attribute">Set-Cookie</span>: QINGCLOUDELB=8015b18e7b6ee1bafcfd11812d999975a4db71eff5b47ab5974a1647066247c5|XiBFV|XiBFO; path=/; HttpOnly</span><br><span class="line"><span class="attribute">Set-Cookie</span>: auth=eyJ0b2tlbiI6ImV5SmhZMk5sYzNOZmRHOXJaVzRpT2lKdVNYTkJVVzlOWldwMWNuSkJjamQ2SWl3aWNtVm1jbVZ6YUY5MGIydGxiaUk2SWpNMWNYZzVhME52V21wMFNuUXdVbTRpTENKMGIydGxibDkwZVhCbElqb2liV0ZqSWl3aVpYaHdhWEpsWDJsdUlqb3lOVGt5TURBd2ZRPT0iLCJjbGllbnRJZCI6MTU3OTE3MTcxNTI0OCwidXNlcklkIjoiNWI0MzcxNzNlNTFkNDUxOTFkNzljMjdhIn0=; path=/; expires=Thu, 23 Jan 2020 11:13:21 GMT; secure; httponly</span><br></pre></td></tr></table></figure><p>可以看到它发送了4个Cookie给我，这个4个Cookie分别为ab=XX、_auth.sig=XX、_QINGCLOUDELB=XX、auth=XX，后面的一些path=XX、expires=XX、secure、httponly都是Cookie的附加信息，待会解释。</p><p>我随便点开几篇文章，它的请求报文里的Cookie首部都会携带上面的Cookie，如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/user/5b437173e51d45191d79c27a/posts</span> HTTP/1.1</span><br><span class="line">//...省略很多首部</span><br><span class="line"><span class="attribute">Cookie</span>: ab=&#123;&#125;;auth=eyJ0b2tlbiI6ImV5SmhZMk5sYzNOZmRHOXJaVzRpT2lKdVNYTkJVVzlOWldwMWNuSkJjamQ2SWl3aWNtVm1jbVZ6YUY5MGIydGxiaUk2SWpNMWNYZzVhME52V21wMFNuUXdVbTRpTENKMGIydGxibDkwZVhCbElqb2liV0ZqSWl3aVpYaHdhWEpsWDJsdUlqb3lOVGt5TURBd2ZRPT0iLCJjbGllbnRJZCI6MTU3OTE3MTcxNTI0OCwidXNlcklkIjoiNWI0MzcxNzNlNTFkNDUxOTFkNzljMjdhIn0=; auth.sig=nl1rsPof1lOURBJ1F81MyhGsoxs;QINGCLOUDELB=7526744c262201bf8ae89c7035a8ce8c9eb2c663a78c233d245e9356cc89386b|XiBG2|XiBG2;//省略了一些其他Cookie值</span><br></pre></td></tr></table></figure><p>可以看到Cookie首部都携带上了ab=XX、_auth.sig=XX、_QINGCLOUDELB=XX、auth=XX这4个Cookie。</p><p>挑一个Set-Cookie值解释一下它里面每个属性的含义，如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Set-Cookie</span>: ab=&#123;&#125;; path=/; expires=Fri, 15 Jan 2021 11:13:21 GMT; secure; httponly</span><br></pre></td></tr></table></figure><p>可以看到服务器端返回的Set-Cookie首部值中，每个属性用分号 <strong>;</strong> 分隔，这些属性的解释如下：</p><table><thead><tr><th>属性</th><th>解释</th></tr></thead><tbody><tr><td><strong>NAME=VALUE</strong></td><td>表示Cookie的名称和值，上面已经说过了，它是name=value形式的，在这里Cookie为ab={}，ab就是名称，{}就是值，每一个Set-Cookie首部都必需含有这个，在客户端发送请求时，Cookie会放在<strong>Cookie首部</strong>中</td></tr><tr><td><strong>path=路径</strong></td><td>Path属性指定了服务端下的哪些路径可以接受Cookie值，以斜杠<strong>/</strong> 作为路径分隔符，子路径也会被匹配，在这里path=/，表示根目录包括根目录下的所有子路径都可以接受这个Cookie值</td></tr><tr><td><strong>domain=域名</strong></td><td>虽然上面举的例子里没有domain属性，但是domain属性常常和path属性一起指定Cookie的作用域， domain属性指定了哪些域名的服务端可以接受Cookie，如果指定了domain属性，子域名也会包含，例如设置 domain=.example.com，则 子域名www2.example.com也可以使用这个Cookie，如果不指定，默认为当前服务端，但不包含子域名</td></tr><tr><td><strong>expires=过期时间</strong></td><td>expires属性表示Cookie的有效期，在服务端发送Cookie给客户端时，可以设定Cookie的过期时间，当省略expires属性时，Cookie的有效期仅维持到浏览器关闭之前，携带过期的Cookie给服务端是无效的，服务端发送过来的新的Cookie可以覆盖过期的Cookie</td></tr><tr><td><strong>secure</strong></td><td>含有secure属性表示仅在进行HTTPS连接时，才允许发送这个Cookie</td></tr><tr><td><strong>httponly</strong></td><td>含有httponly属性表示这个Cookie不能被JavaScript脚本调用，因为跨站脚本攻击 (XSS) 常常使用 JavaScript 的 *<em>document.cookie *</em>api窃取用户的 Cookie 信息，而Cookie附加了httponly属性后，document.cookie这个api就无法访问Cookie信息，从而避免了XSS，但是在Web页面内还是可以对Cookie进行读取操作</td></tr></tbody></table><blockquote><p>跨站脚本攻击 (XSS):  是指攻击者诱用户进入圈套，由用户在不知情的情况下执行攻击代码，攻击者事先编写脚本植入到用户的浏览器页面，用户在运行这些页面时就会触发脚本，发起攻击，常见的攻击有：利用脚本窃取用户的Cookie值、利用虚假输入表单骗取用户个人信息、显示伪造的图片或文章等。</p></blockquote><h2 id="七、HTTPS是什么"><a href="#七、HTTPS是什么" class="headerlink" title="七、HTTPS是什么"></a>七、HTTPS是什么</h2><img src="/2020/01/17/Http%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%B5%85%E6%9E%90/http13.png" class="" title="http"><h3 id="1、HTTP的问题"><a href="#1、HTTP的问题" class="headerlink" title="1、HTTP的问题"></a>1、HTTP的问题</h3><p>讲到HTTP不得不讲HTTPS，HTTPS并非一种新的协议，HTTPS就是<strong>安全版</strong>的HTTP，由于HTTP设计简单，使用简单，导致了它存在了大量安全问题，主要体现在以下三个方面：</p><ul><li>1、<strong>HTTP通信双方使用不加密的明文，内容可能会被窃听</strong>：HTTP是使用明文在网络上进行报文的传输，而在网络上进行传输的任何内容，都有可能被截获，例如通过一些Wireshark、Fiddler等抓包工具就可以抓取HTTP的报文，从而查看报文中的内容，而报文中的内容是未经过加密的明文，那么一些重要的信息就被别人窃取到了；</li><li>2、<strong>HTTP无法验证报文的完整性，所以报文有可能遭到篡改</strong>：无法验证报文的完整性是指通信方收到这个报文时，无法证明这个报文没有经过中间人的篡改，无法判断报文中的信息是否正确，因为HTTP在发出请求到接收响应的这段时间内，有可能被其他中间人拦截报文，中间人拦截后可能会把报文中的信息做了一些恶意的修改后才发送给通信双方，这样通信方收到报文后，就无法得知报文内容的正确性，虽然HTTP有消息摘要校验方法，但是不可靠；</li><li>3、<strong>HTTP通信不验证通信方的身份，因此有可能遇到伪装的通信方</strong>：HTTP是基于请求/响应的方式工作，只要客户端发出请求，服务端就要返回响应，在这个过程HTTP不会验证通信双方的身份，所以很有可能客户端会遇到伪装的服务端，服务端会遇到伪装的客户端，这样就会把一些重要的信息发送给伪装者。</li></ul><p>所以，为了解决以上3个安全问题，就出现了HTTPS。</p><h3 id="2、HTTPS的解决办法"><a href="#2、HTTPS的解决办法" class="headerlink" title="2、HTTPS的解决办法"></a>2、HTTPS的解决办法</h3><p>HTTPS使用<strong>加密 + 完整性保护 + 认证</strong>的方法解决上述3个问题，通过在HTTP的应用层与运输层之间加了一层<strong>SSL/TLS</strong>，如下：</p><img src="/2020/01/17/Http%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%B5%85%E6%9E%90/http14.png" class="" title="http2"><p>HTTP协议运行在TCP之上，HTTPS协议运行在SSL/TLS之上，SSL/TLS协议运行在TCP之上，使用HTTPS，所有传输的内容都要通过SSL/TLS层，<strong>加密 + 完整性保护 + 认证</strong>的工作就在SSL/TLS层中进行，换句话说<strong>HTTPS = HTTP + SSL/TLS</strong>。</p><blockquote><p>SSL(Secure Socket Layer)与TLS(Transport Layer Security)都是<a href="https://zh.wikipedia.org/wiki/傳輸層安全性協定#TLS_1.0" target="_blank" rel="noopener">安全性协议</a>，TLS是以SSL为原型开发的协议，所以TLS是基于SSL，有时会把SSL和TLS统称为TLS，目前的主流使用是TLS1.2、TLS1.3。</p></blockquote><p>下面简单讲解一下加密、完整性保护、认证的实现方式：</p><h4 id="2-1、采用混合加密机制进行加密"><a href="#2-1、采用混合加密机制进行加密" class="headerlink" title="2.1、采用混合加密机制进行加密"></a>2.1、采用混合加密机制进行加密</h4><p>为了防止报文内容被窃听，HTTPS采用了<strong>对称加密 + 非对称加密</strong>的混合加密机制。</p><ul><li><p><strong>对称加密</strong>：算法是公开的，在对称加密算法中，加密和解密都是使用的<strong>同一个密钥</strong>，因此对称加密算法要保证安全性的话，密钥要做好保密，只能让使用的人知道，不能对外公开；</p></li><li><p><strong>非对称加密</strong>：算法是公开的，在非对称加密算法中，加密使用的密钥和解密使用的<strong>密钥是不相同</strong>的，用来加密的密钥叫做<strong>公钥</strong>，用来解密的密钥叫做<strong>私钥</strong>，公钥是公开的，所有人都可以获得，私钥就需要做好保密，只能让使用的人知道，不能对外公开，非对称密钥除了用来加密，还可以用来进行<strong>签名</strong>，因为私钥无法被其他人获取，因此通信发送方使用其私钥进行签名(加密)，通信接收方使用发送方的公钥对签名进行解密，就能判断这个签名是否正确.</p></li></ul><p>HTTPS在通信的时候使用对称加密，但是使用对称加密就有一个问题，如何把密钥安全的发送给对方？如果简单的通过HTTP把密钥发送给对方，就有可能被中间人截获，这样对称加密就没有意义了，所以HTTPS采用了非对称加密来发送对称加密的密钥，这个过程如下：</p><p>1、首先服务端通过非对称加密算法生成一对密钥：公钥和私钥；</p><p>2、服务端把公钥发送给客户端，私钥自己保存；</p><p>3、客户端收到公钥后，利用公钥对对称加密使用的密钥S进行加密得到T，然后再发送给服务端；</p><p>4、服务端收到T后，利用私钥解密T，得到密钥S；</p><p>5、这样客户端和服务端都拥有了对称加密使用的密钥S，在之后的通信过程中就使用对称加密进行。</p><p>在这个过程中，就算中间人得到了T和公钥，想要通过公钥把T破解得到密钥S是非常困难的，以目前的技术来说，是几乎不可能实现，所以这样比直接发送密钥安全了很多。</p><p>综上所述，混合加密使得通信过程的安全得到保证，上述是为了讲解方便，在实际中，对称密钥不会只在客户端生成的，它同时会在服务端生成，这在后面的HTTPS的通信过程中讲到。</p><blockquote><p>既然非对称加密破解困难，安全，为什么通信时不一直使用？<br>首先非对称加密的运算比对称加密的运算复杂很多，运算速度慢，所以不可能一直使用非对称加密来通信，而对称加密的运算速度比非对称加密快，效率高，所以，HTTPS就充分利用两者的优缺点，结合使用，在交换密钥时使用非对称加密保证安全，在通信时使用对称加密保证安全和效率。</p></blockquote><h4 id="2-2、采用数字签名进行进行完整性保护"><a href="#2-2、采用数字签名进行进行完整性保护" class="headerlink" title="2.2、采用数字签名进行进行完整性保护"></a>2.2、采用数字签名进行进行完整性保护</h4><p>在讲解数字签名校验之前，先来讲一下HTTP的消息摘要校验，又称散列值校验。</p><ul><li><strong>消息摘要(Message Digest)</strong>：原文通过MD5、SHA-1等散列值生成算法计算出的散列值就称为消息摘要，无论输入的消息有多长，它的输出长度总是固定的，并且输出值是随机的，消息摘要生成函数是单向函数，即无法通过消息摘要恢复到原文，消息摘要广泛应用于<strong>数字签名</strong>中。</li></ul><p>HTTP的消息摘要校验过程是这样的：</p><p>1、服务端在发送报文之前，先用散列值生成算法生成报文的消息摘要，然后把报文和消息摘要一并发送给客户端；</p><p>2、客户端接收到报文和消息摘要后，就用相同散列值生成算法(已经协商过了)重新计算报文的消息摘要，如果重新计算的消息摘与发送来的消息摘要相同，就说明报文在中途没有被篡改过，否则被篡改过；</p><p>为什么HTTP的消息摘要校验是不可靠的？假设中间人拦截了上述过程的报文，首先通过穷举法找出你所用的散列值生成算法，修改报文后，用散列值生成算法重新计算报文的消息摘要，然后替换掉原本的消息摘要，然后把修改后的报文和重新计算的消息摘要一并发给客户端，客户端按照上述相同的验证流程，会得出报文没有被篡改过的结论，但其实报文已经被被篡改过了，所以HTTP的消息摘要校验是不可靠的，HTTP的消息摘要校验不可靠主要在于中间人可以重新生成篡改后报文的消息摘要。</p><p>所以为了解决HTTP消息摘要校验的缺点，HTTPS采用了<strong>数字签名</strong>进行完整性保护，其中签名使用到了非对称加密的公钥和私钥。</p><ul><li><strong>数字签名(Digital Signature)</strong>：用<strong>私钥</strong>对原文进行<strong>加密</strong>后生成的密文称为数字签名，数字签名可以通过公钥进行验证，把数字签名通过<strong>公钥解密</strong>后，如果和原文相同，就说明原文是<strong>完整的</strong>，没有被篡改过。</li></ul><p>所以采用了数字签名后，校验过程是这样的：</p><p>1、服务端在发送报文之前，先用散列值生成算法生成报文的消息摘要，然后再用私钥加密消息摘要生成数字签名，把数字签名与报文一起发送给客户端；</p><p>2、客户端接收到报文和数字签名后，先用相同的散列值生成算法重新计算报文的消息摘要，然后再用公钥解密数字签名得到报文的消息摘要，然后比较两份消息摘要是否相同，如果相同，说明报文在中途没有被篡改过，否则被篡改过；</p><p>HTTPS的数字签名是如何保证可靠性的？假设中间人截获了报文，把报文修改后重新生成消息摘要，但是中间人<strong>没有私钥</strong>对生成的消息摘要进行签名，因为<strong>私钥是保密</strong>的，这样他就无法重新生成新的数字签名，由于中间人没有办法生成修改后报文的数字签名，所以这就保证数字签名的可靠性，接收方收到数字签名和报文后，通过数字签名的校验流程，就能判断出报文的正确性。</p><p>综上所述，数字签名使得消息的完整性得到保证，在HTTPS中，数字签名一般会用到数字证书的传递上，下面会讲。</p><blockquote><p>为什么HTTPS要生成报文的消息摘后，再对消息摘要进行签名，而不对报文直接签名？<br>这是因为报文内容一般都很长，而报文的消息摘要输出的长度是固定，比报文长度短，这样通过私钥进行加密的运算量就大大减少，提高效率，所以当<strong>非对称加密与消息摘要</strong>结合使用后，便形成了一种高效又安全的数字签名方案。</p></blockquote><h4 id="2-3、采用数字证书进行身份认证"><a href="#2-3、采用数字证书进行身份认证" class="headerlink" title="2.3、采用数字证书进行身份认证"></a>2.3、采用数字证书进行身份认证</h4><p>大家有没有发现，前面所讲的数字签名和混合加密技术，客户端都必须事先知道服务端的<strong>公钥</strong>，如果一开始公钥就被中间人篡改了，那么坏人就会被你当成好人，你就会拿着这把假的公钥和假的服务端通信，所以如何保证公钥是<strong>真正的</strong>服务端颁发，又是另外一个问题，为了保证公钥的安全可信，HTTPS通过<strong>数字证书</strong>来解决服务端的身份认证问题。</p><ul><li><p><strong>数字证书(Digital Certificate)</strong>：数字证书是由<a href="https://zh.wikipedia.org/wiki/%E8%AF%81%E4%B9%A6%E9%A2%81%E5%8F%91%E6%9C%BA%E6%9E%84" target="_blank" rel="noopener">数字认证机构</a>(Certificate Authority, 简称<strong>CA</strong>)颁发的<strong>公开密钥证书</strong>，它里面大概包含如下信息：</p><p>1、<strong>发布机构(Issuer)</strong>: 表示该证书是由哪个机构（CA）颁发的；</p><p>2、<strong>有效期(Validity)</strong>: 表示证书的使用期限，过了有效期，证书就失效了</p><p>3、<strong>名称（Subject)</strong>：表示证书所有人的名字，这个证书是发给谁的，一般是某个人或者某个公司名称、机构的名称、公司网站的网址等；</p><p>4、<strong>公钥(Public-Key)</strong>: 表示证书所有人想要公布出去的公钥；</p><p>5、<strong>签名算法(Signature algorithm)</strong>: 表示证书的数字签名所使用的加密算法，这样就可以使用证书发布机构的公钥，根据这个算法对数字签名进行解密；</p><p>6、<strong>数字签名(Digital Signature)</strong>：表示证书发行者CA对该证书的数字签名，用于保证数字证书的完整性，确保证书没有被修改过.</p></li></ul><p>数字认证机构是处于客户端和服务端双方都信赖的第三方机构，由CA颁发的数字证书一定是可靠、可信的，下面来简单介绍一下服务端向CA申请数字证书的流程：</p><p>1、服务端的运营人员向CA提交自己的公钥、组织信息、域名等信息，然后CA会通过各种渠道、各种手段来判断服务端的身份是否真实，是否合法等（在这里就可以杜绝中间人非法申请证书）；</p><p>2、服务端的身份审核通过后，CA就会把服务端的公钥和证书的其他信息通过散列值算法生成一个消息摘要，然后用CA的私钥对消息摘要进行签名生成数字签名，然后把数字签名放入证书中，然后把这个证书颁发给服务端，所以数字证书最终包含<strong>服务端公钥 + 证书的数字签名 + 证书的其他信息</strong>，如下：</p><img src="/2020/01/17/Http%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%B5%85%E6%9E%90/http15.png" class="" title="http2"><p>现在服务端拿到了数字证书，客户端第一次请求服务端时，服务端就会把这个数字证书发送给客户端，客户端收到数字证书后，就会用CA的公钥对数字证书进行数字签名的验证，如果验证通过，说明数字证书中途没有被篡改过，是可靠的，从而知道数字证书中的公钥也是可靠的，所以客户端就放心的取出数字证书中的公钥进行以后的HTTPS通信。</p><p>在对数字证书的数字签名进行验证之前，必须先知道CA的公钥，因为数字证书的数字签名是由CA的私钥进行签名的，所以CA的公钥必须安全的转交给客户端，如何安全的转交又是一个困难的问题，所以，大多数浏览器开发商发布版本时，会事先在内部植入常用的CA机构的<strong>根证书</strong>, 这些根证书中会包含CA的公钥，也就是说CA的公钥已经内置在浏览器中了。</p><p>综上所述，数字证书可以确认服务端的身份，可以解决公钥的安全发放问题，同时数字证书也是通过数字签名来验证的。</p><blockquote><p>浏览器内置的CA都是常用的、信任的CA机构，所以如果服务端发来的数字证书的相关CA机构刚好不在浏览器的内置CA列表中，浏览器就会找不到该数字证书的CA公钥，就会判定该数字证书是非法，这时浏览器会提示你<strong>手动安装</strong>该数字证书的CA机构的根证书，这个时候你就要自己承担风险了，很有可能这个网站是不可信任的，安装了根证书后就可以拿到CA的公钥进行数字证书的验证，验证通过后就能与服务端通信。</p></blockquote><p>打开一个由HTTPS连接 (地址栏上有一个锁的标志) 的网站，通过以下方式查看它的数字证书，如下：</p><img src="/2020/01/17/Http%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%B5%85%E6%9E%90/http16.png" class="" title="http2"><h3 id="3、HTTPS的通信过程"><a href="#3、HTTPS的通信过程" class="headerlink" title="3、HTTPS的通信过程"></a>3、HTTPS的通信过程</h3><p>在进行HTTPS通信前，必须先进行TCP三次握手建立TCP连接，然后进行<strong>TLS握手</strong>，进行完TLS握手后才会开始加密的HTTPS通信，在TLS握手的过程中主要进行<strong>密钥交换</strong>(对称加密使用的密钥)、<strong>身份认证</strong>等步骤，根据密钥交换时使用的算法不同，TLS握手可以分为<strong>RSA</strong>握手和<strong>DH</strong>握手，目前主流的是DH握手，而且RSA握手由于它没有<a href="https://zh.wikipedia.org/wiki/前向保密" target="_blank" rel="noopener">向前保密</a>，已经在TLS1.3中被淘汰了，关于这两个握手算法的主要细节与区别可以查看下面文章，限于篇幅，本文不展开讨论：</p><p><a href="https://blog.cloudflare.com/keyless-ssl-the-nitty-gritty-technical-details/" target="_blank" rel="noopener">Keyless SSL: The Nitty Gritty Technical Details</a></p><p><a href="https://razeencheng.com/post/ssl-handshake-detail.html#comments" target="_blank" rel="noopener">HTTPS篇之SSL握手过程详解</a></p><p>我通过抓取各大主流网站的TLS包发现，目前HTTPS使用的TLS版本几乎都是<a href="https://tls.ulfheim.net/" target="_blank" rel="noopener">TLS1.2</a>和<a href="https://tls13.ulfheim.net/" target="_blank" rel="noopener">TLS1.3</a>版本，下面的分析都是基于<strong>TLS1.2的DH握手</strong>过程，下面是我打开第一次打开<a href="https://blog.csdn.net/Rain_9155" target="_blank" rel="noopener">csdn博客</a>时抓取的TLS包(经过过滤后)，如下：</p><img src="/2020/01/17/Http%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%B5%85%E6%9E%90/http17.png" class="" title="http2"><p>其中info栏的信息表示TLS握手过程中客户端和服务端之间交互时发送的TLS包的名称，有Server Key Exchange包表示它本次的握手类型是DH握手，上面的TLS握手过程可以用下图表示，如下：</p><img src="/2020/01/17/Http%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%B5%85%E6%9E%90/http18.png" class="" title="http2"><p>上图省略了New Session Ticket包，New Session Ticket包是用于会话复用，并不是必要的，省略它并不会影响对TLS握手过程的理解，在TLS握手完成之前，报文的传输都是明文，TLS握手过程的每个步骤的解释如下：</p><ul><li><strong>步骤1</strong>：客户端发送<strong>Client Hello</strong>报文给服务端，表示开始TLS握手，Client Hello报文中包含客户端支持的TLS版本(Version)、支持的加密组件列表(Cipher Suites)、<strong>客户端生成的随机数</strong>(Random)等信息；</li><li><strong>步骤2</strong>：服务端收到Client Hello报文后，如果可以开始进行通信，就会发送<strong>Server Hello</strong>报文给客户端作为回应，Server Hello报文中包含支持的TLS版本(Version)、从加密组件列表中选择的加密组件(Cipher Suite)、<strong>服务端生成的随机数</strong>(Random)等信息，其中加密组件用于告诉客户端接下来身份认证、密钥交换、对称加密等过程使用的算法；</li><li><strong>步骤3</strong>：紧接着服务端就会发送<strong>Certificate</strong>报文，报文中包含服务端的数字证书，即公钥证书，客户端收到证书后，就会对服务端进行身份认证，身份认证使用的算法就是在步骤2协商好的认证算法，一般会使用RSA；</li><li><strong>步骤4</strong>：接着服务端就会发送<strong>Server Key Exchange</strong>报文，Server Key Exchange报文中包含服务端根据相应的DH算法生成<strong>DH参数</strong>(PubKey)，这个DH算法就是在步骤2协商好的密钥交换算法；</li><li><strong>步骤5</strong>: 最后服务端发送<strong>Server Hello Done</strong>报文通知客户端它完成了TLS握手的一半，服务端到目前为止向客户端发送了服务端的随机数、证书、服务端的DH参数；</li><li><strong>步骤6</strong>：接下来客户端向服务端发送<strong>Client Key Exchange</strong>报文，Client Key Exchange报文中包含客户端根据相应的DH算法生成的<strong>DH参数</strong>(PubKey)，这个DH算法同样是在步骤2协商好的密钥交换算法；</li><li><strong>步骤7</strong>：紧接着客户端就会使用在步骤1自己生成的随机数、在步骤2收到的服务端随机数、在步骤4收到的服务端DH参数、在步骤6自己生成的DH参数这<strong>四个</strong>参数，通过在步骤2协商好的对称加密算法来生成以后通信过程中使用的密钥，这里记为<strong>S</strong>，然后客户端就会发送<strong>Change Cipher Spec</strong>报文通知服务端对称加密使用的密钥生成完毕，接下来客户端向服务端发送的数据都会经过密钥加密；</li><li><strong>步骤8</strong>：最后客户端发送<strong>Encrypted Handshake Message</strong>报文通知服务端它完成了TLS握手的所有内容，Encrypted Handshake Message报文包含至今所有报文的整体校验值，并用<strong>*S</strong>加密，本次握手能否成功，取决于服务端能否解密这个报文，Encrypted Handshake Message报文下面的两个Application Data报文就是客户端经过加密后发给服务端的数据，客户端到目前为止向服务端发送了客户端的随机数、客户端的DH参数；</li><li><strong>步骤9</strong>：紧接着服务端就会使用在步骤2自己生成的随机数、在步骤1收到的客户端随机数、在步骤6收到的客户端DH参数、在步骤4自己生成的DH参数这<strong>四个</strong>参数，通过在步骤2协商好的对称加密算法来生成以后通信过程中使用的密钥，这里记为<strong>T</strong>，由于DH算法的保证：<strong>T == S</strong>，这样客户端和服务端都拥有了通信加密使用的密钥，然后服务端就会发送<strong>Change Cipher Spec</strong>报文通知客户端对称加密使用的密钥生成完毕，接下来服务端向客户端发送的数据都会经过密钥加密；</li><li><strong>步骤10</strong>：最后服务端发送<strong>Encrypted Handshake Message</strong>报文通知客户端它完成了TLS握手的所有内容，Encrypted Handshake Message报文包含至今所有报文的整体校验值，并用<strong>*T</strong>加密，本次握手能否成功，取决于客户端能否解密这个报文。</li></ul><p>如果客户端和服务端都成功解密了最后那个Encrypted Handshake Message报文，证明客户端和服务端的对称密钥生成完毕，TLS握手都全部完成，接下来双方都可以通过对称密钥进行加密通信，Application Data报文中的数据就是加密后的HTTP报文，当HTTPS通信结束后，由客户端主动发出Client Close Notify报文断开连接。</p><p>由上面DH握手过程可以看出，对称密钥是根据一些参数在各端生成，并不是在客户端生成后通过公钥加密传输给服务端，这样做是为了保证服务端的私钥不和对称密钥有关联，什么意思呢？如果在客户端生成密钥通过公钥加密传输给服务端，服务端可以由私钥解密出密钥，这样私钥就参与了对称密钥的解密，到也就是说，只要我拥有服务端的私钥，我就可以解密出密钥，所以如果中间人把你TLS握手过程中的所有报文拦截、保存，直到某一天服务端的私钥泄漏了，中间人就可以使用私钥在保存的报文中解密出密钥，这样，中间人就轻松的解密出客户端和服务端以后的通信内容，而通过DH参数的交换就可以避免这个漏洞，为什么DH交换就可以? 这归根到底是一个数学问题，大家可以自行查找资料。</p><p>大家只需要知道在TLS握手中，对称密钥是服务端和客户端各自生成的，服务端公钥和私钥的功能被削弱到用来进行身份认证或者签名验证，这么做的目的都是为了保证通信的向前保密、安全。</p><blockquote><p>HTTPS这么安全，为什么不所有网站都使用？<br>1、效率问题：与HTTP的明文通信相比，加密通信需要消耗更多的CPU资源与内存；<br>2、部署问题：使用HTTPS需要有权威CA的证书颁发，从证书的选择、购买到部署都是一个耗时耗力的过程；<br>3、成本问题：购买证书也是一笔开销.</p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>网络请求已经成为了一个应用最基本的部分，所以熟悉HTTP对于我们开发很重要，我们不仅会用开发环境提供给我们的API，还要属性它的原理，本文从发展历史、工作特点、报文格式、状态码、常见首部、HTTPS这几个方面总结了一番HTTP，当然，HTTP肯定不止这一些，一篇文章是无法讲完的，限于篇幅，还有HTTP的缓存机制没有讲，这也是很重要的内容，掌握以上这些足够平常使用了。</p><p>以上就是本文全部内容，希望大家有所收获。</p><p>参考资料：</p><p>图解HTTP</p><p><a href="https://www.cnblogs.com/heluan/p/8620312.html" target="_blank" rel="noopener">HTTP1.0、HTTP1.1 和 HTTP2.0 的区别</a></p><p><a href="https://mp.weixin.qq.com/s/xU8X2gF_M_9_qzqbBdr4xQ" target="_blank" rel="noopener">深度解密 HTTP 通信细节</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Connection_management_in_HTTP_1.x" target="_blank" rel="noopener">HTTP/1.x 的连接管理</a></p><p><a href="https://mp.weixin.qq.com/s/G-mw8oJHWgcSOAV8Vp6bPw" target="_blank" rel="noopener">深入理解https工作原理</a></p><p><a href="https://blog.csdn.net/mrpre/article/details/78025940" target="_blank" rel="noopener">SSL中的RSA、DHE、ECDHE、ECDH流程与区别</a></p><p><a href="https://harttle.land/2015/08/10/cookie-session.html" target="_blank" rel="noopener">Cookie/Session的机制与安全</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;随着互联网的发展，网络已经越来越普及了，绝大多数的网络请求都是基于HTTP协议的，因此在开发中，了解HTTP的基本原理是必要的，在TCP/IP四层体系结构中，HTTP协议位于应用层，它是应用层主要使用的协议，应用层往下一层就是运输层，HTTP在运输层采用的是TCP协议来保证可靠传输，知道这些后，接下来详细介绍一下 Http。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="https" scheme="http://yoursite.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>你知道有多少种方式实现单例模式？</title>
    <link href="http://yoursite.com/2019/11/16/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/11/16/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-11-16T06:32:26.000Z</published>
    <updated>2023-01-07T10:44:48.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>单例模式是应用最广的模式之一，也是最简单的模式，但越是简单的东西，就越容易忽略它的细节，在应用这个模式时，<strong>同一个进程内</strong>，单例对象的类必须保证<strong>只有一个实例</strong>存在，比如在一个应用中，应该只有一个ImagerLoader实例，因为这个ImagerLoader中含有线程池、缓存系统、网路请求等，创建一次需要消耗很多资源，因此，没有理由让它构造多个实例，这种不能自由的构造对象，确保某一个类有且只有一个对象实例的情况，就是单例模式的使用场景，那么你知道有多少种方式实现单例？具我所了解的，有<strong>六种</strong>，下面分别介绍。</p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p>简单看一下单例模式的类图：</p><img src="/2019/11/16/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/design1.png" class="" title="design"><p>角色介绍：</p><ul><li>Client - 高端客户层</li><li>Singleton - 单例类</li></ul><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>以公司中的CEO来举例，一个公司中只能有一个CEO，所以CEO就是单例，可以使用单例模式来实现，下面以这个例子来实现单例.</p><h3 id="1、饿汉方式"><a href="#1、饿汉方式" class="headerlink" title="1、饿汉方式"></a>1、饿汉方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CEO</span></span>&#123;</span><br><span class="line">    <span class="comment">//静态对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CEO mCeo = <span class="keyword">new</span> CEO();</span><br><span class="line">    <span class="comment">//构造函数私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CEO</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//公有的静态函数，对外暴露获取单例对象的接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CEO <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mCeo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式叫做饿汉方式，它的关键点是：</p><p>1、构造函数私有;</p><p>2、通过一个静态方法返回一个<strong>静态对象实例</strong>.</p><p>为什么这种方式能够保证实例的唯一性呢？<strong>因为在同一个类加载器下，类的初始化只会进行一次，并且在多线程环境下，JVM会保证只有一个线程执行类的初始化</strong>，所以当我们第一次调用getInstance方法，访问mCeo静态变量时，CEO类还没有没有进行初始化，就会首先进行CEO类的初始化，类的初始化之前会经历加载、验证、准备、解析阶段，然后才到初始化阶段，在初始化阶段中JVM会执行<strong>static语句块</strong>，此时就会为CEO在java堆上为<strong>分配一块内存</strong>，然后把mCeo指向这块内存，即实例化了CEO，接着getInstance方法就会返回CEO的实例，当我们第二次调用getInstance()方法时，它会返回上次在类初始化阶段创建的CEO实例，而不会再进行一次类的初始化，所以这就保证了每次调用getInstance()方法都是返回<strong>同一个实例</strong>。</p><p>饿汉方式的优点是线程安全，类初始化时就完成实例的创建，以后调用getInstance方法<strong>获取对象实例时速度比较快</strong>，缺点是会造成<strong>类初始化过程变慢</strong>，还可能会<strong>提前初始化单例类</strong>，例如CEO中有另外一个静态方法hello()，我第一次调用时并不是调用getInstance方法而是调用hello方法，它也会进行CEO类的初始化，导致单例类也完成实例创建，但此时我并没有使用这个单例类，所以说饿汉方式的优点也是它的缺点。</p><blockquote><p>类的初始化和类的实例化是两个不同的过程，在类的实例化过程中，如果发现类还未进行初始化，就会先进行类的初始化.</p></blockquote><h3 id="2、静态内部类形式"><a href="#2、静态内部类形式" class="headerlink" title="2、静态内部类形式"></a>2、静态内部类形式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CEO</span></span>&#123;</span><br><span class="line">    <span class="comment">//构造函数私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CEO</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CEO <span class="title">getInstanse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//返回静态内部类中的静态变量实例</span></span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.mCeo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态内部类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> CEO mCeo = <span class="keyword">new</span> CEO();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态内部类方式的关键点是：</p><p>1、构造函数私有；</p><p>2、通过一个静态方法返回<strong>静态内部类中的静态变量实例</strong>.</p><p>静态内部类形式的特点和饿汉方式一样都是<strong>基于类的初始化</strong>保证实例的唯一性，同时它在饿汉方式的基础上增加了<strong>延迟初始化</strong>，在饿汉方式中说到在CEO类初始化时，就会完成单例类实例的创建，这样就可能导致了<strong>提前初始化</strong>了单例类，造成资源浪费，而静态内部类就解决了这个缺点，当第一次初始化CEO类时并不会创建CEO实例，只有在调用getInstance方法时才会导致CEO类实例化，因为第一次调用getInstance方法时会让JVM初始化<strong>SingletonHolder类</strong>，在初始化SingletonHolder类的同时完成了CEO单例类实例的创建，然后返回CEO实例，以后调用getInstance方法时都会返回<strong>同一实例</strong>.</p><p>这种方式的优点是不仅能保证线程安全，也能保证单例对象的唯一性，同时也<strong>延迟了单例的实例化</strong>，所以这是推荐使用的单例模式；它的缺点就是第一次加载时反应稍慢。</p><blockquote><p>为什么基于类初始化的单例就是线程安全的呢？这是因为类的初始化过程其实是在执行clinit方法，clinit方法又叫做类构造器，clinit方法是由编译器收集所有的静态变量赋值动作和static语句块合并形成的，在多线程环境下，JVM执行clinit方法时，会给clinit方法加锁，多个线程初始化类时，只有一个线程会获得clinit方法的执行权，其他线程会阻塞等待，等某个线程执行完clinit方法后，就完成了类的初始化，这时就会唤醒其他等待线程，其他等待线程发现类已经执行过clinit方法了，就不再重复执行了，所以这就是单例模式线程安全实现的保证，也是单例模式实例唯一性的保证。</p></blockquote><h3 id="3、懒汉模式（线程安全）"><a href="#3、懒汉模式（线程安全）" class="headerlink" title="3、懒汉模式（线程安全）"></a>3、懒汉模式（线程安全）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CEO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CEO mCeo;</span><br><span class="line">    <span class="comment">//构造函数私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CEO</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法加上synchronized关键字</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> CEO <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判空处理，保证只实例化一次</span></span><br><span class="line">        <span class="keyword">if</span>(mCeo == <span class="keyword">null</span>)&#123;</span><br><span class="line">            mCeo = <span class="keyword">new</span> CEO();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mCeo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式叫做<strong>线程安全</strong>的懒汉模式，它的关键点是：</p><p>1、构造函数私有；</p><p>2、通过一个<strong>同步</strong>静态方法返回静态对象实例；</p><p>3、静态对象实例创建时加入了<strong>判空处理</strong>，保证只实例化一次.</p><p>通过给 getInstance方法加synchronized关键字，保证了在多线程环境下只有一个线程对CEO进行初始化，同时又加入了判空处理，避免了重复创建对象实例，保证每次调用getInstance方法都会返回<strong>同一个实例</strong>.</p><p>这种懒汉模式的优点是线程安全，单例只有在使用时才会被实例化，节约资源，即<strong>延迟初始化</strong>；缺点是第一次加载时需要及时进行实例化，反应稍慢，还有每次调用getInstance方法时都进行同步，造成不必要的<strong>同步开销</strong>，这种模式不建议使用。</p><blockquote><p>还有一种叫<strong>非线程安全</strong>的懒汉模式，与线程安全的懒汉模式相比，只是少了一个synchronized关键字，不适合在多线程环境下使用，因为没有正确同步会造成创建多个实例，适合在单线程环境下使用。</p></blockquote><h3 id="4、Double-Check-Lock（DCL）"><a href="#4、Double-Check-Lock（DCL）" class="headerlink" title="4、Double Check Lock（DCL）"></a>4、Double Check Lock（DCL）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CEO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CEO mCeo = <span class="keyword">null</span>;</span><br><span class="line">     <span class="comment">//构造函数私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CEO</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CEO <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//第一次判空，保证只同步一次</span></span><br><span class="line">        <span class="keyword">if</span>(mCeo == <span class="keyword">null</span>)&#123;<span class="comment">//1</span></span><br><span class="line">            <span class="comment">//synchronized语句块，锁住的是类的Class对象</span></span><br><span class="line">            <span class="keyword">synchronized</span> (CEO<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="comment">//第二次判空，保证只实例化一次</span></span><br><span class="line">                <span class="keyword">if</span>(mCeo == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    mCeo = <span class="keyword">new</span> CEO();<span class="comment">//2</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mCeo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式的名字叫<strong>双重检查锁定</strong>，简称DCL，它的关键点是：</p><p>1、构造函数私有；</p><p>2、通过一个静态方法返回静态对象实例；</p><p>3、静态对象实例创建时加入了<strong>双重判空处理 + synchronized块</strong>，保证只<strong>同步一次</strong>和<strong>只实例化一次</strong>.</p><p>在getInstance方法中对实例进行了俩次判空：<strong>第一次判空</strong>是为了避免不必要的同步，解决了懒汉模式每次调用getInstance方法都需要同步的缺点，只有对象为null的情况下才进入synchronized块，才需要同步；<strong>第二次判空</strong>则是为了进入synchronized块后只有对象为null的情况下才创建实例，避免重复创建对象实例，而且synchronized块锁住的是<strong>类的Class对象</strong>，保证了在多线程环境下只有一个线程进入synchronized块，所以采用DCL方式每次调用 getInstance方法返回的都是<strong>同一个实例</strong>。</p><p>DCL优点是资源利用率高，第一次执行getInstance方法时单例对象才会被实例化，即<strong>延迟初始化</strong>，第一次实例化时才进行同步，减少了<strong>同步开销</strong>，并且能在<strong>大多数情况</strong>下保证单例唯一性；缺点是第一次加载<strong>反应稍慢</strong>，因为又要加锁，又要初始化对象，导致第一次调用getInstance方法返回较慢。</p><p>为什么说DCL在<strong>大多数情况</strong>能下保证单例唯一性？这说明在少数情况下DCL还是会<strong>出现问题</strong>的，问题就出现在注释2：<strong>mCeo = new CEO();</strong>  在CEO第一次进行实例化过程中，这个实例化过程可以分为以下3步：</p><p>1、在java堆分配中CEO对象的内存空间；</p><p>2、进行CEO类的初始化过程；</p><p>3、把mCeo指向1步骤中分配的内存空间.</p><p>某些JVM会把这3个步骤进行<strong>指令重排序</strong>，变为以下顺序：</p><p>1、在java堆分配中CEO对象的内存空间；</p><p>3、把mCeo指向1步骤中分配的内存空间；</p><p>2、进行CEO类的初始化过程.</p><p>如果在单线程环境下这样是没有问题的，因为就算指令重排，在getInstance方法返回时mCeo指向的对象已经<strong>完成了初始化</strong>，但是在多线程环境下就出现问题了，假设现在有两个线程A、B，线程A执行到了getInstance方法的注释2，即进行CEO的实例化，由于指令重排，线程A先执行1、3步骤，此时mCeo已经指向了分配的内存空间，导致此时的<strong>mCeo != null</strong>，而恰好线程B此时执行到了getInstance方法的注释1，进入判断 <strong>if(mCeo == null)</strong>，因为此时mCeo != null，所以条件判断为false，不进入if语句，直接来到return语句，返回了<strong>还没初始化完毕</strong>的mCeo ，这样就可能导致程序崩溃！因为你在使用一个还未初始化完成的对象。</p><p>针对DCL的错误，有两种解决办法，第一种办法是使用<strong>Volatile关键字</strong>，因为Volatile会<strong>禁止指令重排序</strong>，保证对象实例化过程按1、2、3步骤进行；第二种办法是再加一个<strong>局部变量</strong>做一层缓冲，下面分别使用来完善DCL:</p><h4 id="解决方法1：使用Volatile关键字"><a href="#解决方法1：使用Volatile关键字" class="headerlink" title="解决方法1：使用Volatile关键字"></a>解决方法1：使用Volatile关键字</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CEO</span> </span>&#123;</span><br><span class="line">    <span class="comment">//加上Volatile关键字修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> CEO mCeo = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CEO</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CEO <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mCeo == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (CEO<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(mCeo == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    mCeo = <span class="keyword">new</span> CEO();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mCeo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>熟悉Volatile特性的朋友都知道，在多线程环境下，Volatile会禁止指令重排序保证内存可见性，所以线程执行到mCeo = new CEO()时，保证CEO类初始化完毕后才把mCeo引用指向java堆的内存空间，避免另外一个线程访问到未初始化完毕的mCeo。</p><h4 id="解决方法2：增加一个局部变量"><a href="#解决方法2：增加一个局部变量" class="headerlink" title="解决方法2：增加一个局部变量"></a>解决方法2：增加一个局部变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CEO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CEO mCeo = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CEO</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CEO <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1、增加一个局部变量，同为CEO类型</span></span><br><span class="line">        CEO ceo = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(mCeo == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (CEO<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(mCeo == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="comment">//2、执行实例时，先实例化这个局部变量</span></span><br><span class="line">                    ceo = <span class="keyword">new</span> CEO();</span><br><span class="line">                    <span class="comment">//3、待局部变量实例化完毕后，才把这个实例赋值给要返回的静态变量mCeo</span></span><br><span class="line">                    mCeo = ceo;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mCeo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法也能够保证DCL的正确性，因为它是先把同为CEO类型的局部变量ceo实例化后，才赋值给mCeo，这就不管ceo实例化过程中怎么样重排序，在ceo还未初始化完毕之前，mCeo一直为null，当ceo实例化完毕后，mCeo才指向它，这样就避免了mCeo指向一个未初始化完毕的对象。</p><blockquote><p>使用DCL时，建议使用解决方法1、2中的DCL方式。</p></blockquote><h3 id="5、枚举模式"><a href="#5、枚举模式" class="headerlink" title="5、枚举模式"></a>5、枚举模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> CEO&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//枚举中还可以定义一些方法和字段</span></span><br><span class="line">    String name = <span class="string">"ceo"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"do Something"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举模式的关键点是：在枚举类中定义一个枚举，叫什么名字都可以，这里叫INSTANCE，而且只能定义一个枚举，不能定义第二个枚举如INSTANCE2。</p><p>写法简单是枚举单例最大的优点，枚举实例的创建天生就是线程安全的，并且<strong>任何情况</strong>下它都是一个单例，我们直接通过<strong>CEO.INSTANCE</strong>就可以访问到这个单例，枚举中还可以为这个单例定义一些方法，例如这里我定义了一个doSomething方法，我通过<strong>CEO.INSTANCE.doSomething()</strong>就可以调用这个方法，字段的访问同理。</p><p>那么枚举的<strong>实现原理</strong>是什么？接下来把CEO.java文件编译成CEO.class，然后通过jad工具反编译，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CEO枚举类反编译后的java代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CEO</span> <span class="keyword">extends</span> <span class="title">Enum</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CEO</span><span class="params">(String s, <span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(s, i);</span><br><span class="line">        name = <span class="string">"ceo"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> CEO INSTANCE;</span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"do Something"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        INSTANCE = <span class="keyword">new</span> CEO(<span class="string">"INSTANCE"</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我省略了一些无关代码，可以看到CEO继承自一个<strong>Enum类</strong>，所以枚举类本质还是一个类，并且它是final的，所以它不可被继承，它里面的<strong>构造方法私有</strong>，并且INSTANCE字段是一个<strong>静态变量</strong>，在<strong>static语句块</strong>中实例化，所以枚举模式保持单例唯一性的本质还是基于<strong>类的初始化</strong>，它的原理和前面讲过的饿汉方式、静态内部类形式一样。</p><blockquote><p>在effective java中，枚举模式被推荐为实现的单例是<strong>最好的方式</strong>。</p></blockquote><h3 id="6、使用容器实现"><a href="#6、使用容器实现" class="headerlink" title="6、使用容器实现"></a>6、使用容器实现</h3><p>前面所讲的方式都是针对单个类的单例，如果一个程序中存在着多种类型的单例，就可以通过一个容器把它们集中管理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonManager</span> <span class="keyword">extends</span> <span class="title">Staff</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; mServices = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonManager</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerService</span><span class="params">(String key, Object instance)</span></span>&#123;</span><br><span class="line">         <span class="comment">//加入了一个判断处理，避免重复添加</span></span><br><span class="line">        <span class="keyword">if</span>(!mServices.containsKey(key))&#123;</span><br><span class="line">            mServices.put(key, instance);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getService</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mServices.get(key);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这种方式的关键点是：将多种类型的单例注入到一个统一的管理类中，且只能注入一次(注入时判断)，在使用时根据key可以获取对象对应的单例。</p><p>这种方式可以让我们管理多种类型的单例，并且使用时通过统一的接口进行获取，例如在Android中，各种类型的服务在应用启动时都注册在Context内的一个容器中，我们需要使用各种服务时，可以通过Context的getService方法获得服务的单例，服务不能重复创建，会很消耗资源。</p><h2 id="考虑反序列化"><a href="#考虑反序列化" class="headerlink" title="考虑反序列化"></a>考虑反序列化</h2><p>上面所介绍的6种实现单例的方法中，除了使用容器实现单例模式的方法，其他5种方法都有以下共同的关键点：</p><p>1、构造函数私有；</p><p>2、通过一个静态方法或枚举返回单例对象；</p><p>3、在多线程环境下，确保单例类的实例只有一个.</p><p>一般要实现单例模式，做到这3个点就行了，这样就能确保在同一个进程内单例类只有一个实例存在，但是，如果你的单例类是可以保存到磁盘或通过网络传输，换句话说你的单例类是<strong>支持序列化</strong>的，那么你就要保证单例类在<strong>反序列化时不会重新创建新的对象实例</strong>，因为反序列化时会创建一个和单例一模一样的实例的，java中通过ObjectInputStream的<strong>readObject方法</strong>来实现反序列化，它里面会通过反射来创建一个新的实例，所以就算你的构造方法私有，它还是可以通过setAccessible(true)来获得单例构造器的访问权，从而创建一个新的对象实例，<strong>反序列化的本质就是反射</strong>，换句话说，<strong>反射会破坏单例模式的实例唯一性</strong>。</p><p>那么如何确保单例类反序化时不会重新创建新实例呢？只要在单例类中加入以下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CEO</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CEO mCeo = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>&#123;</span><br><span class="line">        <span class="comment">//返回单例对象</span></span><br><span class="line">        <span class="keyword">return</span> mCeo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加入readResolve方法后就可以改变反序列化的规则，在readObject方法中，它发现该类定义了readResolve方法，它就会通过反射调用readResolve方法返回对象实例，而不是默认的通过反射重新创建一个新的对象，所以只要我们<strong>在readResolve方法中返回单例对象</strong>，readObject方法就会返回单例对象，这样就防止了单例模式被反序列化的破坏。</p><p><strong>注意：</strong>对于枚举模式不存在反序列化重新生成实例的情况，所以<strong>对于枚举模式实现的单例不用考虑反序列化情况</strong>，因为枚举的反序列化<strong>不是通过反射实现</strong>的，而是通过其他方式实现，枚举有自己的一套处理反序列化的机制，类似于使用容器的方式，有兴趣可以自己查找资料，而对于饿汉模式、静态内部类形式、懒汉模式、DCL、容器中的单例就需要考虑反序列情况。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文讲解了6种方式实现单例模式，分别是饿汉方式、静态内部类形式、懒汉模式、DCL、枚举模式和容器方式，不管使用哪种形式实现单例，其核心思想都是以下4点：</p><p>1、构造函数私有化；</p><p>2、通过静态方法获取单例；</p><p>3、保证线程安全；</p><p>4、避免反序列化重新生成实例.</p><p>这6种方式的优缺点如下：</p><table><thead><tr><th></th><th align="left">饿汉方式</th><th align="center">静态内部类方式</th><th align="left">懒汉模式（线程安全）</th><th>DCL</th><th>枚举模式</th><th>容器方式</th></tr></thead><tbody><tr><td>优点</td><td align="left">安全，获取单例速度快</td><td align="center">安全，延迟初始化</td><td align="left">安全，延迟初始化</td><td>安全，延迟初始化</td><td>写法简洁，延迟初始化，安全，反射也无法破坏单例</td><td>实现简单，获取单例速度快</td></tr><tr><td>缺点</td><td align="left">提前初始化单例类，浪费空间</td><td align="center">第一次使用反应慢</td><td align="left">第一次使用反应慢，效率低，同步开销大</td><td>写法复杂，第一次使用反应慢</td><td>暂时没发现缺点，枚举是java5之后才加入，使用的人少，很多人不熟悉枚举</td><td>需要保证线程安全</td></tr></tbody></table><p>这么多种方式实现单例模式，我们如何选择呢？</p><p>首先如果你确保程序是在<strong>单线程环境</strong>下工作，那么推荐你使用<strong>不加synchronized关键字</strong>的懒汉模式；但是如果程序是在<strong>多线程环境</strong>下工作，这时就要考虑线程安全问题，基于<strong>类的初始化的</strong>单例模式天生线程安全，可以使用饿汉方式、静态内部类方式、枚举模式；如果你要明确的<strong>延迟初始化要求</strong>，推荐使用静态内部类方式、DCL、枚举模式；如果你有<strong>选择困难症</strong>，那不用考虑那么多了，推荐你使用DCL和静态内部类形式；不管在什么场合，都不要考虑使用<strong>加synchronized关键字</strong>的懒汉模式，它的缺点最多。</p><p>以上就是本文的全部内容，希望大家有所收获。</p><p><a href="https://github.com/rain9155/DesignPatternDemo/tree/master/src/com/example/hy/designpatternDemo/singleton" target="_blank" rel="noopener">本文源码相关位置</a></p><p>参考资料：</p><p><a href="http://blog.sina.cn/dpool/blog/s/blog_597a437101011o66.html" target="_blank" rel="noopener">多线程问题与double-check小结</a></p><p><a href="https://www.hollischuang.com/archives/197" target="_blank" rel="noopener">枚举的线程安全性及序列化问题</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;单例模式是应用最广的模式之一，也是最简单的模式，但越是简单的东西，就越容易忽略它的细节，在应用这个模式时，&lt;strong&gt;同一个进程内&lt;/s
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>java学习总结之集合框架</title>
    <link href="http://yoursite.com/2019/11/05/java%E9%9B%86%E5%90%88/"/>
    <id>http://yoursite.com/2019/11/05/java%E9%9B%86%E5%90%88/</id>
    <published>2019-11-05T10:33:15.000Z</published>
    <updated>2023-01-07T10:44:48.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在JDK1.2之前，java是没有完整的集合框架的，只有一些简单的可以扩展的<strong>容器类</strong>，如Vector、Stack、Hashtable等，这些容器类它们解决了数组不能动态扩容和使用复杂的问题，到了JDK1.2之后，为了管理这些容器类，就出现了集合框架这个概念，集合框架是为了表示和操作集合而规定的一种统一的标准的体系结构，它包含三大内容：对外的接口、接口的实现和对集合运算的算法（对某一种数据结构的算法），所以有了集合框架后，容器类一般改为叫<strong>集合类</strong>，常用的集合类有：Set、List、Map、Queue，下面会首先简单介绍集合框架的整体架构，然后分别介绍Set、List、Map、Queue的各自特点。</p><blockquote><p>本文源码都是基于java7</p></blockquote><h2 id="一、Collection框架"><a href="#一、Collection框架" class="headerlink" title="一、Collection框架"></a>一、Collection框架</h2><p>图片来源<a href="https://blog.csdn.net/s20082043/article/details/39077095" target="_blank" rel="noopener">Java集合类的类图</a></p><img src="/2019/11/05/java%E9%9B%86%E5%90%88/java1.png" class="" title="java"><p>从这个类图中，可以看到各个集合类之间的继承关系，其中<strong>Map没有继承Collection接口</strong>，所以它独立出来，但是它也是集合框架的一部分，而且这里还有一个点没有画出来的是，Collection接口是<strong>继承自Iterable</strong>的，Iterable中有一个 iterator方法，它返回一个Iterator，可以用于遍历集合的元素，而Map是<strong>没有继承自Iterable</strong>的，但是它的各自实现类内部也实现了各自的Iterator，例如KeyIterator，ValueIterator和EntryIterator，通过特定方法返回，集合框架中的所有接口和类都在<strong>java.util包</strong>中，并且集合框架中所有的<strong>具体类</strong>都实现了Cloneable和Serialization接口，即它们的实例都是可以复制和可序列化的，有以下四种主要类型的集合：</p><ul><li>List(线性表)：存储一组有序的元素</li><li>Set(规则集)：存储一组不重复的元素</li><li>Map(映射表)：存储一组key-value映射，一个Map中不能包含相同的key，每个key只能映射一个<br>value</li><li>Queue(队列)：存储一组用先进先出方式处理的元素</li></ul><p>下面分别讲解.</p><h2 id="二、List"><a href="#二、List" class="headerlink" title="二、List"></a>二、List</h2><img src="/2019/11/05/java%E9%9B%86%E5%90%88/java2.png" class="" title="java"><p>List是有序的Collection，使用此接口能够精确的控制每个元素插入的位置，用户能够使用索引来访问List中的元素，这类似于Java的数组，List允许有重复的元素，除了具有Collection接口必备的iterator()方法外，List还提供一个listIterator方法，返回一个ListIterator接口，和标准的Iterator接口相比，ListIterator多了一些add()之类的方法，允许添加，删除，设定元素，还能向前或向后遍历List，List常见的实现类有：<strong>ArrayList，LinkedList，Stack和Vector</strong>.</p><h3 id="1、ArrayList"><a href="#1、ArrayList" class="headerlink" title="1、ArrayList"></a>1、ArrayList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Object[] elementData</span><br></pre></td></tr></table></figure><p>它是一个大小可变的数组，在内存中分配连续的空间，它允许存储任意类型的对象，包括null，每个ArrayList实例都有一个容量（Capacity），即用于存储元素的数组的大小，这个容量可随着不断添加新元素而自动增加，ArrayList是一个线程不安全的类，ArrayList是集合框架出现之后用来取代Vector类的，两者的底层原理都是基于数组的算法，几乎一模一样。</p><blockquote><p>在java7之前使用new ArrayList()创建一个List对象时，会初始化一个Capacity为10的Object数组，但是我并没有存储元素，就会造成空间的浪费；从java7之后，就开始优化了这个设计，使用new ArrayList()创建一个List对象时，底层只会初始化一个Capacity为0的空数组，只有在第一次调用add方法时，才会去初始化这个数组。</p></blockquote><h3 id="2、LinkedList"><a href="#2、LinkedList" class="headerlink" title="2、LinkedList"></a>2、LinkedList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它使用双向链表链表存储元素，它是单向队列、双向队列、List的实现类，所以它有着多种数据结构的实现，每一种数据结构的操作方法不同，它允许存储所有元素，包括null，提供了从两端提取、插入和删除元素的方法，LinkedList是一个线程不安全的类，和ArrayList不同，虽然它实现了List接口，但是它没有索引的概念，所以LinkedList不擅长查询操作。</p><blockquote><p>LinkedList类作为List接口的实现类，List中提供了根据索引查询元素的方法，如Object get(int index)，表示根据index位置获取对应的元素，但是LinkedList是链表，它没有索引的概念，所以LinkedList内部会采用遍历链表的方式获取到index位置的元素，该方法尽量少用，效率不高。</p></blockquote><h3 id="3、Vector"><a href="#3、Vector" class="headerlink" title="3、Vector"></a>3、Vector</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object[] elementData;</span><br></pre></td></tr></table></figure><p>它是一个大小可变的数组，在内存中分配连续的空间，它允许存储任意类型的对象，包括null，Vector是一个线程安全的类，它的方法都有synchronized修饰，它的常用方法如下：</p><img src="/2019/11/05/java%E9%9B%86%E5%90%88/java3.png" class="" title="java"><p>Vector非常类似ArrayList，由Vector创建的Iterator，虽然和ArrayList创建的Iterator是同一接口，但是，因为Vector是同步的，当一个Iterator被创建而且正在被当前线程使用，另一个线程改变了Vector的状态（例如，添加或删除了一些元素），这时调用Iterator的方法时将抛出ConcurrentModificationException，因此必须捕获该异常。</p><blockquote><p>ArrayList是集合框架出现之后用来取代Vector类的，ArrayList中的方法实现都是基于Vector的方法实现。</p></blockquote><h3 id="4、Stack"><a href="#4、Stack" class="headerlink" title="4、Stack"></a>4、Stack</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它继承自Vector，是java中栈的实现，它的存储特点是LIFO，即后进先出，它把数组的最后一个元素当作栈顶，它的常用方法如下：</p><img src="/2019/11/05/java%E9%9B%86%E5%90%88/java4.png" class="" title="java"><blockquote><p>官方建议：如果要使用栈，尽量使用ArrayDeque，它是Deque接口的实现类，表示双向队列，Deque接口提供了LIFO的堆栈操作和更完整的set，如Deque<Integer> stack = new ArrayDeque&lt;&gt;()；</p></blockquote><h3 id="5、ArrayList和Vector的区别与选择"><a href="#5、ArrayList和Vector的区别与选择" class="headerlink" title="5、ArrayList和Vector的区别与选择"></a>5、ArrayList和Vector的区别与选择</h3><p><strong>相同点：</strong></p><p>底层都是基于数组的算法，实现的逻辑大概一致，功能相同，在很多情况下可以互用。</p><p><strong>不同点：</strong></p><p>1、Vector线程安全，它的方法都用synchronized修饰，而ArrayList线程不安全，但是速度快；</p><p>2、但需要扩容时，Vector默认增长一倍，而ArrayList增长50%，有利于节约空间。</p><p><strong>如何选择？</strong></p><p><strong>ArrayList可以完全替代Vector</strong>，因为它效率高且节约空间，同时在线程不安全的环境下，可以使用<strong>List list = Collections.synchronizedList(new ArrayList())</strong>来返回一个线程安全的ArrayList，所以在开发中，应该先考虑使用ArrayList。</p><h3 id="6、ArrayList和LinkedList的区别与选择"><a href="#6、ArrayList和LinkedList的区别与选择" class="headerlink" title="6、ArrayList和LinkedList的区别与选择"></a>6、ArrayList和LinkedList的区别与选择</h3><p><strong>相同点：</strong></p><p>大家都实现了List接口，都是线程不安全的类。</p><p><strong>不同点：</strong></p><p>1、LinkedList底层数据结构是双向链表，而ArrayList底层数据结构是数组；</p><p>2、LinkedList底层采用的是链表结构的算法，所以它的插入和删除操作很快，而ArrayList底层采用的是数组结构的算法，所以它的查询和修改操作很快。</p><p><strong>如何选择？</strong></p><p>如果是插入和删除操作频繁，优先考虑LinkedList，如果是查询和修改操作频繁，优先考虑ArrayList，但在平时开发中，<strong>使用ArrayList较多，根据开发环境来选择</strong>。</p><h2 id="三、Map"><a href="#三、Map" class="headerlink" title="三、Map"></a>三、Map</h2><img src="/2019/11/05/java%E9%9B%86%E5%90%88/java5.png" class="" title="java"><p>Map是以键-值存储元素的容器，根据关键字Key找到对应的数据Value，它常见的实现类有：<strong>HashMap、TreeMap、HashTable、LinkedHashMap</strong>.</p><h3 id="1、HashTable"><a href="#1、HashTable" class="headerlink" title="1、HashTable"></a>1、HashTable</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hash;<span class="comment">//Key的hashCode经过hash方法计算后的hash值</span></span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Entry&lt;K,V&gt; next;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HashTable采用了数组加链表的数据结构，能在查询和修改时分别继承数组和链表的优良特性，它是从java1就出现了，历史悠久，它是线程安全的哈希表，即它的put、get、remove等方法都加上了synchronized关键字，所以它的效率比较低，它不可以存储null键和值，它的初始容量initialCapacity 可以在构造函数时由用户指定，默认值为11，它里面有5个主要的成员，如下：</p><ul><li><p>count： 映射数量，Hashtable中Entry对象（映射）的个数;</p></li><li><p>loadFactor：负载因子，在其容量自动增加之前可以达到多满的一种尺度，默认为0.75;</p></li><li><p>threshold： 扩容阈值，对Hashtable进行扩容的阈值，等于initialCapacity * loadFactor;</p></li><li><p>table[]: Entry数组，一个由Entry对象组成的链表数组，table数组的每一个数组成员就是一个链表；</p></li><li><p>modCount：结构性修改次数， 记录Hashtable生命周期中结构性修改的次数，便于快速失败机制.</p></li></ul><blockquote><p>快速失败机制是指其在并发环境中进行迭代操作时，若其他线程对其进行了结构性的修改，这时迭代器能够立马感知到并且立即抛出ConcurrentModificationException异常，而不是等到迭代完成之后才告诉你。</p></blockquote><p>当我们使用put(key, value)存储对象到HashTable中时，HashTable会先调用hash方法计算Key的hashCode，并返回新的hash值，然后通过与数组长度取模运算，定位到table数组中相应位置来储存Entry对象，如果该位置已经有元素了，即发生冲突，就调用equals() 比较Key，相同则替换旧的Value值，都不相同则创建新的Entry链入到该位置的链表中，即采用拉链法来解决冲突，在链入新的Entry前，会先检查数组是否达到threshold值，如果达到了，就需要resize，扩容（2倍 + 1）后重排。</p><blockquote><p>如果使用到哈希表（HashMap、HashTable、HashSet等），作为key的对象要正确复写equals和hashCode方法。</p></blockquote><h3 id="2、HashMap"><a href="#2、HashMap" class="headerlink" title="2、HashMap"></a>2、HashMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Entry&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Entry&lt;K,V&gt; next;</span><br><span class="line">    <span class="keyword">int</span> hash;&lt;K,V&gt; ；</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HashMap和HashTable一样，底层都是基于hash的算法，都是数组加链表的数据结构，HashMap是非线程安全的，所以它效率高，它可以接收null键和值，HashMap中同样有<strong>size(和count一样)、loadFactor、threshold、table[]和modCount</strong>这5个重要的成员，含义都一样，HashMap的初始容量initialCapacity 也可以在构造函数时由用户指定，默认值为16，且HashMap的<strong>大小必须为2^n</strong>，如果你传入的initialCapacity 不是2^n，它会自动的替你取最接近initialCapacity 的2^n大小。</p><p>当你使用put(key, value)存储对象到HashMap中时，它的过程和HashTable的几乎一样，其中不同的有以下几点：</p><ul><li>1、HashMap允许存储Key和Value为null的对象，如果Key为null，就会把这个映射放在数组的第一个位置，且只允许有一个Key为null的映射存在；</li><li>2、HashMap中用于定位映射在数组中的位置是通过&amp;运算，而不是HashTable那样的%运算，所以HashMap的效率更高；</li><li>3、在HashMap的插入K/V对的过程中，总是先插入后检查是否需要扩容，而Hashtable则是先检查是否需要扩容后再插入，且HashMap的扩容大小是原来的2倍，而不是2倍+1；</li><li>4、HashMap的put操作是非线程安全的，而HashTable的是线程安全的。</li></ul><p>至于get方法，大家可以自己分析并总结出它们的不同。</p><blockquote><p>在java8之后，HashMap引入了红黑树，在单个hash值存储的元素个数大于8个时，就会把链表转换为红黑树，保证在最坏的情况下查询的效率是O(logn)，n是单个hash值存储的元素个数。</p></blockquote><h3 id="3、LinkedHashMap"><a href="#3、LinkedHashMap" class="headerlink" title="3、LinkedHashMap"></a>3、LinkedHashMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; header;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> accessOrder;<span class="comment">//false表示按照插入顺序迭代，true表示按访问顺序迭代，默认为false</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        Entry&lt;K,V&gt; before, after;</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>LinkedHashMap继承自HashMap，在此基础上，添加了<strong>双向链表头结点header</strong> 和  <strong>标志位accessOrder</strong> ，所以LinkedHashMap就是<strong>HashMap + 双向链表</strong>，它拥有HashMap的所有特性，同时额外维护了一个双向链表用于保持迭代顺序，HashMap中有一个init方法，会在构造函数执行完后调用，LinkedHashMap重写了该方法，完成了双向链表头结点的初始化，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LinkedHashMap.java</span></span><br><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    header = <span class="keyword">new</span> Entry&lt;&gt;(-<span class="number">1</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    header.before = header.after = header;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现这个双向链表是<strong>循环链表</strong>，通过header.after就可以拿到链表中的第一个结点，通过header.before就可以拿到链表中的最后一个结点。</p><p>所以LinkedHashMap是可以保持插入的顺序的（<strong>当你调用put时，它会把插入的元素的放到链表的底部</strong>），它还可以在构造时指定<strong>accessOrder = true</strong>来保持访问的顺序（<strong>当你调用get时，它会把访问过元素的放到链表的底部</strong>），这样当你在<strong>迭代</strong>LinkedHashMap时，它会从头到尾遍历双向链表，逐一输出双向链表的各个结点，这样就保持了LinkedHashMap的有序性，所以如果有人问你LinkedHashMap的有序性是怎样实现的，你就告诉他：<strong>LinkedHashMap通过双向列表保证元素插入或访问的顺序，并重写了HashMap 的迭代器，当你迭代LinkedHashMap时，它会把其维护的双向链表进行迭代输出，这样就保证输出的元素是有序的</strong>。</p><blockquote><p>把accessOrder 置为true，就可以通过LinkedHashMap实现LRU算法 (Least recently used, 最近最少使用)，需要做到以下2个步骤：（假设当元素大于10个时就要删除最久没有被使用的元素）</p><p>1、编写一个类继承自LinkedHashMap，并重写LinkedHashMap的removeEldestEntry方法，返回size() &gt; 10;</p><p>2、在构造这个类时，通过构造函数，指定accessOrder为true.</p><p>这样当你put或get时，它会把这个元素移动到链表的底部，从而保持链表的底部的元素是最近访问过的，而链表的头部的元素是最久没有被使用过的，当元素达到10以上时，LinkedHashMap自动会把链表头部的那个元素删除掉。</p></blockquote><h3 id="4、TreeMap"><a href="#4、TreeMap" class="headerlink" title="4、TreeMap"></a>4、TreeMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; root = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line">        Entry&lt;K,V&gt; left = <span class="keyword">null</span>;</span><br><span class="line">        Entry&lt;K,V&gt; right = <span class="keyword">null</span>;</span><br><span class="line">        Entry&lt;K,V&gt; parent;</span><br><span class="line">        <span class="keyword">boolean</span> color = BLACK;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TreeMap和前面3个Map不一样，并不是数组加链表的实现，而是基于红黑树实现的，所以TreeMap底层没有hash算法的实现，它的put、get、remove等都是基于红黑树的操作，所以Entry中就没有<strong>hash</strong>这个变量，取而代之的是left(左孩子结点)、right(右孩子结点)、parent(父亲结点)、color(是红色还是黑色结点)属性，红黑树是一颗<strong>自平衡的二叉查找树</strong>，它通过旋转和变色来保持树的平衡，保证在最坏的情况下查询的效率是O(logn)。</p><p>所以如果你想深入的了解TreeMap，你只要熟悉红黑树这种数据结构就行，推荐阅读<a href="https://www.jianshu.com/p/e136ec79235c" target="_blank" rel="noopener">30张图带你彻底理解红黑树</a>。</p><p>TreeMap和LinkedHashMap一样都是可以保证元素的有序性，但TreeMap并不是保证元素的插入顺序而是<strong>保证Key的自然排序</strong>，例如对于Key为对Integer来说，其自然排序就是数字的升序，对于Key为String来说，其自然排序就是按照字母表排序，那么它是如何保证的呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="keyword">super</span> K&gt; comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造器，comparator为null</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        comparator = <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过构造器指定TreeMap的comparator</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> K&gt; comparator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.comparator = comparator;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以put方法举例</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//红黑树根节点</span></span><br><span class="line">        Entry&lt;K,V&gt; t = root;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">           root = <span class="keyword">new</span> Entry&lt;&gt;(key, value, <span class="keyword">null</span>);</span><br><span class="line">           <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cmp;</span><br><span class="line">        Entry&lt;K,V&gt; parent;</span><br><span class="line">     <span class="comment">//首先尝试获取Comparator</span></span><br><span class="line">        Comparator&lt;? <span class="keyword">super</span> K&gt; cpr = comparator;</span><br><span class="line">        <span class="keyword">if</span> (cpr != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                parent = t;</span><br><span class="line">                <span class="comment">//如果Comparator不为null，就使用Comparator的compare方法来比较两个Key的大小</span></span><br><span class="line">                cmp = cpr.compare(key, t.key);</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            &#125; <span class="keyword">while</span> (t != <span class="keyword">null</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="comment">//如果Comparator为null, 就尝试把Key转成Comparable</span></span><br><span class="line">            Comparable&lt;? <span class="keyword">super</span> K&gt; k = (Comparable&lt;? <span class="keyword">super</span> K&gt;) key;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                parent = t;</span><br><span class="line">                <span class="comment">//使用Comparable的compareTo方法来比较两个Key的大小</span></span><br><span class="line">                cmp = k.compareTo(t.key);</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            &#125; <span class="keyword">while</span> (t != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们发现，它的内部还有一个Comparator，可以通过构造函数指定，如果不指定默认为null，当我们添加元素时，它首先会尝试使用Comparator来比较两个元素的大小，如果Comparator为null，就尝试把Key转成Comparable，使用Comparable比较两个Key的大小，如果这个使用Key没有实现Comparable接口，就会报错，我们还发现<strong>Comparator的优先级大于Comparable</strong>，Comparable和Comparator都是用来<strong>比较大小</strong>的，关于它们的区别，推荐阅读<a href="https://blog.csdn.net/u013256816/article/details/50899416?utm_source=app" target="_blank" rel="noopener">Comparable与Comparator浅析</a>。</p><p>所以如果有人问你TreeMap的有序性是怎样实现的，你就告诉他：<strong>TreeMap的有序性保证是通过使用Comparator或Comparable，把它保存的键值对根据Key排序，基于红黑树，从而保证TreeMap中所有键值对处于有序状态</strong>。</p><blockquote><p>对于Integer、Long等包装类和String类都实现了Comparable接口，所以以它们作为Key，TreeMap可以对它们进行自然排序，但是如果你的Key是<strong>自定义类</strong>，但是没有实现Comparable接口，在你插入元素时就会报错，所以如果你的Key是自定义类，你需要为TreeMap<strong>指定Comparator或为你的自定义类实现Comparable接口</strong>，自定义排序规则。</p></blockquote><h3 id="5、HashTable和HashMap的区别与选择"><a href="#5、HashTable和HashMap的区别与选择" class="headerlink" title="5、HashTable和HashMap的区别与选择"></a>5、HashTable和HashMap的区别与选择</h3><p><strong>相同点</strong>：</p><p>底层都是基于hash算法实现，底层数据结构都是数组+链表。</p><p><strong>不同点</strong>：</p><p>1、HashTable和HashMap的实现模板不一样，HashTable继承自陈旧的Dictionary抽象类，在java1.0引入，而HashMap是继承自AbstractMap抽象类，在java1.2引入，其中AbstractMap实现了Map接口，有很多Map的骨干实现；</p><p>2、HashTable是线程安全的，而HashMap是非线程安全的；</p><p>3、HashTable不允许存储为null的Key和Value，而HashMap允许存在一个为null的Key和多个为null的Value；</p><p>4、HashTable是把hash值通过对长度<strong>取模</strong>来定位映射在数组中的位置，而HashMap是通过与（长度-1）<strong>相与</strong>来定位映射在数组中的位置.</p><p><strong>如何选择</strong>？</p><p>在<strong>非并发环境</strong>下，HashMap完全<strong>可以替代</strong>HashTable，因为HashMap是非线程安全的，所以它的效率比HashTable<strong>更高</strong>，而且它是把hash值通过与（长度-1）相与来定位映射在数组中的位置，所以它比HashTable的取模运算<strong>更快</strong>。</p><p>在<strong>并发环境</strong>下，HashMap是非线程安全的，这时可以用<strong>ConcurrentHashMap</strong>来替代HashTable，ConcurrentHashMap是HashMap在并发环境下的一个实现，它不像HashTable在读写数据时直接锁住整个数组，它采用<strong>分段锁</strong>，在读写数据时<strong>只锁住你要读写的那一部分数据</strong>，所以ConcurrentHashMap可以<strong>支持多个线程</strong>执行并发写操作及任意数量线程的读操作，所以并发效率远远<strong>超过</strong>HashTable。</p><p>综上所述，在并发环境下选择ConcurrentHashMap，在非并发环境下选择HashMap。</p><h3 id="6、TreeMap和HashMap的区别与选择"><a href="#6、TreeMap和HashMap的区别与选择" class="headerlink" title="6、TreeMap和HashMap的区别与选择"></a>6、TreeMap和HashMap的区别与选择</h3><p><strong>相同点</strong>：</p><p>大家都继承自AbstractMap抽象类，大家的Value都可以为null的。</p><p><strong>不同点</strong>:</p><p>1、HashMap底层是数组+链表，而TreeMap底层是红黑树;</p><p>2、HashMap中的元素是无序的，而TreeMap中所有的元素都按Key的自然排序;</p><p>3、HashMap中的Key可以为null，而TreeMap不可以。</p><p><strong>如何选择</strong>：</p><p>如果你<strong>对集合的顺序没有要求</strong>，那么优先考虑HashMap，由于使用到hash算法，在HashMap中插入、删除和定位元素的平均效率是比TreeMap高的。</p><p>如果你<strong>对集合的顺序有要求</strong>，例如在迭代的情况下，我要求元素的输出是有序的，那么优先考虑LinkedHashMap或TreeMap，如果你希望你的元素<strong>是按插入或访问顺序排序</strong>的，你要选择LinkedHashMap；如果你对希望你的元素是按Key的自然顺序排序的，那么你要选择TreeMap。</p><p>综上所述，在没有顺序要求下，选择HashMap，因为TreeMap要保持元素的有序性，会导致效率比HashMap低，在有顺序要求下，看情况选择LinkedHashMap和TreeMap。</p><h2 id="四、Set"><a href="#四、Set" class="headerlink" title="四、Set"></a>四、Set</h2><img src="/2019/11/05/java%E9%9B%86%E5%90%88/java6.png" class="" title="java"><p>Set是用来操作一组唯一、无序的对象，它最多有一个null元素，它有3个常用的实现类：</p><ul><li>HashSet：用来存储互不相同的任何元素.</li><li>LinkedHashSet：继承自HashSet，使用链表扩展实现HashSet类，支持对元素的排序.</li><li>TreeSet：可以确保所有元素是有序的.</li></ul><p>其中LinkedHashSet继承自HashSet，LinkedHashSet的底层实现是LinkedHashMap，HashSet的底层实现是HashMap，TreeSet的底层实现是TreeMap，所以掌握了Map就等于掌握了Set.</p><h3 id="1、HashSet"><a href="#1、HashSet" class="headerlink" title="1、HashSet"></a>1、HashSet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();<span class="comment">//map的Vaule，起到占位的作用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(Math.max((<span class="keyword">int</span>) (c.size()/.<span class="number">75f</span>) + <span class="number">1</span>, <span class="number">16</span>));</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果调用3个参数的构造函数，可以把HashSet的底层实现指定为LinkedHashMap</span></span><br><span class="line"><span class="comment">//注意它的访问修饰符不是public，所以我们不可以使用这个构造函数，这个构造函数是内部使用的，如LinkedHashSet</span></span><br><span class="line"><span class="comment">//这个dummy参数可以忽略，没有什么作用</span></span><br><span class="line">HashSet(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor, <span class="keyword">boolean</span> dummy) &#123;</span><br><span class="line">    map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，除了最后一个构造函数，其他所有的构造函数都是根据构造参数new了一个HashMap，至于最后一个3个参数的构造函数，我们无法调用，所以我们可以说HashSet的底层实现就是<strong>HashMap</strong>，我们知道HashMap中的Key是<strong>唯一、可null、无序的</strong>，所以HashSet就利用了这一个特性，当我们往HashSet中保存元素时，<strong>这个元素就被作为Key</strong>，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.remove(o)==PRESENT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们<strong>对HashSet中元素的操作就是对其内部map的Key的操作</strong>，其实在HashMap中，Value的地位是比Key低的，Value只是作为Key的附属，有点男重女轻的思想，所以如果不需要建立映射关系，保存元素时，采用HashSet能有HashMap一样的效率。</p><h3 id="2、LinkedHashSet"><a href="#2、LinkedHashSet" class="headerlink" title="2、LinkedHashSet"></a>2、LinkedHashSet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(initialCapacity, loadFactor, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(initialCapacity, .<span class="number">75f</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="number">16</span>, .<span class="number">75f</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(Math.max(<span class="number">2</span>*c.size(), <span class="number">11</span>), .<span class="number">75f</span>, <span class="keyword">true</span>);</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LinkedHashSet继承自HashSet，所以它的父类是HashSet，我们发现LinkedHashSet的构造函数都调用HashSet的带有<strong>3个构造参数</strong>的构造函数，在HashSet介绍中讲到，3个参数的构造函数中<strong>会把HashSet的底层实现指定为LinkedHashMap</strong>，所以LinkedHashSet的底层实现就是LinkedHashMap，而且LinkedHashSet类中只有这4个构造函数，<strong>没有重写任何方法</strong>，所以对LinkedHashSet操作就是对HashSet操作，只是HashSet的<strong>底层实现由HashMap变成了LinkedHashMap</strong>。</p><h3 id="3、TreeSet"><a href="#3、TreeSet" class="headerlink" title="3、TreeSet"></a>3、TreeSet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">TreeSet(NavigableMap&lt;E,Object&gt; m) &#123;</span><br><span class="line">    <span class="keyword">this</span>.m = m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">new</span> TreeMap&lt;E,Object&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; comparator)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">new</span> TreeMap&lt;&gt;(comparator));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">(SortedSet&lt;E&gt; s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(s.comparator());</span><br><span class="line">    addAll(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从构造函数发现，TreeSet的底层实现都指定为<strong>TreeMap</strong>，和HashSet的逻辑一样，就不再累述了。</p><h3 id="4、HashSet、LinkedHashSet和TreeSet的选择"><a href="#4、HashSet、LinkedHashSet和TreeSet的选择" class="headerlink" title="4、HashSet、LinkedHashSet和TreeSet的选择"></a>4、HashSet、LinkedHashSet和TreeSet的选择</h3><p>区别就不讲了，和Map家族的区别差不多，这里讲一下它们的使用场景，如果不需要维护元素被插入的顺序，就应该使用HashSet，更加高效，因为HashSet底层使用hash算法来定位元素，如果产生的冲突少的话，它的效率可以达到O(1)常数级别，而TreeSet因为要保持有序性，所以就要进行比较等额外操作，它的时间复杂度为O(logn)；</p><p>如果需要保持元素的有序性，看情况选择LinkedHashSet（插入或访问有序）和TreeSet（Key自然排序或你自定义排序规则）。</p><h2 id="五、Queue"><a href="#五、Queue" class="headerlink" title="五、Queue"></a>五、Queue</h2><img src="/2019/11/05/java%E9%9B%86%E5%90%88/java7.png" class="" title="java"><p>Queue通常用于操作存储一组队列方式的对象，它的特点是先进先出（FIFO），Deque继承自Queue，是双端队列的简称(double-ended queue)，支持在两端插入和删除元素，在Deque接口增加的方法有：addFirst(e)、removeFirst(e)、addLast(e)、removeLast(e)、getFirst()和getLast()等，我们常用的有LinkedList、ArrayDeque，这里就简单介绍一下：</p><ul><li>LinkedList：底层是双向链表的实现，在添加和删除元素时比ArrayList具有更好的性能，在查询和更新元素方便弱于ArrayList，如果数据量都不大，两者的性能差不多，LinkedList作为队列使用时，<strong>尽量避免Collection的add()和remove()方法，而是要使用offer()来加入元素，使用poll()来获取并移出元素</strong>，它们的优点是通过返回值可以判断成功与否，add()和remove()方法在失败的时候会抛出异常。</li><li>ArrayDeque：底层是数组的实现，这个数组是<strong>循环数组</strong>，因为要满足在数组两端插入或删除元素的需求，它可以作为队列、双端队列、栈来使用，它是官方推荐用来<strong>代替Stack</strong>的，它的默认容量为16，容量必须为2的幂次方（和HashMap的一样，因为它的底层也是通过位运算来定位元素，2^n更方便完成一些位运算的骚操作），它的性能比LinkedList还好。</li></ul><p>以上是非阻塞队列的两个实现，在java中，还有阻塞队列这一说，它在java5中加入，使用阻塞队列更加方便的实现<strong>生产者-消费者</strong>，阻塞队列经常用于多线程环境，如线程池中，关于阻塞队列的介绍可以看<a href="https://rain9155.github.io/2019/07/19/java线程池/" target="_blank" rel="noopener">java线程池</a>，阻塞队列都继承自BlockingQueue接口 ，而BlockingQueue 继承自Queue接口。</p><h2 id="六、集合的遍历方式"><a href="#六、集合的遍历方式" class="headerlink" title="六、集合的遍历方式"></a>六、集合的遍历方式</h2><p>集合的遍历大同小异，可以分别Collection家族的遍历和Map家族的遍历.</p><h3 id="1、Collection的遍历"><a href="#1、Collection的遍历" class="headerlink" title="1、Collection的遍历"></a>1、Collection的遍历</h3><p>以List为例，对于<strong>List</strong>来说，有3种遍历方式，分别是：</p><ul><li>通过for循环遍历</li><li>使用迭代器遍历(对于List来说，可以使用Iterator或ListIterator)</li><li>通过foreach循环遍历（语法糖，反编译后还是通过迭代器来遍历）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;()&#123;&#123;</span><br><span class="line">    add(<span class="number">1</span>); add(<span class="number">2</span>); add(<span class="number">3</span>); add(<span class="number">4</span>);</span><br><span class="line">&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、通过for循环遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++)&#123;</span><br><span class="line">    System.out.print(list.get(i) + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、使用迭代器遍历</span></span><br><span class="line">Iterator&lt;Integer&gt; listIterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (listIterator.hasNext())&#123;<span class="comment">//hasNext()：判断当前指针后是否有下一个元素</span></span><br><span class="line">    System.out.print(listIterator.next() + <span class="string">" "</span>);<span class="comment">//next()：移动指针，获取下一个元素</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、通过foreach循环遍历</span></span><br><span class="line"><span class="keyword">for</span>(Integer num : list)&#123;</span><br><span class="line">    System.out.print(num + <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<strong>Set</strong>来说，它不能通过for循环遍历，它只能使用<strong>迭代器和foreach遍历</strong>，因为它没有索引的概念，对于<strong>Queue</strong>来说，它能通过<strong>循环+poll方法、迭代器和foreach遍历</strong>，如果要遍历<strong>List</strong>集合，对于ArrayList、Vector来说，使用for循环的效率更高，对于LinkedList来说，使用迭代器的效率更高。</p><h3 id="2、Map的遍历"><a href="#2、Map的遍历" class="headerlink" title="2、Map的遍历"></a>2、Map的遍历</h3><p>以HashMap为例，对于<strong>HashMap</strong>来说，有2种遍历方式，分别是：</p><ul><li>通过Map的ketSet方法返回KeySet，遍历KeySet，通过Key取出Value（二次取值）</li><li>通过Map的entrySet方法返回EntrySet，遍历EntrySet，取出Key和Value（Map数量量大时，推荐使用本方法遍历Map）</li></ul><p>不管是KeySet还是EntrySet，它们都是Set集合，Set集合可以通过<strong>迭代器和foreach遍历</strong>，下面示例使用foreach遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;()&#123;&#123;</span><br><span class="line">    put(<span class="number">1</span>, <span class="string">"1"</span>); put(<span class="number">2</span>, <span class="string">"2"</span>); put(<span class="number">3</span>, <span class="string">"3"</span>); put(<span class="number">4</span>, <span class="string">"4"</span>);</span><br><span class="line"></span><br><span class="line">&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、遍历KeySet，通过Key取出Value</span></span><br><span class="line">Set&lt;Integer&gt; keySet = map.keySet();</span><br><span class="line"><span class="keyword">for</span>(Integer key : keySet)&#123;</span><br><span class="line">    System.out.print(key + <span class="string">"--"</span> + map.get(key) + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、遍历EntrySet，取出Key和Value</span></span><br><span class="line">Set&lt;Map.Entry&lt;Integer, String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;Integer, String&gt; entry : entrySet)&#123;</span><br><span class="line">    System.out.print(entry.getKey() + <span class="string">"--"</span> + entry.getValue() + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>foreach遍历底层其实还是通过迭代器遍历。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实还有两个很少用到，但在特殊场景却一定会用到它的两个集合没有讲到，分别是：PriorityQueue(优先级队列)、WeakHashMap(Key为弱引用的HashMap)，PriorityQueue可以指定比较器实现<strong>小顶堆和大顶堆</strong>，WeakHashMap可以用在<strong>内存有限</strong>的环境下，防止OOM，关于它们的具体使用可以自行查阅资料。</p><p>本文主要简单介绍了集合框架中经常用到的集合类：ArrayList、LinkedList、HashMap、LinkedHashMap、TreeMap、HashSet、LinkedHashSet、TreeSet、ArrayDeque，和一些古老的容器类：Stack、Vector、HashTable，其中容器类已经不推荐使用了，它们都有各自的替代品，分别是：ArrayDeque、ArrayList、HashMap，本文还讲解了集合类之间各自的区别和使用场景，还有集合的迭代方式，在使用集合时，要善用<strong>Collections和Arrays</strong>工具类，它里面有很多对集合操作的工具方法，能在开发中简化我们的工作量。</p><p>以上就是本文的全部内容，如有错误，欢迎指出！</p><p>参考资料：</p><p><a href="https://blog.csdn.net/justloveyou_/article/details/71713781" target="_blank" rel="noopener">彻头彻尾理解 LinkedHashMap</a></p><p><a href="https://blog.csdn.net/justloveyou_/article/details/72862373" target="_blank" rel="noopener">彻头彻尾理解 HashTable</a></p><p><a href="https://blog.csdn.net/softwave/article/details/4166598" target="_blank" rel="noopener">Java集合类详解</a></p><p><a href="https://www.cnblogs.com/CarpenterLee/p/5468803.html" target="_blank" rel="noopener">Java ArrayDeque源码剖析</a></p><p><a href="https://blog.csdn.net/badguy_gao/article/details/78989637" target="_blank" rel="noopener">Java中modCount的作用</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在JDK1.2之前，java是没有完整的集合框架的，只有一些简单的可以扩展的&lt;strong&gt;容器类&lt;/strong&gt;，如Vector、Sta
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="list" scheme="http://yoursite.com/tags/list/"/>
    
      <category term="set" scheme="http://yoursite.com/tags/set/"/>
    
      <category term="map" scheme="http://yoursite.com/tags/map/"/>
    
      <category term="queue" scheme="http://yoursite.com/tags/queue/"/>
    
      <category term="集合" scheme="http://yoursite.com/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>通过源码全面解剖Retrofit2的整体流程</title>
    <link href="http://yoursite.com/2019/10/23/%E9%80%9A%E8%BF%87%E6%BA%90%E7%A0%81%E5%85%A8%E9%9D%A2%E8%A7%A3%E5%89%96Retrofit2%E7%9A%84%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/10/23/%E9%80%9A%E8%BF%87%E6%BA%90%E7%A0%81%E5%85%A8%E9%9D%A2%E8%A7%A3%E5%89%96Retrofit2%E7%9A%84%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B/</id>
    <published>2019-10-23T14:00:22.000Z</published>
    <updated>2023-01-07T10:44:49.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上两篇文章：</p><ul><li><a href="https://rain9155.github.io/2019/09/03/okhttp3源码分析之请求流程/" target="_blank" rel="noopener">okhttp3源码分析之请求流程</a></li><li><a href="https://rain9155.github.io/2019/09/07/okhttp3源码分析之拦截器/" target="_blank" rel="noopener">okhttp3源码分析之拦截器</a></li></ul><p>Retrofit与Okhttp是Android开发中最最热门的网络请求库，它们都来自square公司，Okhttp在前面的两篇文章中已经通过源码从请求流程和拦截器两个角度分析过，本文的主角是Retrofit，经过这几天的研究，我发现Retrofit只是一个对Okhttp网络请求框架的巧妙包装，它通过注解去定义一个HTTP请求，然后在底层通过Okhttp发起网络请求，就是这样的一个简单的过程，其间运用了很多的设计模式：外观模式、动态代理模式、适配器模式、装饰者模式等，其最核心的是动态代理模式，所以在此之前大家对动态代理要有一个了解：</p><p><a href="https://rain9155.github.io/2019/10/15/代理模式/" target="_blank" rel="noopener">静态和动态代理模式</a></p><p>其他的设计模式我会在讲解的过程中简单介绍，除了使用了大量的设计模式，Retrofit还应用了面向接口编程的思想，使得整个系统解耦彻底，本文会通过一个简单的Retrofit使用示例，然后引出Retrofit的核心类，面向接口思想、构建过程、动态代理和网络请求过程，通过这几部分来解剖Retrofit。</p><p>Retrofit的项目地址：<a href="https://github.com/square/Retrofit" target="_blank" rel="noopener">Retrofit</a></p><blockquote><p>本文源码基于Retrofit2.4</p></blockquote><a id="more"></a><h2 id="一、Retrofit的简单使用"><a href="#一、Retrofit的简单使用" class="headerlink" title="一、Retrofit的简单使用"></a>一、Retrofit的简单使用</h2><p>首先来回忆一下Retrofit的使用，我这里使用的是<a href="https://developer.github.com/" target="_blank" rel="noopener">Github</a>平台的开放api，这个api根据用户名获取一个用户信息，首先在你的AndroidManifest.xml中声明网络权限，然后：</p><p>1、创建一个Api接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GithubService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET</span>(<span class="string">"users/&#123;user&#125;"</span>)</span><br><span class="line">    <span class="function">Call&lt;ResponseBody&gt; <span class="title">getUserInfo</span><span class="params">(@Path(<span class="string">"user"</span>)</span> String user)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我用Retrofit的注解声明了一个GET请求的方法，Call是Retrofit中的Call，而不是Okhttp中的Call，而ResponseBody是Okhttp的ResponseBody。</p><p>2、创建Retrofit实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Retrofit Retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">    .baseUrl(<span class="string">"https://api.github.com/"</span>)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><p>使用Builder模式构建Retrofit实例，传入baseUrl，我们平常开发一般会添加Rxjava2CallAdapterFactory和GsonConverterFactory，但这里我没有使用addCallAdapterFactory(Factory)来添加CallAdapterFactory，也没有使用addConverterFactory(Factory)来添加ConverterFactory，都使用默认的CallAdapter和Converter，默认的CallAdapter返回的就是Retrofit中的Call类型，默认的Converter会把网络请求返回数据转化为Okhttp中的ResponseBody，这也就是我上面定义接口时，Cal<T>的T是ResponseBody的原因。</p><p>3、创建Api接口实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GithubService service = Retrofit.create(GithubService<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p>通过Retrofit实例的create方法创建Api接口实例GithubService。</p><p>4、调用Api接口的方法，生成Call</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Call&lt;ResponseBody&gt; call = service.getUserInfo(<span class="string">"rain9155"</span>);</span><br></pre></td></tr></table></figure><p>调用Api接口的方法，会返回一个Call实例。</p><p>5、通过Call发起同步或异步请求，然后获取返回结果Response</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同步请求</span></span><br><span class="line">Response&lt;ResponseBody&gt; response = call.execute();</span><br><span class="line">或</span><br><span class="line"><span class="comment">//异步请求 </span></span><br><span class="line">call.enqueue(<span class="keyword">new</span> Callback&lt;ResponseBody&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;ResponseBody&gt; call, Response&lt;ResponseBody&gt; response)</span></span>&#123;</span><br><span class="line">            <span class="comment">//通过Response获取网络请求返回结果</span></span><br><span class="line">                ResponseBody body = response.body();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">"请求结果："</span> +  body.string());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;ResponseBody&gt; call, Throwable t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>通过Call的execute或enqueue方法发起网络请求，当网络请求结果返回时，就可以通过Response的body方法获取，这里因为使用默认的Converter，所以获取到的body的是Okhttp的ResponseBody，log的输出结果是<strong>JSON数据</strong>。</p><p>这就是Retrofit发起网络请求的五步曲，如果除去第一步，和Okhttp的使用还是非常的相似的，因为Retrofit和Okhttp的类名有很多的重复，下面如果涉及Okhttp的相关类，我会特别说明，否则默认都是属于Retrofit的。</p><h2 id="二、Retrofit的相关类介绍"><a href="#二、Retrofit的相关类介绍" class="headerlink" title="二、Retrofit的相关类介绍"></a>二、Retrofit的相关类介绍</h2><p>先简单的介绍一下重要的类，会对后面的阅读有帮助，当我们把Retrofir的源码clone下来，发现里面有4个主要的模块，分别是：</p><ul><li>retrofit-adapter </li><li>retrofit-converters</li><li>retrofit-mock</li><li>retrofit</li></ul><p>其中retrofit-mock是测试时用的，不关我们的事，和我们开发相关的是retrofit-adapter、retrofit-converters和retrofit模块，当我们没有使用外置的CallAdapter和Converters时，我们只需要依赖retrofit模块，retrofit模块中有3个非常重要的接口，分别是：</p><ul><li><strong>Call</strong>: 网络请求执行器，用于执行同步或异步的网络请求，内部最终通过Okhttp的Call发起网络请求</li><li><strong>CallAdapter</strong>：网络请求适配器，它用于把默认的网络请求执行器的调用形式，适配成在不同平台下的网络请求执行器的调用形式，例如Retrofit默认通过Call，内部使用ExecutorCallbackCall通过handler来执行网络请求后的线程切换，通过添加RxjavaCallAdapter后，RxjavaCallAdapter把默认的网络请求执行器适配成Observerable或Flowable，这样我可以使用Rxjava的链式调用方式来执行网络请求后的线程切换。</li><li><strong>Converter</strong>：数据转化器，两个方向的转化，把Api接口方法的参数注解的值转化为网络请求执行器需要的数据类型，和把网络返回的数据转化为我们需要的数据类型。</li></ul><p>还有一个Callback接口，用于回调网络请求成功或失败，很简单，就不介绍了，其中CallAdapter和Converter内部都有一个Factory类，它都是通过<a href="https://blog.csdn.net/Rain_9155/article/details/82942275" target="_blank" rel="noopener">工厂模式</a>创建，工厂模式就是<strong>将复杂对象的实例化任务交给一个类去实现，使得使用者不用知道具体参数就可以实例化出所需要的对象</strong>，在Retrofit中，想要获得CallAdapter或Converter的实例都需要通过Factory来获取。下面分别简单的介绍一下Call、CallAdapter和Converter接口的作用和在Retrofit下的默认实现。</p><h3 id="1、Call"><a href="#1、Call" class="headerlink" title="1、Call"></a>1、Call</h3><p>网络请求执行器，用于执行同步或异步的网络请求，Call接口如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Call</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//发起同步请求，返回Response</span></span><br><span class="line">  <span class="function">Response&lt;T&gt; <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//发起异步请求，使用callback把Response回调出去</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Callback&lt;T&gt; callback)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//当执行了execute或enqueue后，该方法返回true</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isExecuted</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//取消这次网络请求</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//当执行了cancel()后，这个方法返回true</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isCanceled</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//clone一个Call</span></span><br><span class="line">  <span class="function">Call&lt;T&gt; <span class="title">clone</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//返回HTTP网络请求，这个Request是来自okhttp的</span></span><br><span class="line">  <span class="function">Request <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Retrofit的Call和Okhttp的Call接口定义的方法差不多，只是多了一个clone方法，在Retrofit中，Call的默认实现类是OkHttpCall，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpCall</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Call</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServiceMethod&lt;T, ?&gt; serviceMethod;<span class="comment">//这个ServiceMethod很重要，它封装了Api接口方法中的注解和参数信息，一个ServiceMethod对应一个Method（在创建Api接口实例会讲到）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="meta">@Nullable</span> Object[] args;<span class="comment">//代表着Api接口方法中的参数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@Nullable</span> okhttp3.Call rawCall;<span class="comment">//这是一个来自Okhttp的Call</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@Nullable</span> Throwable creationFailure;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> executed;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> canceled;</span><br><span class="line"></span><br><span class="line">    Override </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response&lt;T&gt; <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        okhttp3.Call call;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        call = rawCall;</span><br><span class="line">        <span class="keyword">return</span> parseResponse(call.execute());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">final</span> Callback&lt;T&gt; callback)</span> </span>&#123;</span><br><span class="line">        okhttp3.Call call;</span><br><span class="line">        call = rawCall;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">        call.enqueue(<span class="keyword">new</span> okhttp3.Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(okhttp3.Call call, okhttp3.Response rawResponse)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                callback.onResponse(OkHttpCall.<span class="keyword">this</span>, response);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(okhttp3.Call call, IOException e)</span> </span>&#123;</span><br><span class="line">                callFailure(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个OkHttpCall实例就代表着一次网络请求，OkHttpCall里面大部分方法的逻辑都是转发给Okhttp的Call方法。</p><blockquote><p>在本文，不管来自Okhttp的Call，还是来自Retrofit的Call，都可以理解为网络请求执行器。</p></blockquote><h3 id="2、CallAdapter"><a href="#2、CallAdapter" class="headerlink" title="2、CallAdapter"></a>2、CallAdapter</h3><p>网络请求适配器，用于把默认的网络请求执行器的调用形式，适配成在不同平台下的网络请求执行器的调用形式，CallAdapter接口如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CallAdapter</span>&lt;<span class="title">R</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//返回响应body转换为Java对象时使用的类型</span></span><br><span class="line">  <span class="comment">//例如Call&lt;ResponseBody&gt;, Type就是ResponseBody，Type是来自java.lang.reflect包的</span></span><br><span class="line">  <span class="function">Type <span class="title">responseType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//把Call&lt;R&gt;适配成 T 类型，就是将Retrofit的Call适配成另外一个T类型的'Call'</span></span><br><span class="line">  <span class="function">T <span class="title">adapt</span><span class="params">(Call&lt;R&gt; call)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//用于创建CallAdapter实例，通过get方法可以返回一个CallAdapter实例或null</span></span><br><span class="line">  <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据Api接口定义的方法的返回值和注解信息，创建一个CallAdapter实例返回，如果这个Factory不能处理这个方法的返回值和注解信息，返回null，</span></span><br><span class="line">    <span class="comment">//注意这里的returnType != 上面的responseType，例如Call&lt;ResponseBody&gt;，returnType的Type就是Call</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="meta">@Nullable</span> CallAdapter&lt;?, ?&gt; get(Type returnType, Annotation[] annotations,</span><br><span class="line">        Retrofit Retrofit);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回ParameterizedType的上限，即泛型类型的上限</span></span><br><span class="line">    <span class="comment">//例如Call&lt;? extends ResponseBody&gt;, Type就是ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> Type <span class="title">getParameterUpperBound</span><span class="params">(<span class="keyword">int</span> index, ParameterizedType type)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Utils.getParameterUpperBound(index, type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//返回Type的原始类型</span></span><br><span class="line">   <span class="comment">//例如Type为Call&lt;ResponseBody&gt;，返回Call.class</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> Class&lt;?&gt; getRawType(Type type) &#123;</span><br><span class="line">      <span class="keyword">return</span> Utils.getRawType(type);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CallAdapter接口很简单，只有两个方法responseType和adapt方法，和一个Factory类，其中Factory类的get方法可以获取一个CallAdapter示例，CallAdapter的responseType方法就是获得Call<T>中的T类型，这个Call<T>就是我们在定义Api接口方法时方法的返回参数，CallAdapter的<strong>adapt方法</strong>用于把传入的Call<R>适配成另外一个我们所期待的’Call’，这里使用到了<a href="https://blog.csdn.net/Rain_9155/article/details/87903640" target="_blank" rel="noopener">适配器模式</a>，适配器模式就是<strong>在两个因接口不兼容的类之间加一个适配器，将一个类的接口变成客户端所期待的另一种接口，从而使得它们工作在一起</strong>，至于怎么适配就需要看适配器中得adapt方法的实现，接下来我们看adapt方法在Retrofit中的默认实现。（在Android Platform下的默认实现，Platform的概念在构建过程中会讲到）</p><p>在Retrofit中，CallAdapter的默认实现是一个匿名类，可以通过CallAdapter的Factory获得，CallAdapter的Factory的默认实现是<strong>ExecutorCallAdapterFactory</strong>，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorCallAdapterFactory</span> <span class="keyword">extends</span> <span class="title">CallAdapter</span>.<span class="title">Factory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//线程切换执行器（在Retrofit的创建过程中会讲）</span></span><br><span class="line">  <span class="keyword">final</span> Executor callbackExecutor;</span><br><span class="line"></span><br><span class="line">  ExecutorCallAdapterFactory(Executor callbackExecutor) &#123;</span><br><span class="line">    <span class="keyword">this</span>.callbackExecutor = callbackExecutor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> CallAdapter&lt;?, ?&gt; get(Type returnType, Annotation[] annotations, Retrofit Retrofit) &#123;</span><br><span class="line">      <span class="keyword">if</span> (getRawType(returnType) != Call<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//可以通过returnType获得responseType</span></span><br><span class="line">      <span class="comment">//因为returnType = Call&lt;T&gt;, 有了Call&lt;T&gt;, 当然可以获得Call中的T，而T就是responseType</span></span><br><span class="line">      <span class="keyword">final</span> Type responseType = Utils.getCallResponseType(returnType);</span><br><span class="line">      <span class="comment">//返回一个CallAdapter匿名类</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> CallAdapter&lt;Object, Call&lt;?&gt;&gt;() &#123;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span> </span><br><span class="line">          <span class="function"><span class="keyword">public</span> Type <span class="title">responseType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              <span class="comment">//返回responseType</span></span><br><span class="line">              <span class="keyword">return</span> responseType;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span> </span><br><span class="line">          <span class="function"><span class="keyword">public</span> Call&lt;Object&gt; <span class="title">adapt</span><span class="params">(Call&lt;Object&gt; call)</span> </span>&#123;</span><br><span class="line">              <span class="comment">//默认CallAdapter的adapt方法返回</span></span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">new</span> ExecutorCallbackCall&lt;&gt;(callbackExecutor, call);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"> <span class="comment">//网络请求执行器（在创建Api接口实例中会讲）</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorCallbackCall</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Call</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">  &#125;  </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ExecutorCallAdapterFactory的get方法中，new了一个CallAdapter返回，在CallAdapter的adapt方法实现中，new了一个ExecutorCallbackCall返回，并把入参call和callbackExecutor传进了ExecutorCallbackCall的构造中，ExecutorCallbackCall就是一个实现了Call接口的类，还是一个Call，它就是Retrofit的默认网络请求执行器，可以看到Retrofit的默认的网络请求执行器适配，即adapt方法的默认实现就是<strong>用ExecutorCallbackCall包装传进来的Call，并返回ExecutorCallbackCall，这个传进来的Call就是Call的默认实现OkHttpCall</strong>，待会在Retrofit的构建过程中还会讲到。</p><p>既然CallAdapter能把默认的网络请求执行器的调用形式，适配成在不同平台下的网络请求执行器的调用形式，那么它支持哪些平台呢？这个在retrofit-adapter 模块中可以找到答案，如下：</p><img src="/2019/10/23/%E9%80%9A%E8%BF%87%E6%BA%90%E7%A0%81%E5%85%A8%E9%9D%A2%E8%A7%A3%E5%89%96Retrofit2%E7%9A%84%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B/retrofit1.png" class="" title="retrofit"><p>Retrofit还支持guava、java8、rxjava、scala这四个平台，它们里面都各自实现了retrofit模块暴露出去的CallAdapter接口和CallAdapter接口中的Factory接口，在CallAdapter的adapt方法中提供各自平台的适配，我们可以通过addCallAdapterFactory(Factory)来添加不同平台的CallAdapter工厂。</p><h3 id="3、Converter"><a href="#3、Converter" class="headerlink" title="3、Converter"></a>3、Converter</h3><p>数据转化器，把我们在Api接口定义的方法注解和参数转化为网络请求执行器需要的请求类型，和把网络返回的数据转化为我们需要的数据类型，Converter接口如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">F</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">   </span><br><span class="line">  <span class="comment">//把F 转化为 T，用于在网络请求中实现对象的转化</span></span><br><span class="line">  <span class="function">T <span class="title">convert</span><span class="params">(F value)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//通过Factory的responseBodyConverter或requestBodyConverter方法获得一个Converter实例或null</span></span><br><span class="line">  <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回一个处理网络请求响应（Response）的body的Converter实例，如果不能处理这些类型(type)和注解，返回null</span></span><br><span class="line">    <span class="comment">//这个Converter会把 ResponseBody 转化成 ?，这个ResponseBody是来自okhttp的</span></span><br><span class="line">    <span class="comment">//例如使用GsonConverter，？代表某个java对象类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@Nullable</span> Converter&lt;ResponseBody, ?&gt; responseBodyConverter(Type type,</span><br><span class="line">        Annotation[] annotations, Retrofit Retrofit) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回一个处理网络请求（Request）的body的Converter实例，如果不能处理这些类型(type)和注解，返回null</span></span><br><span class="line">    <span class="comment">//这个Converter会把 ？转化成 RequestBody，这个RequestBody是来自okhttp的</span></span><br><span class="line">    <span class="comment">//这个Converter主要处理@Body、 @Part、@PartMap类型的注解</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@Nullable</span> Converter&lt;?, RequestBody&gt; requestBodyConverter(Type type,</span><br><span class="line">        Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit Retrofit) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回一个处理网络请求（Request）的body的Converter实例</span></span><br><span class="line">    <span class="comment">//这个Converter会把 ？转化成 String</span></span><br><span class="line">    <span class="comment">//这个Converter主要处理@Field、@FieldMap、@Header、HeaderMap @HeaderMap、@Path、@Query、@QueryMap类型的注解</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@Nullable</span> Converter&lt;?, String&gt; stringConverter(Type type, Annotation[] annotations,</span><br><span class="line">        Retrofit Retrofit) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面两个方法和上面CallAdapter的Factory中同名方法的意思一样</span></span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> Type <span class="title">getParameterUpperBound</span><span class="params">(<span class="keyword">int</span> index, ParameterizedType type)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Utils.getParameterUpperBound(index, type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> Class&lt;?&gt; getRawType(Type type) &#123;</span><br><span class="line">      <span class="keyword">return</span> Utils.getRawType(type);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Converter接口也很简单，只有一个convert方法，和一个Factory类，因为Converter要提供两个方向的转化，所以Factory类就提供了两个方法用于获取不同方向的转化，其中responseBodyConverter方法就是获得一个把网络返回的数据转化为我们需要的数据类型的Converter实例，而requestBodyConverter方法就是获得一个把我们在Api接口定义的方法注解和参数转化为网络请求的Converter实例，那么要怎么转化呢？就要看Converter的convert方法的实现，convert方法把F类型 转化为 T类型，接下来我们看convert方法在Retrofit中的默认实现。</p><p>Converter在Retrofit的默认实现有五个，都是Converter的Factory的内部类，可通过Converter的Factory获得，Converter的Factory的默认实现是<strong>BuiltInConverters</strong>，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BuiltInConverters</span> <span class="keyword">extends</span> <span class="title">Converter</span>.<span class="title">Factory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Converter&lt;ResponseBody, ?&gt; responseBodyConverter(Type type, Annotation[] annotations,</span><br><span class="line">      Retrofit Retrofit) &#123;</span><br><span class="line">    <span class="keyword">if</span> (type == ResponseBody<span class="class">.<span class="keyword">class</span>) </span>&#123;<span class="comment">//支持ResponseBody类型的转化</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//如果是二进制流形式，就返回StreamingResponseBodyConverter实例</span></span><br><span class="line">      <span class="comment">//如果是字符流形式，就返回BufferingResponseBodyConverter实例</span></span><br><span class="line">      <span class="keyword">return</span> Utils.isAnnotationPresent(annotations, Streaming<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">          ? <span class="title">StreamingResponseBodyConverter</span>.<span class="title">INSTANCE</span></span></span><br><span class="line">          : BufferingResponseBodyConverter.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (type == Void<span class="class">.<span class="keyword">class</span>) </span>&#123;<span class="comment">//支持Void类型的转化</span></span><br><span class="line">        </span><br><span class="line">      <span class="comment">//返回VoidResponseBodyConverter实例</span></span><br><span class="line">      <span class="keyword">return</span> VoidResponseBodyConverter.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">//除了以上两种类型，其他类型都不支持，返回null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Converter&lt;?, RequestBody&gt; requestBodyConverter(Type type,</span><br><span class="line">      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit Retrofit) &#123;</span><br><span class="line">    <span class="comment">//支持向RequestBody类型转化</span></span><br><span class="line">    <span class="keyword">if</span> (RequestBody<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">Utils</span>.<span class="title">getRawType</span>(<span class="title">type</span>))) </span>&#123;</span><br><span class="line">        </span><br><span class="line">      <span class="comment">//返回RequestBodyConverter实例</span></span><br><span class="line">      <span class="keyword">return</span> RequestBodyConverter.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//除了RequestBody类型，不支持向其他类型转化，返回null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">VoidResponseBodyConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">ResponseBody</span>, <span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> VoidResponseBodyConverter INSTANCE = <span class="keyword">new</span> VoidResponseBodyConverter();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Void <span class="title">convert</span><span class="params">(ResponseBody value)</span> </span>&#123;</span><br><span class="line">      value.close();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestBodyConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">RequestBody</span>, <span class="title">RequestBody</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> RequestBodyConverter INSTANCE = <span class="keyword">new</span> RequestBodyConverter();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> RequestBody <span class="title">convert</span><span class="params">(RequestBody value)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamingResponseBodyConverter</span></span></span><br><span class="line"><span class="class">      <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">ResponseBody</span>, <span class="title">ResponseBody</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> StreamingResponseBodyConverter INSTANCE = <span class="keyword">new</span> StreamingResponseBodyConverter();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> ResponseBody <span class="title">convert</span><span class="params">(ResponseBody value)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferingResponseBodyConverter</span></span></span><br><span class="line"><span class="class">      <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">ResponseBody</span>, <span class="title">ResponseBody</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> BufferingResponseBodyConverter INSTANCE = <span class="keyword">new</span> BufferingResponseBodyConverter();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> ResponseBody <span class="title">convert</span><span class="params">(ResponseBody value)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Buffer the entire body to avoid future I/O.</span></span><br><span class="line">        <span class="keyword">return</span> Utils.buffer(value);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        value.close();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ToStringConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">Object</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> ToStringConverter INSTANCE = <span class="keyword">new</span> ToStringConverter();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> value.toString();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BuiltInConverters实现了Factory中的responseBodyConverter和requestBodyConverter方法，内部含有五个Converter默认实现类，在Factory的responseBodyConverter和requestBodyConverter方法中分别返回这几Converter实例，其中只有ToStringConverter没有使用到，我们还发现了这五个Converter的convert方法的实现除了BufferingResponseBodyConverter，大部分都是，入参是是什么，返回就是什么，所以Retrofit中Converter默认实现的convert方法大部分<strong>都没有对数据进行转化，返回原始数据，这些原始数据是String或来自Okhttp的ResponseBody、RequestBody</strong>，例如ResponseBodyConverter的convert方法就是返回Okhttp的ResponseBody，RequestBodyConverter的convert方法就是返回Okhttp的RequestBody。</p><p>Converter除了默认的返回原始数据，它还支持哪些数据转化呢？这个在retrofit-converters模块中可以找到答案，如下：</p><img src="/2019/10/23/%E9%80%9A%E8%BF%87%E6%BA%90%E7%A0%81%E5%85%A8%E9%9D%A2%E8%A7%A3%E5%89%96Retrofit2%E7%9A%84%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B/retrofit2.png" class="" title="Retrofit"><p>可以看到Retrofit还支持json、xml、protobuf等多种数据类型的转化，这些子模块都各自实现了retrofit模块暴露出来的Converter接口和Converter接口中的Factory接口，在Converter的adapt方法中实现不同数据类型的转化逻辑，我们可以通过addConverterFactory(Factory)来支持不同数据类型转化的Converter工厂。</p><h3 id="4、面向接口设计"><a href="#4、面向接口设计" class="headerlink" title="4、面向接口设计"></a>4、面向接口设计</h3><p>在retrofit模块中提供了<strong>Call、Callback、CallAdapter、Converter接口</strong>供外部模块使用，CallAdapter和Converter接口中还有相应的Factory接口，各模块之前通过接口依赖主模块Retrofit，将网络请求、网络请求适配、请求处理与返回解析完全解耦，当需要修改Retrofit中的默认实现时，只需要add一个外部模块提供的工厂，具体创建什么样的实例由工厂方法来负责，这样就能以最小的代价（不需要改动代码）换成其他模块上的实现，Retrofit本身并不参与这个过程，它只是负责提供一些主要的参数供它们进行决策，以及进行参数的处理，模块之间依赖于接口，而不依赖于具体的实现，这是一种很好的编程思路，面向接口编程。</p><blockquote><p>面向接口编程：也被熟知为基于接口的设计，是一种基于组件级别的，面向对象语言的模块化编程设计实现，面向接口编程是面向对象编程的一种模块化实现形式，理论上说具有对象概念的程序设计都可以称之为面向对象编程，而面向接口编程则是从组件的级别来设计代码，将抽象与实现分离。</p></blockquote><p>好了，在简单的了解了一下待会和构建过程涉及到的相关类，接下来分析Retrofit的构建过程。</p><h2 id="三、Retrofit的创建过程"><a href="#三、Retrofit的创建过程" class="headerlink" title="三、Retrofit的创建过程"></a>三、Retrofit的创建过程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Retrofit Retrofit = <span class="keyword">new</span> Retrofit.Builder()<span class="comment">//1、构造Builder</span></span><br><span class="line">    .baseUrl(<span class="string">"https://api.github.com/"</span>)<span class="comment">//2、配置Builder</span></span><br><span class="line">    .build();<span class="comment">//3、创建Retrofit实例</span></span><br></pre></td></tr></table></figure><p>Retrofit是使用<a href="https://blog.csdn.net/Rain_9155/article/details/82936136" target="_blank" rel="noopener">Builder模式</a>构建出一个Retrofit实例的，Builder模式的好处<strong>就是将一个复杂对象的构建和它的表示分离，在用户在不知道内部构建细节的情况下，可以更加精准的控制对象的构造过程</strong>，所以我们直接看Retrofit的内部类Builder就行，因为在Builder中配置的字段最终都在build时赋值给Retrofit中相应的字段，Builder只是暂时保存这些配置字段而已，下面我们分注释的3步去看Retrofit的Builder.</p><h3 id="1、构造Builder"><a href="#1、构造Builder" class="headerlink" title="1、构造Builder"></a>1、构造Builder</h3><p>Builder类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Retrofit.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> Platform platform;<span class="comment">//Retrofit运行的平台</span></span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//根据Platform构造</span></span><br><span class="line">     Builder(Platform platform) &#123;</span><br><span class="line">         <span class="keyword">this</span>.platform = platform;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="comment">//调用Platform的get方法获取一个Platform</span></span><br><span class="line">         <span class="keyword">this</span>(Platform.get());</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//根据另外一个Retrofit构造</span></span><br><span class="line">     Builder(Retrofit Retrofit) &#123;</span><br><span class="line">         platform = Platform.get();</span><br><span class="line">         callFactory = Retrofit.callFactory;</span><br><span class="line">         baseUrl = Retrofit.baseUrl;</span><br><span class="line">         <span class="comment">//...</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>new Retrofit.Builder()，我们使用了无参的构造函数来创建Builder，Builder的无参构造函数首先通过<strong>Platform.get()</strong>获取了一个Platform实例赋值给了platform字段，前面提到过Retrofit是有Platform的概念，Retrofit支持java和Android平台，我们来看一下Platform这个类，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Platform</span> </span>&#123;   </span><br><span class="line">    <span class="comment">//单例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Platform PLATFORM = findPlatform();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get方法</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Platform <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//返回Platform实例</span></span><br><span class="line">        <span class="keyword">return</span> PLATFORM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Platform <span class="title">findPlatform</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//android.os.Build这个类是Android独有的</span></span><br><span class="line">            <span class="comment">//这里要求JVM查找并加载Build.class对象</span></span><br><span class="line">            Class.forName(<span class="string">"android.os.Build"</span>);</span><br><span class="line">            <span class="keyword">if</span> (Build.VERSION.SDK_INT != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//如果是Android平台，创建一个Android实例返回，Android继承自Platform</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Android();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException ignored) &#123;</span><br><span class="line">            <span class="comment">//找不到android.os.Build，会抛出异常，捕捉，继续执行</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//java.util.Optional这个类是java8之后才有的，是java独有的</span></span><br><span class="line">            Class.forName(<span class="string">"java.util.Optional"</span>);</span><br><span class="line">            <span class="comment">//创建一个Java8实例返回，Java8继承自Platform</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Java8();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException ignored) &#123;</span><br><span class="line">            <span class="comment">//找不到java.util.Optional，会抛出异常，捕捉，继续执行</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//返回默认Platform实例</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Platform();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回默认的线程切换执行器</span></span><br><span class="line">    <span class="function">Executor <span class="title">defaultCallbackExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回默认的网络请求适配器工厂</span></span><br><span class="line">    CallAdapter.<span class="function">Factory <span class="title">defaultCallAdapterFactory</span><span class="params">(@Nullable Executor callbackExecutor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (callbackExecutor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ExecutorCallAdapterFactory(callbackExecutor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> DefaultCallAdapterFactory.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isDefaultMethod</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span> <span class="function">Object <span class="title">invokeDefaultMethod</span><span class="params">(Method method, Class&lt;?&gt; declaringClass, Object object,</span></span></span><br><span class="line"><span class="function"><span class="params">                                         @Nullable Object... args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IgnoreJRERequirement</span> <span class="comment">// Only classloaded and used on Java 8.</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8</span> <span class="keyword">extends</span> <span class="title">Platform</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Android</span> <span class="keyword">extends</span> <span class="title">Platform</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先Platform的get方法通过<a href="https://rain9155.github.io/2019/11/16/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">单例模式</a>返回了一个Platform实例，单例模式就是<strong>保证单例对象的类在同一进程中，只有一个实例存在</strong>，Platform实例通过findPlatform方法创建，可以看到findPlatform方法里面区分了Android、java和其他平台返回了不同的Platform实现，由于我这里是Android平台，只关注Android平台的实现，Android类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Platform.java</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Android</span> <span class="keyword">extends</span> <span class="title">Platform</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Executor <span class="title">defaultCallbackExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MainThreadExecutor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> CallAdapter.<span class="function">Factory <span class="title">defaultCallAdapterFactory</span><span class="params">(@Nullable Executor callbackExecutor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (callbackExecutor == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ExecutorCallAdapterFactory(callbackExecutor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程切换执行器</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MainThreadExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">        <span class="comment">//构造Handler时通过Looper.getMainLooper()来构造</span></span><br><span class="line">        <span class="comment">//所以Handler的消息都会执行在主线程</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Handler handler = <span class="keyword">new</span> Handler(Looper.getMainLooper());</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">            handler.post(r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Android继承自Platform，重写了它其中的两个方法：defaultCallbackExecutor方法和defaultCallAdapterFactory方法，defaultCallbackExecutor方法返回了一个MainThreadExecutor，它是一个<a href="https://rain9155.github.io/2019/07/19/java%E7%BA%BF%E7%A8%8B%E6%B1%A0/" target="_blank" rel="noopener">Executor</a>，它的execute方法的实现就是简单通过<a href="https://blog.csdn.net/Rain_9155/article/details/86684083" target="_blank" rel="noopener">Handler</a>把任务Runnable切换回主线程执行，就是说，线程池会把每一个线程提交的任务都切回主线程执行，我们再来看defaultCallAdapterFactory方法，这个方法返回了我们上面介绍过的ExecutorCallAdapterFactory，并把callbackExecutor传了进去，其实这个<strong>callbackExecutor就是MainThreadExecutor</strong>，待会在第3步构建Retrofit实例时就会讲到。</p><p><strong>这里我们来小结一下：</strong></p><p>new Retrofit.Builder()里面会通过Platform的get方法来获取一个Platform实例，在Android中，它会返回Android平台实例，这样就指定了Retrofit的运行平台是Android，然后就可以通过Android平台实例的<strong>defaultCallbackExecutor方法</strong>返回一个线程切换执行器MainThreadExecutor，它用于把任务切换回主线程执行，和通过<strong>defaultCallAdapterFactory方法</strong>返回一个网络请求适配器工厂ExecutorCallAdapterFactory，工厂中持有一个线程切换执行器实例，通过工厂就可以获取网络请求适配器实例。</p><p>有了Builder实例后，下面开始配置Builder.</p><h3 id="2、配置Builder"><a href="#2、配置Builder" class="headerlink" title="2、配置Builder"></a>2、配置Builder</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Retrofit.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Platform platform;<span class="comment">//Retrofit运行的平台</span></span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@Nullable</span> okhttp3.Call.Factory callFactory;<span class="comment">//网络请求执行器工厂，用创建网络请求执行器实例，来自okhttp, 不是Retrofit中的那个Call</span></span><br><span class="line">    <span class="keyword">private</span> HttpUrl baseUrl;<span class="comment">//网络请求的Url地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Converter.Factory&gt; converterFactories = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//数据转化器工厂列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;CallAdapter.Factory&gt; callAdapterFactories = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//网络请求适配器工厂列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@Nullable</span> Executor callbackExecutor;<span class="comment">//线程切换执行器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> validateEagerly;<span class="comment">//标志位，是否提前对serviceMethod进行缓存(在创建Api接口实例会讲到)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">     <span class="comment">//我们传入的String类型的Url，最终还是会解析成HttpUrl类型，它是Retrofit中url的代表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">baseUrl</span><span class="params">(String baseUrl)</span> </span>&#123;</span><br><span class="line">        checkNotNull(baseUrl, <span class="string">"baseUrl == null"</span>);</span><br><span class="line">        HttpUrl httpUrl = HttpUrl.parse(baseUrl);</span><br><span class="line">        <span class="keyword">if</span> (httpUrl == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal URL: "</span> + baseUrl);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> baseUrl(httpUrl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">baseUrl</span><span class="params">(HttpUrl baseUrl)</span> </span>&#123;</span><br><span class="line">        checkNotNull(baseUrl, <span class="string">"baseUrl == null"</span>);</span><br><span class="line">        List&lt;String&gt; pathSegments = baseUrl.pathSegments();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">""</span>.equals(pathSegments.get(pathSegments.size() - <span class="number">1</span>))) &#123;</span><br><span class="line">            <span class="comment">//baseUrl最后一定要接一个 /</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"baseUrl must end in /: "</span> + baseUrl);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.baseUrl = baseUrl;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把ConverterFactory添加到数据转化器工厂列表中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">addConverterFactory</span><span class="params">(Converter.Factory factory)</span> </span>&#123;</span><br><span class="line">        converterFactories.add(checkNotNull(factory, <span class="string">"factory == null"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把CallAdapterFactory添加到网络请求适配器工厂列表中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">addCallAdapterFactory</span><span class="params">(CallAdapter.Factory factory)</span> </span>&#123;</span><br><span class="line">        callAdapterFactories.add(checkNotNull(factory, <span class="string">"factory == null"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//获取网络请求适配器工厂列表</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;CallAdapter.Factory&gt; callAdapterFactories() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.callAdapterFactories;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取数据转化器工厂列表</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Converter.Factory&gt; converterFactories() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.converterFactories;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改validateEagerly标志位</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">validateEagerly</span><span class="params">(<span class="keyword">boolean</span> validateEagerly)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.validateEagerly = validateEagerly;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Builder中所有的字段都贴出来了，方法只贴了几个常用的出来，我们调用Builder的相应方法，就是在为Builder的相应字段赋值，很简单，就不介绍了。</p><p>其中要注意的是：当我们添加ConverterFactory或CallAdapterFactory时，它们都是添加到各自的列表中，这说明在Retrofit中Converter和CallAdapter是可以存在多个的，为什么呢？这是因为Retrofit允许我们为Api接口里面定义的每一个方法都定义对应的Converter和CallAdapter，每当我们调用到Api接口的某个方法时，Retrofit都会遍历网络请求适配器工厂列表callAdapterFactories，把方法的返回值returnType和注解信息annotations传进每个Factory的get方法中，看某个Factory是否愿意处理这个方法，为这个方法创建对应CallAdapter实例；同理，当Retrofit解析某个Api接口方法的网络请求数据时，它同样会遍历数据转化器工厂列表converterFactories，把方法的相关信息传给Factory的responseBodyConverter或requestBodyConverter方法，看某个Factory是否愿意处理这个方法，为这个方法创建对应ResponseBodyBodyConverter或RequestBodyConverter实例，这两个过程在待会的源码分析都会体现到。由于我们平常开发都只添加了一个CallAdapter和一个Converter，所以Retrofit对Api接口定义的每一个方法的adapt和convert都是相同的处理。</p><p>配置好Builder后，接下来调用build方法创建Retrofit实例.</p><h3 id="3、创建Retrofit实例"><a href="#3、创建Retrofit实例" class="headerlink" title="3、创建Retrofit实例"></a>3、创建Retrofit实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Retrofit.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Retrofit <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (baseUrl == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Base URL required."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置网络请求执行器工厂callFactory</span></span><br><span class="line">        okhttp3.Call.Factory callFactory = <span class="keyword">this</span>.callFactory;</span><br><span class="line">        <span class="comment">//如果没有指定，使用默认的</span></span><br><span class="line">        <span class="keyword">if</span> (callFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//默认指定为OkHttpClient， OkHttpClient实现了Call.Factory接口，OkHttpClient和Call都是来自okhttp的</span></span><br><span class="line">            callFactory = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置线程切换执行器callbackExecutor</span></span><br><span class="line">        Executor callbackExecutor = <span class="keyword">this</span>.callbackExecutor;</span><br><span class="line">        <span class="comment">//如果没有指定，使用默认的</span></span><br><span class="line">        <span class="keyword">if</span> (callbackExecutor == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//默认指定为运行平台默认的线程切换执行器</span></span><br><span class="line">            <span class="comment">//在Android中，defaultCallbackExecutor方法的返回值就是MainThreadExecutor实例</span></span><br><span class="line">            callbackExecutor = platform.defaultCallbackExecutor();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置网络请求适配器工厂列表</span></span><br><span class="line">        <span class="comment">//添加用户指定的网络请求适配器工厂列表</span></span><br><span class="line">        List&lt;CallAdapter.Factory&gt; callAdapterFactories = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.callAdapterFactories);</span><br><span class="line">        <span class="comment">//添加运行平台默认的网络请适配器工厂到列表中</span></span><br><span class="line">        <span class="comment">//在Android中，defaultCallAdapterFactory方法返回值就是ExecutorCallAdapterFactory实例，并把MainThreadExecutor实例传进方法，所以ExecutorCallAdapterFactory持有MainThreadExecutor实例（回去看构造Builder阶段）</span></span><br><span class="line">        callAdapterFactories.add(platform.defaultCallAdapterFactory(callbackExecutor));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置数据转化器工厂列表</span></span><br><span class="line">        List&lt;Converter.Factory&gt; converterFactories =</span><br><span class="line">            <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">1</span> + <span class="keyword">this</span>.converterFactories.size());</span><br><span class="line">   <span class="comment">//添加Retrofit默认的数据转化器工厂BuiltInConverters</span></span><br><span class="line">        converterFactories.add(<span class="keyword">new</span> BuiltInConverters());</span><br><span class="line">        <span class="comment">//添加用户指定的数据转化器工厂列表</span></span><br><span class="line">        converterFactories.addAll(<span class="keyword">this</span>.converterFactories);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个Retrofit实例返回，并把上面的配置好的字段传进构造</span></span><br><span class="line">        <span class="comment">//这些字段和Retrofit中相应的字段同名,unmodifiableList就是创建一个不可修改的列表</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Retrofit(callFactory, baseUrl, unmodifiableList(converterFactories),</span><br><span class="line">                            unmodifiableList(callAdapterFactories), callbackExecutor, validateEagerly);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>build方法中把没有在配置Builder阶段中赋值的字段指定了默认值，然后把网络请求Url地址baseUrl、网络请求执行器工厂callFactory、线程切换执行器callbackExecutor、网络请求适配器工厂列表callAdapterFactories、数据转化器工厂列表converterFactories、标志位validateEagerly这六件套传进了Retrofit的构造，创建一个Retrofit实例返回。</p><p>其中要注意的是，按照添加顺序，工厂列表的优先级为：用户指定的网络请适配器工厂列表 &gt; 运行平台默认的网络请求适配器工厂；Retrofit默认的数据转化器工厂 &gt; 用户指定的数据转化器工厂列表。在遍历这些列表时是从前往后遍历的，越靠前的越先被访问。</p><h3 id="4、小结"><a href="#4、小结" class="headerlink" title="4、小结"></a>4、小结</h3><p>经过这3步后，指定了Retrofit的运行平台，配置好了Retrofit的网络请求Url地址、网络请求执行器工厂、线程切换执行器、网络请求适配器工厂列表、数据转化器工厂列表等字段，并创建了一个Retrofit实例.</p><p>有了Retrofit实例后，就可以通过Retrofit的create方法创建一个Api接口实例，这也是整个Retrofit最核心的地方.</p><h2 id="四、创建Api接口实例"><a href="#四、创建Api接口实例" class="headerlink" title="四、创建Api接口实例"></a>四、创建Api接口实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GithubService service = Retrofit.create(GithubService<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p>我先讲一下Retrofit的create方法的作用，Retrofit的create方法里面干了两件事，首先它会根据validateEagerly标志位是否为true，而从决定是否把Api接口里定义的所有方法的注解和参数信息提前封装到ServiceMethod中然后缓存起来，接着就通过Proxy的newProxyInstance方法为GithubService接口创建一个代理对象返回，这里就使用到了<a href="https://www.jianshu.com/p/1b027d9fc005" target="_blank" rel="noopener">外观模式</a>，外观模式就是<strong>定义一个统一接口，外部（用户）通过该统一的接口对子系统里的其他接口进行访问</strong>，这里的这个统一的接口就是<strong>Retrofit.create方法</strong>，我们只需要调用create方法，Retrofit内部就替我们把这两件事给做了，不用我们访问Retrofit的内部子系统，降低了我们使用的复杂度。</p><p> Retrofit的create方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Retrofit.java</span></span><br><span class="line"><span class="comment">//泛型T就是GithubService接口</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">create</span><span class="params">(<span class="keyword">final</span> Class&lt;T&gt; service)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//传进来的必须是一个接口，并且这个接口没有继承其他接口，否则抛异常</span></span><br><span class="line">    Utils.validateServiceInterface(service);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1、判断validateEagerly标志位是否为true</span></span><br><span class="line">    <span class="keyword">if</span> (validateEagerly) &#123;</span><br><span class="line">      <span class="comment">//如果为true，把Api接口里定义的所有方法的注解和参数信息封装到ServiceMethod中，提前缓存起来</span></span><br><span class="line">      eagerlyValidateMethods(service);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2、通过Proxy的newProxyInstance方法为GithubService接口创建一个代理对象</span></span><br><span class="line">    <span class="keyword">return</span> (T) Proxy.newProxyInstance(service.getClassLoader(), <span class="keyword">new</span> Class&lt;?&gt;[] &#123; service &#125;,</span><br><span class="line">        <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">         <span class="comment">//...</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Retrofit.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">eagerlyValidateMethods</span><span class="params">(Class&lt;?&gt; service)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//首先获取运行平台，这里为Android</span></span><br><span class="line">    Platform platform = Platform.get();</span><br><span class="line">    <span class="comment">//getDeclaredMethods方法会以 Method[] 形式返回接口定义的所有方法的Method对象，所以这里就是在遍历接口的所有方法</span></span><br><span class="line">    <span class="keyword">for</span> (Method method : service.getDeclaredMethods()) &#123;</span><br><span class="line">      <span class="comment">//在Android平台，isDefaultMethod方法返回false</span></span><br><span class="line">      <span class="keyword">if</span> (!platform.isDefaultMethod(method)) &#123;</span><br><span class="line">        <span class="comment">//为每一个方法都调用一次loadServiceMethod方法</span></span><br><span class="line">        <span class="comment">//loadServiceMethod方法中就会把方法的注解和参数信息封装到ServiceMethod中，然后缓存起来</span></span><br><span class="line">        loadServiceMethod(method);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>我们先看create方法的注释1，validateEagerly这个标志位决定是否对serviceMethod进行提前缓存，默认为false，当为true时，create方法中就会调用eagerlyValidateMethods方法，里面会遍历Api接口的所有方法，为每一个方法都调用一次loadServiceMethod方法（invoke方法中会讲到这个方法），loadServiceMethod方法中就会把方法的注解和参数信息封装到ServiceMethod中，以方法method为键，ServiceMethod为值，放入一个名叫<strong>serviceMethodCache</strong>的Map中缓存起来，这个Map定义在Retrofit中，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Retrofit</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Method, ServiceMethod&lt;?, ?&gt;&gt; serviceMethodCache = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这个Map是一个线程安全的HashMap，它的key = Method，value = ServiceMethod。所以可以根据需要设置validateEagerly标志位开启ServiceMethod的预加载，这样等到动态执行invoke方法时可以直接从缓存中获取ServiceMethod实例。</p><p>我们重点看create方法的注释2，通过Proxy的newProxyInstance方法为GithubService接口创建一个代理对象，这里就使用了<a href="https://juejin.im/post/5db2fbd0518825645a5ba18b" target="_blank" rel="noopener">动态代理模式</a>，Proxy的newProxyInstance方法会在<strong>代码运行时</strong>，根据第一个参数的ClassLoader，生成一个代理Class对象，该代理Class对象实现了传入的第二个参数对应的Interface列表，在获取到代理Class对象后，根据第三个参数InvocationHandler引用通过反射创建一个代理对象实例，所以<strong>newProxyInstance最终的结果是生成一个代理对象实例，该代理对象会实现给定的接口列表，同时内部持有一个InvocationHandler引用，我们调用代理对象的方法时，这个方法处理逻辑就会委托给InvocationHandler实例的invoke方法执行</strong>。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>当我们调用Retrofit的create方法后，它返回了一个代理对象实例，这个代理对象实现了create方法传进去的接口，接下来当我们调用Api接口的方法时，就是在调用代理对象的同名方法，这个方法处理逻辑就会委托给InvocationHandler实例的invoke方法执行，使用了动态代理之后的好处就是我们可以把发起网络请求的参数获取都集中到invoke方法中处理，而不需要为每一个接口定义一个实现类，这样降低了实现的难度。</p><p>接下来我们开始调用Api接口的方法，它会返回一个网络请求执行器。</p><h2 id="五、调用Api接口实例的方法"><a href="#五、调用Api接口实例的方法" class="headerlink" title="五、调用Api接口实例的方法"></a>五、调用Api接口实例的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Call&lt;ResponseBody&gt; call = service.getUserInfo(<span class="string">"rain9155"</span>);</span><br></pre></td></tr></table></figure><p>根据动态代理的知识，我们知道，当我们调用Api接口实例的方法，就是在调用代理对象的方法，这个方法处理逻辑就会委托给InvocationHandler实例的invoke方法执行，也就是说，当我们在外部调用Api接口的相应方法时，这些方法都会转到invoke方法执行，例如我调用service.getUserInfo(“rain9155”)时，这个方法会转到invoke方法去执行。</p><p>所以我们直接看InvocationHandler的invoke方法逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Retrofit.java</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">create</span><span class="params">(<span class="keyword">final</span> Class&lt;T&gt; service)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> (T) Proxy.newProxyInstance(service.getClassLoader(), <span class="keyword">new</span> Class&lt;?&gt;[] &#123; service &#125;,</span><br><span class="line">        <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            </span><br><span class="line">          <span class="keyword">private</span> <span class="keyword">final</span> Platform platform = Platform.get();</span><br><span class="line">            </span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * 当我调用service.getUserInfo("rain9155")时，这个方法会转到invoke方法去执行。</span></span><br><span class="line"><span class="comment">           * <span class="doctag">@param</span> proxy 代理对象实例</span></span><br><span class="line"><span class="comment">           * <span class="doctag">@param</span> method 被调用的方法，如这里的getUserInfo方法</span></span><br><span class="line"><span class="comment">           * <span class="doctag">@param</span> args 被调用的方法的参数，如这里的"rain9155"</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">          <span class="meta">@Override</span> </span><br><span class="line">          <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, @Nullable Object[] args)</span></span></span><br><span class="line"><span class="function">              <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">              </span><br><span class="line">            <span class="comment">//如果这个方法是Object类的，调用Object类的方法</span></span><br><span class="line">            <span class="keyword">if</span> (method.getDeclaringClass() == Object<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>, args);</span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">//在Android平台，isDefaultMethod方法返回false，不会进入这个分支</span></span><br><span class="line">            <span class="keyword">if</span> (platform.isDefaultMethod(method)) &#123;</span><br><span class="line">              <span class="keyword">return</span> platform.invokeDefaultMethod(method, service, proxy, args);</span><br><span class="line">            &#125;</span><br><span class="line">              </span><br><span class="line">            <span class="comment">//走到这里表示，调用的不是Object类的方法，而是GithubService接口的相应方法</span></span><br><span class="line">              </span><br><span class="line">            <span class="comment">//1、调用loadServiceMethod方法，为这个方法获取一个ServiceMethod</span></span><br><span class="line">            ServiceMethod&lt;Object, Object&gt; serviceMethod = (ServiceMethod&lt;Object, Object&gt;) loadServiceMethod(method);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//2、把该方法的ServiceMethod和args传进okHttpCall，创建一个okHttpCall实例</span></span><br><span class="line">            <span class="comment">//args就是方法的参数</span></span><br><span class="line">            OkHttpCall&lt;Object&gt; okHttpCall = <span class="keyword">new</span> OkHttpCall&lt;&gt;(serviceMethod, args);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//3、调用adapt方法，传入okHttpCall，把okHttpCall适配成另一个Call</span></span><br><span class="line">            <span class="comment">//里面其实调用的是CallAdapter的adapt方法</span></span><br><span class="line">            <span class="keyword">return</span> serviceMethod.adapt(okHttpCall);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>invoke方法中分为注释1、2、3，下面分别讲解：</p><h3 id="注释1、loadServiceMethod方法"><a href="#注释1、loadServiceMethod方法" class="headerlink" title="注释1、loadServiceMethod方法"></a>注释1、loadServiceMethod方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、调用loadServiceMethod方法，为这个方法获取一个ServiceMethod</span></span><br><span class="line">ServiceMethod&lt;Object, Object&gt; serviceMethod = (ServiceMethod&lt;Object, Object&gt;) loadServiceMethod(method);</span><br></pre></td></tr></table></figure><p>loadServiceMethod方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Retrofit.java </span></span><br><span class="line">ServiceMethod&lt;?, ?&gt; loadServiceMethod(Method method) &#123;</span><br><span class="line">    <span class="comment">//首先从serviceMethodCache根据方法method获取ServiceMethod</span></span><br><span class="line">    ServiceMethod&lt;?, ?&gt; result = serviceMethodCache.get(method);</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//如果获取得到就直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (result != <span class="keyword">null</span>) <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//如果获取不到就为这个method创建一个ServiceMethod</span></span><br><span class="line">    <span class="comment">//上锁，所以创建的ServiceMethod是一个单例</span></span><br><span class="line">    <span class="keyword">synchronized</span> (serviceMethodCache) &#123;</span><br><span class="line">      result = serviceMethodCache.get(method);</span><br><span class="line">      <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">//1、为method创建一个ServiceMethod</span></span><br><span class="line">        result = <span class="keyword">new</span> ServiceMethod.Builder&lt;&gt;(<span class="keyword">this</span>, method).build();</span><br><span class="line">         <span class="comment">//然后以方法method为键，ServiceMethod为值，放入serviceMethodCache缓存起来</span></span><br><span class="line">        serviceMethodCache.put(method, result);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看到这里首先从serviceMethodCache根据方法method获取ServiceMethod，如果获取不到再为方法创建一个ServiceMethod，然后以方法method为键，ServiceMethod为值，放入serviceMethodCache缓存起来，并返回，我们重点来看注释1，看这个<strong>ServiceMethod是怎样根据方法的Method对象创建出来的</strong>。</p><h4 id="1、ServiceMethod的创建过程"><a href="#1、ServiceMethod的创建过程" class="headerlink" title="1、ServiceMethod的创建过程"></a>1、ServiceMethod的创建过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = <span class="keyword">new</span> ServiceMethod.Builder&lt;&gt;(<span class="keyword">this</span>, method)<span class="comment">//1</span></span><br><span class="line">      .build();<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>ServiceMethod同样是通过Builder模式创建，所以我们同样分注释的2步去看ServiceMethod的创建.</p><h5 id="1-1、构造Builder"><a href="#1-1、构造Builder" class="headerlink" title="1.1、构造Builder"></a>1.1、构造Builder</h5><p>所以我们先看ServiceMethod的Builder的构造，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ServiceMethod.java</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Retrofit retrofit;</span><br><span class="line">    <span class="keyword">final</span> Method method;</span><br><span class="line">    <span class="keyword">final</span> Annotation[] methodAnnotations;</span><br><span class="line">    <span class="keyword">final</span> Annotation[][] parameterAnnotationsArray;</span><br><span class="line">    <span class="keyword">final</span> Type[] parameterTypes;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    Builder(Retrofit retrofit, Method method) &#123;</span><br><span class="line">      <span class="keyword">this</span>.retrofit = retrofit;</span><br><span class="line">      <span class="keyword">this</span>.method = method;</span><br><span class="line">      <span class="comment">//获取方法里的所有注解，如@GET、@POST，@PATCH等</span></span><br><span class="line">      <span class="keyword">this</span>.methodAnnotations = method.getAnnotations();</span><br><span class="line">      <span class="comment">//获取方法里的所有参数类型，如int、String等</span></span><br><span class="line">      <span class="keyword">this</span>.parameterTypes = method.getGenericParameterTypes();</span><br><span class="line">      <span class="comment">//获取方法里所有参数的注解，如@Query，@Body、@PartMap等</span></span><br><span class="line">      <span class="keyword">this</span>.parameterAnnotationsArray = method.getParameterAnnotations();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>构造中依此获取方法的注解、参数类型、参数的注解并依此赋值给methodAnnotations、parameterAnnotationsArray、parameterTypes，注意parameterAnnotationsArray是一个二维数组，因为一个参数可以被多个注解修饰，一个注解可以修饰多个参数。</p><h5 id="1-2、创建ServiceMethod实例"><a href="#1-2、创建ServiceMethod实例" class="headerlink" title="1.2、创建ServiceMethod实例"></a>1.2、创建ServiceMethod实例</h5><p>我们接着看Builder的build方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ServiceMethod.java</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Retrofit retrofit;</span><br><span class="line">    <span class="keyword">final</span> Method method;</span><br><span class="line">    <span class="keyword">final</span> Annotation[] methodAnnotations;</span><br><span class="line">    <span class="keyword">final</span> Annotation[][] parameterAnnotationsArray;</span><br><span class="line">    <span class="keyword">final</span> Type[] parameterTypes;</span><br><span class="line"></span><br><span class="line">    Type responseType;</span><br><span class="line">    ParameterHandler&lt;?&gt;[] parameterHandlers;</span><br><span class="line">    Converter&lt;ResponseBody, T&gt; responseConverter;</span><br><span class="line">    CallAdapter&lt;T, R&gt; callAdapter;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceMethod <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1、调用createCallAdapter方法创建网络请求适配器CallAdapter</span></span><br><span class="line">        callAdapter = createCallAdapter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过CallAdapter的responseType方法获取返回数据的响应body的类型</span></span><br><span class="line">        <span class="comment">//如Call&lt;ResponseBody&gt;，获取到ResponseBody类型</span></span><br><span class="line">        responseType = callAdapter.responseType();</span><br><span class="line">        <span class="comment">//....省略异常处理</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、调用createResponseConverter方法创建网络返回数据的数据转化器Converter</span></span><br><span class="line">        responseConverter = createResponseConverter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历该方法的所有注解</span></span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : methodAnnotations) &#123;</span><br><span class="line">            <span class="comment">//3、调用parseMethodAnnotation方法解析注解，如@GET、@POST，@PATCH等</span></span><br><span class="line">            parseMethodAnnotation(annotation);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...省略异常处理</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> parameterCount = parameterAnnotationsArray.length;</span><br><span class="line">        parameterHandlers = <span class="keyword">new</span> ParameterHandler&lt;?&gt;[parameterCount];</span><br><span class="line">        <span class="comment">//为方法中的每个参数创建一个ParameterHandler&lt;?&gt;对象并解析每个参数使用的注解</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; parameterCount; p++) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//获取参数类型，如int、String等</span></span><br><span class="line">            Type parameterType = parameterTypes[p];</span><br><span class="line">             <span class="comment">//...省略异常处理</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取修饰参数的注解，如@Query，@Body、@PartMap等</span></span><br><span class="line">            Annotation[] parameterAnnotations = parameterAnnotationsArray[p];</span><br><span class="line">            <span class="comment">//...省略异常处理</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//4、调用parseParameter方法解析每个参数使用的注解，并返回一个parameterHandlers</span></span><br><span class="line">            parameterHandlers[p] = parseParameter(p, parameterType, parameterAnnotations);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...省略异常处理</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//创建ServiceMethod实例，并把Builder实例传进去</span></span><br><span class="line">        <span class="comment">//ServiceMethod构造里面会把Builder配置好的字段赋值给ServiceMethod中相应的字段</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServiceMethod&lt;&gt;(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>build方法里面分4步，我们先看注释1、2，注释1调用createCallAdapter方法创建网络请求适配器CallAdapter，并赋值给callAdapter字段，createCallAdapter方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ServiceMethod::Builder.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> CallAdapter&lt;T, R&gt; <span class="title">createCallAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取方法的返回值类型，如Call&lt;ResponseBody&gt;</span></span><br><span class="line">    Type returnType = method.getGenericReturnType();</span><br><span class="line">    <span class="comment">//...省略异常处理</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取方法的所有注解，如@GET、@POST，@PATCH等</span></span><br><span class="line">    Annotation[] annotations = method.getAnnotations();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//调用Retrofit的callAdapter方法，返回一个CallAdapter实例</span></span><br><span class="line">        <span class="keyword">return</span> (CallAdapter&lt;T, R&gt;) retrofit.callAdapter(returnType, annotations);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...省略异常处理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Retrofit.java</span></span><br><span class="line"> <span class="keyword">public</span> CallAdapter&lt;?, ?&gt; callAdapter(Type returnType, Annotation[] annotations) &#123;</span><br><span class="line">    <span class="keyword">return</span> nextCallAdapter(<span class="keyword">null</span>, returnType, annotations);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> CallAdapter&lt;?, ?&gt; nextCallAdapter(<span class="meta">@Nullable</span> CallAdapter.Factory skipPast, Type returnType,</span><br><span class="line">      Annotation[] annotations) &#123;</span><br><span class="line">    <span class="comment">//...省略异常处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start = callAdapterFactories.indexOf(skipPast) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//遍历网络请求适配器工厂callAdapterFactories</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start, count = callAdapterFactories.size(); i &lt; count; i++) &#123;</span><br><span class="line">      <span class="comment">//把该方法的返回值类型returnType和注解信息annotations传给CallAdapterFactory的get方法，通过get方法获取一个CallAdapter实例或null</span></span><br><span class="line">      <span class="comment">//在Retrofit相关类介绍讲过，Android平台的CallAdapterFactor的默认实现是ExecutorCallAdapterFactory，ExecutorCallAdapterFactory的get方法返回一个CallAdapter匿名实现类或null</span></span><br><span class="line">      CallAdapter&lt;?, ?&gt; adapter = callAdapterFactories.get(i).get(returnType, annotations, <span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">if</span> (adapter != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> adapter;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>createCallAdapter方法中，获取到方法的返回值类型（如Call<ResponseBody>类型）和注解信息后，就调用Retrofit的callAdapter方法，callAdapter方法就调用nextCallAdapter方法，在nextCallAdapter方法中，会遍历Retrofit的网络请求适配器工厂callAdapterFactories，把方法的返回值returnType和注解信息annotations传进每个Factory的get方法中，看某个Factory是否愿意处理这个方法，如果愿意，就为这个方法创建对应CallAdapter实例，在Android平台中，CallAdapterFactor的默认实现是ExecutorCallAdapterFactory，ExecutorCallAdapterFactory的get方法返回一个CallAdapter匿名实现类。<strong>（查看前面讲过的Retrofit相关类介绍，里面有对ExecutorCallAdapterFactory的详细介绍）</strong></p><p>我们再看build方法里的注释2，注释2调用createResponseConverter方法创建网络返回数据的数据转化器Converter，赋值给responseConverter字段，createResponseConverter方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ServiceMethod::Builder.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Converter&lt;ResponseBody, T&gt; <span class="title">createResponseConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取方法的所有注解，如@GET、@POST，@PATCH等</span></span><br><span class="line">    Annotation[] annotations = method.getAnnotations();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//调用Retrofit的responseBodyConverter方法，返回一个Converter实例</span></span><br><span class="line">        <span class="keyword">return</span> retrofit.responseBodyConverter(responseType, annotations);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//...省略异常处理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Retrofit.java</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Converter&lt;ResponseBody, T&gt; <span class="title">responseBodyConverter</span><span class="params">(Type type, Annotation[] annotations)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nextResponseBodyConverter(<span class="keyword">null</span>, type, annotations);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Converter&lt;ResponseBody, T&gt; <span class="title">nextResponseBodyConverter</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Nullable Converter.Factory skipPast, Type type, Annotation[] annotations)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...省略异常处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start = converterFactories.indexOf(skipPast) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//遍历数据转化器工厂converterFactories</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start, count = converterFactories.size(); i &lt; count; i++) &#123;</span><br><span class="line">        <span class="comment">//把该方法的返回值的泛型类型和注解信息annotations传给ConverterFactory的responseBodyConverter方法，通过responseBodyConverter方法获取一个处理网络返回数据的数据转化器Converter实例或null</span></span><br><span class="line">        <span class="comment">//在Retrofit相关类介绍讲过，Retrofit的ConverterFactory的默认实现是BuiltInConverters，BuiltInConverters的responseBodyConverter方法返回一个处理网络返回数据的数据转化器Converter实例或null</span></span><br><span class="line">        Converter&lt;ResponseBody, ?&gt; converter =</span><br><span class="line">            converterFactories.get(i).responseBodyConverter(type, annotations, <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (converter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//noinspection unchecked</span></span><br><span class="line">            <span class="keyword">return</span> (Converter&lt;ResponseBody, T&gt;) converter;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...省略异常处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>createResponseConverter方法中的流程和createCallAdapter方法的流程差不多，最终是遍历Retrofit的数据转化器工厂converterFactories，把该方法的返回值的泛型类型（如Call<ResponseBody>，泛型类型就是ResponseBody类型）和注解信息annotations传给每个Factory的responseBodyConverter方法中，看某个Factory是否愿意处理这个方法，如果愿意，就为这个方法创建对应的网络返回数据的数据转化器Converter实例，在Android平台中ConverterFactory的默认实现是BuiltInConverters<strong>（查看前面讲过的Retrofit相关类介绍，里面有对BuiltInConverters的详细介绍）</strong>。有ResponseConverter就有相应的RequestConverter，RequestConverter用来处理网络请求数据的数据转化，RequestConverter并不在ServiceMethod的build方法中创建，而是在parseParameter方法中创建。</p><p>至于build方法的注释3、4的parseMethodAnnotation方法和parseParameter方法，限于篇幅，就留给大家自己探索了，我讲一下里面的大体逻辑：</p><ul><li><strong>parseMethodAnnotation方法</strong>：该方法里面首先判断是哪种HTTP请求的注解，然后为不同的HTTP请求注解调用parseHttpMethodAndPath方法，该方法里面会获取注解中省略域名的Url和把Url里面需要替换地方用正则找出来放到一个Set中，如：@GET(“users/{user}”)，省略域名的Url = users/{user}，需要替换的地方是{user}，把user找出来，最终parseMethodAnnotation方法获取到的信息是： <strong>HTTP请求方式、省略域名的Url和Url中需要替换值的地方</strong>。</li><li><strong>parseParameter方法</strong>：这个方法是解析方法参数的注解，如@Quary、@Path等，里面会判断是哪种类型的注解，根据不同类型的注解，<strong>取出注解中的值，创建一个RequestConverter实例，最后把注解的值和RequestConverter实例传进ParameterHandler构造，为这个注解创建一个ParameterHandler实例返回</strong>，不同的注解有不同的ParameterHandler类型，如@Quary就有ParameterHandler.Quary，@Path就有ParameterHandler.Path。</li></ul><p>都是通过注解解析出注解参数，然后一并封装到ServiceMethod中去，build方法执行完毕，就创建了一个ServiceMethod实例返回。</p><p><strong>我们来小结一下ServiceMethod的创建过程：</strong></p><p>经过这2步后，为这个方法method创建了一个对应的ServiceMethod实例，这个ServiceMethod封装了网络请求所需要的所有参数和持有CallAdapter实例、处理网络返回数据转化的Converter实例，同时这个ServiceMethod是一个单例，也就是说<strong>Api接口里的每一个方法都分别对应着一个ServiceMethod实例，这个ServiceMethod实例持有着网络请求所需要的所有参数</strong>。</p><p>我们继续回到loadServiceMethod方法中。</p><h4 id="2、小结"><a href="#2、小结" class="headerlink" title="2、小结"></a>2、小结</h4><p>调用loadServiceMethod方法后，创建了一个ServiceMethod实例并缓存到一个Map中，第二次使用时直接从缓存获取ServiceMethod实例，不必重复创建，提高效率。</p><p>我们回到invoke方法，有了ServiceMethod实例后，就可以创建一个okHttpCall实例.</p><h3 id="注释2、创建一个okHttpCall实例"><a href="#注释2、创建一个okHttpCall实例" class="headerlink" title="注释2、创建一个okHttpCall实例"></a>注释2、创建一个okHttpCall实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2、把该方法的ServiceMethod和args(args就是方法的参数)传进okHttpCall，创建一个okHttpCall实例</span></span><br><span class="line">OkHttpCall&lt;Object&gt; okHttpCall = <span class="keyword">new</span> OkHttpCall&lt;&gt;(serviceMethod, args);</span><br></pre></td></tr></table></figure><p>OkHttpCall的构造如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpCall</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Call</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServiceMethod&lt;T, ?&gt; serviceMethod;<span class="comment">//封装了Api接口方法中的注解和参数信息，一个ServiceMethod对应一个Method</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="meta">@Nullable</span> Object[] args;<span class="comment">//代表着Api接口方法中的参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@Nullable</span> okhttp3.Call rawCall;<span class="comment">//这是一个来自Okhttp的Call</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">  OkHttpCall(ServiceMethod&lt;T, ?&gt; serviceMethod, <span class="meta">@Nullable</span> Object[] args) &#123;</span><br><span class="line">    <span class="keyword">this</span>.serviceMethod = serviceMethod;</span><br><span class="line">    <span class="keyword">this</span>.args = args;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>可以看到Okhttp把刚刚得到的ServiceMethod实例和接口方法的参数保存起来，OkHttpCall在前面的Retrofit的相关类介绍已经简单介绍过了，它就是实现了Call的一个类，它里面的方法大部分逻辑都转发给Okhttp的Call 。</p><p>得到okHttpCall实例后，通过adapt方法把它适配成另外一个Call.</p><h3 id="注释3、把OkHttpCall适配成另一个Call"><a href="#注释3、把OkHttpCall适配成另一个Call" class="headerlink" title="注释3、把OkHttpCall适配成另一个Call"></a>注释3、把OkHttpCall适配成另一个Call</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//3、调用adapt方法，传入okHttpCall，把okHttpCall适配成另一个Call</span></span><br><span class="line"><span class="keyword">return</span> serviceMethod.adapt(okHttpCall);</span><br></pre></td></tr></table></figure><p>ServiceMethod的adapt方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ServiceMethod.java</span></span><br><span class="line"><span class="function">T <span class="title">adapt</span><span class="params">(Call&lt;R&gt; call)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> callAdapter.adapt(call);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>adapt方法传进来的call是OkhttpCall实例，callAdapter就是刚刚用createCallAdapter方法创建的CallAdapter实例，在Android平台中，这个CallAdapter实例的adapt方法的默认实现就是用ExecutorCallbackCall包装传进来的OkHttpCall，并返回ExecutorCallbackCall实例，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorCallAdapterFactory</span> <span class="keyword">extends</span> <span class="title">CallAdapter</span>.<span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程切换执行器, 在创建Retrofit实例时传进ExecutorCallAdapterFactory中</span></span><br><span class="line">    <span class="comment">//在Android平台，就是MainThreadExecutor实例</span></span><br><span class="line">    <span class="keyword">final</span> Executor callbackExecutor;</span><br><span class="line"></span><br><span class="line">    ExecutorCallAdapterFactory(Executor callbackExecutor) &#123;</span><br><span class="line">        <span class="keyword">this</span>.callbackExecutor = callbackExecutor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CallAdapter&lt;?, ?&gt; get(Type returnType, Annotation[] annotations, Retrofit Retrofit) &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">final</span> Type responseType = Utils.getCallResponseType(returnType);</span><br><span class="line">        <span class="comment">//返回一个CallAdapter匿名类</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CallAdapter&lt;Object, Call&lt;?&gt;&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span> </span><br><span class="line">            <span class="function"><span class="keyword">public</span> Type <span class="title">responseType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> responseType;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">             <span class="comment">//adapt方法</span></span><br><span class="line">            <span class="meta">@Override</span> </span><br><span class="line">            <span class="function"><span class="keyword">public</span> Call&lt;Object&gt; <span class="title">adapt</span><span class="params">(Call&lt;Object&gt; call)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//创建了一个ExecutorCallbackCall，并把线程切换执行器实例和OkhttpCall实例传进构造</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ExecutorCallbackCall&lt;&gt;(callbackExecutor, call);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//网络请求执行器</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorCallbackCall</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Call</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以callAdapter.adapt(call)就是<strong>把OkhttpCall 适配成 ExecutorCallbackCall</strong>，我们来看一下ExecutorCallbackCall，它是ExecutorCallAdapterFactory的内部类，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ExecutorCallAdapterFactory.java</span></span><br><span class="line"><span class="comment">//网络请求执行器</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorCallbackCall</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Call</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> Executor callbackExecutor;<span class="comment">//线程切换执行器实例, 在get方法通过构造传进</span></span><br><span class="line">    <span class="keyword">final</span> Call&lt;T&gt; delegate;<span class="comment">//OkhttpCall实例,  在get方法通过构造传进</span></span><br><span class="line"></span><br><span class="line">    ExecutorCallbackCall(Executor callbackExecutor, Call&lt;T&gt; delegate) &#123;</span><br><span class="line">        <span class="keyword">this</span>.callbackExecutor = callbackExecutor;</span><br><span class="line">        <span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">final</span> Callback&lt;T&gt; callback)</span> </span>&#123;</span><br><span class="line">        checkNotNull(callback, <span class="string">"callback == null"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ExecutorCallbackCall的enqueue方法委托给OkhttpCall执行</span></span><br><span class="line">        delegate.enqueue(<span class="keyword">new</span> Callback&lt;T&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span> </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;T&gt; call, <span class="keyword">final</span> Response&lt;T&gt; response)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//当网络数据返回时，通过线程切换执行器callbackExecutor，切换到主线程执行callback回调</span></span><br><span class="line">                callbackExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (delegate.isCanceled()) &#123;</span><br><span class="line">                            callback.onFailure(ExecutorCallbackCall.<span class="keyword">this</span>, <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>));</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            callback.onResponse(ExecutorCallbackCall.<span class="keyword">this</span>, response);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span> </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;T&gt; call, <span class="keyword">final</span> Throwable t)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//当网络数据返回时，通过线程切换执行器callbackExecutor，切换到主线程执行callback回调</span></span><br><span class="line">                callbackExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        callback.onFailure(ExecutorCallbackCall.<span class="keyword">this</span>, t);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response&lt;T&gt; <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//ExecutorCallbackCall的execute方法委托给OkhttpCall执行</span></span><br><span class="line">        <span class="keyword">return</span> delegate.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，ExecutorCallbackCall和OkhttpCall一样都实现了Call接口中的方法，并且ExecutorCallbackCall中持有OkhttpCall的实例，它的enqueue方法和execute方法都委托给OkhttpCall的enqueue方法和execute方法执行，当网络数据返回时，通过线程切换执行器callbackExecutor，切换到主线程执行callback回调，这里采用了<a href="https://juejin.im/post/5db2fbd0518825645a5ba18b" target="_blank" rel="noopener">装饰者模式</a>，采用装饰者模式的好处就是<strong>不用通过继承就可以扩展一个对象的功能，动态的给一个对象添加一些额外的操作</strong>，这里额外的操作就是通过线程切换执行器切换回主线程后再执行callback回调，因为OkHttpCall的enqueue方法是进行网络的异步请求，当异步请求结果返回时，回调是在子线程中，需要通过线程切换执行器转换到主线程中再进行callback回调。</p><p>最终，ServiceMethod的adapt方法把<strong>OkhttpCall 适配成不同平台的网络请求执行器，并返回</strong>，在Android平台中，OkhttpCall 适配成了 ExecutorCallbackCall实例。</p><h3 id="4、小结-1"><a href="#4、小结-1" class="headerlink" title="4、小结"></a>4、小结</h3><p>当我们调用Api接口实例中的方法时，这些方法的处理逻辑都会转发给invoke方法，在invoke方法中，会为每一个方法创建一个ServiceMethod，这个ServiceMethod封装了网络请求所需要的所有参数和持有CallAdapter实例、处理网络返回数据转化的Converter实例，接着就会把这个ServiceMethod实例和接口方法的参数传进OkhttpCall的构造中，创建一个OkhttpCall实例，接着把这个OkhttpCall实例传给ServiceMethod的adapt方法，ServiceMethod的adapt方法就会调用CallAdapter实例的adapt方法，把OkhttpCall适配成不同平台的网络请求执行器，所以如果你添加了其他平台的CallAdapterFactory，你就可以得到不同平台下的网络请求执行器，在Android平台中，CallAdapter实例的adapt方法会把OkhttpCall适配成ExecutorCallbackCall，这个ExecutorCallbackCall持有OkhttpCall实例和线程切换器MainThreadExecutor实例，当我们发起网络请求时，ExecutorCallbackCall就会委托OkhttpCall发起网络请求，当网络请求数据返回时，ExecutorCallbackCall就会通过MainThreadExecutor把线程切换主线程执行回调。</p><p>得到网络请求执行器之后，就可以发起，网络请求了.</p><h2 id="六、发起网络请求（以异步为例）"><a href="#六、发起网络请求（以异步为例）" class="headerlink" title="六、发起网络请求（以异步为例）"></a>六、发起网络请求（以异步为例）</h2><p>不同平台下的网络请求执行器不同，在Android平台，调用Api接口实例的方法后返回的是ExecutorCallbackCall，有了ExecutorCallbackCall后，我们就可以发起同步或异步请求，同步和异步请求的流程类型，唯一不同的是异步请求需要把结果通过Callback回调给上层，而同步请求则是直接return结果给上层。</p><p>下面以异步请求为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户发起异步请求 </span></span><br><span class="line">call.enqueue(<span class="keyword">new</span> Callback&lt;ResponseBody&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;ResponseBody&gt; call, Response&lt;ResponseBody&gt; response)</span></span>&#123;</span><br><span class="line">            <span class="comment">//通过Response获取网络请求返回结果</span></span><br><span class="line">                ResponseBody body = response.body();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">"请求结果："</span> +  body.string());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;ResponseBody&gt; call, Throwable t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>调用的是ExecutorCallbackCall的enqueue方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ExecutorCallAdapterFactory::ExecutorCallbackCall.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">final</span> Callback&lt;T&gt; callback)</span> </span>&#123;</span><br><span class="line">    checkNotNull(callback, <span class="string">"callback == null"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ExecutorCallbackCall的enqueue方法委托给OkhttpCall执行</span></span><br><span class="line">    delegate.enqueue(<span class="keyword">new</span> Callback&lt;T&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;T&gt; call, <span class="keyword">final</span> Response&lt;T&gt; response)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//当网络数据返回时，通过线程切换执行器callbackExecutor，切换到主线程执行callback回调</span></span><br><span class="line">            callbackExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (delegate.isCanceled()) &#123;</span><br><span class="line">                        callback.onFailure(ExecutorCallbackCall.<span class="keyword">this</span>, <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        callback.onResponse(ExecutorCallbackCall.<span class="keyword">this</span>, response);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;T&gt; call, <span class="keyword">final</span> Throwable t)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//当网络数据返回时，通过线程切换执行器callbackExecutor，切换到主线程执行callback回调</span></span><br><span class="line">            callbackExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    callback.onFailure(ExecutorCallbackCall.<span class="keyword">this</span>, t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>调用的是OkhttpCall的enqueue方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//OkhttpCall.java</span></span><br><span class="line"><span class="keyword">private</span> <span class="meta">@Nullable</span> okhttp3.Call rawCall;<span class="comment">//这是一个来自Okhttp的Call</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">final</span> Callback&lt;T&gt; callback)</span> </span>&#123;</span><br><span class="line">    checkNotNull(callback, <span class="string">"callback == null"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//来自Okhttp的Call</span></span><br><span class="line">    okhttp3.Call call;</span><br><span class="line">    Throwable failure;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (executed) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already executed."</span>);</span><br><span class="line">      executed = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//1、获取Okhttp的Call实例</span></span><br><span class="line">      call = rawCall;</span><br><span class="line">      failure = creationFailure;</span><br><span class="line">      <span class="keyword">if</span> (call == <span class="keyword">null</span> &amp;&amp; failure == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//第一次发起网络请求，创建Okhttp的Call</span></span><br><span class="line">          call = rawCall = createRawCall();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">          throwIfFatal(t);</span><br><span class="line">          failure = creationFailure = t;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (failure != <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="comment">//通过callback把错误回调出去</span></span><br><span class="line">      callback.onFailure(<span class="keyword">this</span>, failure);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (canceled) &#123;</span><br><span class="line">      call.cancel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、调用Okhttp的Call的enqueue方法发起异步请求</span></span><br><span class="line">    <span class="comment">//传入的是Okhttp的Callback</span></span><br><span class="line">    call.enqueue(<span class="keyword">new</span> okhttp3.Callback() &#123;</span><br><span class="line">        </span><br><span class="line">       <span class="comment">//Okhttp的结果回调</span></span><br><span class="line">      <span class="meta">@Override</span> </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(okhttp3.Call call, okhttp3.Response rawResponse)</span> </span>&#123;</span><br><span class="line">        Response&lt;T&gt; response;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//3、调用parseResponse方法把Okhttp的Response解析成Retrofit的Response</span></span><br><span class="line">          response = parseResponse(rawResponse);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">          callFailure(e);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过callback把结果回调出去</span></span><br><span class="line">          callback.onResponse(OkHttpCall.<span class="keyword">this</span>, response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">          t.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//Okhttp的错误回调</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(okhttp3.Call call, IOException e)</span> </span>&#123;</span><br><span class="line">        callFailure(e);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">callFailure</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//通过callback把错误回调出去</span></span><br><span class="line">          callback.onFailure(OkHttpCall.<span class="keyword">this</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">          t.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>OkhttpCall的enqueue方法大体分为3步：</p><p>1、获取Okhttp的Call实例，赋值给临时变量call：</p><p>​    1.1、如果是第一次发起网络请求，就调用createRawCall方法就创建来自Okhttp的Call，赋值给临时变量call和成员变量rawCall;</p><p>​    1.2、如果不是第一次发起网络请求，就把上次的rawCall实例赋值给临时变量call.</p><p>2、调用Okhttp的Call的enqueue方法发起异步请求（更多细节请查看上一篇文章<a href="https://rain9155.github.io/2019/09/03/okhttp3源码分析之请求流程/" target="_blank" rel="noopener">okhttp3源码分析之请求流程</a>）；</p><p>3、当网络请求结果正确返回时，用parseResponse方法把Okhttp的Response解析成Retrofit的Response.</p><p>所以我们来看一下两个关键的办法，createRawCall方法和parseResponse方法：</p><h3 id="1、创建Okhttp的Call"><a href="#1、创建Okhttp的Call" class="headerlink" title="1、创建Okhttp的Call"></a>1、创建Okhttp的Call</h3><p>createRawCall方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//OkhttpCall.java</span></span><br><span class="line"><span class="keyword">private</span> okhttp3.<span class="function">Call <span class="title">createRawCall</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//调用serviceMethod的toCall方法，并把args即接口方法参数传了进去</span></span><br><span class="line">    <span class="comment">//args在创建OkhttpCall实例时通过构造传进来的</span></span><br><span class="line">    okhttp3.Call call = serviceMethod.toCall(args);</span><br><span class="line">    <span class="keyword">if</span> (call == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Call.Factory returned null."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> call;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>createRawCall方法调用ServiceMethod的toCall方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ServiceMethod.java</span></span><br><span class="line">okhttp3.<span class="function">Call <span class="title">toCall</span><span class="params">(@Nullable Object... args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1、创建一个用于构造Request的Builder，并把ServiceMethod中封装的参数传进去</span></span><br><span class="line">    RequestBuilder requestBuilder = <span class="keyword">new</span> RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,</span><br><span class="line">                                                       contentType, hasBody, isFormEncoded, isMultipart);</span><br><span class="line">    </span><br><span class="line">    ParameterHandler&lt;Object&gt;[] handlers = (ParameterHandler&lt;Object&gt;[]) parameterHandlers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> argumentCount = args != <span class="keyword">null</span> ? args.length : <span class="number">0</span>;</span><br><span class="line">      <span class="comment">//...省略异常处理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、遍历每个方法参数的ParameterHandler</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; argumentCount; p++) &#123;</span><br><span class="line">        <span class="comment">//调用ParameterHandler的apply方法，把ParameterHandler中的参数apply到requestBuilder中</span></span><br><span class="line">        handlers[p].apply(requestBuilder, args[p]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、requestBuilder.build方法创建一个Request实例传进newCall方法，这个Request是来自Okhttp的</span></span><br><span class="line">    <span class="comment">//然后调用callFactory的newCall方法创建一个Call</span></span><br><span class="line">    <span class="comment">//这个callFactory就是OkHttpClient时，在创建Retorfit时配置</span></span><br><span class="line">    <span class="comment">//所以这里返回的是来自Okhttp的Call</span></span><br><span class="line">    <span class="keyword">return</span> callFactory.newCall(requestBuilder.build());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先创建一个用于构造Request的requestBuilder，并把ServiceMethod中封装的参数传进去，然后遍历每个方法参数的ParameterHandler，通过apply方法取出ParameterHandler中的参数放入requestBuilder中，ParameterHandler前面讲过，它里面保存了每个方法参数的注解的值和处理这些值的Converter实例，构造Request的参数都有了，接着就通过requestBuilder.build方法创建一个Okhttp的Request实例并传进newCall方法，最后通过OkHttpClient的newCall方法创建一个Okhttp的Call实例返回。</p><p>最终createRawCall方法返回一个来自Okhttp的Call实例。</p><h3 id="2、解析返回结果"><a href="#2、解析返回结果" class="headerlink" title="2、解析返回结果"></a>2、解析返回结果</h3><p>parseResponse方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ServiceMethod.java</span></span><br><span class="line"><span class="function">Response&lt;T&gt; <span class="title">parseResponse</span><span class="params">(okhttp3.Response rawResponse)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//取出Okhttp的Response的body</span></span><br><span class="line">    ResponseBody rawBody = rawResponse.body();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...省略的是一些状态码处理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//用ExceptionCatchingRequestBody包装一下rawBody</span></span><br><span class="line">    ExceptionCatchingRequestBody catchingBody = <span class="keyword">new</span> ExceptionCatchingRequestBody(rawBody);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//调用ServiceMethod的toResponse方法把原始的body转化成我们需要的数据类型</span></span><br><span class="line">        T body = serviceMethod.toResponse(catchingBody);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">return</span> Response.success(body, rawResponse);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//...省略异常处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先把Okhttp的Response的body取处理，然后用ExceptionCatchingRequestBody包装一下，这个ExceptionCatchingRequestBody是继承自Okhttp的ResponseBody，接着把这个ResponseBody传进ServiceMethod的toResponse方法，里面会使用ServiceMethod保存的处理网络返回数据的Converter实例来把这个ResponseBody转化成我们需要的数据类型，ServiceMethod的toResponse方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ServiceMethod.java</span></span><br><span class="line"><span class="function">R <span class="title">toResponse</span><span class="params">(ResponseBody body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> responseConverter.convert(body);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这个responseConverter就是在创建ServiceMethod时用createResponseConverter方法创建的Converter实例，把body转化成R类型，不同的数据转化有不同的实现，在Retrofit的默认实现中，它就是直接返回ResponseBody。</p><p>我们再回到parseResponse方法，调用完ServiceMethod的toResponse方法，得到了转化后的body，最后调用了Response的success方法，把Okhttp的Response和转化后的body传了进去，最终返回一个Retrofit的Response。</p><h3 id="3、小结"><a href="#3、小结" class="headerlink" title="3、小结"></a>3、小结</h3><p>以异步为例，Retrofit通过ExecutorCallbackCall的enqueue方法发起网络请求，最终会通过OkhttpCall的enqueue方法来发起网络请求，OkhttpCall的enqueue方法中，首先会调用创建一个来自Okhttp的Call实例，然后通过这个Okhttp的Call实例的enqueue方法来发起异步请求，当网络结果Okhttp的Response返回时，调用parseResponse方法解析Response，parseResponse方法里面还会调用ServiceMethod的toResponse方法通过Converter实例的convert方法把ResponseBody转化成我们想要的数据，不同的数据转化有不同的实现，在Retrofit的默认实现中，它就是直接返回Okhttp的ResponseBody，最后把这个转化后的body和原始的Okhttp的Response一并封装成Retrofit的Response返回，最后把parseResponse方法返回的Response通过callback回调出去，这时ExecutorCallbackCall收到回调，通过线程切换执行器callbackExecutor，切换到主线程执行callback回调，一次异步请求就完成了，同步请求也是大同小异，只是少了个回调，就留给大家自己分析了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>能够阅读到这里，说明你对Retrofit的理解又更上一层楼了，其实从整体去看Retrofit，它的流程并不复杂，它的使用也非常的简单，这得益于它优秀的架构，和运用得当的设计模式，其中最核心的当属动态代理模式，通过一个代理类InvocationHandler代理N多个接口，它把每一个方法的处理逻辑都集中到了invoke方法中，这样就能在同一处地方处理所有方法的注解解析，还有它那面向接口的设计，使得各个子模块之间降低耦合，让我们以最小的代价替换成我们需要的实现，Retrofit的整体流程图如下：</p><img src="/2019/10/23/%E9%80%9A%E8%BF%87%E6%BA%90%E7%A0%81%E5%85%A8%E9%9D%A2%E8%A7%A3%E5%89%96Retrofit2%E7%9A%84%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B/retrofit3.png" class="" title="Retrofit"><p>一句话概括Retrofit：它是一个通过动态代理把Api接口方法的注解解析成网络请求所需参数，最后通过Okhttp执行网络请求的封装库。</p><p>以上就是本文的所有内容，如有错误，欢迎指出。</p><p>参考资料：</p><p><a href="https://www.jianshu.com/p/3855eee03793" target="_blank" rel="noopener">Retrofit解析之面向接口编程</a></p><p>​    </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上两篇文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://rain9155.github.io/2019/09/03/okhttp3源码分析之请求流程/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;okhttp3源码分析之请求流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rain9155.github.io/2019/09/07/okhttp3源码分析之拦截器/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;okhttp3源码分析之拦截器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Retrofit与Okhttp是Android开发中最最热门的网络请求库，它们都来自square公司，Okhttp在前面的两篇文章中已经通过源码从请求流程和拦截器两个角度分析过，本文的主角是Retrofit，经过这几天的研究，我发现Retrofit只是一个对Okhttp网络请求框架的巧妙包装，它通过注解去定义一个HTTP请求，然后在底层通过Okhttp发起网络请求，就是这样的一个简单的过程，其间运用了很多的设计模式：外观模式、动态代理模式、适配器模式、装饰者模式等，其最核心的是动态代理模式，所以在此之前大家对动态代理要有一个了解：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://rain9155.github.io/2019/10/15/代理模式/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;静态和动态代理模式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其他的设计模式我会在讲解的过程中简单介绍，除了使用了大量的设计模式，Retrofit还应用了面向接口编程的思想，使得整个系统解耦彻底，本文会通过一个简单的Retrofit使用示例，然后引出Retrofit的核心类，面向接口思想、构建过程、动态代理和网络请求过程，通过这几部分来解剖Retrofit。&lt;/p&gt;
&lt;p&gt;Retrofit的项目地址：&lt;a href=&quot;https://github.com/square/Retrofit&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Retrofit&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文源码基于Retrofit2.4&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="优秀开源库分析" scheme="http://yoursite.com/categories/%E4%BC%98%E7%A7%80%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%86%E6%9E%90/"/>
    
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="retrofit" scheme="http://yoursite.com/tags/retrofit/"/>
    
  </entry>
  
  <entry>
    <title>使用AIDL来进行进程间通信</title>
    <link href="http://yoursite.com/2019/10/21/%E4%BD%BF%E7%94%A8AIDL%E6%9D%A5%E8%BF%9B%E8%A1%8C%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    <id>http://yoursite.com/2019/10/21/%E4%BD%BF%E7%94%A8AIDL%E6%9D%A5%E8%BF%9B%E8%A1%8C%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</id>
    <published>2019-10-21T13:04:01.000Z</published>
    <updated>2023-04-12T12:53:46.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>AIDL它是Android众多进程间通信方式中的一种，底层是Binder机制的实现，所以想要读懂AIDL自动生成的代码中各个类的作用，就必须对Binder有一定的了解，其实不止AIDL，Android进程间通信的大多数方式的底层都是Binder机制，本文主要介绍AIDL的使用，所以不会介绍Binder机制的原理，关于Binder机制的原理，我推荐下面的一篇文章，零基础也能看懂：</p><p><a href="https://zhuanlan.zhihu.com/p/35519585" target="_blank" rel="noopener">写给 Android 应用工程师的 Binder 原理剖析</a></p><p>看完上面的文章你也就能对Binder原理的实现有大概的了解，对于我们Android应用开发也就足够了，如果你还不满足，想从底层和源码了解Binder机制，你可以阅读下面的两个链接：</p><p><a href="https://blog.csdn.net/universus/article/details/6211589#commentBox" target="_blank" rel="noopener">Android Bander设计与实现</a></p><p><a href="http://gityuan.com/2015/10/31/binder-prepare/" target="_blank" rel="noopener">Binder系列—开篇</a></p><p>上面两个系列就是从设计和源码的角度去解读Binder，有点深入。好了，对Binder有一个大体上的认识后，接下来我们就要通过AIDL的使用来完成Android进程间通信的实践。</p><a id="more"></a><h2 id="Android进程间通信的方式"><a href="#Android进程间通信的方式" class="headerlink" title="Android进程间通信的方式"></a>Android进程间通信的方式</h2><p>在介绍AIDL之前，我们先来看一下Android中除了AIDL还有哪些进程间通信的方式：</p><p><strong>1、Bundle</strong></p><p>Bundle实现了Parcelable，所以在Android中我们可以通过Intent在不同进程间传递Bundle数据。</p><p>但是在Intent 传输数据的过程中，用到了 Binder，Intent中的数据，即Bundle数据，会作为 Parcel 存储在Binder 的事务缓冲区(Binder transaction buffer)中的对象进行传输，而这个 Binder 事务缓冲区具有一个有限的固定大小，约为1MB，而且这个1Mb并不是当前操作独享的，而是前进程所共享的，所以由于1Mb的限制，Bundle不能存放大量的数据，不然会报TransactionTooLargeException，并且Bundle中存放的数据也要求能够被序列化，所以Bundle只适用于数据量小和简单的进程间通信，每次通过Intent传输数据时最好不要超过200K。</p><p><strong>2、文件共享</strong></p><p>两个进程间通过读写同一个文件来交换数据。</p><p>但是由于Android允许并发的对同一个文件读写，所以如果两个进程同时的对这个文件写，就会出现问题，所以这适用于对数据同步要求不高的进程间通信。</p><p><strong>3、ContentProvider</strong></p><p>ContentProvider是Android中专门用于不同应用之间，即不同进程之间进行数据共享的方式，它的底层实现是Binder。</p><p>ContentProvider是四大组件之一，它的使用比较简单，我们只需要继承自ContenProvider，并重写它的六个方法：onCreate、query、updata、insert、delete和getType，其中onCreate用于初始化，getType用于返回一个Uri请求代表的MIME类型，剩下的都是CRUD操作，除了onCreate方法运行在主线程，其他方法都运行在Binder线程池，然后在另外一个进程中注册这个ContentProvider，在本进程的Activity中通过getContentResolver()获得ContentResolver后，再通过ContentResolver来完成对这个ContentProvider的CRUD操作。</p><p><strong>4、套接字(Socket)</strong></p><p>一种传统的Linux IPC方式，除了用于不同进程之间还可以用于不同机器之间（通过网络传输）的通信，但是它的传输效率也是非常的低。</p><p><strong>5、Messenger</strong></p><p>通过Messenger可以在不同进程之间传递Message对象，Message中可以放入我们需要传递的数据，它的底层实现是AIDL。</p><p>但是Messenger在服务端的Handler是以串行的方式处理来自客户端的Message，所以如果有大量的并发请求，Messenger就效率低下，所以Messenger适用于数据并发量低的进程间通信。</p><p><strong>6、AIDL</strong></p><p>也就是本文的主角，它的底层实现是Binder。</p><p>可以看到Android中进程间通信的方式中，除了文件共享和Socket，底层都是需要通过Binder来传输数据，可见Binder对Android的进程间通信来说是多么的重要。</p><h2 id="进程间通信的准备"><a href="#进程间通信的准备" class="headerlink" title="进程间通信的准备"></a>进程间通信的准备</h2><h3 id="1、-序列化"><a href="#1、-序列化" class="headerlink" title="1、 序列化"></a>1、 序列化</h3><p>Android中要在进程间传输的数据都要是可序列化的，序列化就是把对象转换成二进制（字节流），从而可以存储到存储设备或者通过网络进行传输，有序列化，就有反序列，反序列化就是把二进制（字节流）转化为对象，其中8种基本数据类型默认可以在进程间传输，没有序列化的概念，序列化的作用对象是对象。在Android中，对象通过实现Serializable或Parcelable接口来实现序列化，下面简单介绍一下它们之间使用和区别：</p><h4 id="1-1、Serializable"><a href="#1-1、Serializable" class="headerlink" title="1.1、Serializable"></a>1.1、Serializable</h4><p>Serializable是java中提供的一个序列化接口，它是一个空接口，对象实现这个Serializable接口，就标记这个对象是可序列化的，然后我们通过ObjectOutputStream的writeObject方法就能完成对象的序列化，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">ObjectOutputStream os = <span class="keyword">new</span>  ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"D://test.txt"</span>));</span><br><span class="line">os.writeObject(user);</span><br><span class="line">os.close();</span><br></pre></td></tr></table></figure><p>同理，通过ObjectOutputStream的readObject方法就能完成对象的反序列化，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ObjectOutputStream in = <span class="keyword">new</span>  ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"D://test.txt"</span>));</span><br><span class="line">User user = in.readObject();</span><br><span class="line">in.close();</span><br></pre></td></tr></table></figure><p>如果你在序列化这个对象之后有可能会改变这个对象的类结构，例如为类添加新的字段，这时在序列化这个对象之前你就要为这个对象的类加上一个serialVersionUID参数，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="comment">//serialVersionUID取什么值没关系，只要保持不变就行</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你确保这个对象的类结构在序列化之后是一直不变的，那么这个serialVersionUID可以忽略，为什么会这样呢？这是因为在序列化的时候，系统会把当前类的serialVersionUID写入到序列化的文件中，当反序列化时系统就会去检测文件中的serialVersionUID是否和当前类的serialVersionUID相同，如果相同就说明序列化的类和当前类的版本是相同的，这时候系统可以正确的反序列化，如果不一致，就说明序列化的类和当前类相比发生了某些变化，例如当前类添加了新的字段，这时就会反序列化失败，抛出异常。所以如果你手动指定了serialVersionUID的值，并一直保持不变，就算你改变了类的结构（不要改变类名和变量类型），序列化和反序列化时两者的serialVersionUID都是相同的，可以正常的进行反序列化，相反，如果你没有指定serialVersionUID的值，系统会根据类的结构自动生成它的hash值作为serialVersionUID的值，这时你改变了类的结构，在进行序列化和反序列化时两者生成的serialVersionUID不相同，这时反序列化就会失败，所以当你没有指定serialVersionUID的值，你要确保这个对象的类结构在序列化之后是一直不变。当然大多数情况下我们还是会指定serialVersionUID的值，以防我们不小心修改类的结构导致无法恢复对象。</p><p>这里只是列举了用Serializable实现对象序列化最简单的使用，其实我们可以通过transient关键字控制哪些字段不被序列化，还有静态成员不属于对象，不会参与序列化过程，还可以手动控制Serializable对象的序列化和反序列化过程，还关于Serializable更多使用方式可以看<a href="https://www.cnblogs.com/szlbm/p/5504166.html" target="_blank" rel="noopener">Java对象表示方式1：序列化、反序列化和transient关键字的作用</a>。</p><h4 id="1-2、Parcelable"><a href="#1-2、Parcelable" class="headerlink" title="1.2、Parcelable"></a>1.2、Parcelable</h4><p>Parcelable是Android提供的一个接口，一个对象只要实现了这个接口，就可以实现序列化，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name == <span class="keyword">null</span> ? <span class="string">""</span> : name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password == <span class="keyword">null</span> ? <span class="string">""</span> : password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面就是实现Parcelable接口需要实现的方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">        dest.writeString(<span class="keyword">this</span>.name);</span><br><span class="line">        dest.writeString(<span class="keyword">this</span>.password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;User&gt; CREATOR = <span class="keyword">new</span> Parcelable.Creator&lt;User&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(source);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> User[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User[size];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">User</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = in.readString();</span><br><span class="line">        <span class="keyword">this</span>.password = in.readString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User中需要序列化的字段都会包装进Parcel中，当反序列化时，从Parcel中读取数据，Parcel内部包装了可序列化的数据，可以在进程间传输，其中describeContents方法用来完成内容描述，一般返回0，writeToParcel方法用来实现序列化，CREATOR对象的内部方法用来实现反序列化，其中createFromParcel方法用来从序列化后的对象中创建原始对象，newArray方法用来创建指定长度的原始对象数组。</p><p>Parcelable的用法相比Serializable复杂了一点，如果每次需要序列化一个对象，都要写这么多重复样本代码，会有点累，这里我推荐一个插件<a href="https://github.com/mcharmas/android-parcelable-intellij-plugin" target="_blank" rel="noopener">android-parcelable-intellij-plugin</a>，专门用于自动生成这些重复样本代码。</p><h4 id="1-3、Serializable和Parcelable的区别"><a href="#1-3、Serializable和Parcelable的区别" class="headerlink" title="1.3、Serializable和Parcelable的区别"></a>1.3、Serializable和Parcelable的区别</h4><p>Serializable和Parcelable都可以实现序列化，用于进程间的数据传递，它们之间有什么区别呢？在编码上，Serializable使用简单，而Parcelable稍显复杂；在效率上，Serializable的开销很大，因为它只是一个空接口，我们无需实现任何方法，Java便会对这个对象进行序列化操作，这是因为java会通过反射创建所需方法，导致序列化的过程较慢，而Parcelable的效率高，它的速度比Serializable快十倍，通过把一个完整的对象进行分解，而分解后的每一部分都是Intent所支持的数据类型，这样也就实现了传递对象的功能；在使用场景上，Parcelable主要用在内存序列化上，它不能使用在要将数据序列化在磁盘上的情况，因为在外界有变化的情况下，Parcelable不能很好的保证数据的持续性，所以如果需要序列化到磁盘或通过网络传输建议使用Serializable，尽管它的效率低点。</p><p>综上所述，在Android开发中，如果有序列化的要求，我们多点考虑使用Parcelable，毕竟它是Android自带的，虽然它使用稍显复杂，但是有插件的帮助，加上它的效率高，就略胜Serializable了。</p><h3 id="2、开启多进程模式"><a href="#2、开启多进程模式" class="headerlink" title="2、开启多进程模式"></a>2、开启多进程模式</h3><p>既然是进程间通信，就一定会涉及到两个或两个进程以上，我们知道，在Android中，启动一个应用就代表启动了一个进程，但其实除了启动多个应用外，其实在一个应用中，也可以存在多个进程，只要你为四大组件在AndroidMenifest中指定“android:process”属性就行，比如我希望ClientActivity启动的时候，运行在独立的进程，我就会在AndroidMenifest中这样写，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".ClientActivity"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:process</span>=<span class="string">"com.example.aidltest.client"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到我只是简单的ClientActivity指定了“android:process”属性，这样ClientActivity在启动的时候就会运行在进程名为com.example.aidltest.client的独立进程上，而MainActivity启动时，就会运行在默认进程上，默认进程的进程名为当前包名即com.example.aidltest。</p><p>需要注意的是，此时这两个Activity虽然在同一个应用，但是却不在同一个进程，所以它们是不共享内存空间的，Android会为每一个进程分配一个独立的虚拟机，不同的虚拟机在内存分配上有不同的地址空间，所以MainActivity和ClientActivity的内存地址空间不一样，它们要访问对方的数据的时候，都要通过进程间通信的方式来进行。</p><p>接下来为了方便后面的讲解，我把ClientActivity指定为主活动，把MainActivity删除，再创建一个Server，并为它指定process属性，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".ClientActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".RemoteService"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:enabled</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:exported</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:process</span>=<span class="string">"com.example.aidltest.remote"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>ClientActivity启动时会运行在默认的进程上，RemoteService启动时会运行在名为com.example.aidltest.remote的进程上，它们在本文分别代表为本地客户端和远程服务端。</p><blockquote><p>通过给四大组件指定”android:process“属性开启多进程时，进程名以 <strong>:</strong> 开头属于当前应用的<strong>私有进程</strong>，其他应用的组件不能和它跑在同一个进程中；不以 <strong>:</strong> 开头的进程属于<strong>全局进程</strong>，其他应用如果签名相同时，可以通过sharedUserId方式和它跑在同一个进程中，本文没有使用 <strong>:</strong> 开头，而是直接给新进程指定名字，所以新进程属于全局进程。</p></blockquote><h2 id="使用AIDL"><a href="#使用AIDL" class="headerlink" title="使用AIDL"></a>使用AIDL</h2><p>前面花了一点篇幅来讲解序列化和其他进程间通信的方式，主要是让大家有个心理准备，下面进入正文：</p><h3 id="1、AIDL是什么"><a href="#1、AIDL是什么" class="headerlink" title="1、AIDL是什么"></a>1、AIDL是什么</h3><p>它全称是Android Interface Definition Language，即Android接口定义语言，为了使其他的进程也可以访问本进程提供的服务，Android使用AIDL来公开服务的接口，它里面定义了本进程可以为其他进程提供什么服务，即定义了一些方法，其他进程就可以通过RPC（远程调用）来调用这些方法，从而获得服务，其中提供服务的进程称为服务端，获取服务的进程称为客户端。</p><h3 id="2、AIDL接口的创建"><a href="#2、AIDL接口的创建" class="headerlink" title="2、AIDL接口的创建"></a>2、AIDL接口的创建</h3><p>AIDL接口用来暴露服务点提供给客户端的方法，新建一个AIDL接口文件，只需要在你的项目中 <strong>点击包名 -&gt; 右键 -&gt; new -&gt; AIDL -&gt; Aidl.file</strong>，然后输入AIDL接口名称，这里我输入了<strong>IUserManager</strong>，然后点击<strong>Finish</strong>，就会在你的main目录下创建了一个aidl文件夹，aidl文件夹里的包名和java文件夹里的包名相同，里面用来存放AIDL接口文件，如下：</p><img src="/2019/10/21/%E4%BD%BF%E7%94%A8AIDL%E6%9D%A5%E8%BF%9B%E8%A1%8C%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/aidl1.png" class="" title="aidl"><p>在里面你会发现你刚刚创建的AIDL接口IUserManager，点进去，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IUserManager.aidl</span></span><br><span class="line"><span class="keyword">package</span> com.example.aidltest;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare any non-default types here with import statements</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IUserManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Demonstrates some basic types that you can use as parameters</span></span><br><span class="line"><span class="comment">     * and return values in AIDL.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">basicTypes</span><span class="params">(<span class="keyword">int</span> anInt, <span class="keyword">long</span> aLong, <span class="keyword">boolean</span> aBoolean, <span class="keyword">float</span> aFloat,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">double</span> aDouble, String aString)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面声明了一个方法，写着AIDL支持的一些数据类型(int、long、boolean、float、double、String)，除了这些，AIDL还支持其他的基本数据类型、ArrayList(里面的每个元素都要被AIDL支持)、HashMap(里面的每个元素都要被AIDL支持)、实现了Parcelable接口的对象和AIDL接口本身，还有AIDL接口中只支持声明方法，不支持声明静态常量。</p><p>其中如果要在AIDL接口文件中使用AIDL对象，必须显式的 <strong>import</strong> 进来，即使它们在同一个包内，还有如果在AIDL接口文件用到了Parcelable对象，必须新建一个和它同名的AIDL文件，并在其中声明它为parcelable类型，接下来我要使用User这个Parcelable对象，所以我要在aidl文件夹下新建一个和他同名的AIDL文件，如下：</p><img src="/2019/10/21/%E4%BD%BF%E7%94%A8AIDL%E6%9D%A5%E8%BF%9B%E8%A1%8C%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/aidl2.png" class="" title="aidl"><p>然后在User.aidl中添加如下内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User.aidl</span></span><br><span class="line"><span class="keyword">package</span> com.example.aidltest;</span><br><span class="line"></span><br><span class="line">parcelable User;</span><br></pre></td></tr></table></figure><p>在里面，我声明了User.java这个对象为parcelable类型，接下来把IUserManager中的basicTypes方法删除，添加一个根据用户姓名获得用户信息的方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IUserManager.aidl</span></span><br><span class="line"><span class="keyword">package</span> com.example.aidltest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.adiltest.User;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IUserManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function">User <span class="title">getUser</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在里面我显示的 import 了User这个AIDL文件，即使它们在同一个包内，并声明了一个getUser方法，这个方法将会在服务端实现，然后在客户端调用(RPC)。</p><h3 id="3、根据AIDL接口生成-对应的Binder类"><a href="#3、根据AIDL接口生成-对应的Binder类" class="headerlink" title="3、根据AIDL接口生成 对应的Binder类"></a>3、根据AIDL接口生成 对应的Binder类</h3><p>有了AIDL接口后我们需要根据AIDL接口生成客户端和服务端对应的Binder类，有两种方式生成，一种是通过SDK自动生成，另外一种是我们自己手动编码实现，其中能够进行手动编码实现的前提是基于对SDK自动生成的各种Binder类的充分理解，下面我们先来介绍SDK自动生成的Binder类。</p><h4 id="3-1、SDK自动生成"><a href="#3-1、SDK自动生成" class="headerlink" title="3.1、SDK自动生成"></a>3.1、SDK自动生成</h4><p>我们在AS导航栏 <strong>Build -&gt; ReBuild Project</strong>，SDK就会替我们在 <strong>app\build\generated\aidl_source_output_dir\debug\compileDebugAidl\out\包名</strong> 下生成一个<strong>IUserManager.java</strong>，它就是根据IUserManager.aidl文件生成的，里面没有缩进，所以看起来不习惯，使用快捷键<strong>ctrl+alt+L</strong>，格式化一下代码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//IUserManager.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、IUserManager接口，getUser方法定义在其中</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserManager</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">IInterface</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、抽象类Stub，需要在远程服务端实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">Binder</span> <span class="keyword">implements</span> <span class="title">com</span>.<span class="title">example</span>.<span class="title">aidltest</span>.<span class="title">IUserManager</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.lang.String DESCRIPTOR = <span class="string">"com.example.aidltest.IUserManager"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Stub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.attachInterface(<span class="keyword">this</span>, DESCRIPTOR);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> com.example.aidltest.<span class="function">IUserManager <span class="title">asInterface</span><span class="params">(android.os.IBinder obj)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ((obj == <span class="keyword">null</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</span><br><span class="line">            <span class="keyword">if</span> (((iin != <span class="keyword">null</span>) &amp;&amp; (iin <span class="keyword">instanceof</span> com.example.aidltest.IUserManager))) &#123;</span><br><span class="line">                <span class="keyword">return</span> ((com.example.aidltest.IUserManager) iin);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> com.example.aidltest.IUserManager.Stub.Proxy(obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</span><br><span class="line">            java.lang.String descriptor = DESCRIPTOR;</span><br><span class="line">            <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">                <span class="keyword">case</span> INTERFACE_TRANSACTION: &#123;</span><br><span class="line">                    reply.writeString(descriptor);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> TRANSACTION_getUser: &#123;<span class="comment">//case TRANSACTION_getUser分支</span></span><br><span class="line">                    data.enforceInterface(descriptor);</span><br><span class="line">                    java.lang.String _arg0;</span><br><span class="line">                    _arg0 = data.readString();</span><br><span class="line">                    <span class="comment">//调用getUser方法的具体实现</span></span><br><span class="line">                    com.example.aidltest.User _result = <span class="keyword">this</span>.getUser(_arg0);</span><br><span class="line">                    reply.writeNoException();</span><br><span class="line">                    <span class="keyword">if</span> ((_result != <span class="keyword">null</span>)) &#123;</span><br><span class="line">                        reply.writeInt(<span class="number">1</span>);</span><br><span class="line">                        _result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        reply.writeInt(<span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">default</span>: &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 2、代理类Proxy，客户端使用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">com</span>.<span class="title">example</span>.<span class="title">aidltest</span>.<span class="title">IUserManager</span> </span>&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">private</span> android.os.IBinder mRemote;</span><br><span class="line"></span><br><span class="line">            Proxy(android.os.IBinder remote) &#123;</span><br><span class="line">                mRemote = remote;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> mRemote;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">getInterfaceDescriptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> DESCRIPTOR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> com.example.aidltest.<span class="function">User <span class="title">getUser</span><span class="params">(java.lang.String name)</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</span><br><span class="line">                android.os.Parcel _data = android.os.Parcel.obtain();</span><br><span class="line">                android.os.Parcel _reply = android.os.Parcel.obtain();</span><br><span class="line">                com.example.aidltest.User _result;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    _data.writeInterfaceToken(DESCRIPTOR);</span><br><span class="line">                    _data.writeString(name);</span><br><span class="line">                    <span class="comment">//传进了TRANSACTION_getUser字段</span></span><br><span class="line">                    mRemote.transact(Stub.TRANSACTION_getUser, _data, _reply, <span class="number">0</span>);</span><br><span class="line">                    _reply.readException();</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="number">0</span> != _reply.readInt())) &#123;</span><br><span class="line">                        _result = com.example.aidltest.User.CREATOR.createFromParcel(_reply);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        _result = <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    _reply.recycle();</span><br><span class="line">                    _data.recycle();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> _result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_getUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">public</span> com.example.aidltest.<span class="function">User <span class="title">getUser</span><span class="params">(java.lang.String name)</span> <span class="keyword">throws</span> android.os.RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个文件有3个主要的类：</p><p><strong>1、IUserManager接口</strong></p><p>它声明了IUserManager.aidl定义的getUser方法，继承自IInterface。</p><p><strong>2、IUserManager.Stub抽象类</strong></p><p>IUserManager的静态内部类，它继承自Binder，说明它是一个<strong>Binder本地对象</strong>，它虽然实现了IUserManager接口，但是它继续声明为一个抽象类，并没有实现IUserManager接口中的getUser方法，表明子类需要实现getUser方法，返回具体的User信息，而服务端将会实现这个Stub抽象类。</p><p><strong>3、IUserManager.Stub.Proxy代理类</strong></p><p>IUserManager.stub的静态内部类，它实现了IUserManager接口，并且实现了getUser方法，但是里面只是把数据装进data这个Parcel对象，通过<strong>mRemote</strong>的<strong>transact方法</strong>发送给服务端，接着用reply这个Parcel对象等待服务端数据的返回，这一切都是通过mRemote这个IBinder对象进行，mRemote代表着<strong>Binder对象的本地代理</strong>，mRemote会通过<strong>Binder驱动</strong>来完成与远程服务端的Stub的通信。</p><p>可以看到Stub类和Stub.Proxy类都实现了IUserManager接口，这就是一个典型的<a href="https://rain9155.github.io/2019/10/15/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">代理模式</a>，它们的getUser方法有着不同的实现，Stub类它将会在远程的服务端完成getUser方法的具体实现，而Stub.Proxy类是本地客户端的一个代理类，它已经替我们默认的实现了getUser方法，该方法里面通过<strong>mRemote</strong>这个Binder引用的<strong>transact方法</strong>把请求通过<strong>Binder驱动</strong>发送给服务端，我们注意到mRemote发送请求时还传进了<strong>TRANSACTION_getUser</strong>这个代表着getUser方法的标识名，这表示客户端告诉服务端我要调用getUser这个方法，当驱动把请求转发给服务端后，服务端的Stub类的<strong>onTransact方法</strong>就会回调，它里面有一个switch语句，根据code来调用不同的方法，这时它就会走到case TRANSACTION_getUser这个分支，然后调用getUser方法的在服务端的具体实现，如果有返回值的话，还会通过reply返回给客户端，这样就通过Binder驱动完成了一次远程方法调用(RPC)。</p><p>这里要注意的是客户端通过mRemote的transact方法把请求发送给客户端之后，这时会阻塞UI线程等待服务端的返回，而服务端的onTransact方法回调时，服务端的getUser方法会被回调，这时服务端的getUser方法是运行在服务端Binder线程池中，所以如果此时有UI操作需要回到UI线程再进行UI操作。</p><p>我们还注意到IUserManager接口继承了IInterface，IUserManager.Stub继承自Binder，它们是干什么的？我们来认识一下：</p><p><strong>IInterface</strong></p><p>这是一个接口，用来表示服务端提供了哪些服务，如果服务端需要暴露调用服务的方法给客户端使用，就一定要继承这个接口，它里面有个<strong>asBinder方法</strong>，用于返回当前的Binder对象。</p><p><strong>IBinder</strong></p><p>这是一个跨进程通信的Base接口，它声明了跨进程通信需要实现的一系列抽象方法，实现了这个接口就说明可以进行跨进程通信，<strong>Binder</strong>和<strong>BinderProxy</strong>都继承了这个接口。</p><p><strong>Binder</strong></p><p>代表的是<strong>Binder本地对象</strong>（Binder实体），它继承自IBinder，所有本地对象都要继承Binder，Binder中有一个内部类BinderProxy，它也继承自IBinder，它代表着<strong>Binder对象的本地代理</strong>(Binder引用)，<strong>Binder实体</strong>只存在于服务端，而<strong>Binder引用</strong>则遍布于各个客户端。</p><p>接下来我们动手实践一下，首先在服务端RemoteService中，我们要这样做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、实现Stub类中的getUser方法</span></span><br><span class="line">    <span class="keyword">private</span> IUserManager.Stub mBinder = <span class="keyword">new</span> IUserManager.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="comment">//这里只是简单的返回了一个用户名为name，密码为123456的用户实例</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(name, <span class="string">"123456"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RemoteService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//2、在onBinder方法中返回Stub类的实现，Stub类继承自Binder，Binder实现了IBinder，这样返回是没问题的</span></span><br><span class="line">        <span class="keyword">return</span> mBinder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在服务端我们需要实现Stub类中的getUser方法，然后在onBinder方法中返回Stub类的实现，这样客户端绑定服务时就会收到这个Stub类的Binder引用。</p><p>然后在客户端ClientActivity中，我们要这样做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = ClientActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、创建ServiceConnection</span></span><br><span class="line">    <span class="keyword">private</span> ServiceConnection mServiceConnection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"onServiceConnected, 与服务端连接成功！"</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//把服务端返回的Binder引用，通过Stub.asInterface方法包装成本地代理类IUserManager.Stub.Proxy，Proxy类实现了IUserManager，所以这样写是没问题的</span></span><br><span class="line">            IUserManager userManager = IUserManager.Stub.asInterface(service);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//通过本地代理对象远程调用服务端的方法</span></span><br><span class="line">                User user = userManager.getUser(<span class="string">"rain"</span>);</span><br><span class="line">                </span><br><span class="line">                Log.d(TAG, <span class="string">"onServiceConnected，向服务端获取用户信息成功，User = ["</span></span><br><span class="line">                        + <span class="string">"name = "</span> + user.getName()</span><br><span class="line">                        + <span class="string">"password = "</span> + user.getPassword());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"onServiceDisconnected, 与服务端断开连接"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">//2、启动并通过ServiceConnection绑定远程服务</span></span><br><span class="line">        bindService(</span><br><span class="line">                <span class="keyword">new</span> Intent(<span class="keyword">this</span>, RemoteService<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">                <span class="title">mServiceConnection</span>,</span></span><br><span class="line"><span class="class">                <span class="title">Context</span>.<span class="title">BIND_AUTO_CREATE</span></span></span><br><span class="line"><span class="class">        )</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        <span class="comment">//3、解绑服务</span></span><br><span class="line">        unbindService(mServiceConnection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在服务端我们首先要创建ServiceConnection，然后通过ServiceConnection来绑定RemoteService，在成功绑定后，ServiceConnection的onServiceConnected方法就会回调，它的第二个输入参数就是RemoteService在onBind方法返回的Stub类的Binder引用，我们拿到这个引用后，就可以通过通过Stub.asInterface方法转换为本地代理类Stub.Proxy，然后调用它的getUser方法，Proxy的getUser方法会远程调用RemoteService的getUser方法，方法返回后，在log中打印出User的信息，最后，活动结束，我们记得解绑服务，这个过程和上面介绍的一次RPC过程是一样的。</p><p>我们发现完成一次进程间的通信是非常的简单，这就好像只是简单的调用一个对象的方法，但其实这都得益于Binder在底层为我们做了更多工作，上面的一次进程间通信，可以简单的用下图表示：</p><img src="/2019/10/21/%E4%BD%BF%E7%94%A8AIDL%E6%9D%A5%E8%BF%9B%E8%A1%8C%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/aidl3.png" class="" title="aidl"><p>对象转换就是完成Binder实体 -&gt; Binder引用，Binder引用 -&gt; Binder实体的转换，在java层继承自Binder的都代表Binder本地对象，即Binder实体，而Binder类的内部类BinderProxy就代表着Binder对象的本地代理，即Binder引用，这两个类都继承自IBinder, 因而都具有跨进程传输的能力，在跨越进程的时候，Binder 驱动会自动完成这两个对象的转换。</p><p>我们重点讲一下图中的第3步：<strong>Binder引用赋值给Proxy的mRemote字段</strong>，Proxy就是前面介绍的Stub.Proxy，所以接着我们看看<strong>IUserManager.Stub.asInterface(IBinder)</strong>方法是如何把服务端返回的Binder引用赋值给本地的代理类Proxy的mRemote字段，asInterface方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//IUserManager.Stub.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> com.example.aidltest.<span class="function">IUserManager <span class="title">asInterface</span><span class="params">(android.os.IBinder obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((obj == <span class="keyword">null</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据DESCRIPTOR调用IBinder的queryLocalInterface方法</span></span><br><span class="line">    android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</span><br><span class="line">    <span class="keyword">if</span> (((iin != <span class="keyword">null</span>) &amp;&amp; (iin <span class="keyword">instanceof</span> com.example.aidltest.IUserManager))) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((com.example.aidltest.IUserManager) iin);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> com.example.aidltest.IUserManager.Stub.Proxy(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Binder</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@Nullable</span> <span class="function">IInterface <span class="title">queryLocalInterface</span><span class="params">(@NonNull String descriptor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mDescriptor != <span class="keyword">null</span> &amp;&amp; mDescriptor.equals(descriptor)) &#123;</span><br><span class="line">        <span class="comment">//mOwner等于Stub类实例</span></span><br><span class="line">        <span class="keyword">return</span> mOwner;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Binder#BinderProxy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IInterface <span class="title">queryLocalInterface</span><span class="params">(String descriptor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现它里面根据DESCRIPTOR标识调用IBinder的queryLocalInterface方法在查找一些什么，DESCRIPTOR是什么？DESCRIPTOR是Binder实体的唯一标识，一般用当前的Binder的类名表示，它定义在Stub类中，如本文的Stub的 DESCRIPTOR = “com.example.aidltest.IUserManager”，前面已经讲过Binder和BinderProxy都继承自IBinder，所以它们的queryLocalInterface有不同的实现，我们看到BinderProxy的直接返回null；而Binder的需要和自己的DESCRIPTOR比较，如果相同就返回mOwner，否则返回null，其中mOwner就等于Stub类实例，在Stub类构造的时候赋值，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">Binder</span> <span class="keyword">implements</span> <span class="title">com</span>.<span class="title">example</span>.<span class="title">aidltest</span>.<span class="title">IUserManager</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.lang.String DESCRIPTOR = <span class="string">"com.example.aidltest.IUserManager"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.attachInterface(<span class="keyword">this</span>, DESCRIPTOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attachInterface</span><span class="params">(@Nullable IInterface owner, @Nullable String descriptor)</span> </span>&#123;</span><br><span class="line">        mOwner = owner;</span><br><span class="line">        mDescriptor = descriptor;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这说明了如果queryLocalInterface的返回不为空，iin != null，表示obj是Binder实体（Stub的子类），客户端和服务端在同一个进程，asInterface方法返回的就是Binder实体；如果queryLocalInterface的返回为空，iin == nul，表示obj实际上是Binder引用，客户端和服务端在不同的进程，asInterface构造一个Proxy对象返回，并把Binder引用通过构造传了进去，我们看Proxy的构造函数，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">com</span>.<span class="title">example</span>.<span class="title">aidltest</span>.<span class="title">IUserManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> android.os.IBinder mRemote;</span><br><span class="line"></span><br><span class="line">    Proxy(android.os.IBinder remote) &#123;</span><br><span class="line">        mRemote = remote;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，<strong>传进去的Binder引用赋值给了mRemote字段</strong>，所以Proxy中的mRemote就是Binder引用，客户端就是通过这个mRemote来和服务端通信。</p><p>也就是说，如果在同一个进程，asInterface返回的是Stub的实现类，因为不存在跨进程调用，直接调用该方法就行，如果在不同进程，asInterface返回的是Proxy对象，客户端调用Proxy中的同名方法，通过mRemote的transact方法挂起当前线程等待服务端返回，服务端收到请求后响应返回数据。</p><p>到这里，相信大家在SDK把帮助下已经会使用AIDL来完成简单的进程间通信，接下来通过手动编码实现。</p><h4 id="3-2、手动编码实现"><a href="#3-2、手动编码实现" class="headerlink" title="3.2、手动编码实现"></a>3.2、手动编码实现</h4><p>我们发现使用AIDL系统会自动的帮我们生成上述代码，是为了方便我们的开发，系统根据AIDL文件生成的java文件格式是固定，我们完全可以抛开AIDL直接手写对应的Binder类，下面我们本着单一原则把原本IUserManager.java的里面的Stub类和Stub类中的Proxy类独立出来，所以我们总共要写3个类，分别是：IUserManager、Stub、Proxy。</p><p><strong>1、声明一个继承自IInterface的接口</strong></p><p>声明一个继承自IInterface的接口，在里面定义我们想要让客户端调用的方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserManager</span> <span class="keyword">extends</span> <span class="title">IInterface</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">getUser</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、声明服务端的Stub类</strong></p><p>Stub类需要继承Binder，表明它是一个Binder本地对象，它还需要实现IUserManager接口，但是继续声明为抽象类，不需要实现IUserManager的getUser方法，接着我们做以下几步：</p><p>1、在里面定义一个字符串DESCRIPTOR，表示Binder实体的唯一标识，用当前的Stub类的类名表示，并把它的可见修饰符改为public，待会在Proxy需要用到.</p><p>2、在构造函数中把this 和 DESCRIPTOR字符串 attach 给父类Binder中的mOwner和mDescriptor字段.</p><p>3、定义一个TRANSACTION_getUser整型数值代表着getUser方法的标识名，赋值格式照抄自动生成的Stub类的TRANSACTION_getUser.</p><p>4、定义一个asInterface静态方法，里面的内容实现照抄自动生成的Stub类的asInterface方法，需要注意里面的IUserManager接口需要换成我们刚刚定义的IUserManager接口.</p><p>5、最后重写IInterface的asBinder方法和Binder的onTransact方法，里面的内容实现照抄自动生成的Stub类的asBinder和onTransact方法.</p><p>最终这个Stub类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> <span class="keyword">extends</span> <span class="title">Binder</span> <span class="keyword">implements</span> <span class="title">IUserManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DESCRIPTOR = <span class="string">"com.example.aidltest.Stub"</span>;<span class="comment">//这里改成com.example.aidltest.Stub</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_getUser = (IBinder.FIRST_CALL_TRANSACTION + <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.attachInterface(<span class="keyword">this</span>, DESCRIPTOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IUserManager <span class="title">asInterface</span><span class="params">(android.os.IBinder obj)</span> </span>&#123;<span class="comment">//导入我们自定义的IUserManager</span></span><br><span class="line">        <span class="keyword">if</span> ((obj == <span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</span><br><span class="line">        <span class="keyword">if</span> (((iin != <span class="keyword">null</span>) &amp;&amp; (iin <span class="keyword">instanceof</span> IUserManager))) &#123;</span><br><span class="line">            <span class="keyword">return</span> (IUserManager) iin;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Proxy(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</span><br><span class="line">        java.lang.String descriptor = DESCRIPTOR;</span><br><span class="line">        <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">            <span class="keyword">case</span> INTERFACE_TRANSACTION: &#123;</span><br><span class="line">                reply.writeString(descriptor);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> TRANSACTION_getUser: &#123;</span><br><span class="line">                data.enforceInterface(descriptor);</span><br><span class="line">                java.lang.String _arg0;</span><br><span class="line">                _arg0 = data.readString();</span><br><span class="line">                com.example.aidltest.User _result = <span class="keyword">this</span>.getUser(_arg0);</span><br><span class="line">                reply.writeNoException();</span><br><span class="line">                <span class="keyword">if</span> ((_result != <span class="keyword">null</span>)) &#123;</span><br><span class="line">                    reply.writeInt(<span class="number">1</span>);</span><br><span class="line">                    _result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    reply.writeInt(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、声明客户端的Proxy类</strong></p><p>Proxy类只需要实现IUserManager接口，并且实现IUserManager中的getUser方法，接着我们做以下几步：</p><p>1、定义一个IBinder类型的mRemote字段，并在构造函数中赋值.</p><p>2、实现IUserManager中的getUser方法和IInterface的asBinder方法，里面的内容实现照抄自动生成的Stub.Proxy的getUser方法和asBinder方法，需要注意getUser中的一些字段需要导入我们刚刚在Stub类中定义的字段.</p><p>最终这个Proxy类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">IUserManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IBinder mRemote;</span><br><span class="line"></span><br><span class="line">    Proxy(android.os.IBinder remote) &#123;</span><br><span class="line">        mRemote = remote;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mRemote;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> com.example.aidltest.<span class="function">User <span class="title">getUser</span><span class="params">(java.lang.String name)</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</span><br><span class="line">        android.os.Parcel _data = android.os.Parcel.obtain();</span><br><span class="line">        android.os.Parcel _reply = android.os.Parcel.obtain();</span><br><span class="line">        com.example.aidltest.User _result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            _data.writeInterfaceToken(Stub.DESCRIPTOR);<span class="comment">//这里引用我们自己写的Stub的DESCRIPTOR</span></span><br><span class="line">            _data.writeString(name);</span><br><span class="line">            mRemote.transact(Stub.TRANSACTION_getUser, _data, _reply, <span class="number">0</span>);<span class="comment">//这里引用我们自己写的Stub的TRANSACTION_getUser</span></span><br><span class="line">            _reply.readException();</span><br><span class="line">            <span class="keyword">if</span> ((<span class="number">0</span> != _reply.readInt())) &#123;</span><br><span class="line">                _result = com.example.aidltest.User.CREATOR.createFromParcel(_reply);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                _result = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            _reply.recycle();</span><br><span class="line">            _data.recycle();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终整个工程目录如下：</p><img src="/2019/10/21/%E4%BD%BF%E7%94%A8AIDL%E6%9D%A5%E8%BF%9B%E8%A1%8C%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/aidl4.png" class="" title="aidl"><p><strong>4、使用</strong></p><p>使用就很简单了，只需要把上面自动生成的IUserManager、IUserManager.Stub、IUserManager.Stub.Proxy替换成我们自己写的IUserManager、Stub、Proxy就行，就不再贴代码了，输出如下：</p><img src="/2019/10/21/%E4%BD%BF%E7%94%A8AIDL%E6%9D%A5%E8%BF%9B%E8%A1%8C%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/aidl5.png" class="" title="aidl"><h2 id="学完AIDL能干什么"><a href="#学完AIDL能干什么" class="headerlink" title="学完AIDL能干什么"></a>学完AIDL能干什么</h2><p>平常在Android中应用到进程间通信的场景非常的少，但这并不是说AIDL没有用，一个最直观的应用就是在阅读Android系统源码的时候，例如Activity的启动流程：</p><p><a href="https://rain9155.github.io/2019/05/19/Activity的启动流程%EF%BC%881%EF%BC%89/" target="_blank" rel="noopener">Activity的启动流程（1）</a></p><p><a href="https://rain9155.github.io/2019/05/19/Activity的启动流程%EF%BC%882%EF%BC%89/" target="_blank" rel="noopener">Activity的启动流程（2）</a></p><p>在android8.0之后Activity的有关进程间的通信都是通过AIDL来实现，Android根据IActivityManager.aidl文件来生成进程间通信所需的Binder类，如ApplicationThread在AMS的本地代理，AMS在ActivityThread的本地代理，当我们通过startActiivty发起Activity的启动请求时，ActivityThread就会通过AMS本地代理调用AMS的相应方法，当Actiivty在AMS准备好后，AMS就会通过ActivityThread本地代理回调应用进程的Activity的生命周期方法，这里就不在多述了，这个过程如下：</p><img src="/2019/10/21/%E4%BD%BF%E7%94%A8AIDL%E6%9D%A5%E8%BF%9B%E8%A1%8C%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/aidl6.png" class="" title="aidl"><p>主要是通过这个例子说明，学习完AIDL后，能够帮助我们更好的理解系统源码有关跨进程的一些术语，类等，通过AIDL也能更好的加深我们对Android进程间通信的原理的理解，也掌握了一种进程间通信的方式。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文简单的介绍了一下Android几种进程间通信的方式，然后通过SDK自动生成AIDL代码来理解了一下生成的代码中各个类的作用和关系，还根据自动生成AIDL代码来手动实现了一遍简单的跨进程通信，加深理解，掌握了一些基础AIDL知识，可能会有些不全面，但是足够基本使用，想要了解更全面的AIDL知识，最好的途径还是参阅官方文档：<a href="https://developer.android.google.cn/guide/components/aidl#Defining" target="_blank" rel="noopener">Android 接口定义语言 (AIDL)</a></p><p><a href="https://github.com/rain9155/AndroidDemo/tree/master/app/src/main/java/com/example/androiddemo/ipc/aidl" target="_blank" rel="noopener">本文源码地址</a></p><p>参考资料：</p><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0204/2410.html" target="_blank" rel="noopener">Android系统中Parcelable和Serializable的区别</a></p><p><a href="https://blog.csdn.net/tkwxty/article/details/108343847" target="_blank" rel="noopener">Android Binder框架实现之何为匿名/实名Binder</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;AIDL它是Android众多进程间通信方式中的一种，底层是Binder机制的实现，所以想要读懂AIDL自动生成的代码中各个类的作用，就必须对Binder有一定的了解，其实不止AIDL，Android进程间通信的大多数方式的底层都是Binder机制，本文主要介绍AIDL的使用，所以不会介绍Binder机制的原理，关于Binder机制的原理，我推荐下面的一篇文章，零基础也能看懂：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/35519585&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;写给 Android 应用工程师的 Binder 原理剖析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;看完上面的文章你也就能对Binder原理的实现有大概的了解，对于我们Android应用开发也就足够了，如果你还不满足，想从底层和源码了解Binder机制，你可以阅读下面的两个链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/universus/article/details/6211589#commentBox&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android Bander设计与实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://gityuan.com/2015/10/31/binder-prepare/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Binder系列—开篇&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上面两个系列就是从设计和源码的角度去解读Binder，有点深入。好了，对Binder有一个大体上的认识后，接下来我们就要通过AIDL的使用来完成Android进程间通信的实践。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="IPC" scheme="http://yoursite.com/tags/IPC/"/>
    
      <category term="AIDL" scheme="http://yoursite.com/tags/AIDL/"/>
    
  </entry>
  
  <entry>
    <title>策略模式</title>
    <link href="http://yoursite.com/2019/10/19/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/10/19/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-10-19T14:56:38.000Z</published>
    <updated>2023-01-07T10:44:49.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在开发中也经常遇到这种情况，实现某一个功能往往有许多算法或者策略，我们在实际开发中选择不同的算法或策略来完成该功能。一般的情况是我们会把所有的算法或策略写入一个类中，通过if…else…或case语句来根据实际情况来选择具体算法或策略，但是这种方法会使这个类臃肿，维护难，当增加一种算法或策略时又要修改源代码，违反了面向对象的单一原则和开闭原则。如果将这些算法或者策略抽象出来，提供一个统一的接口，不同的算法或策略有不同的实现类，在实际使用时通过动态注入来实现算法或策略的替换，这种模式扩展性高，维护性好，也就是本次所说的策略模式。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>策略模式定义了一系列的算法，并将每一个算法封装起来，而且使它们相互可以替换。让算法独立于客户端变化。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>（1）需要安全的封装多种同一类型的操作时</p><p>（2）出现同一抽象类有多个子类，而又需要使用if..else..或case语句来选择具体子类时</p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><img src="/2019/10/19/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/desgin1.png" class="" title="desgin"><p>角色介绍：</p><ul><li>Context - 用来操作策略的上下文环境</li><li>Stragety - 策略的抽象</li><li>ConcreteStragetyA、B - 具体的策略实现</li></ul><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><p>我们在写代码时经常会遇到对一个数组排序，排序的算法有很多比如插入排序，归并排序，冒泡排序等，我们在实际开发中要选择一种算法来对数组排序，一般情况下我们会这样写:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INSERT_SORT = <span class="number">0</span>;<span class="comment">//插入排序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MERGE_SORT = <span class="number">1</span>;<span class="comment">//归并排序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUBBLE_SORT = <span class="number">2</span>;<span class="comment">//冒泡排序</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Client client = <span class="keyword">new</span> Client();</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        client.show(a, INSERT_SORT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示结果</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(type == INSERT_SORT)&#123;</span><br><span class="line">            insetSort(a);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (type == MERGE_SORT)&#123;</span><br><span class="line">            mergeSort(a);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (type == BUBBLE_SORT)&#123;</span><br><span class="line">            bubbleSort(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> b : a)&#123;</span><br><span class="line">            System.out.print(b + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入排序算法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insetSort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">        <span class="comment">//TODO...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//归并排序算法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">        <span class="comment">//TODO...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//冒泡排序算法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">        <span class="comment">//TODO...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里并不是讨论算法，就没有给出算法的具体实现，上面我们使用type类型通过if…else…语句来动态决定使用哪一种排序算法，当我们增加一种算法时，就要在函数中增加一个判断，以此类推，这样会使代码变得臃肿，一改很多处都要改。下面用策略模式进行重构，首先定义一个抽象的排序接口。</p><p>抽象的排序接口，即抽象策略角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sort</span></span>&#123;</span><br><span class="line">     &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体策略实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> <span class="keyword">implements</span> <span class="title">Sort</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里实现冒泡排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span> <span class="keyword">implements</span> <span class="title">Sort</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里实现插入排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> <span class="keyword">implements</span> <span class="title">Sort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里实现归并排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端，用来操作策略的上下文环境，即Context角色。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  Sort mSort;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Client client = <span class="keyword">new</span> Client();</span><br><span class="line">        <span class="comment">//设置策略</span></span><br><span class="line">        Sort bubbleSort = <span class="keyword">new</span> BubbleSort();</span><br><span class="line">        client.setmSort(bubbleSort);</span><br><span class="line">        Integer[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        client.show(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setmSort</span><span class="params">(Sort mSort)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mSort = mSort;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Integer[] a)</span></span>&#123;</span><br><span class="line">        mSort.sort(a);</span><br><span class="line">        <span class="keyword">for</span>(Integer b : a)&#123;</span><br><span class="line">            System.out.print(b + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述实例可以清晰的看出两者的区别，前面说通过if..else语句来解决问题，而后者是通过建立抽象，将不同的算法构建成一个个具体的策略实现，通过不同的策略注入实现算法替换。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>策略模式主要用来分离算法，在简化逻辑结构的同时，增强了系统的可读性，稳定性，可扩展性，这对于复杂的业务逻辑显得更为直观，通过建立抽象，注入不同实现，从而达到很好的扩展性。</p><p><a href="https://github.com/rain9155/DesignPatternDemo/tree/master/src/com/example/hy/designpatternDemo/stragety" target="_blank" rel="noopener">本文源码相关位置</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;在开发中也经常遇到这种情况，实现某一个功能往往有许多算法或者策略，我们在实际开发中选择不同的算法或策略来完成该功能。一般的情况是我们会把所有
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>静态和动态代理模式</title>
    <link href="http://yoursite.com/2019/10/15/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/10/15/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-10-15T12:05:03.000Z</published>
    <updated>2023-01-07T10:44:48.968Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>代理模式，也称委托模式，是结构型设计模式之一，何为代理呢? 在日常生活中就比如叫朋友替你拿个快递，叫朋友替你做一下作业，叫朋友替你买点东西等等，这个朋友就是你的代理，你把事情委托你的朋友做了，同样在代码的世界中也存在代理，而且在你以后阅读到更多的设计模式时，你会发现很多的设计模式中也有代理模式的影子，代理模式是一个非常重要的设计模式，代理模式分为静态代理和动态代理，本文将会通过一个简单的例子讲解静态代理，然后引出动态代理，并且深入的探讨一下动态代理的实现原理。</p><h2 id="代理模式的定义"><a href="#代理模式的定义" class="headerlink" title="代理模式的定义"></a>代理模式的定义</h2><p>为其他对象提供一种代理以控制这个对象的访问。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>静态代理和动态代理都适用于以下场景：</p><p>1、当不想访问某个对象或访问某个对象存在困难时，就可以为这个对象创建一个代理，通过代理来间接的访问这个对象；</p><p>2、如果原始对象有不同的访问权限，可以使用代理控制对原始对象的访问，保护原始对象；</p><p>3、在访问原始对象时执行一些自己的附加操作；</p><p>4、为某个对象在不同的内存地址空间提供局部代理，使得系统可以将服务端的实现隐藏，客户端不必考虑服务端的存在，例如Android中的Binder。</p><p>下面先简单的讲解一下静态代理。</p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><h3 id="1、类图"><a href="#1、类图" class="headerlink" title="1、类图"></a>1、类图</h3><img src="/2019/10/15/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/design1.png" class="" title="design"><p>角色介绍:</p><ul><li>Subject — <strong>抽象主题类</strong>，定义了代理对象和真实对象的共同接口方法，既可以是接口也可以是抽象类。</li><li>RealSubject — <strong>真实主题类</strong>，该类可以被称为被委托类或被代理类，该类定义了代理对象所表示的真实对象，实现了Subject接口，而Client端通过代理类间接的调用的真实主题类中的方法，由其执行真正的业务逻辑。</li><li>ProxySubject — <strong>代理类</strong>，该类也被称为委托类或代理类，该类中持有一个真实主题类的引用，同样实现了Subject接口，在其实现的接口方法中调用真实主题类中相应的接口方法，以此起到代理的作用。</li><li>Client — 客户端，使用代理。</li></ul><p>这个类图就是静态代理的结构，在下面小明通过中介租房的例子中会有体现这几个角色的作用，而动态代理的类图结构与静态代理的稍有不同，将会在动态代理那里讲到，但动态代理和静态代理的整体思想是相同的，我们还需要注意一下下面会提到的一些近义词：</p><p>Subject = 公共接口；</p><p>ProxySubject =  代理对象 = 代理类 = 委托类 = 代理人；</p><p>RealSubject = 真实对象 = 被代理类 = 被委托类  = 被代理人；</p><p>在根据不同的上下文时我会用不同的词表示Subject 、ProxySubject 和 RealSubject，还有委托和代理这个两个动词要根据上下文含义理解。</p><h3 id="2、使用静态代理"><a href="#2、使用静态代理" class="headerlink" title="2、使用静态代理"></a>2、使用静态代理</h3><p>使用静态代理的基本步骤：</p><p>1、定义代理对象和真实对象的公共接口；</p><p>2、真实对象实现公共接口中的方法；</p><p>3、代理对象实现公共接口中的方法，并把方法的逻辑转发给真实对象。</p><p>我们通过小明买房的这个例子来讲解静态代理，小明想要在大城市租房，但是他平时很忙没有时间去看房，于是他就找到一个房产中介，把自己的租房意愿告诉房产中介，让房产中介来替自己解决租房问题，很明显房产中介就是代理人，小明就是被代理的人。</p><p>我们用静态代理来实现这个过程，首先定义一个租房步骤的公共接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//租房步骤公共接口，即Subject角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IRoom</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">seekRoom</span><span class="params">()</span></span>;<span class="comment">//找房</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">watchRoom</span><span class="params">()</span></span>;<span class="comment">//看房</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">room</span><span class="params">()</span></span>;<span class="comment">//给钱租房</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">finish</span><span class="params">()</span></span>;<span class="comment">//完成租房</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4个步骤完成租房，很简单，然后我们定义具体的想要租房的人即小明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被代理人，想要租房的小明，即RealSubject角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoMing</span> <span class="keyword">implements</span> <span class="title">IRoom</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seekRoom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"找房"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchRoom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"看房"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">room</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"给钱租房"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"完成租房"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该类实现了IRoom接口，实现了其中的具体逻辑，但是小明并不会自己去打租房，他<strong>委托</strong>房产中介去做，所以这里定义一个房产中介：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代理人，房产中介，即ProxySubject角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoomAgency</span> <span class="keyword">implements</span> <span class="title">IRoom</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> IRoom mRoom;<span class="comment">//持有一个被代理人（小明）的引用</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoomAgency</span><span class="params">(IRoom room)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mRoom = room;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seekRoom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mRoom.seekRoom();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchRoom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mRoom.watchRoom();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">room</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mRoom.room();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mRoom.finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该类中会<strong>持有一个被代理人的引用</strong>，在这里指小明，可以看到房产中介所执行的方法的实质就是简单的调用被代理人中的方法，下面来看看Client中具体的执行关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端，即Client角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//小明想租房</span></span><br><span class="line">        XiaoMing xiaoMing = <span class="keyword">new</span> XiaoMing();</span><br><span class="line">        <span class="comment">//找一个代理人，房产中介</span></span><br><span class="line">        RoomAgency roomAgency = <span class="keyword">new</span> RoomAgency(xiaoMing);</span><br><span class="line">        <span class="comment">//房产中介找房</span></span><br><span class="line">roomAgency.watchRoom();</span><br><span class="line">        <span class="comment">//房产中介看房</span></span><br><span class="line">        roomAgency.seekRoom();</span><br><span class="line">        <span class="comment">//房产中介租房</span></span><br><span class="line">        roomAgency.room();</span><br><span class="line">        <span class="comment">//房产中介完成租房</span></span><br><span class="line">        roomAgency.finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">看房</span><br><span class="line">找房</span><br><span class="line">给钱租房</span><br><span class="line">完成租房</span><br></pre></td></tr></table></figure><p>上面就是傻瓜式的过程，一看就懂，房产中介<strong>代理</strong>了小明的找房、看房、租房等过程，可以看到静态代理模式还是很简单，就是一种委托机制，真实对象将方法委托给代理对象，那么房产中介继续代理其他人可以吗? 可以的，比如XiaoHong也想租房，我们再定义一个XiaoHong实现IRoom接口，并在Client中给房产中介RoomAgency代理就行。</p><h3 id="3、缺点"><a href="#3、缺点" class="headerlink" title="3、缺点"></a>3、缺点</h3><p>但是如果小明是想要买房而不是租房，这时房产中介还能满足小明的需求吗？很显然不能了，因为这个房产中介它只有替人租房的能力，没有替人买房的能力，这时就需要更换租房接口为买房接口，再定义一个专门买房的的房产中介，你会发现我每次更换接口，都需要更换代理类，这就是静态模式的缺点，<strong>只能为给定接口下的实现类做代理，如果接口不同就需要定义不同的代理类</strong>，随着系统的复杂度增加，就会很难维护这么多代理类和被代理类之间的关系，这时动态代理就应运而生，当需要频繁的更换接口，更换代理类时，采用动态代理是一个更好的选择，动态代理可以通过一个代理类来代理N多个被代理类，它在更换接口时，不需要重新定义代理类，因为动态代理<strong>不需要根据接口提前定义代理类，它把代理类的创建推迟到代码运行时来完成</strong>。</p><h3 id="4、与动态代理的区别"><a href="#4、与动态代理的区别" class="headerlink" title="4、与动态代理的区别"></a>4、与动态代理的区别</h3><p>我们先来复习一下class文件的加载，我们编写的.Java文件经过javac编译之后，会产生.class文件，这种.class文件是二进制文件，里面的内容是只有JVM能够识别，<strong>在代码运行之前</strong>，JVM会读取.class文件，解析.class文件内的信息，取出二进制数据，加载进内存中，从而生成对应的Class对象。</p><p>而静态代理和动态代理最主要的区别就是：静态代理在我们的<strong>代码运行之前</strong>，代理类的.class文件就已经存在，例如上述的RoomAgency.java，在经过javac编译之后，就会变成RoomAgency.class；而动态代理则与静态代理相反，在代码运行之前不存在代理类的.class文件，<strong>在代码运行时</strong>才动态的生成代理类。</p><p>下面来讲解动态代理，并通过动态代理重新实现一遍小明买房的例子。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><h3 id="1、类图-1"><a href="#1、类图-1" class="headerlink" title="1、类图"></a>1、类图</h3><img src="/2019/10/15/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/design2.png" class="" title="design"><p>这个就是动态代理的大概类图结构，其中Subject 、ProxySubject、 RealSubject和Client角色的作用和静态代理的一样，这里就不在累述，与静态代理相比，多了一个InvocationHandler角色和一个Proxy角色，InvocationHandler是java提供的一个接口，我们需要定义一个类实现InvocationHandler接口，这里就叫DynamicProxy角色；Proxy是java提供用于动态生成ProxySubject的一个类，它需要ProxySubject继承。</p><p>我们看到DynamicProxy在ProxySubject和RealSubject之前起到了中间人的角色，ProxySubject会把事情委托给DynamicProxy来做，而DynamicProxy最终把事情委托给RealSubject来做，可以这样说：ProxySubject代理了DynamicProxy，而DynamicProxy代理了RealSubject，其中最重要的一点是<strong>ProxySubject是在代码运行时才动态生成</strong>的，这是和静态代理的最大区别。</p><p>接下来简单介绍一下InvocationHandler接口和Proxy类。</p><h3 id="1、InvocationHandler和Proxy的作用"><a href="#1、InvocationHandler和Proxy的作用" class="headerlink" title="1、InvocationHandler和Proxy的作用"></a>1、InvocationHandler和Proxy的作用</h3><p>为了让我们更加容易的实现动态代理，java提供了动态代理接口InvocationHandler和动态代理类Proxy供我们使用，它们都在java.lang.reflect包中，可见动态代理和反射有不可逃脱的关系。</p><p>InvocationHandler接口 定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 这个方法的含义是：代理对象proxy要调用真实对象的method</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> proxy 代理对象</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> method 真实对象被调用的方法</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args 被调用的方法的参数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args）<span class="keyword">throws</span> Throwable;</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span></span></span><br></pre></td></tr></table></figure><p>InvocationHandler接口的作用就是在invoke方法中<strong>执行真实对象的方法</strong>，可以看到里面只有一个invoke方法，我们需要为真实对象定义一个实现了这个接口中的invoke方法的动态代理类，同时在创建这个动态代理类的实例的时候，我们还要在方法或构造中传入真实对象的引用，即InvocationHandler的实现类需要持有真实对象的引用，这样才能执行真实对象的方法。</p><p>Proxy类定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> InvocationHandler h;<span class="comment">//持有一个InvocationHandler类型的引用</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Proxy</span><span class="params">(InvocationHandler h)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.h = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据指定的类加载器和接口来获取代理对象的Class对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; getProxyClass(ClassLoader loader, Class... interfaces) <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据指定的类加载器和接口生成代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Proxy这个类的作用就是用来<strong>动态的创建一个代理对象</strong>，它内部会持有一个InvocationHandler引用，在构造中传入，它公开了<strong>getProxyClass</strong>方法和<strong>newProxyInstance</strong>方法：</p><ul><li><strong>getProxyClass</strong>（重点方法）：这个方法的作用是在运行时根据.class的结构生成一个代理Class二进制流，并通过传入的ClassLoader去把代理Class二进制流加载成一个代理Class对象，该代理Class对象继承Proxy并实现了传入的第二个参数对应的Interface列表。</li><li><strong>newProxyInstance</strong> (常使用的方法)： 这个方法的作用是在运行时根据代理Class对象生成代理对象实例，这个方法中会先调用了<strong>getProxyClass</strong>方法生成代理Class对象，在获取到代理Class对象后，通过反射创建代理对象实例并在构造中传入InvocationHandler实例，所以newProxyInstance最终的结果是生成一个代理对象实例，该代理对象会继承Proxy类并实现给定的接口列表，同时内部持有一个InvocationHandler引用。</li></ul><p>以上两个方法过程现在看不懂不要紧，下面在讲解动态代理的源码分析时还会再分析一遍，我们通常会使用Proxy的newProxyInstance方法来生成一个代理对象实例。</p><h3 id="3、使用动态代理"><a href="#3、使用动态代理" class="headerlink" title="3、使用动态代理"></a>3、使用动态代理</h3><p>使用动态代理的基本步骤如下：</p><p>1、定义代理对象和真实对象的公共接口；（与静态代理步骤相同）</p><p>2、真实对象实现公共接口中的方法；（与静态代理步骤相同）</p><p>3、定义一个实现了InvocationHandler接口的动态代理类；</p><p>4、通过Proxy类的newProxyInstance方法创建代理对象，调用代理对象的方法。</p><p>1和2步骤都是和静态代理步骤相同的，就不在累述了，和静态代理相比，少了的一个步骤是：代理对象实现公共接口的方法，因为前面讲过代理对象是代码运行时通过Proxy动态创建的，所以不需要提前编写代理对象的类；和静态代理相比，多了的两个步骤是：3、定义一个实现了InvocationHandler接口的动态代理类和4、通过Proxy类的newProxyInstance方法创建代理对象，调用代理对象的方法，我们接着静态代理的小明买房的例子，下面分别讲解：</p><p>步骤3：我们需要定义一个动态代理类，它用于执行真实对象的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现了InvocationHandler接口的动态代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object mObject;<span class="comment">//真实对象的引用</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxy</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mObject = object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//通过反射调用真实对象的方法</span></span><br><span class="line">        Object result = method.invoke(mObject, args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该类中，我们声明了一个Object引用，该引用指向真实对象，真实对象在构造函数中传入，而在invoke方法中通过反射调用真实对象的具体方法，这里需要注意的是指向真实对象的引用类型最好定义为Objec类型而不是真实对象的具体类型如XiaoMing，这样做的好处是，当你要代理另外一个人时，例如xiaoHong，我在DynamicProxy的构造函数中只需要传入xiaoHong引用而不用更改DynamicProxy的类结构，这样一个DynamicProxy就可以代理很多人。</p><p>接着步骤4：通过Proxy类newProxyInstance方法创建代理对象，调用代理对象的方法，下面是Client端逻辑:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//构造一个小明</span></span><br><span class="line">        IRoom xiaoMing = <span class="keyword">new</span> XiaoMing();</span><br><span class="line">        <span class="comment">//构造一个动态代理</span></span><br><span class="line">        InvocationHandler dynamicProxy = <span class="keyword">new</span> DynamicProxy(xiaoMing);</span><br><span class="line">        <span class="comment">//获取被代理类小明的ClassLoader</span></span><br><span class="line">        ClassLoader classLoader = xiaoMing.getClass().getClassLoader();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1、通过Proxy类的newProxyInstance方法动态构造一个代理人房产中介</span></span><br><span class="line">        IRoom roomAgency = (IRoom) Proxy.newProxyInstance(classLoader, <span class="keyword">new</span> Class[]&#123;IRoom<span class="class">.<span class="keyword">class</span>&#125;, <span class="title">dynamicProxy</span>)</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用代理对象的方法</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//房产中介找房</span></span><br><span class="line">        roomAgency.watchRoom();</span><br><span class="line">        <span class="comment">//房产中介看房</span></span><br><span class="line">        roomAgency.seekRoom();</span><br><span class="line">        <span class="comment">//房产中介租房</span></span><br><span class="line">        roomAgency.room();</span><br><span class="line">        <span class="comment">//房产中介完成租房</span></span><br><span class="line">        roomAgency.finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果和前面的静态代理一致，就不再贴出，在介绍Proxy时讲过，Proxy的newProxyInstance方法会根据传入的类加载器动态生成代理对象实例，生成的代理对象会继承Proxy类并实现传入的接口列表，这里的类加载器是小明的ClassLoader，即真实对象的类加载器，而接口列表则是IRoom，所以传入了IRoom的Class对象，除了这个两个参数，还传入了动态代理类InvocationHandler实例，这样Proxy类在创建代理对象的实例时就会把这个InvocationHandler引用传给代理对象，接下来<strong>当我们调用代理对象的方法时，这个方法的处理逻辑就会委托给InvocationHandler实例的invoke方法执行，invoke方法中就会通过反射调用我们真实对象的方法</strong>。</p><p>下面我们通过源码看一下是怎样生成代理对象以及生成的代理对象是长什么样的。</p><h3 id="4、源码分析"><a href="#4、源码分析" class="headerlink" title="4、源码分析"></a>4、源码分析</h3><p>源码分析基于JDK 1.8版本，我们看Client的注释1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、通过Proxy类的newProxyInstance方法动态构造一个代理人房产中介</span></span><br><span class="line">IRoom roomAgency = (IRoom) Proxy.newProxyInstance(classLoader, <span class="keyword">new</span> Class[]&#123;IRoom<span class="class">.<span class="keyword">class</span>&#125;, <span class="title">dynamicProxy</span>)</span>;</span><br></pre></td></tr></table></figure><p>我们先看Client的注释1，Proxy的newProxyInstance方法会根据传入的类加载器动态生成代理对象实例，我们点进Proxy的newProxyInstance方法看一下，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Proxy.java </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Class&lt;?&gt;[] constructorParams = &#123; InvocationHandler<span class="class">.<span class="keyword">class</span> &#125;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span> <span class="keyword">throws</span> IllegalArgumentException</span>&#123;</span><br><span class="line">    Objects.requireNonNull(h);</span><br><span class="line"></span><br><span class="line"><span class="comment">//clone一下传入的接口列表</span></span><br><span class="line">    <span class="keyword">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//getProxyClass会把逻辑转发给getProxyClass0，所以getProxyClass的作用 = getProxyClass0的作用，它们的区别只是一个是public，一个是private的</span></span><br><span class="line">    <span class="comment">//1、调用getProxyClass0，获得一个代理Class对象</span></span><br><span class="line">    Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//constructorParams = InvocationHandler.class</span></span><br><span class="line">        <span class="comment">//2、这里通过代理Class对象获取构造参数为InvocationHandler的Constructor</span></span><br><span class="line">        <span class="keyword">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//传入的InvocationHandler引用</span></span><br><span class="line">        <span class="keyword">final</span> InvocationHandler ih = h;</span><br><span class="line">        <span class="comment">//这个Constructor是protected的，所以要设置为Public</span></span><br><span class="line">        <span class="keyword">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class="line">            cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3、通过构造参数为InvocationHandler的Constructor反射创建代理对象实例，并传入InvocationHandler引用给构造</span></span><br><span class="line">        <span class="keyword">return</span> cons.newInstance(<span class="keyword">new</span> Object[]&#123;h&#125;);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//...省略异常处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法里面的流程还是很简单的，首先注释1，调用<strong>getProxyClass0</strong>方法，获得一个代理Class对象，getProxyClass0等于前面讲过的getProxyClass的作用，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; getProxyClass(ClassLoader loader, Class&lt;?&gt;... interfaces) <span class="keyword">throws</span> IllegalArgumentException&#123;</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">     <span class="comment">//getProxyClass里面最终是调用了getProxyClass0</span></span><br><span class="line">     <span class="keyword">return</span> getProxyClass0(loader, interfaces);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; getProxyClass0(ClassLoader loader, Class&lt;?&gt;... interfaces) &#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//proxyClassCache是WeakCache类型，是用来缓存代理Class对象，如果loader和interfaces对应的代理Class对象已经加载过，那么就直接返回缓存的，否则就通过ProxyClassFactory的apply方法生成一个新的代理Class对象并缓存返回</span></span><br><span class="line">    <span class="keyword">return</span> proxyClassCache.get(loader, interfaces);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//缓存代理Class对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> WeakCache&lt;ClassLoader, Class&lt;?&gt;[], Class&lt;?&gt;&gt; proxyClassCache = <span class="keyword">new</span> WeakCache&lt;&gt;(<span class="keyword">new</span> KeyFactory(), <span class="keyword">new</span> ProxyClassFactory());</span><br></pre></td></tr></table></figure><p>可以看到，getProxyClass里面也是简单的调用getProxyClass0方法，而getProxyClass0方法中会去类型为WeakCache的<strong>proxyClassCache</strong>缓存中查找通过loader加载并实现了interfaces接口的代理Class对象，如果没有，就通过ProxyClassFactory的<strong>apply</strong>方法生成一个新的代理Class对象，这个新的代理Class对象会使用loader加载并实现了interfaces接口，ProxyClassFactory的apply方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">private static final class ProxyClassFactory implements BiFunction&lt;ClassLoader, Class&lt;?&gt;[], Class&lt;?&gt;&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//生成的代理Class类的名字前缀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String proxyClassNamePrefix = <span class="string">"$Proxy"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成的代理Class类的名字唯一序号，自增</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicLong nextUniqueNumber = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; apply(ClassLoader loader, Class&lt;?&gt;[] interfaces) &#123;</span><br><span class="line">        <span class="comment">//1、遍历interfaces，校验interface是否合法</span></span><br><span class="line">        Map&lt;Class&lt;?&gt;, Boolean&gt; interfaceSet = <span class="keyword">new</span> IdentityHashMap&lt;&gt;(interfaces.length);</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">            <span class="comment">//校验loader是否可以加载这个interface</span></span><br><span class="line">            Class&lt;?&gt; interfaceClass = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                interfaceClass = Class.forName(intf.getName(), <span class="keyword">false</span>, loader);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (interfaceClass != intf) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    intf + <span class="string">" is not visible from class loader"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="comment">//校验这个interface是否真的是一个接口</span></span><br><span class="line">            <span class="keyword">if</span> (!interfaceClass.isInterface()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    interfaceClass.getName() + <span class="string">" is not an interface"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//校验这个interface是否重复</span></span><br><span class="line">            <span class="keyword">if</span> (interfaceSet.put(interfaceClass, Boolean.TRUE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">"repeated interface: "</span> + interfaceClass.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、根据规则生成代理Class类的名字</span></span><br><span class="line">        String proxyPkg = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> accessFlags = Modifier.PUBLIC | Modifier.FINAL;</span><br><span class="line">        <span class="comment">//记录interfaces是否有private的</span></span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">            <span class="keyword">int</span> flags = intf.getModifiers();</span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isPublic(flags)) &#123;</span><br><span class="line">                accessFlags = Modifier.FINAL;</span><br><span class="line">                String name = intf.getName();</span><br><span class="line">                <span class="keyword">int</span> n = name.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line">                String pkg = ((n == -<span class="number">1</span>) ? <span class="string">""</span> : name.substring(<span class="number">0</span>, n + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;<span class="comment">//如果有interface为private的，记录它的包名</span></span><br><span class="line">                    proxyPkg = pkg;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!pkg.equals(proxyPkg)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                        <span class="string">"non-public interfaces from different packages"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果proxyPkg为空，说明所有的interfaces都为public，这时记录包名为com.sun.proxy</span></span><br><span class="line">        <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//PROXY_PACKAGE的值为com.sun.proxy</span></span><br><span class="line">            proxyPkg = ReflectUtil.PROXY_PACKAGE + <span class="string">"."</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> num = nextUniqueNumber.getAndIncrement();</span><br><span class="line">        <span class="comment">//代理class类的名字，由proxyPkg、.、$Proxy、数字拼接而成</span></span><br><span class="line">        String proxyName = proxyPkg + proxyClassNamePrefix + num;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、通过ProxyGenerator的generateProxyClass方法生成代理Class类的二进制流</span></span><br><span class="line">        <span class="keyword">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(proxyName, interfaces, accessFlags);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//4、最终通过defineClass0方法使用loader把代理Class类加载进JVM</span></span><br><span class="line">            <span class="keyword">return</span> defineClass0(loader, proxyName, proxyClassFile, <span class="number">0</span>, proxyClassFile.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassFormatError e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ProxyClassFactory的apply方法中首先会校验<strong>interfaces</strong>是否合法，然后根据interfaces的访问修饰符生成代理Class类的名字，如果interfaces都是public的，那么就会使用<strong>com.sun.proxy</strong>作为代理Class类的包名，如果interfaces含有private的接口，那么就会使用<strong>private接口的包名</strong>作为代理Class类的包名，然后再把包名拼接上<strong>$Proxy和数字</strong>作为代理Class类的名字，最后通过ProxyGenerator的<strong>generateProxyClass</strong>方法生成代理Class类的二进制流，这个代理Class类继承自Proxy并实现了Interfaces接口，然后通过<strong>defineClass0</strong>方法使用<strong>loader</strong>把代理Class类二进制流加载进JVM，defineClass0方法是一个native方法，它的作用就和ClassLoader中的<strong>defineClass</strong>方法类似：把Class类二进制流加载进JVM成为Class对象。</p><p>在通过ProxyGenerator的generateProxyClass方法生成代理Class类的二进制流时，有个<strong>saveGeneratedFiles</strong>字段，可以把生成的代理Class类保存一份到磁盘中，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyGenerator</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//属性为sun.misc.ProxyGenerator.saveGeneratedFiles</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">boolean</span> saveGeneratedFiles = java.security.AccessController.doPrivileged(<span class="keyword">new</span> GetBooleanAction(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>)).booleanValue();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] generateProxyClass(<span class="keyword">final</span> String name, Class&lt;?&gt;[] interfaces, <span class="keyword">int</span> accessFlags) &#123;</span><br><span class="line">        ProxyGenerator gen = <span class="keyword">new</span> ProxyGenerator(name, interfaces, accessFlags);</span><br><span class="line">        <span class="comment">//通过ProxyGenerator的generateClassFile生成Class类的二进制流</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] classFile = gen.generateClassFile();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果saveGeneratedFiles为true，就把Class类的二进制流保存一份到磁盘中</span></span><br><span class="line">        <span class="keyword">if</span> (saveGeneratedFiles) &#123;</span><br><span class="line">            java.security.AccessController.doPrivileged(</span><br><span class="line">            <span class="keyword">new</span> java.security.PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> i = name.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line">                        Path path;</span><br><span class="line">                        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            Path dir = Paths.get(name.substring(<span class="number">0</span>, i).replace(<span class="string">'.'</span>, File.separatorChar));</span><br><span class="line">                            Files.createDirectories(dir);</span><br><span class="line">                            path = dir.resolve(name.substring(i+<span class="number">1</span>, name.length()) + <span class="string">".class"</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            path = Paths.get(name + <span class="string">".class"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        Files.write(path, classFile);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(</span><br><span class="line">                            <span class="string">"I/O exception saving generated file: "</span> + e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> classFile;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果大家想知道代理类的Class文件生成过程细节，可以看ProxyGenerator的<strong>generateClassFile</strong>方法，这里就不展开了，而saveGeneratedFiles的对应值为<strong>sun.misc.ProxyGenerator.saveGeneratedFiles</strong>属性的值，我们可以设置这个属性值为true来查看动态生成的代理Class类。</p><p>接下来我们来看一下Client中动态生成的代理Class对象的真实面目，首先在Client的<strong>main函数的开头</strong>填入下面的一代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.getProperties().put(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>, <span class="string">"true"</span>);</span><br></pre></td></tr></table></figure><p>由于IRoom接口是一个public接口，所以运行Client的main函数就会在的idea工作空间下的<strong>com/sun/proxy</strong>目录下生成一个<strong>$Proxy0.class</strong>文件，这个$Proxy0.class就是动态生成的代理Class对象，如下：</p><p>这个.class文件里面都是JVM才能看懂的二进制，用idea打开，它会自动替你反编译成.java文件，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">IRoom</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Method m5;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Method m6;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//调用父类Proxy的构造函数，传入InvocationHandler引用</span></span><br><span class="line">  <span class="keyword">public</span> $Proxy0(InvocationHandler paramInvocationHandler)&#123;</span><br><span class="line">      <span class="keyword">super</span>(paramInvocationHandler);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//下面四个方法都是实现自IRoom的方法，可以看到它们只是简单的调用了父类的h的invoke方法，并把代理对象 $Proxy0实例、要调用的方法method，还有参数传了进去</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">watchRoom</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m3, <span class="keyword">null</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...省略异常处理</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">room</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m4, <span class="keyword">null</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...省略异常处理</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">seekRoom</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m5, <span class="keyword">null</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...省略异常处理</span></span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">      </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m6, <span class="keyword">null</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...省略异常处理</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"> <span class="comment">//...我们只关注IRoom接口中的方法，所以我省略了Object中继承而来的toSting，hashcode方法等，里面逻辑都一样，都是调用父类的h的invoke方法</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">      m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, <span class="keyword">new</span> Class[] &#123; Class.forName(<span class="string">"java.lang.Object"</span>) &#125;);</span><br><span class="line">      m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">      <span class="comment">//获取IRoom接口方法的Method对象</span></span><br><span class="line">      m3 = Class.forName(<span class="string">"com.example.hy.designpatternDemo.proxy.IRoom"</span>).getMethod(<span class="string">"watchRoom"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">      m4 = Class.forName(<span class="string">"com.example.hy.designpatternDemo.proxy.IRoom"</span>).getMethod(<span class="string">"room"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">      m5 = Class.forName(<span class="string">"com.example.hy.designpatternDemo.proxy.IRoom"</span>).getMethod(<span class="string">"seekRoom"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">      m6 = Class.forName(<span class="string">"com.example.hy.designpatternDemo.proxy.IRoom"</span>).getMethod(<span class="string">"finish"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...省略异常处理</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了阅读方便，我省略了无关代码，可以看到Proxy类的getProxyClass0方法会替我们动态生成代理对象$Proxy0.class，这个代理对象会继承Proxy类和实现接口列表，而这里传入的接口只有IRoom，所以$Proxy0只会实现IRoom的方法，这些方法里面的逻辑都是调用父类的h的invoke方法，父类的h就是InvocationHandler引用，我们回去看newProxyInstance方法的注释2和3，你就会发现这个InvocationHandler引用是在通过反射创建$Proxy0实例时在构造中传入的。</p><p>我们在$Proxy0中还发现了很多Method对象，在$Proxy0的底部的static块中通过反射获取到我们IRoom接口所有方法的Method对象，当我们调用某个方法时，相应方法的method和代理对象$Proxy0实例、还有方法参数一起传进了父类的h的invoke方法中，所以我们在invoke方法中就可以根据method通过反射调用真实对象的相应方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现了InvocationHandler接口的动态代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object mObject;<span class="comment">//真实对象的引用</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxy</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mObject = object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//通过反射调用真实对象的方法</span></span><br><span class="line">        Object result = method.invoke(mObject, args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们回到Client的注释1，所以当我们调用Proxy类的newProxyInstance方法，这个方法在里面创建了代理对象，并返回代理对象$Proxy0实例，所以<strong>当我们调用代理对象的方法时，我们就是在调用$Proxy0相应的方法，这个方法处理逻辑就会委托给InvocationHandler实例的invoke方法执行(代理对象的父类持有InvocationHandler引用)，invoke方法中就会通过反射调用我们真实对象的方法(InvocationHandler的实现类中持有真实对象的引用)</strong>，这就是整个动态代理的过程。</p><h3 id="5、原理"><a href="#5、原理" class="headerlink" title="5、原理"></a>5、原理</h3><p>通过使用和源码分析，相信大家对动态代理有一个更加深入的了解，动态代理的原理就是一个代理类文件的动态加载过程，由于JVM可以通过.class文件的二进制信息加载class对象的，那么如果我们<strong>在代码运行时</strong>，遵循.class文件的格式和结构，生成相应的二进制数据，然后再把这个二进制数据通过JVM加载成对应的class对象，有了class对象，我们就可以在运行时通过反射创建出代理对象的实例，这样就完成了在代码运行时，动态的创建一个代理对象的能力，这就是动态代理的原理。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在静态代理模式中，代理类ProxySubject中的方法，都指定地调用了特定ReadSubject对应的方法；而在动态代理模式中，代理类ProxySubject中每一个方法的调用，都会交给InvocationHandler来处理，而InvocationHandler则调用了RealSubject的方法，以上就是我对静态代理和动态代理的理解，下面用一张表总结本文：</p><table><thead><tr><th></th><th>优点</th><th>缺点</th><th>区别</th></tr></thead><tbody><tr><td>静态代理</td><td>1、代理类作为客户端和被代理类之间的中介，起到了保护被代理类的作用<br/>2、通过接口对代理类和被代理类进行解耦，降低了系统的耦合度</td><td>1、只能为给定接口下的实现类做代理，如果接口不一样那么就要重新定义不同的代理类，维护复杂<br/>2、由于在客户端和被代理类之间增加了代理对象，因此会造成请求的处理速度变慢</td><td>需要提前实现接口编写代理类，在代码运行之前，代理类的.class文件就已经存在</td></tr><tr><td>动态代理</td><td>1、代理类在程序运行时由反射自动生成，无需我们手动编写代理类代码，简化编程工作<br/>2、一个动态代理类InvocationHandler就能代理多个被代理类，较为灵活</td><td>1、动态代理只能代理实现了接口的类，而不能代理实现抽象类的类<br/>2、通过反射调用被代理类的方法，效率低</td><td>不需要提前实现接口编写代理类，在代码运行时，由JVM来动态的创建代理类</td></tr></tbody></table><p>代理模式应用广泛，在实际开发中要根据实际情况进行选择。</p><p><a href="https://github.com/rain9155/DesignPatternDemo/tree/master/src/com/example/hy/designpatternDemo/proxy" target="_blank" rel="noopener">本文源码位置</a></p><p>参考资料：</p><p><a href="https://mp.weixin.qq.com/s/7DfmeOSvsW6_ITox_-lXTQ" target="_blank" rel="noopener">JDK动态代理为什么必须要基于接口</a></p><p><a href="https://blog.csdn.net/carson_ho/article/details/80589878" target="_blank" rel="noopener">动态代理模式学习指南</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;代理模式，也称委托模式，是结构型设计模式之一，何为代理呢? 在日常生活中就比如叫朋友替你拿个快递，叫朋友替你做一下作业，叫朋友替你买点东西等
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="静态代理" scheme="http://yoursite.com/tags/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
      <category term="动态代理" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>从进程的角度看Android的系统架构</title>
    <link href="http://yoursite.com/2019/10/08/%E4%BB%8E%E8%BF%9B%E7%A8%8B%E7%9A%84%E8%A7%92%E5%BA%A6%E7%9C%8BAndroid%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    <id>http://yoursite.com/2019/10/08/%E4%BB%8E%E8%BF%9B%E7%A8%8B%E7%9A%84%E8%A7%92%E5%BA%A6%E7%9C%8BAndroid%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/</id>
    <published>2019-10-08T08:32:55.000Z</published>
    <updated>2023-01-07T10:44:48.962Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>上一篇文章<a href="https://blog.csdn.net/Rain_9155/article/details/82889613" target="_blank" rel="noopener">Android的系统架构概述</a></li></ul><p>上一篇文章从5个层次简述了Android的系统架构，那么这5个层次是怎么联系起来的呢？本文从进程的角度看Android的系统架构，简述一下Android系统启动的过程中，各大进程的启动顺序是如何的，本文并不会涉及到任何源码，只是为了让读者对Android的进程有个大概的了解。</p><a id="more"></a><p>先看一张图：</p><img src="/2019/10/08/%E4%BB%8E%E8%BF%9B%E7%A8%8B%E7%9A%84%E8%A7%92%E5%BA%A6%E7%9C%8BAndroid%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/android1.jpg" class="" title="android"><p>从这张图中可以找到Android官方给出的5个层次（Application、Framework（java）、库和运行时（native）、HAL、Kernel）的影子，java层与native层之间通过<strong>JNI调用</strong>打通，native层与kernel层通过<strong>Syscall调用</strong>打通。这个图就是你启动Android手机时Android系统的启动过程，下面从下到上分别介绍：</p><h2 id="1、系统启动（Loader）"><a href="#1、系统启动（Loader）" class="headerlink" title="1、系统启动（Loader）"></a>1、系统启动（Loader）</h2><p>长按电源键开机键：</p><h3 id="1-1-Boot-ROM"><a href="#1-1-Boot-ROM" class="headerlink" title="1.1 Boot ROM"></a>1.1 Boot ROM</h3><p>引导芯片代码固化在<strong>ROM</strong>中，当你长按电源键开机时，会引导引导芯片代码从预定义的代码处开始执行，然后加载引导程序Boot Loader到<strong>RAM</strong>中。</p><h3 id="1-2-Boot-Loader"><a href="#1-2-Boot-Loader" class="headerlink" title="1.2 Boot Loader"></a>1.2 Boot Loader</h3><p>Boot Loader是Android系统启动之前的引导程序，顾名思义，就是将系统拉起来并启动。</p><h2 id="2、Linux内核启动（Kernel）"><a href="#2、Linux内核启动（Kernel）" class="headerlink" title="2、Linux内核启动（Kernel）"></a>2、Linux内核启动（Kernel）</h2><p>然后就到了Linux内核启动，内核启动时就会启动两个进程 — swapper（pid=0），kthreadd（pid=2）：</p><h3 id="2-1、swapper（pid-0）"><a href="#2-1、swapper（pid-0）" class="headerlink" title="2.1、swapper（pid=0）"></a>2.1、swapper（pid=0）</h3><p>swapper进程又称idle进程， 是系统初始化过程Kernel由无到有开创的第一个进程, 用于初始化进程管理、内存管理，加载Display,Camera Driver，Binder Driver等相关工作。</p><h3 id="2-2、kthreadd（pid-2）"><a href="#2-2、kthreadd（pid-2）" class="headerlink" title="2.2、kthreadd（pid=2）"></a>2.2、kthreadd（pid=2）</h3><p>kthreadd是Linux系统的内核进程，是所有内核进程的鼻祖，会创建内核工作线程kworkder，软中断线程ksoftirqd，thermal等内核守护进程。</p><h2 id="3、init进程启动（Native）"><a href="#3、init进程启动（Native）" class="headerlink" title="3、init进程启动（Native）"></a>3、init进程启动（Native）</h2><p>init进程是Linux系统的用户进程，它的pid=1，是所有用户进程的鼻祖，它是由许多源码文件组成的，它对应的源码目录在/system/core/init中。init进程有许多重要的职责：</p><ul><li>孵化出许多用户空间的守护进程（ueventd、logd、healthd、installd、adbd、lmkd）</li><li>启动ServiceManager(binder服务管家)、bootanim(开机动画)等重要服务</li><li>孵化出Media Server进程，负责启动和管理整个C++ framework，包含AudioFlinger，Camera Service等服务。</li><li>孵化出Zygote进程</li></ul><h2 id="4、Zygote进程启动（Native-gt-java-Framework）"><a href="#4、Zygote进程启动（Native-gt-java-Framework）" class="headerlink" title="4、Zygote进程启动（Native -&gt; java Framework）"></a>4、Zygote进程启动（Native -&gt; java Framework）</h2><p>Zygote进程是Android系统的第一个Java进程(即虚拟机进程)，Zygote是所有Java进程的父进程，它是由init进程通过解析init.rc文件后fork生成的，Zygote的启动脚本放在/system/core/rootdir目录中。Zygote进程的职责主要有：</p><ul><li>创建JVM虚拟机，并为JVM注册JNI方法</li><li>响应AMS的请求去创建新的应用进程</li><li>孵化出SystemServer进程</li></ul><h2 id="5、SystemServer进程启动（java-Framework）"><a href="#5、SystemServer进程启动（java-Framework）" class="headerlink" title="5、SystemServer进程启动（java Framework）"></a>5、SystemServer进程启动（java Framework）</h2><p>SystemServer进程是Zygote孵化的第一个进程，负责创建系统服务如ActivityManagerService，WindowManagerService，PackageManagerService，InputManagerService等服务，和管理整个Java framework。SystemServer进程的职责主要有：</p><ul><li>创建Binder线程池，这样就可以与其他进程进行跨进程通信</li><li>启动SystemServiceManger，它用来对系统服务进行创建、管理和启动</li><li>通过SystemServiceManger启动各种系统服务：引导服务（如AMS，PMS），核心服务，其他服务（如WMS，IMS）</li></ul><h2 id="6、Launcher进程启动（Application）"><a href="#6、Launcher进程启动（Application）" class="headerlink" title="6、Launcher进程启动（Application）"></a>6、Launcher进程启动（Application）</h2><p>SystemServer进程启动的过程中会启动PMS和AMS，PMS会把系统中的应用程序安装完成，然后AMS会请求Zygote将Launcher启动起来，这就是用户看到的app桌面，然后Launcher会将已经安装了的应用的应用图标显示出来。Launcher进程是Zygote进程孵化出来的第一个App进程。<br>至此Android系统已经启动完毕，用户就可以点进桌面上的应用图标进入app，对于普通的app进程,跟SystemServer进程的启动过来有些类似，不同的是app进程是先发消息给SystemServer进程，由SystemServer向Zygote发出创建进程的请求，而SystemServer是由Zygote直接fork出来，前面已经说过Zygote是所有Java进程的父进程，SystemServer和所有的app进程都是由Zygote进程的子进程。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Android系统底层基于Linux Kernel, 当Kernel启动过程会创建init进程, 该进程是所有用户空间的鼻祖,<br>init进程会启动ServiceManager(binder服务管家)、Zygote进程(Java进程的鼻祖)，Zygote进程会创建<br>system_server进程以及各种app进程，下图是这几个系统重量级进程之间的层级关系。</p><img src="/2019/10/08/%E4%BB%8E%E8%BF%9B%E7%A8%8B%E7%9A%84%E8%A7%92%E5%BA%A6%E7%9C%8BAndroid%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/android2.png" class="" title="android"><p>从下而上，其中binder和socket都是Android中进程间的通信方式，而ServiceManager是binder服务的大管家，系统服务的binder实体都会注册到它身上。本文并没有深入的了解各个进程的启动，只是简单的让大家对Android系统主要的进程有个大概的了解，这样以后去研究相应的进程的源码时就会有个大概的方向。</p><p>参考资料：</p><p><a href="http://gityuan.com/2016/02/01/android-booting/" target="_blank" rel="noopener">Android系统启动-综述</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;上一篇文章&lt;a href=&quot;https://blog.csdn.net/Rain_9155/article/details/82889613&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android的系统架构概述&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上一篇文章从5个层次简述了Android的系统架构，那么这5个层次是怎么联系起来的呢？本文从进程的角度看Android的系统架构，简述一下Android系统启动的过程中，各大进程的启动顺序是如何的，本文并不会涉及到任何源码，只是为了让读者对Android的进程有个大概的了解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="进程" scheme="http://yoursite.com/tags/%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>工厂模式</title>
    <link href="http://yoursite.com/2019/09/07/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/09/07/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-09-07T11:47:08.000Z</published>
    <updated>2023-01-07T10:44:49.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>工厂方法模式是一种结构简单的模式，并且在我们的应用中很广泛，如Android中Activity的各个生命周期的回调，以onCreate方法为例，它就可以看做是一个工厂方法，我们在其中构造我们的View并返回给framework处理。</p><a id="more"></a><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>定义一个用于创建对象的接口，让子类决定实例化哪个类。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>在任何需要生成复杂对象的地方，都可以使用工厂方法模式。复杂对象适合使用工厂方法模式，用new就能完成创建的对象无需使用工厂方法模式。</p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p>角色介绍：</p><ul><li>Factory - 抽象工厂，是工厂方法的核心</li><li>ConcreteFactory - 具体工厂，实现了业务逻辑</li><li>Product - 抽象产品，是工厂方法模式所创建的产品的父类</li><li>ConcreteProduct - 为实现抽象产品的某个具体产品</li></ul><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><p>下面生产汽车为例，要生产三款汽车，于是使用一条生产线来生产，我们先定义产品，产品是汽车。</p><p>抽象汽车，即抽象产品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是具体的车型</p><p>奥迪汽车，即具体的产品类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudiCar</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"奥迪汽车开始启动啦！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>奔驰汽车，即具体的产品类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BenzCar</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"奔驰车开始启动啦！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>宝马汽车，即具体的产品类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BWMCar</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"宝马汽车开始启动啦！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了产品就要有工厂来生产，定义一个汽车抽象工厂。</p><p>抽象汽车工厂，即抽象工厂角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Car <span class="title">createCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是具体的车型工厂。</p><p>生产奥迪车的工厂，即具体工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudiCarFactory</span> <span class="keyword">extends</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">createCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AudiCar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产奔驰车的工厂，即具体工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BenzCarFactory</span> <span class="keyword">extends</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">createCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BenzCar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产宝马车的工厂，即具体工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BWMCarFactory</span> <span class="keyword">extends</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">createCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BWMCar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们将各个汽车的生产组装成一条生产线。</p><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//制造各个工厂</span></span><br><span class="line">        CarFactory audiFactory = <span class="keyword">new</span> AudiCarFactory();</span><br><span class="line">        CarFactory benzFactory = <span class="keyword">new</span> BenzCarFactory();</span><br><span class="line">        CarFactory bwmFactory = <span class="keyword">new</span> BWMCarFactory();</span><br><span class="line">        <span class="comment">//生产各种车</span></span><br><span class="line">        Car audiCar = audiFactory.createCar();</span><br><span class="line">        Car benzCar = benzFactory.createCar();</span><br><span class="line">        Car bwmCar = bwmFactory.createCar();</span><br><span class="line">        <span class="comment">//车启动</span></span><br><span class="line">        audiCar.drive();</span><br><span class="line">        benzCar.drive();</span><br><span class="line">        bwmCar.drive();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果:</span><br><span class="line">奥迪汽车开始启动啦！</span><br><span class="line">奔驰车开始启动啦！</span><br><span class="line">宝马汽车开始启动啦！</span><br></pre></td></tr></table></figure><p>可以看到我们需要哪种车型就可以定义哪种车型的具体工厂，像这样拥有多个工厂的的方式我们称之为多工厂模式，每个工厂各司其职。</p><p>但上面的方式不好的是会产生大量工厂，使代码臃肿，在实际开发中，我们可以使用反射的方式更加简洁的来生产具体的产品对象，此时需要在工厂方法的参数列表中传入一个Class类来决定是哪一个产品类。</p><p>使用反射的方式来生产具体的产品对象，抽象工厂角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象工厂方法，具体生产什么产品由子类决定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> &lt;T extends Car&gt; <span class="function">T <span class="title">createCar</span><span class="params">(Class&lt;T&gt; car)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 具体的工厂，则通过反射获取类的实例即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCarFactory</span> <span class="keyword">extends</span> <span class="title">CarFactory2</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T extends Car&gt; <span class="function">T <span class="title">createCar</span><span class="params">(Class&lt;T&gt; car)</span> </span>&#123;</span><br><span class="line">        Car c = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c = (T) Class.forName(car.getName()).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T) c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建工厂</span></span><br><span class="line">        CarFactory2 carFactory = <span class="keyword">new</span> ConcreteCarFactory2();</span><br><span class="line">        <span class="comment">//生产车</span></span><br><span class="line">        AudiCar audiCar = carFactory.createCar(AudiCar<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        BenzCar benzCar = carFactory.createCar(BenzCar<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        BWMCar bwmCar = carFactory.createCar(BWMCar<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//车启动</span></span><br><span class="line">        audiCar.drive();</span><br><span class="line">        benzCar.drive();</span><br><span class="line">        bwmCar.drive();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出和和上面一样，使用反射的方式，需要哪一个产品的对象，就传入哪一个产品的类的型即可，这种方式比较简洁，动态。</p><p>上面我们有三个工厂，如果我们只需要生产一种车型，即我们只有一个工厂时，我们就可以把抽象工厂简化掉，将对应的工厂方法改为静态方法，像下面，我们只生产一辆五菱车。</p><p>一个工厂，只生产一种产品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">createWuLingCar</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WuLingCar();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像这样的方式又称为简单工厂方式或静态工厂方式，它是工厂方式模式的一个弱化版本。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>工厂模式依赖于抽象的架构，将实例化的具体任务交给子类去完成，有非常好的扩展性。</p><p><a href="https://github.com/rain9155/DesignPatternDemo/tree/master/src/com/example/hy/designpatternDemo/factory" target="_blank" rel="noopener">本文源码相关位置</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;工厂方法模式是一种结构简单的模式，并且在我们的应用中很广泛，如Android中Activity的各个生命周期的回调，以onCreate方法为例，它就可以看做是一个工厂方法，我们在其中构造我们的View并返回给framework处理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Builder模式</title>
    <link href="http://yoursite.com/2019/09/07/Builder%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/09/07/Builder%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-09-07T11:35:25.000Z</published>
    <updated>2023-01-07T10:44:48.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Builder模式是一步步创建一个复杂对象的创建型模式，它允许用户在不知道内部构建细节的情况下，可以更加精准的控制对象的构造过程，为了在构建过程中，对外部隐藏实现细节，就可以使用Builder模式将部件和组装过程分离，使得构建过程和部件可以自由扩展，两者之间的耦合度也降到最低。</p><a id="more"></a><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>将一个复杂对象的构建和它的表示分离，使得同样的构建过程可以创建不同的表示。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>（1）相同的方法不同的执行顺序产生不同的事件结果时</p><p>（2）多个部件或零件，都可以装配到一个对象中，但是产生的运行结果又不同时</p><p>（3）产品类比较复杂或者产品类中的调用顺序不同产生不同的作用时</p><p>（4）当初始化一个对象非常复杂，如参数非常多，且很多参数都具有默认值时</p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><img src="/2019/09/07/Builder%E6%A8%A1%E5%BC%8F/design1.png" class="" title="design"><p>类图介绍：</p><ul><li>Produc - 产品的抽象类</li><li>Builder - 抽象的Builder类，规范产品的组建，一般由子类实现具体的组建过程</li><li>ConcreteBuilder - 具体的Builder类</li><li>Director - 统一组装过程</li></ul><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><p>计算机的组装过程比较复杂且组装顺序说不固定的，下面把计算机的组装过程简化为构建主机，设置操作系统，设置显示器3部分，然后通过Director和具体Builder来构建计算机对象。</p><p>计算机抽象类，即Product</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String mBroad;<span class="comment">//主板</span></span><br><span class="line">    <span class="keyword">protected</span> String mDisplay;<span class="comment">//显示器</span></span><br><span class="line">    <span class="keyword">protected</span> String mOS;<span class="comment">//操作系统</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Computer</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置主板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> broad</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setmBroad</span><span class="params">(String broad)</span></span>&#123;</span><br><span class="line">        mBroad = broad;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置显示器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> display</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setmDisplay</span><span class="params">(String display)</span></span>&#123;</span><br><span class="line">        mDisplay = display;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置操作系统</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setmOS</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Computer &#123;mBroad = "</span> + mBroad + <span class="string">", mDisplay = "</span> + mDisplay + <span class="string">", mOS = "</span> + mOS + <span class="string">"&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>苹果电脑，具体的Product</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Macbook</span> <span class="keyword">extends</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Macbook</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setmOS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mOS = <span class="string">"Mac OS X 10.10"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象Builder类 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildBroad</span><span class="params">(String broad)</span></span>;<span class="comment">//设置主机</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildDisplay</span><span class="params">(String display)</span></span>;<span class="comment">//设置显示器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildOS</span><span class="params">()</span></span>;<span class="comment">//设置操作系统</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Computer <span class="title">create</span><span class="params">()</span></span>;<span class="comment">//创建Computer</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的Builder类，构造苹果电脑 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Computer mComputer = <span class="keyword">new</span> Macbook();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildBroad</span><span class="params">(String broad)</span> </span>&#123;</span><br><span class="line">        mComputer.setmBroad(broad);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildDisplay</span><span class="params">(String display)</span> </span>&#123;</span><br><span class="line">        mComputer.setmDisplay(display);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildOS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mComputer.setmOS();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mComputer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Director类，负责构造Computer </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Builder mBuilder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mBuilder = builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> broad</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> display</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">construct</span><span class="params">(String broad, String display)</span></span>&#123;</span><br><span class="line">        mBuilder.buildBroad(broad);</span><br><span class="line">        mBuilder.buildDisplay(display);</span><br><span class="line">        mBuilder.buildOS();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Builder builder = <span class="keyword">new</span> MacBuilder();</span><br><span class="line">        Director director = <span class="keyword">new</span> Director(builder);</span><br><span class="line">        director.construct(<span class="string">"英特尔主板"</span>, <span class="string">"Retina 显示器"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Computer Info: "</span> + builder.create().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果 :</span><br><span class="line">Computer Info: Computer &#123;mBroad = 英特尔主板, mDisplay = Retina 显示器, mOS = Mac OS X <span class="number">10.10</span>&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，通过具体的MacBuilder来构建Macbook对象，而Director封装构建复杂对象的过程，对外隐藏细节。Builder与Director一起将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的对象。</p><p>但在现实开发中，Director常常被忽略，直接使用一个Builder对象来进行链式调用构造，它的关键点是每个setter返回自身，如下，我们来组装一个华硕电脑：</p><p>华硕电脑，具体的产品类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ASUSbook</span> <span class="keyword">extends</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setmOS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mOS = <span class="string">"Windows 10 专业版"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象Builder类 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Builder2 <span class="title">buildBroad</span><span class="params">(String broad)</span></span>;<span class="comment">//设置主机</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Builder2 <span class="title">buildDisplay</span><span class="params">(String display)</span></span>;<span class="comment">//设置显示器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Builder2 <span class="title">buildOS</span><span class="params">()</span></span>;<span class="comment">//设置操作系统</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Computer <span class="title">create</span><span class="params">()</span></span>;<span class="comment">//创建Computer</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的Builder类，构造ASUS电脑 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ASUSBuilder</span> <span class="keyword">extends</span> <span class="title">Builder2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Computer mComputer = <span class="keyword">new</span> ASUSbook();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder2 <span class="title">buildBroad</span><span class="params">(String broad)</span> </span>&#123;</span><br><span class="line">        mComputer.setmBroad(broad);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder2 <span class="title">buildDisplay</span><span class="params">(String display)</span> </span>&#123;</span><br><span class="line">        mComputer.setmDisplay(display);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder2 <span class="title">buildOS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mComputer.setmOS();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mComputer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Builder2 builder2 = <span class="keyword">new</span> ASUSBuilder();</span><br><span class="line">        ASUSbook asusbook = (ASUSbook) builder2</span><br><span class="line">                .buildBroad(<span class="string">"AMDB350socketAM4"</span>)</span><br><span class="line">                .buildDisplay(<span class="string">"AOC 显示器"</span>)</span><br><span class="line">                .buildOS()</span><br><span class="line">                .create();</span><br><span class="line">        System.out.println(<span class="string">"Computer Info: "</span> + asusbook.toString());</span><br><span class="line"><span class="comment">//        Builder builder = new MacBuilder();</span></span><br><span class="line"><span class="comment">//        Director director = new Director(builder);</span></span><br><span class="line"><span class="comment">//        director.construct("英特尔主板", "Retina 显示器");</span></span><br><span class="line"><span class="comment">//        System.out.println("Computer Info: " + builder.create().toString());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果 :</span><br><span class="line">Computer Info: Computer &#123;mBroad = AMDB350socketAM4, mDisplay = AOC 显示器, mOS = Windows <span class="number">10</span> 专业版&#125;</span><br></pre></td></tr></table></figure><p>链式调用形式不仅去除Director角色，让整个结构简单，而且也能对product对象的组装过程有更加精准的控制。</p><p>然而上面的只是经典的实现方式，下面才是现在开发中最常用的，通过把Builder与产品类封装在一起，建立于上面的基础。</p><p>联想电脑，把Builder与产品类封装在一起</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LenovoBook</span> <span class="keyword">extends</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LenovoBook</span><span class="params">(Builder builder)</span></span>&#123;</span><br><span class="line">        setmOS();</span><br><span class="line">        setmBroad(builder.broad);</span><br><span class="line">        setmDisplay(builder.display);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setmOS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mOS = <span class="string">"Windows 10 家庭中文版"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">extends</span> <span class="title">Builder2</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String broad;</span><br><span class="line">        String display;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder2 <span class="title">buildBroad</span><span class="params">(String broad)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.broad = broad;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder2 <span class="title">buildDisplay</span><span class="params">(String display)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.display = display;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder2 <span class="title">buildOS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Computer <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LenovoBook(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       LenovoBook lenovoBook = (LenovoBook) <span class="keyword">new</span> LenovoBook.Builder()</span><br><span class="line">               .buildOS()</span><br><span class="line">               .buildBroad(<span class="string">"联想主板"</span>)</span><br><span class="line">               .buildDisplay(<span class="string">"联想显示器"</span>)</span><br><span class="line">               .create();</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"Computer Info: "</span> + lenovoBook.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">Computer Info: Computer &#123;mBroad = 联想主板, mDisplay = 联想显示器, mOS = Windows <span class="number">10</span> 家庭中文版&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Builder模式在开发中很常用，通过把产品类的构造器，字段私有化，只能通过Builder来设置属性，也通常作为配置类的构造器将配置的构建与表示分离开来，同时也是将配置从目标类中独立出来，避免过多的setter方法。Builder模式常用的实现形式是链式调用。</p><p><a href="https://github.com/rain9155/DesignPatternDemo/tree/master/src/com/example/hy/designpatternDemo/builder" target="_blank" rel="noopener">本文源码相关位置</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Builder模式是一步步创建一个复杂对象的创建型模式，它允许用户在不知道内部构建细节的情况下，可以更加精准的控制对象的构造过程，为了在构建过程中，对外部隐藏实现细节，就可以使用Builder模式将部件和组装过程分离，使得构建过程和部件可以自由扩展，两者之间的耦合度也降到最低。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>责任链模式</title>
    <link href="http://yoursite.com/2019/09/07/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/09/07/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-09-07T08:46:01.000Z</published>
    <updated>2023-01-07T10:44:49.290Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>责任链模式是一种链式结构，就是由一个个节点首尾相接串起来的结构，具有很好的灵活性，将每一个节点看作是一个对象，每一个对象拥有不同的处理逻辑，将一个请求从链式的首端发出，沿着链的路径依此传递每一个节点对象，直到有对象处理这个请求为止，我们将这样一种模式称为责任链模式。</p><a id="more"></a><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>使多个对象都有机会处理请求，从而避免了请求的发送者和接受者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有对象处理它为止。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>1、多个对象可以处理同一请求，但具体哪个对象处理则是在运行时动态决定</li><li>2、在请求者不明确的情况下向多个对象中的一个提交一个请求</li><li>3、需要动态指定一组对象的处理请求</li></ul><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><img src="/2019/09/07/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/design1.png" class="" title="design"><p>角色介绍：</p><ul><li>AbstractHandler - 抽象处理者角色，声明一个请求处理的方法（handle（））、一个获得处理级别的方法（getHandlerLever（））和封装了一个对具体的处理转发逻辑实现的方法（handleRequest（)），并在其中保持对下一个处理节点的AbstractHandler对象的引用（nextHandler）</li><li>ConcreteHandler1、2 - 具体处理者角色，对请求进行处理，如果不能处理就将请求转发给下一个节点上的处理对象</li><li>AbstractRequest - 抽象的请求类，里面声明了一个获得请求内容的方法（getContent（））和一个获得请求处理级别的方法（getRequestLever（））</li><li>ConcreteRequest - 具体的请求类</li></ul><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><p>在一个公司中，员工拿到了一份合同，需要上级的签名，于是员工就把合同给组长，但是组长没有权限签名，于是组长就把合同给经理，但是经理也没有足够的权限签名，于是经理就把合同给老板，老板二话不说就把合同给签了。上面的例子就是责任链模式，员工是请求的发起者，处于链的底端，而老板是处于链条顶端的类，员工发起请求后，请求经过层层转发，直至请求被处理，员工只是和组长发生了关联，后面合同被谁处理，员工并不知道，也并不关心，他在乎的是合同签名的结果，责任链模式很好的将请求的发起者与处理者解耦，下面用代码来模拟。</p><p>抽象的员工，即AbstractHandler角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Staff</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Staff nextHandler;<span class="comment">//上一级领导处理者</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理转发的逻辑</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Contract contract)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(contract.getContractLever() &lt; getHandlerLever())&#123;</span><br><span class="line">            handle(contract);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(nextHandler != <span class="keyword">null</span>)&#123;</span><br><span class="line">                nextHandler.handleRequest(contract);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getHandlerLever</span><span class="params">()</span></span>;<span class="comment">//自身能处理请求的级别</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Contract contract)</span></span>;<span class="comment">//具体的处理过程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个抽象的处理者中，一是定义了两个接口来确定一个Staff应有的行为和属性，二是封装了一个处理请求的逻辑转发方法，确定当前Staff是否有足够的级别来处理当前合同，如果没有，就把合同转发给上一级Staff，接下来是各个实现类。</p><p>组长，即ConcreteHandler角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CroupStaff</span> <span class="keyword">extends</span> <span class="title">Staff</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHandlerLever</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Contract contract)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"组长签名了合同！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经理，即ConcreteHandler角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManagerStaff</span> <span class="keyword">extends</span> <span class="title">Staff</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHandlerLever</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Contract contract)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"经理签名了合同！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>老板，即ConcreteHandler角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BossStaff</span> <span class="keyword">extends</span> <span class="title">Staff</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHandlerLever</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Contract contract)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"老板签名了合同！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 接下来看一看请求，就是合同。</p><p>抽象的合同类，即AbstractRequest角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Contract</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getContext</span><span class="params">()</span></span>;<span class="comment">//获得合同具体内容</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getContractLever</span><span class="params">()</span></span>;<span class="comment">//获得合同处理级别</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 最后员工从组长发起请求。</p><p>请求发起者，员工</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//构造各个节点对象</span></span><br><span class="line">        GroupStaff groupStaff = <span class="keyword">new</span> GroupStaff();</span><br><span class="line">        ManagerStaff managerStaff = <span class="keyword">new</span> ManagerStaff();</span><br><span class="line">        BossStaff bossStaff = <span class="keyword">new</span> BossStaff();</span><br><span class="line">        <span class="comment">//构成一条链</span></span><br><span class="line">        groupStaff.nextHandler = managerStaff;</span><br><span class="line">        managerStaff.nextHandler = bossStaff;</span><br><span class="line">        <span class="comment">//发起请求</span></span><br><span class="line">        Contract contract = <span class="keyword">new</span> ConcreteContract();</span><br><span class="line">        groupStaff.handleRequest(contract);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果:</span><br><span class="line">老板签名了合同！</span><br></pre></td></tr></table></figure><p> 其实这里也可以直接绕过组长和经理，直接找老板签名，这也是责任链模式的灵活性，请求的发起可以从任意节点发起，同时也可以改变责任链模式内部的传递规则，如直接找老板签名。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于责任链模式中的节点，有两个行为，一是处理请求，二是将请求转发给下一个节点，不允许某个节点处理者处理了请求后又把节点转发给下一个节点。对于责任链中的请求，只有俩个结果，一个是被某个节点处理，一个是所有对象均没有处理。</p><p><a href="https://github.com/rain9155/DesignPatternDemo/tree/master/src/com/example/hy/designpatternDemo/iterator" target="_blank" rel="noopener">本文相关源码位置</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;责任链模式是一种链式结构，就是由一个个节点首尾相接串起来的结构，具有很好的灵活性，将每一个节点看作是一个对象，每一个对象拥有不同的处理逻辑，将一个请求从链式的首端发出，沿着链的路径依此传递每一个节点对象，直到有对象处理这个请求为止，我们将这样一种模式称为责任链模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>okhttp3源码分析之拦截器</title>
    <link href="http://yoursite.com/2019/09/07/okhttp3%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://yoursite.com/2019/09/07/okhttp3%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8/</id>
    <published>2019-09-07T07:01:40.000Z</published>
    <updated>2023-01-07T10:44:48.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>上一篇文章：<a href="https://rain9155.github.io/2019/09/03/okhttp3源码分析之请求流程/" target="_blank" rel="noopener">okhttp3源码分析之请求流程</a></li></ul><p>本篇文章继续通过源码来探讨okhttp的另外一个重要知识点：拦截器，在上一篇文章我们知道，在请求发送到服务器之前有一系列的拦截器对请求做了处理后才发送出去，在服务器返回响应之后，同样的有一系列拦截器对响应做了处理后才返回给发起请求的调用者，可见，拦截器是okhttp的一个重要的核心功能，在分析各个拦截器功能的同时又会牵扯出okhttp的缓存机制、连接机制。</p><blockquote><p>本文源码基于okhttp3.14.x</p></blockquote><p>okhttp项目地址：<a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fsquare%2Fokhttp">okhttp</a></p><a id="more"></a><h2 id="拦截器的简单使用"><a href="#拦截器的简单使用" class="headerlink" title="拦截器的简单使用"></a>拦截器的简单使用</h2><p>自定义一个拦截器需要实现Interceptor接口，接口定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">  <span class="comment">//我们需要实现这个intercept(chain)方法，在里面定义我们的拦截逻辑</span></span><br><span class="line">  <span class="function">Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">interface</span> <span class="title">Chain</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">     <span class="comment">//返回Request对象</span></span><br><span class="line">    <span class="function">Request <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用Chain的proceed(Request)方法处理请求，最终返回Response</span></span><br><span class="line">    <span class="function">Response <span class="title">proceed</span><span class="params">(Request request)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果当前是网络拦截器，该方法返回Request执行后建立的连接</span></span><br><span class="line">    <span class="comment">//如果当前是应用拦截器，该方法返回null</span></span><br><span class="line">    <span class="meta">@Nullable</span> <span class="function">Connection <span class="title">connection</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回对应的Call对象</span></span><br><span class="line">    <span class="function">Call <span class="title">call</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//下面的方法见名知意，返回或写入超时</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">connectTimeoutMillis</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Chain <span class="title">withConnectTimeout</span><span class="params">(<span class="keyword">int</span> timeout, TimeUnit unit)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">readTimeoutMillis</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Chain <span class="title">withReadTimeout</span><span class="params">(<span class="keyword">int</span> timeout, TimeUnit unit)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">writeTimeoutMillis</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Chain <span class="title">withWriteTimeout</span><span class="params">(<span class="keyword">int</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>可以看到Interceptor由两部分组成：intercept(Chain)方法和内部接口Chain，下面是自定义一个拦截器的通用逻辑，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1、通过传进来的Chain获取Request</span></span><br><span class="line">        Request request = chain.request();</span><br><span class="line">        </span><br><span class="line">      <span class="comment">//2、 处理Request，逻辑自己写</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3、调用Chain的proceed(Request)方法处理请求，得到Response</span></span><br><span class="line">        Response response = chain.proceed(request);</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//4、 处理Response，逻辑自己写</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//5、返回Response</span></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述就是一个拦截器的通用逻辑，首先我们继承Interceptor实现intercept(Chain)方法，完成我们自己的拦截逻辑，即根据需要进行1、2、3、4、5步，不管是自定义拦截器还是后面介绍的okhttp默认的拦截器大概都是这个模板实现，定义完拦截器后，我们在构造OkhttpClient时就可以通过addInterceptor(Interceptor)或addNetworkInterceptor(Interceptor)添加自定义拦截器，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">     .addInterceptor(<span class="keyword">new</span> MyInterceptor())</span><br><span class="line">     .build();</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">     .addNetworkInterceptor(<span class="keyword">new</span> MyInterceptor())</span><br><span class="line">     .build();</span><br></pre></td></tr></table></figure><p>这样okhttp在链式调用拦截器处理请求时就会调用到我们自定义的拦截器，那么addInterceptor(Interceptor)和addNetworkInterceptor(Interceptor)有什么不一样呢？它们一个是添加应用拦截器，一个是添加网络拦截器，主要是调用的时机不一样，更多区别可以参考官方WIKI文档<a href="https://www.jianshu.com/p/2710ed1e6b48" target="_blank" rel="noopener">Okhttp-wiki 之 Interceptors 拦截器</a>，当我们平时做应用开发使用addInterceptor(Interceptor)就行了。</p><p>上述是我们自定义的拦截器，下面我们来看看okhttp默认的拦截器都干了什么。</p><h2 id="RealCall-getResponseWithInterceptorChain"><a href="#RealCall-getResponseWithInterceptorChain" class="headerlink" title="RealCall  :: getResponseWithInterceptorChain()"></a>RealCall  :: getResponseWithInterceptorChain()</h2><p>在上一篇文章知道RealCall的getResponseWithInterceptorChain()是处理、发送请求并且返回响应的地方，我们再看一遍getResponseWithInterceptorChain()方法的源码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RealCall.java</span></span><br><span class="line"><span class="function">Response <span class="title">getResponseWithInterceptorChain</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//新建一个List用来保存拦截器</span></span><br><span class="line">    List&lt;Interceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加我们自定义的应用拦截器</span></span><br><span class="line">    interceptors.addAll(client.interceptors());</span><br><span class="line">    <span class="comment">//添加负责重试重定向的拦截器</span></span><br><span class="line">    interceptors.add(<span class="keyword">new</span> RetryAndFollowUpInterceptor(client));</span><br><span class="line">    <span class="comment">//添加负责转换请求响应的拦截器</span></span><br><span class="line">    interceptors.add(<span class="keyword">new</span> BridgeInterceptor(client.cookieJar()));</span><br><span class="line">    <span class="comment">//添加负责缓存的拦截器</span></span><br><span class="line">    interceptors.add(<span class="keyword">new</span> CacheInterceptor(client.internalCache()));</span><br><span class="line">    <span class="comment">//添加负责管理连接的拦截器</span></span><br><span class="line">    interceptors.add(<span class="keyword">new</span> ConnectInterceptor(client));</span><br><span class="line">    <span class="keyword">if</span> (!forWebSocket) &#123;<span class="comment">//没有特殊要求，不使用WebSocket协议，WebSocket是什么？自行百度</span></span><br><span class="line">      <span class="comment">//添加我们自定义的网络拦截器</span></span><br><span class="line">      interceptors.addAll(client.networkInterceptors());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加负责发起请求获取响应的拦截器</span></span><br><span class="line">    interceptors.add(<span class="keyword">new</span> CallServerInterceptor(forWebSocket));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造第一个Chain</span></span><br><span class="line">    Interceptor.Chain chain = <span class="keyword">new</span> RealInterceptorChain(interceptors, transmitter, <span class="keyword">null</span>, <span class="number">0</span>,</span><br><span class="line">        originalRequest, <span class="keyword">this</span>, client.connectTimeoutMillis(),</span><br><span class="line">        client.readTimeoutMillis(), client.writeTimeoutMillis());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> calledNoMoreExchanges = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">//调用Chain的proceed(Request)方法处理请求</span></span><br><span class="line">      Response response = chain.proceed(originalRequest);</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">      <span class="comment">//返回响应</span></span><br><span class="line">      <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...省略异常处理</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>getResponseWithInterceptorChain()干了三件事：1、添加拦截器到interceptors列表中；2、构造第一个Chain；3、调用Chain的proceed(Request)方法处理请求。下面分别介绍:</p><h3 id="1、添加拦截器到interceptors列表中"><a href="#1、添加拦截器到interceptors列表中" class="headerlink" title="1、添加拦截器到interceptors列表中"></a>1、添加拦截器到interceptors列表中</h3><p>除了添加我们自定义的拦截器外，还添加了默认的拦截器，如下：</p><ul><li>1、RetryAndFollowUpInterceptor：负责失败重试和重定向。</li><li>2、BridgeInterceptor：负责把用户构造的Request转换为发送给服务器的Request和把服务器返回的Response转换为对用户友好的Response。</li><li>3、CacheInterceptor：负责读取缓存以及更新缓存。</li><li>4、ConnectInterceptor：负责与服务器建立连接并管理连接。</li><li>5、CallServerInterceptor：负责向服务器发送请求和从服务器读取响应。</li></ul><p>这几个默认的拦截器是本文的重点，在后面会分别介绍。</p><h3 id="2、构造第一个Chain"><a href="#2、构造第一个Chain" class="headerlink" title="2、构造第一个Chain"></a>2、构造第一个Chain</h3><p>Chain是Interceptor的一个内部接口，它的实现类是RealInterceptorChain，我们要对它的传进来的前6个构造参数有个印象，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RealInterceptorChain</span> <span class="keyword">implements</span> <span class="title">Interceptor</span>.<span class="title">Chain</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RealInterceptorChain</span><span class="params">(List&lt;Interceptor&gt; interceptors, Transmitter transmitter, @Nullable Exchange exchange, <span class="keyword">int</span> index, Request request, Call call, <span class="keyword">int</span> connectTimeout, <span class="keyword">int</span> readTimeout, <span class="keyword">int</span> writeTimeout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.interceptors = interceptors;<span class="comment">//interceptors列表</span></span><br><span class="line">        <span class="keyword">this</span>.transmitter = transmitter;<span class="comment">//Transmitter对象，后面会介绍</span></span><br><span class="line">        <span class="keyword">this</span>.exchange = exchange;<span class="comment">//Exchange对象，后面会介绍</span></span><br><span class="line">        <span class="keyword">this</span>.index = index;<span class="comment">//interceptor索性，用于获取interceptors列表中的interceptor</span></span><br><span class="line">        <span class="keyword">this</span>.request = request;<span class="comment">//请求request</span></span><br><span class="line">        <span class="keyword">this</span>.call = call;<span class="comment">//Call对象</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在后面的拦截器中都可以通过Chain获取这些传进来的参数。我们知道，为了让每个拦截器都有机会处理请求，okhttp使用了责任链模式来把各个拦截器串联起来，拦截器就是责任链的节点，而Chain就是责任链中各个节点之间的连接点，负责把各个拦截器连接起来。那么是怎么连接的？看下面的Chain的proceed方法。</p><h3 id="3、调用Chain的proceed-Request-方法处理请求"><a href="#3、调用Chain的proceed-Request-方法处理请求" class="headerlink" title="3、调用Chain的proceed(Request)方法处理请求"></a>3、调用Chain的proceed(Request)方法处理请求</h3><p>实际是RealInterceptorChain的proceed(Request)方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RealInterceptorChain</span> <span class="keyword">implements</span> <span class="title">Interceptor</span>.<span class="title">Chain</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">proceed</span><span class="params">(Request request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> proceed(request, transmitter, exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">proceed</span><span class="params">(Request request, Transmitter transmitter, @Nullable Exchange exchange)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//index不能越界</span></span><br><span class="line">        <span class="keyword">if</span> (index &gt;= interceptors.size()) <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//再新建一个Chain，这里注意index加1，</span></span><br><span class="line">        RealInterceptorChain next = <span class="keyword">new</span> RealInterceptorChain(interceptors, transmitter, exchange,</span><br><span class="line">                                                             index + <span class="number">1</span>, request, call, connectTimeout, readTimeout, writeTimeout);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取interceptors列表中的下一个拦截器</span></span><br><span class="line">        Interceptor interceptor = interceptors.get(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用下一个拦截器的intercept(Chain)方法，传入刚才新建的RealInterceptorChain，返回Response</span></span><br><span class="line">        Response response = interceptor.intercept(next);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回响应</span></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>proceed方法里面首先会再新建一个Chain并且<strong>index + 1</strong>作为构造参数传了进去，然后通过index从interceptors列表中获取了一个拦截器，接着就会调用拦截器的intercept方法，并把刚刚新建的Chain作为参数传给拦截器，我们再回顾一下上面所讲的拦截器intercept方法的模板，intercept方法处理完Request逻辑后，会再次调用传入的Chain的proceed(Request)方法，这样又会重复Chain的proceed方法中的逻辑，由于index已经加1了，所以这次Chain就会通过index获取下一个拦截器，并调用下一个拦截器的intercept(Chain)方法，然后如此循环重复下去，这样就把每个拦截器通过一个个Chain连接起来，形成一条链，把Request沿着链传递下去，直到请求被处理，然后返回Response，响应同样的沿着链传递上去，如下：</p><img src="/2019/09/07/okhttp3%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8/okhttp1.png" class="" title="okhttp"><p>从上图可知，当没有自定义拦截器时，责任链首节点就是RetryAndFollowUpInterceptor，尾节点就是CallServerInterceptor，Request按照拦截器的顺序正向处理，Response则逆向处理，每个拦截器都有机会处理Request和Response，一个完美的责任链模式的实现。</p><p>知道了getResponseWithInterceptorChain()的整体流程后，下面分别介绍各个默认拦截器的功能。</p><h2 id="RetryAndFollowUpInterceptor"><a href="#RetryAndFollowUpInterceptor" class="headerlink" title="RetryAndFollowUpInterceptor"></a>RetryAndFollowUpInterceptor</h2><p>在自定义拦截器的时候就讲过，Interceptor的intercept(Chain)方法就是拦截器的拦截实现，RetryAndFollowUpInterceptor的intercept(Chain)方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RetryAndFollowUpInterceptor.java</span></span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取Request</span></span><br><span class="line">    Request request = chain.request();</span><br><span class="line">    RealInterceptorChain realChain = (RealInterceptorChain) chain;</span><br><span class="line">    <span class="comment">//获取Transmitter</span></span><br><span class="line">    Transmitter transmitter = realChain.transmitter();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重定向次数</span></span><br><span class="line">    <span class="keyword">int</span> followUpCount = <span class="number">0</span>;</span><br><span class="line">    Response priorResponse = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//一个死循环</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用Transmitter的prepareToConnect方法，做好连接建立的准备</span></span><br><span class="line">        transmitter.prepareToConnect(request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (transmitter.isCanceled()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Response response;</span><br><span class="line">        <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//调用proceed方法，里面调用下一个拦截器BridgeInterceptor的intercept方法</span></span><br><span class="line">            response = realChain.proceed(request, transmitter, <span class="keyword">null</span>);</span><br><span class="line">            success = <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (RouteException e) &#123;<span class="comment">//出现RouteException异常</span></span><br><span class="line">            <span class="comment">//调用recover方法检测连接是否可以继续使用</span></span><br><span class="line">            <span class="keyword">if</span> (!recover(e.getLastConnectException(), transmitter, <span class="keyword">false</span>, request)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e.getFirstConnectException();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;<span class="comment">//出现IOException异常，和服务端建立连接失败</span></span><br><span class="line">            <span class="keyword">boolean</span> requestSendStarted = !(e <span class="keyword">instanceof</span> ConnectionShutdownException);</span><br><span class="line">            <span class="comment">//调用recover方法检测连接是否可以继续使用</span></span><br><span class="line">            <span class="keyword">if</span> (!recover(e, transmitter, requestSendStarted, request)) <span class="keyword">throw</span> e;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;<span class="comment">//出现其他未知异常</span></span><br><span class="line">            <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">                <span class="comment">//调用Transmitter的exchangeDoneDueToException()方法释放连接</span></span><br><span class="line">                transmitter.exchangeDoneDueToException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//执行到这里，没有出现任何异常，连接成功, 响应返回</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据响应码来处理请求头</span></span><br><span class="line">        Request followUp = followUpRequest(response, route);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//followUp为空，不需要重定向，直接返回Response</span></span><br><span class="line">        <span class="keyword">if</span> (followUp == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//followUp不为空，需要重定向</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//MAX_FOLLOW_UPS值为20，重定向次数不能大于20次</span></span><br><span class="line">        <span class="keyword">if</span> (++followUpCount &gt; MAX_FOLLOW_UPS) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ProtocolException(<span class="string">"Too many follow-up requests: "</span> + followUpCount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//以重定向后的Request再次重试</span></span><br><span class="line">        request = followUp;</span><br><span class="line">        priorResponse = response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RetryAndFollowUpInterceptor的intercept(Chain)方法中主要是失败重试和重定向的逻辑，该方法流程如下：</p><p>1、首先获取Transmitter类；</p><p>2、然后进入一个死循环，先调用Transmitter的prepareToConnect方法，准备建立连接；（连接真正的建立在ConnectInterceptor中）</p><p>3、接着调用Chain的proceed方法，继续执行下一个拦截器BridgeInterceptor的intercept方法：</p><p>​    3.1、如果在请求的过程中抛出RouteException异常或IOException异常，就会调用recover方法检测连接是否可以继续使用，如果不可以继续使用就抛出异常，整个过程结束，否则就再次重试，这就是失败重试；</p><p>​    3.2、如果在请求的过程中抛出除了3.1之外的异常，就会调用Transmitter的exchangeDoneDueToException()方法释放连接，整个过程结束。</p><p>4、没有任何异常抛出，当响应Response返回后，就会调用followUpRequest方法，里面根据返回的Response的响应码来决定是否需要重定向（构造followUp请求），如果不需要重定向，就直接返回Response，如果需要重定向，那么以重定向后的Request再次重试，重定向次数不能大于20次。</p><h3 id="1、Transmitter"><a href="#1、Transmitter" class="headerlink" title="1、Transmitter"></a>1、Transmitter</h3><p>在整个方法的流程中出现了一个Transmitter，这里介绍一下，它是okhttp中应用层和网络层的桥梁，管理同一个Cal的所有连接、请求、响应和IO流之间的关系，它在RealCall创建后就被创建了，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RealCall.java</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> RealCall <span class="title">newRealCall</span><span class="params">(OkHttpClient client, Request originalRequest, <span class="keyword">boolean</span> forWebSocket)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建RealCall</span></span><br><span class="line">    RealCall call = <span class="keyword">new</span> RealCall(client, originalRequest, forWebSocket);</span><br><span class="line">    <span class="comment">//创建Transmitter，赋值给call的transmitter字段</span></span><br><span class="line">    call.transmitter = <span class="keyword">new</span> Transmitter(client, call);</span><br><span class="line">    <span class="keyword">return</span> call;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建后，在构造节点Chain时作为参数传了进去，在getResponseWithInterceptorChain方法中有讲到，所以在intercept方法中它可以通过chain.transmitter()获得，它的整个生命周期贯穿了所有拦截器，在接下来的ConnectInterceptor和CallServerInterceptor中你都可以见到它的身影，我们看一下它的主要成员，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Transmitter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client;<span class="comment">//OkHttpClient大管家</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RealConnectionPool connectionPool;<span class="comment">//连接池，管理着连接</span></span><br><span class="line">    <span class="keyword">public</span> RealConnection connection;<span class="comment">//本次连接对象</span></span><br><span class="line">    <span class="keyword">private</span> ExchangeFinder exchangeFinder;<span class="comment">//负责连接的创建</span></span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@Nullable</span> Exchange exchange;<span class="comment">//负责连接IO流读写</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Call call;<span class="comment">//Call对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Transmitter</span><span class="params">(OkHttpClient client, Call call)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.client = client;</span><br><span class="line">        <span class="keyword">this</span>.connectionPool = Internal.instance.realConnectionPool(client.connectionPool());</span><br><span class="line">        <span class="keyword">this</span>.call = call;</span><br><span class="line">        <span class="keyword">this</span>.eventListener = client.eventListenerFactory().create(call);</span><br><span class="line">        <span class="keyword">this</span>.timeout.timeout(client.callTimeoutMillis(), MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepareToConnect</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.request != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sameConnection(<span class="keyword">this</span>.request.url(), request.url()) &amp;&amp; exchangeFinder.hasRouteToTry()) &#123;</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// Already ready.</span></span><br><span class="line">            &#125;</span><br><span class="line">           <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.request = request;</span><br><span class="line">        <span class="comment">//创建ExchangeFinder</span></span><br><span class="line">        <span class="keyword">this</span>.exchangeFinder = <span class="keyword">new</span> ExchangeFinder(<span class="keyword">this</span>, connectionPool, createAddress(request.url()), call, eventListener);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Transmitter中client和call我们都认识，剩下的RealConnectionPool、RealConnection、ExchangeFinder、Exchange都和okhttp的连接机制有关，都会在ConnectInterceptor中介绍，Transmitter就是负责管理它们之间的关系。这里我们只要记住，Transmitter的prepareToConnect方法中主要是创建了一个ExchangeFinder，为在ConnectInterceptor中连接的建立做了一个准备。</p><h2 id="BridgeInterceptor"><a href="#BridgeInterceptor" class="headerlink" title="BridgeInterceptor"></a>BridgeInterceptor</h2><p>BridgeInterceptor的intercept(Chain)方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BridgeInterceptor.java</span></span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取Request</span></span><br><span class="line">    Request userRequest = chain.request();</span><br><span class="line">    Request.Builder requestBuilder = userRequest.newBuilder();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//下面都是根据需要为Request的header添加或移除一些信息</span></span><br><span class="line">    </span><br><span class="line">    RequestBody body = userRequest.body();</span><br><span class="line">    <span class="keyword">if</span> (body != <span class="keyword">null</span>) &#123;</span><br><span class="line">      MediaType contentType = body.contentType();</span><br><span class="line">      <span class="keyword">if</span> (contentType != <span class="keyword">null</span>) &#123;</span><br><span class="line">        requestBuilder.header(<span class="string">"Content-Type"</span>, contentType.toString());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">long</span> contentLength = body.contentLength();</span><br><span class="line">      <span class="keyword">if</span> (contentLength != -<span class="number">1</span>) &#123;</span><br><span class="line">        requestBuilder.header(<span class="string">"Content-Length"</span>, Long.toString(contentLength));</span><br><span class="line">        requestBuilder.removeHeader(<span class="string">"Transfer-Encoding"</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        requestBuilder.header(<span class="string">"Transfer-Encoding"</span>, <span class="string">"chunked"</span>);</span><br><span class="line">        requestBuilder.removeHeader(<span class="string">"Content-Length"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (userRequest.header(<span class="string">"Host"</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">      requestBuilder.header(<span class="string">"Host"</span>, hostHeader(userRequest.url(), <span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (userRequest.header(<span class="string">"Connection"</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">      requestBuilder.header(<span class="string">"Connection"</span>, <span class="string">"Keep-Alive"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> transparentGzip = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (userRequest.header(<span class="string">"Accept-Encoding"</span>) == <span class="keyword">null</span> &amp;&amp; userRequest.header(<span class="string">"Range"</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">      transparentGzip = <span class="keyword">true</span>;</span><br><span class="line">      requestBuilder.header(<span class="string">"Accept-Encoding"</span>, <span class="string">"gzip"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;Cookie&gt; cookies = cookieJar.loadForRequest(userRequest.url());</span><br><span class="line">    <span class="keyword">if</span> (!cookies.isEmpty()) &#123;</span><br><span class="line">      requestBuilder.header(<span class="string">"Cookie"</span>, cookieHeader(cookies));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (userRequest.header(<span class="string">"User-Agent"</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">      requestBuilder.header(<span class="string">"User-Agent"</span>, Version.userAgent());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用proceed方法，里面调用下一个拦截器CacheInterceptor的intercept方法</span></span><br><span class="line">    Response networkResponse = chain.proceed(requestBuilder.build());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回Response后</span></span><br><span class="line">    <span class="comment">//下面都是根据需要为Response的header添加或移除一些信息</span></span><br><span class="line">    </span><br><span class="line">    HttpHeaders.receiveHeaders(cookieJar, userRequest.url(), networkResponse.headers());</span><br><span class="line"></span><br><span class="line">    Response.Builder responseBuilder = networkResponse.newBuilder()</span><br><span class="line">        .request(userRequest);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (transparentGzip &amp;&amp; <span class="string">"gzip"</span>.equalsIgnoreCase(networkResponse.header(<span class="string">"Content-Encoding"</span>)) &amp;&amp; HttpHeaders.hasBody(networkResponse)) &#123;</span><br><span class="line">      GzipSource responseBody = <span class="keyword">new</span> GzipSource(networkResponse.body().source());</span><br><span class="line">      Headers strippedHeaders = networkResponse.headers().newBuilder()</span><br><span class="line">          .removeAll(<span class="string">"Content-Encoding"</span>)</span><br><span class="line">          .removeAll(<span class="string">"Content-Length"</span>)</span><br><span class="line">          .build();</span><br><span class="line">      responseBuilder.headers(strippedHeaders);</span><br><span class="line">      String contentType = networkResponse.header(<span class="string">"Content-Type"</span>);</span><br><span class="line">      responseBuilder.body(<span class="keyword">new</span> RealResponseBody(contentType, -<span class="number">1L</span>, Okio.buffer(responseBody)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> responseBuilder.build();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>BridgeInterceptor中的逻辑是在所有默认拦截器中是最简单，它主要就是对Request或Response的header做了一些处理，把用户构造的Request转换为发送给服务器的Request，还有把服务器返回的Response转换为对用户友好的Response。例如，对于Request，当开发者没有添加Accept-Encoding时，它会自动添加Accept-Encoding : gzip，表示客户端支持使用gzip；对于Response，当Content-Encoding是gzip方式并且客户端是自动添加gzip支持时，它会移除Content-Encoding、Content-Length，然后重新解压缩响应的内容。</p><h2 id="CacheInterceptor"><a href="#CacheInterceptor" class="headerlink" title="CacheInterceptor"></a>CacheInterceptor</h2><p>CacheInterceptor的intercept(Chain)方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CacheInterceptor.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据Request得到Cache中缓存的Response，Cache是什么，后面介绍</span></span><br><span class="line">    Response cacheCandidate = cache != <span class="keyword">null</span> ? cache.get(chain.request()) : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建缓存策略：网络、缓存、或两者都使用，CacheStrategy是什么，后面介绍</span></span><br><span class="line">    CacheStrategy strategy = <span class="keyword">new</span> CacheStrategy.Factory(now, chain.request(), cacheCandidate).get();</span><br><span class="line">    <span class="comment">//得到networkRequest</span></span><br><span class="line">    Request networkRequest = strategy.networkRequest;</span><br><span class="line">    <span class="comment">//得到cacheResponse，cacheResponse等于上面的cacheCandidate</span></span><br><span class="line">    Response cacheResponse = strategy.cacheResponse;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个Response缓存无效，close掉它</span></span><br><span class="line">    <span class="keyword">if</span> (cacheCandidate != <span class="keyword">null</span> &amp;&amp; cacheResponse == <span class="keyword">null</span>) &#123;</span><br><span class="line">        closeQuietly(cacheCandidate.body()); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、networkRequest为null且cacheResponse为null：表示强制使用缓存，但是没有缓存，所以构造状态码为504，body为空的Response</span></span><br><span class="line">    <span class="keyword">if</span> (networkRequest == <span class="keyword">null</span> &amp;&amp; cacheResponse == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Response.Builder()</span><br><span class="line">            .request(chain.request())</span><br><span class="line">            .protocol(Protocol.HTTP_1_1)</span><br><span class="line">            .code(<span class="number">504</span>)<span class="comment">//状态码504</span></span><br><span class="line">            .message(<span class="string">"Unsatisfiable Request (only-if-cached)"</span>)</span><br><span class="line">            .body(Util.EMPTY_RESPONSE)</span><br><span class="line">            .sentRequestAtMillis(-<span class="number">1L</span>)</span><br><span class="line">            .receivedResponseAtMillis(System.currentTimeMillis())</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//2、networkRequest为null但cacheResponse不为null：表示强制使用缓存，并且有缓存，所以直接返回缓存的Response</span></span><br><span class="line">    <span class="keyword">if</span> (networkRequest == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> cacheResponse.newBuilder()</span><br><span class="line">            .cacheResponse(stripBody(cacheResponse))</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Response networkResponse = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//networkRequest不为null，所以可以发起网络请求，调用chain.proceed(Request)，里面调用下一个拦截器BridgeInterceptor的intercept方法，会返回网络请求得到的networkResponse</span></span><br><span class="line">        networkResponse = chain.proceed(networkRequest);</span><br><span class="line">       </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//发起网络请求出现IO异常或其他异常的处理</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、networkRequest不为null且cacheResponse不为null：因为cacheResponse不为null，所以根据网络请求得到的networkResponse和缓存的cacheResponse做比较，来决定是否使用cacheResponse</span></span><br><span class="line">    <span class="keyword">if</span> (cacheResponse != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (networkResponse.code() == HTTP_NOT_MODIFIED) &#123;<span class="comment">//HTTP_NOT_MODIFIED等于304，304表示服务器资源没有更新，所以客户端可以直接使用本地缓存cacheResponse</span></span><br><span class="line">            <span class="comment">//下面根据cacheResponse构造Response返回，并且更新cacheResponse的头部信息</span></span><br><span class="line">            Response response = cacheResponse.newBuilder()</span><br><span class="line">                .headers(combine(cacheResponse.headers(), networkResponse.headers()))</span><br><span class="line">                .sentRequestAtMillis(networkResponse.sentRequestAtMillis())</span><br><span class="line">                .receivedResponseAtMillis(networkResponse.receivedResponseAtMillis())</span><br><span class="line">                .cacheResponse(stripBody(cacheResponse))</span><br><span class="line">                .networkResponse(stripBody(networkResponse))</span><br><span class="line">                .build();</span><br><span class="line">            networkResponse.body().close();</span><br><span class="line">            <span class="comment">//在本地缓存更新cacheResponse</span></span><br><span class="line">            cache.trackConditionalCacheHit();</span><br><span class="line">            cache.update(cacheResponse, response);</span><br><span class="line">            <span class="comment">//返回构造的Response</span></span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//服务器返回了200，服务器资源更新了，所以客户端cacheResponse无效，close掉它</span></span><br><span class="line">            closeQuietly(cacheResponse.body());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、networkRequest不为null但cacheResponse为null或者服务器返回了200：cacheResponse为null，没有缓存使用，服务器返回了200，本地缓存失效，这两种情况都要从networkResponse读取网络响应，构造Response准备返回</span></span><br><span class="line">    Response response = networkResponse.newBuilder()</span><br><span class="line">        .cacheResponse(stripBody(cacheResponse))</span><br><span class="line">        .networkResponse(stripBody(networkResponse))</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;<span class="comment">//如果Cache不为null，表示使用缓存</span></span><br><span class="line">        <span class="keyword">if</span> (HttpHeaders.hasBody(response) &amp;&amp; CacheStrategy.isCacheable(response, networkRequest)) &#123;</span><br><span class="line">            <span class="comment">//把Response缓存到Cache中</span></span><br><span class="line">            CacheRequest cacheRequest = cache.put(response);</span><br><span class="line">            <span class="keyword">return</span> cacheWritingResponse(cacheRequest, response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (HttpMethod.invalidatesCache(networkRequest.method())) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                cache.remove(networkRequest);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ignored) &#123;</span><br><span class="line">                <span class="comment">// The cache cannot be written.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回Response</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CacheInterceptor的intercept(Chain)里面定义了okhttp的缓存机制，我们先来了解两个类：Cache和CacheStrategy，这样才能看懂intercept(Chain)里面的逻辑。</p><h3 id="1、Cache-缓存实现"><a href="#1、Cache-缓存实现" class="headerlink" title="1、Cache - 缓存实现"></a>1、Cache - 缓存实现</h3><p>Cache是okhttp中缓存的实现，内部使用了DiskLruCache，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Cache</span> <span class="keyword">implements</span> <span class="title">Closeable</span>, <span class="title">Flushable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//内部都是通过DiskLruCache实现</span></span><br><span class="line">    <span class="keyword">final</span> DiskLruCache cache;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//有一个InternalCache实现，都调用了Cache中的方法</span></span><br><span class="line">    <span class="keyword">final</span> InternalCache internalCache = <span class="keyword">new</span> InternalCache() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span> <span class="keyword">public</span> <span class="meta">@Nullable</span> <span class="function">Response <span class="title">get</span><span class="params">(Request request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Cache.<span class="keyword">this</span>.get(request);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span> <span class="keyword">public</span> <span class="meta">@Nullable</span> <span class="function">CacheRequest <span class="title">put</span><span class="params">(Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Cache.<span class="keyword">this</span>.put(response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Request request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            Cache.<span class="keyword">this</span>.remove(request);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Response cached, Response network)</span> </span>&#123;</span><br><span class="line">            Cache.<span class="keyword">this</span>.update(cached, network);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trackConditionalCacheHit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Cache.<span class="keyword">this</span>.trackConditionalCacheHit();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trackResponse</span><span class="params">(CacheStrategy cacheStrategy)</span> </span>&#123;</span><br><span class="line">            Cache.<span class="keyword">this</span>.trackResponse(cacheStrategy);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//可以通过下面两个构造函数构造一个Cache</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cache</span><span class="params">(File directory, <span class="keyword">long</span> maxSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(directory, maxSize, FileSystem.SYSTEM);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Cache(File directory, <span class="keyword">long</span> maxSize, FileSystem fileSystem) &#123;</span><br><span class="line">        <span class="keyword">this</span>.cache = DiskLruCache.create(fileSystem, directory, VERSION, ENTRY_COUNT, maxSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面是主要方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Nullable</span> <span class="function">Response <span class="title">get</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span> <span class="function">CacheRequest <span class="title">put</span><span class="params">(Response response)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Request request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Response cached, Response network)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">trackConditionalCacheHit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">trackResponse</span><span class="params">(CacheStrategy cacheStrategy)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cache中有一个内部实现类InternalCache，见名知意，它是okhttp内部使用的，它实现了InternalCache接口，接口中的方法都和Cache中的方法同名，而且这个实现类的所有方法都是调用了Cache中相应的方法，也就是说InternalCache的方法实现和Cache相应的方法一样，但Cache和InternalCache不一样的是，Cache比InternalCache多了一些方法供外部调用如flush()、 close()等，提供了更多对缓存的控制，而InternalCache中的方法都只是缓存的基本操作，如get、put、remove、update等方法，这些方法的逻辑都是基于Cache中的DiskLruCache实现，详情可以看<a href="https://blog.csdn.net/guolin_blog/article/details/28863651" target="_blank" rel="noopener">DiskLruCache</a>的原理实现。</p><p>要知道，okhttp默认是不使用缓存，也就是Cache为null，如果要使用缓存，我们需要自行配置，通过下面方法使用okhttp的缓存机制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//缓存的路径</span></span><br><span class="line">File cacheDir = <span class="keyword">new</span> File(Constant.PATH_NET_CACHE);</span><br><span class="line"><span class="comment">//这里通过带有两个参数的构造函数构造一个Cache</span></span><br><span class="line">Cache cache = <span class="keyword">new</span> Cache(cacheDir, <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">10</span>);<span class="comment">//缓存的最大尺寸10M</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//然后设置给OkHttpClient</span></span><br><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">    .cache(cache)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><p>通过上面全局设置后，Cache和InternalCache都不会为null，因为在创建Cache时InternalCache也一起创建了，okhttp的缓存机制就会生效。</p><p>我们先回到CacheInterceptor的intercept方法，它首先一开始就要判断cache是否等于null，那么CacheInterceptor的cache在哪里来的呢？是在构造函数中，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="meta">@Nullable</span> InternalCache cache;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CacheInterceptor</span><span class="params">(@Nullable InternalCache cache)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cache = cache;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可用看到它是InternalCache实例，在 getResponseWithInterceptorChain()中添加拦截器时就通过client为这个InternalCache赋值了，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RealCall.java</span></span><br><span class="line"><span class="function">Response <span class="title">getResponseWithInterceptorChain</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//添加负责缓存的拦截器</span></span><br><span class="line">    interceptors.add(<span class="keyword">new</span> CacheInterceptor(client.internalCache()));</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到new CacheInterceptor(client.internalCache())，所以我们看client的internalCache方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//OkHttpClient.java</span></span><br><span class="line"><span class="meta">@Nullable</span> <span class="function">InternalCache <span class="title">internalCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cache != <span class="keyword">null</span> ? cache.internalCache : internalCache;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>cache就是上面全局设置的cache实例，所以不为null，返回cache中的internalCache实例，这样CacheInterceptor中就持有internalCache实例。</p><h3 id="2、CacheStrategy-缓存策略"><a href="#2、CacheStrategy-缓存策略" class="headerlink" title="2、CacheStrategy - 缓存策略"></a>2、CacheStrategy - 缓存策略</h3><p>CacheStrategy是okhttp缓存策略的实现，okhttp缓存策略遵循了HTTP缓存策略，因此了解okhttp缓存策略前需要有HTTP缓存相关基础：<a href="https://my.oschina.net/leejun2005/blog/369148" target="_blank" rel="noopener">HTTP 协议缓存机制详解</a>，了解了HTTP缓存策略后，我们再来看CacheStrategy，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//CacheStrategy两个主要的成员变量：networkRequest、cacheResponse</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="meta">@Nullable</span> Request networkRequest;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="meta">@Nullable</span> Response cacheResponse;</span><br><span class="line"></span><br><span class="line">    CacheStrategy(Request networkRequest, Response cacheResponse) &#123;</span><br><span class="line">        <span class="keyword">this</span>.networkRequest = networkRequest;</span><br><span class="line">        <span class="keyword">this</span>.cacheResponse = cacheResponse;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过工厂模式创建CacheStrategy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> nowMillis;</span><br><span class="line">        <span class="keyword">final</span> Request request;</span><br><span class="line">        <span class="keyword">final</span> Response cacheResponse;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Factory</span><span class="params">(<span class="keyword">long</span> nowMillis, Request request, Response cacheResponse)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.nowMillis = nowMillis;</span><br><span class="line">            <span class="keyword">this</span>.request = request;</span><br><span class="line">            <span class="keyword">this</span>.cacheResponse = cacheResponse;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> CacheStrategy <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            CacheStrategy candidate = getCandidate();</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="keyword">return</span> candidate;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">         <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CacheStrategy是通过<a href="https://rain9155.github.io/2019/09/07/工厂模式/#more" target="_blank" rel="noopener">工厂模式</a>创建的，它有两个主要的成员变量：networkRequest、cacheResponse，CacheInterceptor的intercept方法通过CacheStrategy的networkRequest和cacheResponse的组合来判断执行什么策略，networkRequest是否为空决定是否请求网络，cacheResponse是否为空决定是否使用缓存，networkRequest和cacheResponse的4种组合和对应的缓存策略如下：</p><ul><li>1、networkRequest为null且cacheResponse为null：没有缓存使用，又不进行网络请求，构造状态码为504的Response。</li><li>2、networkRequest为null但cacheResponse不为null：有缓存使用，且缓存在有效期内，所以直接返回缓存的Response。</li><li>3、networkRequest不为null且cacheResponse不为null：有缓存使用，但缓存在客户端的判断中表示过期了，所以请求服务器进行决策，来决定是否使用缓存的Response。</li><li>4、networkRequest不为null但cacheResponse为null：没有缓存使用，所以直接使用服务器返回的Response</li></ul><p>networkRequest和cacheResponse在创建CacheStrategy时通过构造参数赋值，那么CacheStrategy在那里被创建呢？当调用CacheStrategy.Factory(long, Request, Response).get()时就会返回一个CacheStrategy实例，所以CacheStrategy在Factory的get方法中被创建，我们来看Factory的get方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CacheStrategy.Factory</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CacheStrategy <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CacheStrategy candidate = getCandidate();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> candidate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到CacheStrategy通过Factory的getCandidate方法创建，getCandidate方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CacheStrategy.Factory</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> CacheStrategy <span class="title">getCandidate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、没有Response缓存，直接进行网络请求</span></span><br><span class="line">    <span class="keyword">if</span> (cacheResponse == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CacheStrategy(request, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、如果TLS握手信息丢失，直接进行网络请求</span></span><br><span class="line">    <span class="keyword">if</span> (request.isHttps() &amp;&amp; cacheResponse.handshake() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CacheStrategy(request, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、根据Response状态码，Expired和Cache-Control的no-Store进行判断Response缓存是否可用</span></span><br><span class="line">    <span class="keyword">if</span> (!isCacheable(cacheResponse, request)) &#123;</span><br><span class="line">        <span class="comment">//Response缓存不可用，直接进行网络请求</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CacheStrategy(request, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获得Request的缓存控制字段CacheControl</span></span><br><span class="line">    CacheControl requestCaching = request.cacheControl();</span><br><span class="line">    <span class="comment">//4、根据Request中的Cache-Control的noCache和header是否设置If-Modified-Since或If-None-Match进行判断是否可以使用Response缓存</span></span><br><span class="line">    <span class="keyword">if</span> (requestCaching.noCache() || hasConditions(request)) &#123;</span><br><span class="line">        <span class="comment">//不可以使用Response缓存，直接进行网络请求</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CacheStrategy(request, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">//走到这里表示Response缓存可用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得Response的缓存控制字段CacheControl</span></span><br><span class="line">    CacheControl responseCaching = cacheResponse.cacheControl();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得该Response已经缓存的时长</span></span><br><span class="line">    <span class="keyword">long</span> ageMillis = cacheResponseAge();</span><br><span class="line">    <span class="comment">//获得该Response可以缓存的时长</span></span><br><span class="line">    <span class="keyword">long</span> freshMillis = computeFreshnessLifetime();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (requestCaching.maxAgeSeconds() != -<span class="number">1</span>) </span><br><span class="line">        <span class="comment">//一般取max-age</span></span><br><span class="line">        freshMillis = Math.min(freshMillis, SECONDS.toMillis(requestCaching.maxAgeSeconds()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> minFreshMillis = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (requestCaching.minFreshSeconds() != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//一般取0</span></span><br><span class="line">        minFreshMillis = SECONDS.toMillis(requestCaching.minFreshSeconds());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> maxStaleMillis = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!responseCaching.mustRevalidate() &amp;&amp; requestCaching.maxStaleSeconds() != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//取max-stale，</span></span><br><span class="line">        maxStaleMillis = SECONDS.toMillis(requestCaching.maxStaleSeconds());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5、判断缓存是否过期，决定是否使用Response缓存：Response已经缓存的时长 &lt; max-stale + max-age</span></span><br><span class="line">    <span class="keyword">if</span> (!responseCaching.noCache() &amp;&amp; ageMillis + minFreshMillis &lt; freshMillis + maxStaleMillis) &#123;</span><br><span class="line">        Response.Builder builder = cacheResponse.newBuilder();</span><br><span class="line">        <span class="keyword">if</span> (ageMillis + minFreshMillis &gt;= freshMillis) &#123;</span><br><span class="line">            builder.addHeader(<span class="string">"Warning"</span>, <span class="string">"110 HttpURLConnection \"Response is stale\""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> oneDayMillis = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000L</span>;</span><br><span class="line">        <span class="keyword">if</span> (ageMillis &gt; oneDayMillis &amp;&amp; isFreshnessLifetimeHeuristic()) &#123;</span><br><span class="line">            builder.addHeader(<span class="string">"Warning"</span>, <span class="string">"113 HttpURLConnection \"Heuristic expiration\""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.1、缓存没有过期，直接使用该Response缓存</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CacheStrategy(<span class="keyword">null</span>, builder.build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//5.2、缓存过期了，判断是否设置了Etag或Last-Modified等标记</span></span><br><span class="line">    String conditionName;</span><br><span class="line">    String conditionValue;</span><br><span class="line">    <span class="keyword">if</span> (etag != <span class="keyword">null</span>) &#123;</span><br><span class="line">        conditionName = <span class="string">"If-None-Match"</span>;</span><br><span class="line">        conditionValue = etag;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lastModified != <span class="keyword">null</span>) &#123;</span><br><span class="line">        conditionName = <span class="string">"If-Modified-Since"</span>;</span><br><span class="line">        conditionValue = lastModifiedString;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (servedDate != <span class="keyword">null</span>) &#123;</span><br><span class="line">        conditionName = <span class="string">"If-Modified-Since"</span>;</span><br><span class="line">        conditionValue = servedDateString;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//缓存没有设置Etag或Last-Modified等标记，所以直接进行网络请求</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CacheStrategy(request, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//缓存设置了Etag或Last-Modified等标记，所以添加If-None-Match或If-Modified-Since请求头，构造请求，交给服务器判断缓存是否可用</span></span><br><span class="line">    Headers.Builder conditionalRequestHeaders = request.headers().newBuilder();</span><br><span class="line">    Internal.instance.addLenient(conditionalRequestHeaders, conditionName, conditionValue);</span><br><span class="line"></span><br><span class="line">    Request conditionalRequest = request.newBuilder()</span><br><span class="line">        .headers(conditionalRequestHeaders.build())</span><br><span class="line">        .build();</span><br><span class="line">    <span class="comment">//networkRequest和cacheResponse都不为null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CacheStrategy(conditionalRequest, cacheResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> getCandidate()方法中根据<a href="https://my.oschina.net/leejun2005/blog/369148" target="_blank" rel="noopener"><strong>HTTP的缓存策略</strong></a>决定networkRequest和cacheResponse的组合，从getCandidate()方法中我们可以看到HTTP的缓存策略分为两种：</p><ul><li>1、强制缓存：<strong>客户端参与决策决定是否继续使用缓存</strong>，客户端第一次请求数据时，服务端返回了缓存的过期时间：Expires或Cache-Control，当客户端再次请求时，就判断缓存的过期时间，没有过期就可以继续使用缓存，否则就不使用，重新请求服务端。</li><li>2、对比缓存：<strong>服务端参与决策决定是否继续使用缓存</strong>，客户端第一次请求数据时，服务端会将缓存标识：Last-Modified/If-Modified-Since、Etag/If-None-Match和数据一起返回给客户端 ，当客户端再次请求时，客户端将缓存标识发送给服务端，服务端根据缓存标识进行判断，如果缓存还没有更新，可以使用，则返回304，表示客户端可以继续使用缓存，否则客户端不能继续使用缓存，只能使用服务器返回的新的响应。</li></ul><p>而且强制缓存优先于对比缓存，我们再贴出来自<a href="https://my.oschina.net/leejun2005/blog/369148" target="_blank" rel="noopener">HTTP 协议缓存机制详解</a>的一张图，它很好的解释了getCandidate()方法中1~5步骤流程，如下：</p><img src="/2019/09/07/okhttp3%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8/okhttp2.png" class="" title="okhttp"><h3 id="3、缓存机制"><a href="#3、缓存机制" class="headerlink" title="3、缓存机制"></a>3、缓存机制</h3><p>我们再回到CacheInterceptor的intercept方法，它的1~4步骤就是CacheStrategy的networkRequest和cacheResponse的4种组合情况，都有详细的注释，每一种组合对应一种缓存策略，而缓存策略又是基于getCandidate()方法中写死的HTTP缓存策略，再结合okhttp本地缓存的实现Cache，我们得出结论：<strong>okhttp的缓存机制 = Cache缓存实现 + 基于HTTP的缓存策略</strong>，整个流程图如下：</p><img src="/2019/09/07/okhttp3%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8/okhttp3.png" class="" title="okhttp"><p>了解了okhttp的缓存机制后，我们接着下一个拦截器ConnectInterceptor。</p><h2 id="ConnectInterceptor"><a href="#ConnectInterceptor" class="headerlink" title="ConnectInterceptor"></a>ConnectInterceptor</h2><p>ConnectInterceptor的intercept(Chain)方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ConnectInterceptor.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   </span><br><span class="line">    RealInterceptorChain realChain = (RealInterceptorChain) chain;</span><br><span class="line">    Request request = realChain.request();</span><br><span class="line">    <span class="comment">//获取Transmitter</span></span><br><span class="line">    Transmitter transmitter = realChain.transmitter();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> doExtensiveHealthChecks = !request.method().equals(<span class="string">"GET"</span>);</span><br><span class="line">    <span class="comment">//1、新建一个Exchange</span></span><br><span class="line">    Exchange exchange = transmitter.newExchange(chain, doExtensiveHealthChecks);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用proceed方法，里面调用下一个拦截器CallServerInterceptor的intercept方法</span></span><br><span class="line">    <span class="comment">//这里调用的proceed方法是带有三个参数的，它传进了Request、Transmitter和刚刚新建的Exchange</span></span><br><span class="line">    <span class="keyword">return</span> realChain.proceed(request, transmitter, exchange);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ConnectInterceptor的intercept(Chain)方法很简洁，里面定义了okhttp的连接机制，它首先获取Transmitter，然后通过Transmitter的newExchange方法创建一个Exchange，把它传到下一个拦截器CallServerInterceptor，Exchange是什么？Exchange负责从创建的连接的IO流中写入请求和读取响应，完成一次请求/响应的过程，在CallServerInterceptor中你会看到它真正的作用，这里先忽略。所以注释1的newExchange方法是连接机制的主要逻辑实现，我们继续看Transmitter的newExchange方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Transmitter.java</span></span><br><span class="line"><span class="function">Exchange <span class="title">newExchange</span><span class="params">(Interceptor.Chain chain, <span class="keyword">boolean</span> doExtensiveHealthChecks)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...省略异常处理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、通过ExchangeFinder的find方法找到一个ExchangeCodec</span></span><br><span class="line">    ExchangeCodec codec = exchangeFinder.find(client, chain, doExtensiveHealthChecks);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建Exchange，并把ExchangeCodec实例codec传进去，所以Exchange内部持有ExchangeCodec实例</span></span><br><span class="line">    Exchange result = <span class="keyword">new</span> Exchange(<span class="keyword">this</span>, call, eventListener, exchangeFinder, codec);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点是注释1，ExchangeFinder对象早在RetryAndFollowUpInterceptor中通过Transmitter的prepareToConnect方法创建，它的find方法是连接真正创建的地方，ExchangeFinder是什么？ExchangeFinder就是负责连接的创建，把创建好的连接放入连接池，如果连接池中已经有该连接，就直接取出复用，所以ExchangeFinder管理着两个重要的角色：RealConnection、RealConnectionPool，下面讲解一下RealConnectionPool和RealConnection，有助于连接机制的理解。</p><h3 id="1、RealConnection-连接实现"><a href="#1、RealConnection-连接实现" class="headerlink" title="1、RealConnection - 连接实现"></a>1、RealConnection - 连接实现</h3><p>连接的真正实现，实现了Connection接口，内部利用Socket建立连接，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Connection</span> </span>&#123;</span><br><span class="line">    <span class="comment">//返回这个连接使用的Route</span></span><br><span class="line">    <span class="function">Route <span class="title">route</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回这个连接使用的Socket</span></span><br><span class="line">    <span class="function">Socket <span class="title">socket</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果是HTTPS，返回TLS握手信息用于建立连接，否则返回null</span></span><br><span class="line">    <span class="meta">@Nullable</span> <span class="function">Handshake <span class="title">handshake</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回应用层使用的协议，Protocol是一个枚举，如HTTP1.1、HTTP2</span></span><br><span class="line">    <span class="function">Protocol <span class="title">protocol</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RealConnection</span> <span class="keyword">extends</span> <span class="title">Http2Connection</span>.<span class="title">Listener</span> <span class="keyword">implements</span> <span class="title">Connection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> RealConnectionPool connectionPool;</span><br><span class="line">    <span class="comment">//路由</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Route route;</span><br><span class="line">    <span class="comment">//内部使用这个rawSocket在TCP层建立连接</span></span><br><span class="line">    <span class="keyword">private</span> Socket rawSocket;</span><br><span class="line">    <span class="comment">//如果没有使用HTTPS，那么socket == rawSocket，否则这个socket == SSLSocket</span></span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line">    <span class="comment">//TLS握手</span></span><br><span class="line">    <span class="keyword">private</span> Handshake handshake;</span><br><span class="line">    <span class="comment">//应用层协议</span></span><br><span class="line">    <span class="keyword">private</span> Protocol protocol;</span><br><span class="line">    <span class="comment">//HTTP2连接</span></span><br><span class="line">    <span class="keyword">private</span> Http2Connection http2Connection;</span><br><span class="line">    <span class="comment">//okio库的BufferedSource和BufferedSink，相当于javaIO的输入输出流</span></span><br><span class="line">    <span class="keyword">private</span> BufferedSource source;</span><br><span class="line">    <span class="keyword">private</span> BufferedSink sink;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RealConnection</span><span class="params">(RealConnectionPool connectionPool, Route route)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.connectionPool = connectionPool;</span><br><span class="line">        <span class="keyword">this</span>.route = route;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> connectTimeout, <span class="keyword">int</span> readTimeout, <span class="keyword">int</span> writeTimeout, <span class="keyword">int</span> pingIntervalMillis, <span class="keyword">boolean</span> connectionRetryEnabled, Call call, EventListener eventListener)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RealConnection中有一个connect方法，外部可以调用该方法建立连接，connect方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RealConnection.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> connectTimeout, <span class="keyword">int</span> readTimeout, <span class="keyword">int</span> writeTimeout, <span class="keyword">int</span> pingIntervalMillis, <span class="keyword">boolean</span> connectionRetryEnabled, Call call, EventListener eventListener)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (protocol != <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"already connected"</span>);</span><br><span class="line"></span><br><span class="line">    RouteException routeException = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;ConnectionSpec&gt; connectionSpecs = route.address().connectionSpecs();</span><br><span class="line">    ConnectionSpecSelector connectionSpecSelector = <span class="keyword">new</span> ConnectionSpecSelector(connectionSpecs);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//路由选择</span></span><br><span class="line">    <span class="keyword">if</span> (route.address().sslSocketFactory() == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!connectionSpecs.contains(ConnectionSpec.CLEARTEXT)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RouteException(<span class="keyword">new</span> UnknownServiceException(</span><br><span class="line">            <span class="string">"CLEARTEXT communication not enabled for client"</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      String host = route.address().url().host();</span><br><span class="line">      <span class="keyword">if</span> (!Platform.get().isCleartextTrafficPermitted(host)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RouteException(<span class="keyword">new</span> UnknownServiceException(</span><br><span class="line">            <span class="string">"CLEARTEXT communication to "</span> + host + <span class="string">" not permitted by network security policy"</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (route.address().protocols().contains(Protocol.H2_PRIOR_KNOWLEDGE)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RouteException(<span class="keyword">new</span> UnknownServiceException(</span><br><span class="line">            <span class="string">"H2_PRIOR_KNOWLEDGE cannot be used with HTTPS"</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始连接</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (route.requiresTunnel()) &#123;<span class="comment">//如果是通道模式，则建立通道连接</span></span><br><span class="line">          connectTunnel(connectTimeout, readTimeout, writeTimeout, call, eventListener);</span><br><span class="line">          <span class="keyword">if</span> (rawSocket == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// We were unable to connect the tunnel but properly closed down our resources.</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//1、否则进行Socket连接，大部分是这种情况</span></span><br><span class="line">          connectSocket(connectTimeout, readTimeout, call, eventListener);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//建立HTTPS连接</span></span><br><span class="line">        establishProtocol(connectionSpecSelector, pingIntervalMillis, call, eventListener);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//...省略异常处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (http2Connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (connectionPool) &#123;</span><br><span class="line">        allocationLimit = http2Connection.maxConcurrentStreams();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>我们关注注释1，一般会调用connectSocket方法建立Socket连接，connectSocket方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RealConnection.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">connectSocket</span><span class="params">(<span class="keyword">int</span> connectTimeout, <span class="keyword">int</span> readTimeout, Call call,</span></span></span><br><span class="line"><span class="function"><span class="params">                           EventListener eventListener)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Proxy proxy = route.proxy();</span><br><span class="line">    Address address = route.address();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据代理类型的不同创建Socket</span></span><br><span class="line">    rawSocket = proxy.type() == Proxy.Type.DIRECT || proxy.type() == Proxy.Type.HTTP</span><br><span class="line">        ? address.socketFactory().createSocket()</span><br><span class="line">        : <span class="keyword">new</span> Socket(proxy);</span><br><span class="line"></span><br><span class="line">    eventListener.connectStart(call, route.socketAddress(), proxy);</span><br><span class="line">    rawSocket.setSoTimeout(readTimeout);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1、建立Socket连接</span></span><br><span class="line">        Platform.get().connectSocket(rawSocket, route.socketAddress(), connectTimeout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...省略异常处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获得Socket的输入输出流</span></span><br><span class="line">        source = Okio.buffer(Okio.source(rawSocket));</span><br><span class="line">        sink = Okio.buffer(Okio.sink(rawSocket));</span><br><span class="line">    &#125; </span><br><span class="line">     <span class="comment">//...省略异常处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们关注注释1，Platform是okhttp中根据不同Android版本平台的差异实现的一个兼容类，这里就不细究，Platform的connectSocket方法最终会调用rawSocket的connect()方法建立其Socket连接，建立Socket连接后，就可以通过Socket连接获得输入输出流source和sink，okhttp就可以从source读取或往sink写入数据，source和sink是BufferedSource和BufferedSink类型，它们是来自于<a href="https://github.com/square/okio" target="_blank" rel="noopener">okio库</a>，它是一个封装了java.io和java.nio的库，okhttp底层依赖这个库读写数据，Okio好在哪里？详情可以看这篇文章<a href="https://www.jianshu.com/p/2fff6fe403dd" target="_blank" rel="noopener">Okio好在哪</a>。</p><h3 id="2、RealConnectionPool-连接池"><a href="#2、RealConnectionPool-连接池" class="headerlink" title="2、RealConnectionPool -  连接池"></a>2、RealConnectionPool -  连接池</h3><p>连接池，用来管理连接对象RealConnection，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RealConnectionPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程池</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor executor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">        <span class="number">0</span> <span class="comment">/* corePoolSize */</span>,</span><br><span class="line">        Integer.MAX_VALUE <span class="comment">/* maximumPoolSize */</span>, </span><br><span class="line">        <span class="number">60L</span> <span class="comment">/* keepAliveTime */</span>, </span><br><span class="line">        TimeUnit.SECONDS,</span><br><span class="line">        <span class="keyword">new</span> SynchronousQueue&lt;&gt;(), </span><br><span class="line">        Util.threadFactory(<span class="string">"OkHttp ConnectionPool"</span>, <span class="keyword">true</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">boolean</span> cleanupRunning;</span><br><span class="line">    <span class="comment">//清理连接任务，在executor中执行</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Runnable cleanupRunnable = () -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//调用cleanup方法执行清理逻辑</span></span><br><span class="line">            <span class="keyword">long</span> waitNanos = cleanup(System.nanoTime());</span><br><span class="line">            <span class="keyword">if</span> (waitNanos == -<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (waitNanos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> waitMillis = waitNanos / <span class="number">1000000L</span>;</span><br><span class="line">                waitNanos -= (waitMillis * <span class="number">1000000L</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (RealConnectionPool.<span class="keyword">this</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//调用wait方法进入等待</span></span><br><span class="line">                        RealConnectionPool.<span class="keyword">this</span>.wait(waitMillis, (<span class="keyword">int</span>) waitNanos);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException ignored) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//双端队列，保存连接</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;RealConnection&gt; connections = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(RealConnection connection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!cleanupRunning) &#123;</span><br><span class="line">            cleanupRunning = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">//使用线程池执行清理任务</span></span><br><span class="line">            executor.execute(cleanupRunnable);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将新建连接插入队列</span></span><br><span class="line">        connections.add(connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">cleanup</span><span class="params">(<span class="keyword">long</span> now)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RealConnectionPool 在内部维护了一个线程池，用来执行清理连接任务cleanupRunnable，还维护了一个双端队列connections，用来缓存已经创建的连接。要知道创建一次连接要经历TCP握手，如果是HTTPS还要经历TLS握手，握手的过程都是耗时的，所以为了提高效率，就需要connections来对连接进行缓存，从而可以复用；还有如果连接使用完毕，长时间不释放，也会造成资源的浪费，所以就需要cleanupRunnable定时清理无用的连接，okhttp支持5个并发连接，默认每个连接keepAlive为5分钟，keepAlive就是连接空闲后，保持存活的时间。</p><p>当我们第一次调用RealConnectionPool 的put方法缓存新建连接时，如果cleanupRunnable还没执行，它首先会使用线程池执行cleanupRunnable，然后把新建连接放入双端队列，cleanupRunnable中会调用cleanup方法进行连接的清理，该方法返回现在到下次清理的时间间隔，然后调用wiat方法进入等待状态，等时间到了后，再次调用cleanup方法进行清理，就这样往复循环。我们来看一下cleanup方法的清理逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RealConnectionPool.java</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">cleanup</span><span class="params">(<span class="keyword">long</span> now)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> inUseConnectionCount = <span class="number">0</span>;<span class="comment">//正在使用连接数</span></span><br><span class="line">    <span class="keyword">int</span> idleConnectionCount = <span class="number">0</span>;<span class="comment">//空闲连接数</span></span><br><span class="line">    RealConnection longestIdleConnection = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">long</span> longestIdleDurationNs = Long.MIN_VALUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">//遍历所有连接，记录空闲连接和正在使用连接各自的数量</span></span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;RealConnection&gt; i = connections.iterator(); i.hasNext(); ) &#123;</span><br><span class="line">            RealConnection connection = i.next();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果该连接还在使用，pruneAndGetAllocationCount种通过引用计数的方式判断一个连接是否空闲</span></span><br><span class="line">            <span class="keyword">if</span> (pruneAndGetAllocationCount(connection, now) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//使用连接数加1</span></span><br><span class="line">                inUseConnectionCount++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//该连接没有在使用</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//空闲连接数加1</span></span><br><span class="line">            idleConnectionCount++;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//记录keepalive时间最长的那个空闲连接</span></span><br><span class="line">            <span class="keyword">long</span> idleDurationNs = now - connection.idleAtNanos;</span><br><span class="line">            <span class="keyword">if</span> (idleDurationNs &gt; longestIdleDurationNs) &#123;</span><br><span class="line">                longestIdleDurationNs = idleDurationNs;</span><br><span class="line">                <span class="comment">//这个连接很可能被移除，因为空闲时间太长</span></span><br><span class="line">                longestIdleConnection = connection;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//跳出循环后</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//默认keepalive时间keepAliveDurationNs最长为5分钟，空闲连接数idleConnectionCount最大为5个</span></span><br><span class="line">        <span class="keyword">if</span> (longestIdleDurationNs &gt;= <span class="keyword">this</span>.keepAliveDurationNs || idleConnectionCount &gt; <span class="keyword">this</span>.maxIdleConnections) &#123;<span class="comment">//如果longestIdleConnection的keepalive时间大于5分钟 或 空闲连接数超过5个</span></span><br><span class="line">            <span class="comment">//把longestIdleConnection连接从队列清理掉</span></span><br><span class="line">            connections.remove(longestIdleConnection);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (idleConnectionCount &gt; <span class="number">0</span>) &#123;<span class="comment">//如果空闲连接数小于5个 并且 longestIdleConnection连接还没到期清理</span></span><br><span class="line">            <span class="comment">//返回该连接的到期时间，下次再清理</span></span><br><span class="line">            <span class="keyword">return</span> keepAliveDurationNs - longestIdleDurationNs;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (inUseConnectionCount &gt; <span class="number">0</span>) &#123;<span class="comment">//如果没有空闲连接 且 所有连接都还在使用</span></span><br><span class="line">            <span class="comment">//返回keepAliveDurationNs，5分钟后再清理</span></span><br><span class="line">            <span class="keyword">return</span> keepAliveDurationNs;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 没有任何连接，把cleanupRunning复位</span></span><br><span class="line">            cleanupRunning = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把longestIdleConnection连接从队列清理掉后，关闭该连接的socket，返回0，立即再次进行清理</span></span><br><span class="line">    closeQuietly(longestIdleConnection.socket());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从cleanup方法得知，okhttp清理连接的逻辑如下：</p><p>1、首先遍历所有连接，记录空闲连接数idleConnectionCount和正在使用连接数inUseConnectionCount，在记录空闲连接数时，还要找出空闲时间最长的空闲连接longestIdleConnection，这个连接是很有可能被清理的；</p><p>2、遍历完后，根据最大空闲时长和最大空闲连接数来决定是否清理longestIdleConnection，</p><p>​    2.1、如果longestIdleConnection的空闲时间大于最大空闲时长 或 空闲连接数大于最大空闲连接数，那么该连接就会被从队列中移除，然后关闭该连接的socket，返回0，立即再次进行清理；</p><p>​    2.2、如果空闲连接数小于5个 并且 longestIdleConnection的空闲时间小于最大空闲时长即还没到期清理，那么返回该连接的到期时间，下次再清理；</p><p>​    2.3、如果没有空闲连接 且 所有连接都还在使用，那么返回默认的keepAlive时间，5分钟后再清理；</p><p>​    2.4、没有任何连接，idleConnectionCount和inUseConnectionCount都为0，把cleanupRunning复位，等待下一次put连接时，再次使用线程池执行cleanupRunnable。</p><p>了解了RealConnectionPool和RealConnection后，我们再回到ExchangeFinder的find方法，这里是连接创建的地方。</p><h3 id="3、连接创建（连接机制）"><a href="#3、连接创建（连接机制）" class="headerlink" title="3、连接创建（连接机制）"></a>3、连接创建（连接机制）</h3><p>ExchangeFinder的fing方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ExchangeFinder.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ExchangeCodec <span class="title">find</span><span class="params">( OkHttpClient client, Interceptor.Chain chain, <span class="keyword">boolean</span> doExtensiveHealthChecks)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        </span><br><span class="line">      <span class="comment">//调用findHealthyConnection方法，返回RealConnection</span></span><br><span class="line">      RealConnection resultConnection = findHealthyConnection(connectTimeout, readTimeout,  writeTimeout, pingIntervalMillis, connectionRetryEnabled, doExtensiveHealthChecks);</span><br><span class="line">        </span><br><span class="line">      <span class="keyword">return</span> resultConnection.newCodec(client, chain);  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...省略异常处理</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">private</span> RealConnection <span class="title">findHealthyConnection</span><span class="params">(<span class="keyword">int</span> connectTimeout, <span class="keyword">int</span> readTimeout, <span class="keyword">int</span> writeTimeout, <span class="keyword">int</span> pingIntervalMillis, <span class="keyword">boolean</span> connectionRetryEnabled, <span class="keyword">boolean</span> doExtensiveHealthChecks)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">     <span class="comment">//一个死循环</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        </span><br><span class="line">       <span class="comment">//调用findConnection方法，返回RealConnection</span></span><br><span class="line">      RealConnection candidate = findConnection(connectTimeout, readTimeout, writeTimeout,</span><br><span class="line">          pingIntervalMillis, connectionRetryEnabled);</span><br><span class="line">        </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断连接是否可用</span></span><br><span class="line">        <span class="keyword">if</span> (!candidate.isHealthy(doExtensiveHealthChecks)) &#123;</span><br><span class="line">            candidate.noNewExchanges();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> candidate;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>ExchangeFinder的find方法会调用findHealthyConnection方法，里面会不断调用findConnection方法，直到找到一个可用的连接返回。ExchangeFinder的findConnection方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ExchangeFinder.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> RealConnection <span class="title">findConnection</span><span class="params">(<span class="keyword">int</span> connectTimeout, <span class="keyword">int</span> readTimeout, <span class="keyword">int</span> writeTimeout, <span class="keyword">int</span> pingIntervalMillis, <span class="keyword">boolean</span> connectionRetryEnabled)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> foundPooledConnection = <span class="keyword">false</span>;</span><br><span class="line">    RealConnection result = <span class="keyword">null</span>;<span class="comment">//返回结果，可用的连接</span></span><br><span class="line">    Route selectedRoute = <span class="keyword">null</span>;</span><br><span class="line">    RealConnection releasedConnection;</span><br><span class="line">    Socket toClose;</span><br><span class="line">    <span class="keyword">synchronized</span> (connectionPool) &#123;</span><br><span class="line">       <span class="keyword">if</span> (transmitter.isCanceled()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>);</span><br><span class="line">      hasStreamFailure = <span class="keyword">false</span>; .</span><br><span class="line"></span><br><span class="line"> <span class="comment">//1、尝试使用已经创建过的连接，已经创建过的连接可能已经被限制创建新的流</span></span><br><span class="line">      releasedConnection = transmitter.connection;</span><br><span class="line">      <span class="comment">//1.1、如果已经创建过的连接已经被限制创建新的流，就释放该连接（releaseConnectionNoEvents中会把该连接置空），并返回该连接的Socket以关闭</span></span><br><span class="line">      toClose = transmitter.connection != <span class="keyword">null</span> &amp;&amp; transmitter.connection.noNewExchanges</span><br><span class="line">          ? transmitter.releaseConnectionNoEvents()</span><br><span class="line">          : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.2、已经创建过的连接还能使用，就直接使用它当作结果、</span></span><br><span class="line">        <span class="keyword">if</span> (transmitter.connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            result = transmitter.connection;</span><br><span class="line">            releasedConnection = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、已经创建过的连接不能使用</span></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//2.1、尝试从连接池中找可用的连接，如果找到，这个连接会赋值先保存在Transmitter中</span></span><br><span class="line">            <span class="keyword">if</span> (connectionPool.transmitterAcquirePooledConnection(address, transmitter, <span class="keyword">null</span>, <span class="keyword">false</span>)) &#123;</span><br><span class="line">                <span class="comment">//2.2、从连接池中找到可用的连接</span></span><br><span class="line">                foundPooledConnection = <span class="keyword">true</span>;</span><br><span class="line">                result = transmitter.connection;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nextRouteToTry != <span class="keyword">null</span>) &#123;</span><br><span class="line">                selectedRoute = nextRouteToTry;</span><br><span class="line">                nextRouteToTry = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (retryCurrentRoute()) &#123;</span><br><span class="line">                selectedRoute = transmitter.connection.route();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">closeQuietly(toClose);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//3、如果在上面已经找到了可用连接，直接返回结果</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//走到这里没有找到可用连接</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//看看是否需要路由选择，多IP操作</span></span><br><span class="line">    <span class="keyword">boolean</span> newRouteSelection = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (selectedRoute == <span class="keyword">null</span> &amp;&amp; (routeSelection == <span class="keyword">null</span> || !routeSelection.hasNext())) &#123;</span><br><span class="line">        newRouteSelection = <span class="keyword">true</span>;</span><br><span class="line">        routeSelection = routeSelector.next();</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Route&gt; routes = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">synchronized</span> (connectionPool) &#123;</span><br><span class="line">        <span class="keyword">if</span> (transmitter.isCanceled()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果有下一个路由</span></span><br><span class="line">        <span class="keyword">if</span> (newRouteSelection) &#123;</span><br><span class="line">            routes = routeSelection.getAll();</span><br><span class="line">            <span class="comment">//4、这里第二次尝试从连接池中找可用连接</span></span><br><span class="line">            <span class="keyword">if</span> (connectionPool.transmitterAcquirePooledConnection(address, transmitter, routes, <span class="keyword">false</span>)) &#123;</span><br><span class="line">                <span class="comment">//4.1、从连接池中找到可用的连接</span></span><br><span class="line">                foundPooledConnection = <span class="keyword">true</span>;</span><br><span class="line">                result = transmitter.connection;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在连接池中没有找到可用连接</span></span><br><span class="line">        <span class="keyword">if</span> (!foundPooledConnection) &#123;</span><br><span class="line">            <span class="keyword">if</span> (selectedRoute == <span class="keyword">null</span>) &#123;</span><br><span class="line">                selectedRoute = routeSelection.next();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//5、所以这里新创建一个连接，后面会进行Socket连接</span></span><br><span class="line">            result = <span class="keyword">new</span> RealConnection(connectionPool, selectedRoute);</span><br><span class="line">            connectingConnection = result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.2、如果在连接池中找到可用的连接，直接返回该连接</span></span><br><span class="line">    <span class="keyword">if</span> (foundPooledConnection) &#123;</span><br><span class="line">        eventListener.connectionAcquired(call, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.1、调用RealConnection的connect方法进行Socket连接，这个在RealConnection中讲过</span></span><br><span class="line">    result.connect(connectTimeout, readTimeout, writeTimeout, pingIntervalMillis, connectionRetryEnabled, call, eventListener);</span><br><span class="line">    </span><br><span class="line">    connectionPool.routeDatabase.connected(result.route());</span><br><span class="line"></span><br><span class="line">    Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">synchronized</span> (connectionPool) &#123;</span><br><span class="line">        connectingConnection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//如果我们刚刚创建了同一地址的多路复用连接，释放这个连接并获取那个连接</span></span><br><span class="line">        <span class="keyword">if</span> (connectionPool.transmitterAcquirePooledConnection(address, transmitter, routes, <span class="keyword">true</span>)) &#123;</span><br><span class="line">            result.noNewExchanges = <span class="keyword">true</span>;</span><br><span class="line">            socket = result.socket();</span><br><span class="line">            result = transmitter.connection;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//5.2、把刚刚新建的连接放入连接池</span></span><br><span class="line">            connectionPool.put(result);</span><br><span class="line">            <span class="comment">//5.3、把刚刚新建的连接保存到Transmitter的connection字段</span></span><br><span class="line">            transmitter.acquireConnectionNoEvents(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    closeQuietly(socket);</span><br><span class="line">    eventListener.connectionAcquired(call, result);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//5.4、返回结果</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个findConnection方法就是整个ConnectInterceptor的核心，我们忽略掉多IP操作和多路复用(HTTP2)，假设现在我们是第一次请求，连接池和Transmitter中没有该连接，所以跳过1、2、3，直接来到5，创建一个新的连接，然后把它放入连接池和Transmitter中；接着我们用同一个Call进行了第二次请求，这时连接池和Transmitter中有该连接，所以就会走1、2、3，如果Transmitter中的连接还可用就返回，否则从连接池获取一个可用连接返回，所以整个连接机制的大概过程如下：</p><img src="/2019/09/07/okhttp3%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8/okhttp4.png" class="" title="okhttp"><p>Transmitter中的连接和连接池中的连接有什么区别？我们知道每创建一个Call，就会创建一个对应的Transmitter，一个Call可以发起多次请求（同步、异步），不同的Call有不同的Transmitter，连接池是在创建OkhttpClient时创建的，所以连接池是所有Call共享的，即连接池中的连接所有Call都可以复用，而Transmitter中的那个连接只是对应它相应的Call，只能被本次Call的所有请求复用。</p><p>了解了okhttp的连接机制后，我们接着下一个拦截器CallServerInterceptor。</p><h2 id="CallServerInterceptor"><a href="#CallServerInterceptor" class="headerlink" title="CallServerInterceptor"></a>CallServerInterceptor</h2><p>CallServerInterceptor的intercept(Chain)方法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CallServerInterceptor.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    RealInterceptorChain realChain = (RealInterceptorChain) chain;</span><br><span class="line">    <span class="comment">//获取Exchange</span></span><br><span class="line">    Exchange exchange = realChain.exchange();</span><br><span class="line">    <span class="comment">//获取Request</span></span><br><span class="line">    Request request = realChain.request();</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过Exchange的writeRequestHeaders(request)方法写入请求的header</span></span><br><span class="line">    exchange.writeRequestHeaders(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> responseHeadersStarted = <span class="keyword">false</span>;</span><br><span class="line">    Response.Builder responseBuilder = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (HttpMethod.permitsRequestBody(request.method()) &amp;&amp; request.body() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">if</span> (responseBuilder == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//通过okio写入请求的body</span></span><br><span class="line">            <span class="keyword">if</span> (request.body().isDuplex()) &#123;</span><br><span class="line">                exchange.flushRequest();</span><br><span class="line">                BufferedSink bufferedRequestBody = Okio.buffer(</span><br><span class="line">                    exchange.createRequestBody(request, <span class="keyword">true</span>));</span><br><span class="line">                request.body().writeTo(bufferedRequestBody);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                BufferedSink bufferedRequestBody = Okio.buffer(</span><br><span class="line">                    exchange.createRequestBody(request, <span class="keyword">false</span>));</span><br><span class="line">                request.body().writeTo(bufferedRequestBody);</span><br><span class="line">                bufferedRequestBody.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      exchange.noRequestBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//下面开始获取网络请求返回的响应</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过Exchange的readResponseHeaders(boolean)方法读取响应的header</span></span><br><span class="line">    <span class="keyword">if</span> (responseBuilder == <span class="keyword">null</span>) &#123;</span><br><span class="line">        responseBuilder = exchange.readResponseHeaders(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取响应后，通过Builder模式构造Response</span></span><br><span class="line">    Response response = responseBuilder</span><br><span class="line">        .request(request)</span><br><span class="line">        .handshake(exchange.connection().handshake())</span><br><span class="line">        .sentRequestAtMillis(sentRequestMillis)</span><br><span class="line">        .receivedResponseAtMillis(System.currentTimeMillis())</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造Response的body</span></span><br><span class="line">    <span class="keyword">if</span> (forWebSocket &amp;&amp; code == <span class="number">101</span>) &#123;</span><br><span class="line">        <span class="comment">//构造一个空的body的Response</span></span><br><span class="line">        response = response.newBuilder()</span><br><span class="line">            .body(Util.EMPTY_RESPONSE)</span><br><span class="line">            .build();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//通过Exchange的openResponseBody(Response)方法读取响应的body，然后通过响应的body继续构造Response</span></span><br><span class="line">        response = response.newBuilder()</span><br><span class="line">            .body(exchange.openResponseBody(response))</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回响应Response</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在ConnectInterceptor中我们已经建立了连接，连接到了服务器，获取了输入输出流，所以CallServerInterceptor的intercept(Chain)方法逻辑就是把请求发送到服务器，然后获取服务器的响应，如下：</p><p>1、发送请求：</p><p>​    1.1、通过Exchange的writeRequestHeaders(request)方法写入请求的header；</p><p>​    1.2、如果请求的body不为空，通过okio写入请求的body。</p><p>2、获取响应：</p><p>​    2.1、通过Exchange的readResponseHeaders(boolean)方法读取响应的header；</p><p>​    2.2、通过Exchange的openResponseBody(Response)方法读取响应的body。</p><p>这个发送获取的过程通过Exchange进行，前面已经讲过它在ConnectInterceptor中创建，在process方法中传进来，所以这里可以通过Chain获取Exchange，Exchange它是负责从IO流中写入请求和读取响应，完成一次请求/响应的过程，它内部的读写都是通过一个ExchangeCodec类型的codec来进行，而ExchangeCodec内部又是通过Okio的BufferedSource和BufferedSink进行IO读写，这个过程在上一篇文章已经分析过了，这里不在累述。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>结合上一篇文章，我们对okhttp已经有了一个深入的了解，首先，我们会在请求的时候初始化一个Call的实例，然后执行它的execute()方法或enqueue()方法，内部最后都会执行到getResponseWithInterceptorChain()方法，这个方法里面通过拦截器组成的责任链，依次经过用户自定义普通拦截器、重试拦截器、桥接拦截器、缓存拦截器、连接拦截器和用户自定义网络拦截器和访问服务器拦截器等拦截处理过程，来获取到一个响应并交给用户。okhttp的请求流程、缓存机制和连接机制是当中的重点，在阅读源码的过程中也学习到很多东西，下一次就来分析它的搭档Retrofit。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;上一篇文章：&lt;a href=&quot;https://rain9155.github.io/2019/09/03/okhttp3源码分析之请求流程/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;okhttp3源码分析之请求流程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本篇文章继续通过源码来探讨okhttp的另外一个重要知识点：拦截器，在上一篇文章我们知道，在请求发送到服务器之前有一系列的拦截器对请求做了处理后才发送出去，在服务器返回响应之后，同样的有一系列拦截器对响应做了处理后才返回给发起请求的调用者，可见，拦截器是okhttp的一个重要的核心功能，在分析各个拦截器功能的同时又会牵扯出okhttp的缓存机制、连接机制。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文源码基于okhttp3.14.x&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;okhttp项目地址：&lt;a href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fsquare%2Fokhttp&quot;&gt;okhttp&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="优秀开源库分析" scheme="http://yoursite.com/categories/%E4%BC%98%E7%A7%80%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%86%E6%9E%90/"/>
    
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="okhttp" scheme="http://yoursite.com/tags/okhttp/"/>
    
  </entry>
  
  <entry>
    <title>okhttp3源码分析之请求流程</title>
    <link href="http://yoursite.com/2019/09/03/okhttp3%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/09/03/okhttp3%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B/</id>
    <published>2019-09-03T14:49:13.000Z</published>
    <updated>2023-01-07T10:44:48.955Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Android开发中，当下最火的网络请求框架莫过于okhttp和retrofit，它们都是square公司的产品，两个都是非常优秀开源库，值得我们去阅读它们的源码，学习它们的设计理念，但其实retrofit底层还是用okhttp来发起网络请求的，所以深入理解了okhttp也就深入理解了retrofit，它们的源码阅读顺序应该是先看okhttp，我在retrofit上发现它最近的一次提交才把okhttp版本更新到3.14，okhttp目前最新的版本是4.0.x，okhttp从4.0.x开始采用kotlin编写，在这之前还是用java，而我本次分析的okhttp源码版本是基本3.14.x，看哪个版本的不重要，重要的是阅读过后的收获，我打算分2篇文章去分析okhttp，分别是：</p><ul><li>请求流程(同步、异步)</li><li>拦截器(Interceptor)</li></ul><p>本文是第一篇 - okhttp的请求流程，okhttp项目地址：<a href="https://github.com/square/okhttp" target="_blank" rel="noopener">okhttp</a></p><a id="more"></a><h2 id="okhttp的简单使用"><a href="#okhttp的简单使用" class="headerlink" title="okhttp的简单使用"></a>okhttp的简单使用</h2><p>我们通过一个简单的GET请求来回忆一下okhttp的使用步骤，并以这个实例为例讲解okhttp的请求流程，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、创建OkHttpClient</span></span><br><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">    .readTimeout(<span class="number">5</span>, TimeUnit.SECONDS)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、创建请求Request</span></span><br><span class="line">Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">    .url(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">    .build();</span><br><span class="line"><span class="comment">//3、创建一个Call，用于发起网络请求</span></span><br><span class="line">Call call = client.newCall(request);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、发起GET请求</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.1、同步请求，调用Call的execute()方法</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//接收到回复Response</span></span><br><span class="line">    Response response = call.execute();</span><br><span class="line">    Log.d(TAG, response.body().string());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.2、异步请求, 调用Call的enqueue()方法</span></span><br><span class="line">call.enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//接收到回复Response</span></span><br><span class="line">        Log.d(TAG, response.body().string());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看到，使用okhttp发起网络请求要经过4步：</p><ul><li>1、创建OkHttpClient</li><li>2、创建请求Request</li><li>3、通过OkHttpClient和Request创建一个Call，用于发起网络请求</li><li>4、调用Call的execute()或enqueue()方法发起同步或异步请求</li></ul><p>当服务器处理完一个请求Request后，就会返回一个响应，在okhttp中用Response代表HTTP的响应，这就是一个典型的<a href="https://rain9155.github.io/2018/12/31/Http网络请求浅析/" target="_blank" rel="noopener">HTTP</a>请求/响应流程。下面简单介绍1~3步骤：</p><h3 id="1、创建OkHttpClient"><a href="#1、创建OkHttpClient" class="headerlink" title="1、创建OkHttpClient"></a>1、创建OkHttpClient</h3><p>OkHttpClient是okhttp中的大管家，它将具体的工作分发到各个子系统中去完成，它使用<a href="https://rain9155.github.io/2019/09/07/Builder%E6%A8%A1%E5%BC%8F/#more" target="_blank" rel="noopener">Builder模式</a>配置网络请求的各种参数如超时、拦截器、分发器等，Builder中可配置的参数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//OkHttpClient.Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    Dispatcher dispatcher;<span class="comment">//分发器</span></span><br><span class="line">    <span class="meta">@Nullable</span> Proxy proxy;<span class="comment">//代理</span></span><br><span class="line">    List&lt;Protocol&gt; protocols;<span class="comment">//应用层协议</span></span><br><span class="line">    List&lt;ConnectionSpec&gt; connectionSpecs;<span class="comment">//传输层协议</span></span><br><span class="line">    <span class="keyword">final</span> List&lt;Interceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//应用拦截器</span></span><br><span class="line">    <span class="keyword">final</span> List&lt;Interceptor&gt; networkInterceptors = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//网络拦截器</span></span><br><span class="line">    EventListener.Factory eventListenerFactory;<span class="comment">//http请求回调监听</span></span><br><span class="line">    ProxySelector proxySelector;<span class="comment">//代理选择</span></span><br><span class="line">    CookieJar cookieJar;<span class="comment">//cookie</span></span><br><span class="line">    <span class="meta">@Nullable</span> Cache cache;<span class="comment">//网络缓存</span></span><br><span class="line">    <span class="meta">@Nullable</span> InternalCache internalCache;<span class="comment">//内部缓存</span></span><br><span class="line">    SocketFactory socketFactory;<span class="comment">//socket 工厂</span></span><br><span class="line">    <span class="meta">@Nullable</span> SSLSocketFactory sslSocketFactory;<span class="comment">//安全套接层socket 工厂，用于HTTPS</span></span><br><span class="line">    <span class="meta">@Nullable</span> CertificateChainCleaner certificateChainCleaner;<span class="comment">//验证确认响应证书，适用 HTTPS 请求连接的主机名</span></span><br><span class="line">    HostnameVerifier hostnameVerifier;<span class="comment">//主机名字确认</span></span><br><span class="line">    CertificatePinner certificatePinner;<span class="comment">//证书链</span></span><br><span class="line">    Authenticator proxyAuthenticator;<span class="comment">//代理身份验证</span></span><br><span class="line">    Authenticator authenticator;<span class="comment">//本地身份验证</span></span><br><span class="line">    ConnectionPool connectionPool;<span class="comment">//连接池,复用连接</span></span><br><span class="line">    Dns dns;<span class="comment">//域名</span></span><br><span class="line">    <span class="keyword">boolean</span> followSslRedirects;<span class="comment">//安全套接层重定向</span></span><br><span class="line">    <span class="keyword">boolean</span> followRedirects;<span class="comment">//本地重定向</span></span><br><span class="line">    <span class="keyword">boolean</span> retryOnConnectionFailure;<span class="comment">//错误重连</span></span><br><span class="line">    <span class="keyword">int</span> callTimeout;<span class="comment">//请求超时，它包括dns解析、connect、read、write和服务器处理的时间</span></span><br><span class="line">    <span class="keyword">int</span> connectTimeout;<span class="comment">//connect超时</span></span><br><span class="line">    <span class="keyword">int</span> readTimeout;<span class="comment">//read超时</span></span><br><span class="line">    <span class="keyword">int</span> writeTimeout;<span class="comment">//write超时</span></span><br><span class="line">    <span class="keyword">int</span> pingInterval;<span class="comment">//ping超时</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里是配置默认的参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      dispatcher = <span class="keyword">new</span> Dispatcher();</span><br><span class="line">      protocols = DEFAULT_PROTOCOLS;<span class="comment">//Protocol.HTTP_2和Protocol.HTTP_1_1</span></span><br><span class="line">      connectionSpecs = DEFAULT_CONNECTION_SPECS;</span><br><span class="line">      eventListenerFactory = EventListener.factory(EventListener.NONE);</span><br><span class="line">      proxySelector = ProxySelector.getDefault();</span><br><span class="line">      <span class="keyword">if</span> (proxySelector == <span class="keyword">null</span>) &#123;</span><br><span class="line">        proxySelector = <span class="keyword">new</span> NullProxySelector();</span><br><span class="line">      &#125;</span><br><span class="line">      cookieJar = CookieJar.NO_COOKIES;</span><br><span class="line">      socketFactory = SocketFactory.getDefault();</span><br><span class="line">      hostnameVerifier = OkHostnameVerifier.INSTANCE;</span><br><span class="line">      certificatePinner = CertificatePinner.DEFAULT;</span><br><span class="line">      proxyAuthenticator = Authenticator.NONE;</span><br><span class="line">      authenticator = Authenticator.NONE;</span><br><span class="line">      connectionPool = <span class="keyword">new</span> ConnectionPool();</span><br><span class="line">      dns = Dns.SYSTEM;</span><br><span class="line">      followSslRedirects = <span class="keyword">true</span>;</span><br><span class="line">      followRedirects = <span class="keyword">true</span>;</span><br><span class="line">      retryOnConnectionFailure = <span class="keyword">true</span>;</span><br><span class="line">      callTimeout = <span class="number">0</span>;</span><br><span class="line">      connectTimeout = <span class="number">10_000</span>;</span><br><span class="line">      readTimeout = <span class="number">10_000</span>;</span><br><span class="line">      writeTimeout = <span class="number">10_000</span>;</span><br><span class="line">      pingInterval = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里通过另外一个OkHttpClient配置参数</span></span><br><span class="line">    Builder(OkHttpClient okHttpClient) &#123;</span><br><span class="line">      <span class="keyword">this</span>.dispatcher = okHttpClient.dispatcher;</span><br><span class="line">      <span class="keyword">this</span>.proxy = okHttpClient.proxy;</span><br><span class="line">      <span class="keyword">this</span>.protocols = okHttpClient.protocols;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置完参数后，通过Builder的参数创建一个OkHttpClient</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OkHttpClient <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OkHttpClient(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、创建请求Request"><a href="#2、创建请求Request" class="headerlink" title="2、创建请求Request"></a>2、创建请求Request</h3><p>在okhttp中Request代表着一个HTTP请求，它封装了请求的具体消息，如url、header、body等，它和OkHttpClient一样都是使用Budiler模式来配置自己的参数，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Request.Budiler</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    HttpUrl url;</span><br><span class="line">    String method;</span><br><span class="line">    Headers.Builder headers;</span><br><span class="line">    RequestBody body;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里配置默认的参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.method = <span class="string">"GET"</span>;<span class="comment">//默认是GET请求</span></span><br><span class="line">      <span class="keyword">this</span>.headers = <span class="keyword">new</span> Headers.Builder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里通过另外一个Request配置参数</span></span><br><span class="line">    Builder(Request request) &#123;</span><br><span class="line">      <span class="keyword">this</span>.url = request.url;</span><br><span class="line">      <span class="keyword">this</span>.method = request.method;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置完参数后，通过Builder的参数创建一个Request</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Request <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (url == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"url == null"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Request(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、创建用于发起网络请求的Call"><a href="#3、创建用于发起网络请求的Call" class="headerlink" title="3、创建用于发起网络请求的Call"></a>3、创建用于发起网络请求的Call</h3><p>Call是一个接口，它的具体实现类是RealCall，Call中定义了一些enqueue(Callback)<code>、</code>execute()等关键方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Call</span> <span class="keyword">extends</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//返回当前请求</span></span><br><span class="line">    <span class="function">Request <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//同步请求方法，此方法会阻塞当前线程直到请求结果放回</span></span><br><span class="line">    <span class="function">Response <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="comment">//异步请求方法，此方法会将请求添加到队列中，然后等待请求返回</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Callback responseCallback)</span></span>;</span><br><span class="line">    <span class="comment">//取消请求</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//判断请求是否在执行</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isExecuted</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//判断请求是否取消</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCanceled</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//返回请求的超时时间</span></span><br><span class="line">    <span class="function">Timeout <span class="title">timeout</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//克隆一个新的请求</span></span><br><span class="line">    <span class="function">Call <span class="title">clone</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">        <span class="function">Call <span class="title">newCall</span><span class="params">(Request request)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到Call接口中有一个Factory接口，Factory中有一个newCall(Request)方法，这说明Call是通过<a href="https://rain9155.github.io/2019/09/07/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/#more" target="_blank" rel="noopener">工厂模式</a>创建，而OkHttpClient实现了Call.Factory接口，重写了newCall(Request)方法，返回了Call的具体实现类RealCall，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpClient</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">Call</span>.<span class="title">Factory</span>, <span class="title">WebSocket</span>.<span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Call <span class="title">newCall</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用了RealCall的newRealCall()</span></span><br><span class="line">        <span class="keyword">return</span> RealCall.newRealCall(<span class="keyword">this</span>, request, <span class="keyword">false</span> <span class="comment">/* for web socket */</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RealCall</span> <span class="keyword">implements</span> <span class="title">Call</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> RealCall <span class="title">newRealCall</span><span class="params">(OkHttpClient client, Request originalRequest, <span class="keyword">boolean</span> forWebSocket)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//返回RealCall对象</span></span><br><span class="line">        RealCall call = <span class="keyword">new</span> RealCall(client, originalRequest, forWebSocket);</span><br><span class="line">        call.transmitter = <span class="keyword">new</span> Transmitter(client, call);</span><br><span class="line">        <span class="keyword">return</span> call;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以调用<strong>client.newCall(request)</strong>其实返回的是RealCall对象，而RealCall封装了请求的调用逻辑。</p><p>到这里也就走到了注释4，也就是第4步，okhttp通过Call的实现类RealCall的execute()或enqueue()方法发起同步或异步请求，也就是本文的重点，下面分别详细介绍:</p><h2 id="同步请求-RealCall-execute"><a href="#同步请求-RealCall-execute" class="headerlink" title="同步请求 - RealCall :: execute()"></a>同步请求 - RealCall :: execute()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RealCall.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1、调用Dispatcher的executed(RealCall)方法</span></span><br><span class="line">        client.dispatcher().executed(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//2、调用getResponseWithInterceptorChain()方法</span></span><br><span class="line">        <span class="keyword">return</span> getResponseWithInterceptorChain();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//3、同步请求任务执行完毕，调用Dispatcher的finished(RealCall)方法</span></span><br><span class="line">        client.dispatcher().finished(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client就是我们上面所讲的OkHttpClient的实例，它在创建RealCall时作为构造参数传了进去，而OkHttpClient的dispatcher()方法返回的是Dispatcher实例，它在OkHttpClient构造时被创建。</p><p>我们先讲一下Dispatcher，那Dispatcher是什么呢？Dispatcher是一个任务调度器，它负责进行请求任务的调度，它的内部维护着3个任务队列(readyAsyncCalls、runningAsyncCalls、runningSyncCalls)和1个<a href="https://rain9155.github.io/2019/07/19/java线程池/" target="_blank" rel="noopener">线程池</a>(executorService)，Dispatcher主要内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Dispatcher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxRequests = <span class="number">64</span>;<span class="comment">//最大请求数64个</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxRequestsPerHost = <span class="number">5</span>;<span class="comment">//每个主机最大请求数5个</span></span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@Nullable</span> Runnable idleCallback;<span class="comment">//idle任务回调，类似于Android的idlehandler, 可以在Dispatcher没有任务调度（空闲时）时执行idleCallback中的任务</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程池，执行runningAsyncCalls队列里面的请求任务</span></span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@Nullable</span> ExecutorService executorService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//等待执行的异步请求任务队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;AsyncCall&gt; readyAsyncCalls = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正在执行的异步请求任务队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;AsyncCall&gt; runningAsyncCalls = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正在执行的同步请求任务队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;RealCall&gt; runningSyncCalls = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">executed</span><span class="params">(RealCall call)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(AsyncCall call)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">finished</span><span class="params">(RealCall call)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">finished</span><span class="params">(AsyncCall call)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">promoteAndExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//...  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dispatcher提供了executed(RealCall)和enqueue(AsyncCall)方法来进行同步和异步请求任务的入队，还提供了finished(RealCall)和finished(AsyncCalll)方法来进行同步和异步请求任务的出队，可以看到okhttp把ReadCall当作同步请求任务的代表，把AsyncCall当作异步请求任务的代表，RealCall前面已经讲过了，而AsyncCal是RealCall的一个内部类，它本质上就是一个Runnable，Dispatcher的线程池执行任务主要执行的是runningAsyncCalls队列里面的异步请求任务，也就是AsyncCall异步任务，而Dispatcher的promoteAndExecute()方法就是用来进行异步任务的调度，它的逻辑主要是按顺序把readyAsyncCalls队列中准备执行的异步任务转移到runningAsyncCalls后，再由线程池执行，对于同步任务Dispatcher只是暂时保存在runningSyncCalls队列中，并不会由线程池执行。</p><p>我们继续回到RealCall的execute()方法，根据注释1、2、3分为3部分解释同步请求流程，如下：</p><h3 id="1、Dispatcher-executed-RealCall"><a href="#1、Dispatcher-executed-RealCall" class="headerlink" title="1、Dispatcher :: executed(RealCall)"></a>1、Dispatcher :: executed(RealCall)</h3><p>看RealCall的execute()方法的注释1，它首先调用了Dispatcher的executed(RealCall)方法，Dispatcher的executed(RealCall)方法实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Dispatcher.java</span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">executed</span><span class="params">(RealCall call)</span> </span>&#123;</span><br><span class="line">    runningSyncCalls.add(call);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到没有做什么处理，只是简单的把同步请求任务放入runningSyncCalls队列。</p><h3 id="2、RealCall-getResponseWithInterceptorChain"><a href="#2、RealCall-getResponseWithInterceptorChain" class="headerlink" title="2、RealCall  :: getResponseWithInterceptorChain()"></a>2、RealCall  :: getResponseWithInterceptorChain()</h3><p>看RealCall的execute()方法的注释2，调用getResponseWithInterceptorChain()方法，这里才是同步请求处理的地方，我们点进去，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RealCall.java </span></span><br><span class="line"><span class="function">Response <span class="title">getResponseWithInterceptorChain</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//拦截器的添加</span></span><br><span class="line">    List&lt;Interceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加用户自定义拦截器</span></span><br><span class="line">    interceptors.addAll(client.interceptors());</span><br><span class="line">    <span class="comment">//添加默认拦截器</span></span><br><span class="line">    interceptors.add(<span class="keyword">new</span> RetryAndFollowUpInterceptor(client));</span><br><span class="line">    interceptors.add(<span class="keyword">new</span> BridgeInterceptor(client.cookieJar()));</span><br><span class="line">    interceptors.add(<span class="keyword">new</span> CacheInterceptor(client.internalCache()));</span><br><span class="line">    interceptors.add(<span class="keyword">new</span> ConnectInterceptor(client));</span><br><span class="line">    <span class="keyword">if</span> (!forWebSocket) &#123;</span><br><span class="line">      interceptors.addAll(client.networkInterceptors());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加的最后一个拦截器是CallServerInterceptor</span></span><br><span class="line">    interceptors.add(<span class="keyword">new</span> CallServerInterceptor(forWebSocket));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个RealInterceptorChain，传入了interceptors和Request</span></span><br><span class="line">    Interceptor.Chain chain = <span class="keyword">new</span> RealInterceptorChain(interceptors, transmitter, <span class="keyword">null</span>, <span class="number">0</span>,</span><br><span class="line">        originalRequest, <span class="keyword">this</span>, client.connectTimeoutMillis(),</span><br><span class="line">        client.readTimeoutMillis(), client.writeTimeoutMillis());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//调用RealInterceptorChain的proceed(Request)方法处理请求</span></span><br><span class="line">      Response response = chain.proceed(originalRequest);</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">      <span class="keyword">return</span> response;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>getResponseWithInterceptorChain()方法最终返回一个Response，也就是网络请求的响应，该方法中首先把用户自定义的拦截器和okhttp默认的拦截器封装到一个List中，然后创建RealInterceptorChain并执行proceed(Request)方法处理请求，RealInterceptorChain的proceed(Request)方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RealInterceptorChain.java</span></span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">proceed</span><span class="params">(Request request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> proceed(request, transmitter, exchange);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">proceed</span><span class="params">(Request request, Transmitter transmitter, @Nullable Exchange exchange)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//再新建一个RealInterceptorChain，这里注意index加1，</span></span><br><span class="line">    RealInterceptorChain next = <span class="keyword">new</span> RealInterceptorChain(interceptors, transmitter, exchange,</span><br><span class="line">                                                         index + <span class="number">1</span>, request, call, connectTimeout, readTimeout, writeTimeout);</span><br><span class="line">    <span class="comment">//获取interceptors列表中的下一个拦截器</span></span><br><span class="line">    Interceptor interceptor = interceptors.get(index);</span><br><span class="line">    <span class="comment">//调用下一个拦截器的intercept(Chain)方法，传入刚才新建的RealInterceptorChain，返回Response</span></span><br><span class="line">    Response response = interceptor.intercept(next);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>proceed()方法中再次新建了一个RealInterceptorChain，传入了index + 1，而获取拦截器时是通过index获取，这样每次都能获取到下一个拦截器，然后调用下一个拦截器的intercept(Chain)方法，intercept(Chain)方法中就是拦截器的主要功能实现，里面会继续调用传入的RealInterceptorChain的proceed()方法，这样又会重复上述逻辑，我们把拦截器看作一条链中的节点，这样每个拦截器就通过一个个RealInterceptorChain连接起来，形成一条链，这就是典型的<a href="https://rain9155.github.io/2019/09/07/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/#more" target="_blank" rel="noopener">责任链模式</a>，从节点的首部开始把请求传递下去，每一个拦截器都有机会处理这个请求，这又像是一个递归的过程，直到最后一个拦截器器处理完请求后，才开始逐层返回Resquese，拦截器才是Okhttp核心功能所在，关于拦截器介绍下篇文章再讲，这里只需要知道每一个拦截器都代表了一个功能。</p><p>经过对拦截器的简单介绍后，我们知道最后一个添加的拦截器才是把请求发送出去并且返回响应的地方，我们看getResponseWithInterceptorChain()方法，最后一个拦截器的添加是CallServerInterceptor，所以我们直接看CallServerInterceptor的intercept(Chain)方法实现，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CallServerInterceptor.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//强转成RealInterceptorChain</span></span><br><span class="line">    RealInterceptorChain realChain = (RealInterceptorChain) chain;</span><br><span class="line">    <span class="comment">//获取Exchange</span></span><br><span class="line">    Exchange exchange = realChain.exchange();</span><br><span class="line">    <span class="comment">//获取Request</span></span><br><span class="line">    Request request = realChain.request();</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、通过Exchange的writeRequestHeaders(request)方法发送Request的header</span></span><br><span class="line">    exchange.writeRequestHeaders(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> responseHeadersStarted = <span class="keyword">false</span>;</span><br><span class="line">    Response.Builder responseBuilder = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//因为前面已经讲了，默认是GET请求，而GET请求是没有body的，所以不会进入if分支</span></span><br><span class="line">    <span class="keyword">if</span> (HttpMethod.permitsRequestBody(request.method()) &amp;&amp; request.body() != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//省略的是发送Request的body过程</span></span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      exchange.noRequestBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//GET请求body为空，进入这个分支，完成请求</span></span><br><span class="line">    <span class="keyword">if</span> (request.body() == <span class="keyword">null</span> || !request.body().isDuplex()) &#123;</span><br><span class="line">      exchange.finishRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略的是一些监听回调</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//下面开始获取网络请求返回的响应</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2、通过Exchange的readResponseHeaders(boolean)方法获取响应的header</span></span><br><span class="line">    <span class="keyword">if</span> (responseBuilder == <span class="keyword">null</span>) &#123;</span><br><span class="line">        responseBuilder = exchange.readResponseHeaders(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取响应后，通过Builder模式构造Response</span></span><br><span class="line">    Response response = responseBuilder</span><br><span class="line">        .request(request)</span><br><span class="line">        .handshake(exchange.connection().handshake())</span><br><span class="line">        .sentRequestAtMillis(sentRequestMillis)</span><br><span class="line">        .receivedResponseAtMillis(System.currentTimeMillis())</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略的是response对状态码code的处理</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造Response的body</span></span><br><span class="line">    <span class="keyword">if</span> (forWebSocket &amp;&amp; code == <span class="number">101</span>) &#123;</span><br><span class="line">        <span class="comment">//构造一个空的body的Response</span></span><br><span class="line">        response = response.newBuilder()</span><br><span class="line">            .body(Util.EMPTY_RESPONSE)</span><br><span class="line">            .build();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//通过Exchange的openResponseBody(Response)方法获取响应的body，然后通过响应的body继续构造Response</span></span><br><span class="line">        response = response.newBuilder()</span><br><span class="line">            .body(exchange.openResponseBody(response))</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回响应Response</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>intercept(Chain）方法中主要做的就是<strong>发送请求，获取响应</strong>的事情，注释中已经写的很清楚了，发送请求要把header和body分开发送，而获取响应时也要分别获取header和body，而发送请求和获取响应两个过程都是通过一个Exchange对象进行的，Exchange是在构造RealInterceptorChain时就作为构造参数传进RealInterceptorChain中，一直都为null，直到在ConnectInterceptor的intercept()中才通过Transmitter的newExchange()被赋值，而ConnectInterceptor的下一个拦截器就是CallServerInterceptor，所以CallServerInterceptor可以通过Chain获取到Exchange实例，这里不用细究这个赋值过程，Exchange它主要是用来负责完成一次网络请求和响应的过程。</p><p>这里我以intercept(Chain）方法中注释1和注释2请求header的发送(wirte)和获取(read)为例了解Exchange的工作过程，首先看Exchange的writeRequestHeaders(Request)方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Exchange.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeRequestHeaders</span><span class="params">(Request request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//主要是调用了codec的writeRequestHeaders(request)</span></span><br><span class="line">        codec.writeRequestHeaders(request);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再看Exchange的readResponseHeaders(boolean)方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Exchange.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@Nullable</span> Response.<span class="function">Builder <span class="title">readResponseHeaders</span><span class="params">(<span class="keyword">boolean</span> expectContinue)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//主要是调用了codec的readResponseHeaders(boolean)</span></span><br><span class="line">      Response.Builder result = codec.readResponseHeaders(expectContinue);</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>从Exchange的两个方法可以看出，它把 wirt和read header的任务都交给了codec，codec是什么呢？codec是ExchangeCodec类型，它是一个接口，它主要用来编码http请求并解码http返回结果，所以Exchange中真正干活的是ExchangeCodec，它的有两个实现类，分别是Http2ExchangeCodec和Http1ExchangeCodec，分别对应Http2.x和Http1.x，这里我们以Http1ExchangeCodec为例，查看它的writeRequestHeaders(request)和readResponseHeaders(boolean)方法，首先看Http1ExchangeCodec的writeRequestHeaders(request)方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Http1ExchangeCodec.java</span></span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeRequestHeaders</span><span class="params">(Request request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    String requestLine = RequestLine.get(</span><br><span class="line">        request, realConnection.route().proxy().type());</span><br><span class="line">    <span class="comment">//调用了writeRequest()</span></span><br><span class="line">    writeRequest(request.headers(), requestLine);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeRequest</span><span class="params">(Headers headers, String requestLine)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (state != STATE_IDLE) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"state: "</span> + state);</span><br><span class="line">    <span class="comment">//可以看到通过sink把请求头写入IO流，发送到服务器，sink是BufferedSink类型</span></span><br><span class="line">    sink.writeUtf8(requestLine).writeUtf8(<span class="string">"\r\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = headers.size(); i &lt; size; i++) &#123;</span><br><span class="line">      sink.writeUtf8(headers.name(i))</span><br><span class="line">          .writeUtf8(<span class="string">": "</span>)</span><br><span class="line">          .writeUtf8(headers.value(i))</span><br><span class="line">          .writeUtf8(<span class="string">"\r\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sink.writeUtf8(<span class="string">"\r\n"</span>);</span><br><span class="line">    state = STATE_OPEN_REQUEST_BODY;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>我们再看Http1ExchangeCodec的readResponseHeaders(boolean)方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Http1ExchangeCodec.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Response.<span class="function">Builder <span class="title">readResponseHeaders</span><span class="params">(<span class="keyword">boolean</span> expectContinue)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        StatusLine statusLine = StatusLine.parse(readHeaderLine());</span><br><span class="line">        Response.Builder responseBuilder = <span class="keyword">new</span> Response.Builder()</span><br><span class="line">            .protocol(statusLine.protocol)</span><br><span class="line">            .code(statusLine.code)</span><br><span class="line">            .message(statusLine.message)</span><br><span class="line">            .headers(readHeaders());<span class="comment">//调用了readHeaders()</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">return</span> responseBuilder;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (EOFException e) &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> Headers <span class="title">readHeaders</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Headers.Builder headers = <span class="keyword">new</span> Headers.Builder();</span><br><span class="line">    <span class="comment">//调用了readHeaderLine()，一行一行的读取header</span></span><br><span class="line">    <span class="keyword">for</span> (String line; (line = readHeaderLine()).length() != <span class="number">0</span>; ) &#123;</span><br><span class="line">      Internal.instance.addLenient(headers, line);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> headers.build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> String <span class="title">readHeaderLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">     <span class="comment">//服务器响应返回，通过source从IO读取响应头，source是BufferedSource类型</span></span><br><span class="line">    String line = source.readUtf8LineStrict(headerLimit);</span><br><span class="line">    headerLimit -= line.length();</span><br><span class="line">    <span class="keyword">return</span> line;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>从Http1ExchangeCodec的两个方法可以看出，底层是通过BufferedSink把信息写入IO流，通过BufferedSource从IO流读取信息，BufferedSink和BufferedSource都是来自<a href="https://github.com/square/okio" target="_blank" rel="noopener">okio</a>这个开源库的，okhttp底层是通过okio来向网络中写入和读取IO的，想要了解更多可自行查看okio源码(okio也是square公司的产品)。</p><p>到此RealCall的 getResponseWithInterceptorChain()分析完，getResponseWithInterceptorChain()返回Response后，RealCall的execute() 方法就return了，我们就可以通过返回的Response获取我们想要的信息，但RealCall的execute() 方法就return后，还要继续执行finally 分支中的逻辑。</p><h3 id="3、Dispatcher-finished-RealCall"><a href="#3、Dispatcher-finished-RealCall" class="headerlink" title="3、Dispatcher :: finished(RealCall)"></a>3、Dispatcher :: finished(RealCall)</h3><p>我们继续看RealCall的execute()方法的注释3，调用Dispatcher的finished(AsyncCall)方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Dispatcher.java</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">finished</span><span class="params">(RealCall call)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//传进了runningSyncCalls队列</span></span><br><span class="line">    finished(runningSyncCalls, call);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">finished</span><span class="params">(Deque&lt;T&gt; calls, T call)</span> </span>&#123;</span><br><span class="line">    Runnable idleCallback;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">//尝试移除队列中的同步请求任务</span></span><br><span class="line">        <span class="keyword">if</span> (!calls.remove(call)) <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"Call wasn't in-flight!"</span>);</span><br><span class="line">        idleCallback = <span class="keyword">this</span>.idleCallback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//紧接着调用promoteAndExecute()方法进行异步任务的调度，如果没有异步任务要进行，promoteAndExecute()返回false</span></span><br><span class="line">    <span class="keyword">boolean</span> isRunning = promoteAndExecute();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//isRunning等于false且设置了idleCallback，会执行一遍idle任务</span></span><br><span class="line">    <span class="keyword">if</span> (!isRunning &amp;&amp; idleCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">        idleCallback.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>finished()方法中首先尝试从runningSyncCalls队列把刚才通过 executed()入队的同步任务RealCall移除，如果移除失败，就抛出异常，如果移除成功，就紧接着调用promoteAndExecute()方法进行异步任务的调度并尝试执行一遍idle任务，promoteAndExecute()方法在异步请求中再详细介绍。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>至此okhttp的同步请求过程分析完毕，这里总结一下：当我们调用call.execute()时，就会发起一个同步请求，而call的实现类是RealCall，所以实际执行的是realCall.execute()，realCall.execute()中执行Dispatcher的executed(RealCall)把这个同步请求任务保存进runningSyncCalls队列中，然后RealCall执行getResponseWithInterceptorChain()处理同步请求，请求经过层层拦截器后到达最后一个拦截器CallServerInterceptor，在这个拦截器中通过Exchange把请求发送到服务器，然后同样的通过Exchange获得服务器的响应，根据响应构造Response，然后返回，最后RealCall执行Dispatcher的finished(RealCall)把之前暂时保存的同步请求任务从runningSyncCalls队列中移除。</p><p>下面是同步请求过程的调用链：</p><img src="/2019/09/03/okhttp3%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B/okhttp1.png" class="" title="okhttp"><h2 id="异步请求-RealCall-enqueue-Callback"><a href="#异步请求-RealCall-enqueue-Callback" class="headerlink" title="异步请求 - RealCall.enqueue(Callback)"></a>异步请求 - RealCall.enqueue(Callback)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RealCall.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Callback responseCallback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//1、调用Dispatcher的enqueue(AsyncCall)方法</span></span><br><span class="line">    client.dispatcher().enqueue(<span class="keyword">new</span> AsyncCall(responseCallback));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异步请求执行的是RealCall的enqueue(Callback)方法，它比同步请求只是多了一个Callback，在Callback的 onResponse(Call, Response)回调中我们可以拿到网络响应返回的Response，RealCall的enqueue(Callback)方法中首先把Callback用AsyncCall包装起来，然后调用调用Dispatcher的enqueue(AsyncCall)方法。</p><h3 id="1、Dispatcher-enqueue-AsyncCall"><a href="#1、Dispatcher-enqueue-AsyncCall" class="headerlink" title="1、Dispatcher :: enqueue(AsyncCall)"></a>1、Dispatcher :: enqueue(AsyncCall)</h3><p>我们看Dispatcher的enqueue(AsyncCall)方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Dispatcher.java</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(AsyncCall call)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">       readyAsyncCalls.add(call);</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    promoteAndExecute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法首先把异步请求任务AsyncCall放入readyAsyncCalls队列，然后调用promoteAndExecute()进行异步任务的调度，我们看一下Dispatcher 是如何进行异步任务的调度的。</p><h3 id="2、Dispatcher-promoteAndExecute"><a href="#2、Dispatcher-promoteAndExecute" class="headerlink" title="2、Dispatcher :: promoteAndExecute()"></a>2、Dispatcher :: promoteAndExecute()</h3><p>promoteAndExecute()方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Dispatcher.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">promoteAndExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//准备一个正在执行任务列表executableCalls</span></span><br><span class="line">    List&lt;AsyncCall&gt; executableCalls = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">boolean</span> isRunning;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">//1、这个for循环主要把readyAsyncCalls中等待执行的异步任务转移到runningAsyncCalls队列和executableCalls列表中去</span></span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;AsyncCall&gt; i = readyAsyncCalls.iterator(); i.hasNext(); ) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//取出readyAsyncCalls中等待执行的异步任务</span></span><br><span class="line">            AsyncCall asyncCall = i.next();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断条件：1、正在运行的异步请求任务不能大于maxRequests；2、等待执行的异步任务的主机请求数不能大于maxRequestsPerHost</span></span><br><span class="line">            <span class="keyword">if</span> (runningAsyncCalls.size() &gt;= maxRequests) <span class="keyword">break</span>; </span><br><span class="line">            <span class="keyword">if</span> (asyncCall.callsPerHost().get() &gt;= maxRequestsPerHost) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">//满足条件，进入下面逻辑</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//把这个等待执行的异步任务从readyAsyncCalls中移除</span></span><br><span class="line">            i.remove();</span><br><span class="line">            asyncCall.callsPerHost().incrementAndGet();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//把这个等待执行的异步任务添加进executableCalls列表</span></span><br><span class="line">            executableCalls.add(asyncCall);</span><br><span class="line">            <span class="comment">//把这个等待执行的异步任务添加进runningAsyncCalls队列</span></span><br><span class="line">            runningAsyncCalls.add(asyncCall);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//runningCallsCount()里面的逻辑： return runningAsyncCalls.size() + runningSyncCalls.size();</span></span><br><span class="line">        isRunning = runningCallsCount() &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2、这个for循环主要是执行executableCalls列表中的异步任务</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = executableCalls.size(); i &lt; size; i++) &#123;</span><br><span class="line">        AsyncCall asyncCall = executableCalls.get(i);</span><br><span class="line">        <span class="comment">//传进executorService，调用AsyncCall的executeOn()方法，由线程池执行这个异步任务</span></span><br><span class="line">        asyncCall.executeOn(executorService());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isRunning;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>promoteAndExecute()方法中主要是2个for循环，注释1的第一个for循环是把符合条件的异步请求任务从readyAsyncCalls转移（提升）到runningAsyncCalls队列和添加到executableCalls列表中去，紧接着注释2的第二个for循环就是遍历executableCalls列表，从executableCalls列表中获取AsyncCall对象，并且调用它的executeOn()方法，executeOn()方法传进了一个Dispatcher的executorService，所以我们看AsyncCall的executeOn()方法，里面是真正执行异步请求任务的地方。</p><h4 id="2-1、AsyncCall-executeOn-ExecutorService"><a href="#2-1、AsyncCall-executeOn-ExecutorService" class="headerlink" title="2.1、AsyncCall :: executeOn(ExecutorService)"></a>2.1、AsyncCall :: executeOn(ExecutorService)</h4><p>AsyncCall的executeOn()方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AsyncCall.java</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">executeOn</span><span class="params">(ExecutorService executorService)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//传进this，执行AsyncCall异步任务，AsyncCall本质是Runnable</span></span><br><span class="line">        executorService.execute(<span class="keyword">this</span>);</span><br><span class="line">        success = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RejectedExecutionException e) &#123;</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">            <span class="comment">//异步任务执行失败，调用Dispatcher的finished(AsyncCall)方法</span></span><br><span class="line">            client.dispatcher().finished(<span class="keyword">this</span>); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到，里面的主要逻辑就是调用 executorService.execute(this)执行当前的AsyncCall异步任务，前面已经说过AsyncCall实现了NamedRunnable，本质是Runnable，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncCall</span> <span class="keyword">extends</span> <span class="title">NamedRunnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">NamedRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String oldName = Thread.currentThread().getName();</span><br><span class="line">    Thread.currentThread().setName(name);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//run方法中执行execute()方法</span></span><br><span class="line">      execute();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      Thread.currentThread().setName(oldName);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程池执行到此异步任务时，它的run方法就会被执行，而run方法主要调用execute()方法，而execute()方法是一个抽象方法，AsyncCall实现了NamedRunnable，所以AsyncCall重写了execute()实现了执行逻辑，所以我们直接看AsyncCal的execute()方法。</p><h4 id="2-2、AsyncCal-execute"><a href="#2-2、AsyncCal-execute" class="headerlink" title="2.2、AsyncCal :: execute()"></a>2.2、AsyncCal :: execute()</h4><p>AsyncCal的execute()方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AsyncCall.java</span></span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//调用RealCall的getResponseWithInterceptorChain()方法处理请求</span></span><br><span class="line">        Response response = getResponseWithInterceptorChain();</span><br><span class="line">        signalledCallback = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//请求处理完毕，返回响应，回调Callback的onResponse()方法</span></span><br><span class="line">        responseCallback.onResponse(RealCall.<span class="keyword">this</span>, response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//异步请求任务执行完毕，调用Dispatcher的finished(AsyncCall)方法</span></span><br><span class="line">        client.dispatcher().finished(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AsyncCal的execute()方法的逻辑和前面介绍的同步请求过程殊途同归，首先调用RealCall的getResponseWithInterceptorChain()方法处理请求，请求处理完毕后，返回响应Response，这时回调我们调用Call.enqueue(Callback)时传进来的Callback的onResponse()方法，最后在finally语句中调用Dispatcher的finished(AsyncCall)方法来把异步请求任务从runningAsyncCalls队列中移除出去，这个移除逻辑和上面同步请求任务的移除逻辑一样，只是这次是从runningAsyncCalls移除而不是runningSyncCalls，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Dispatcher.java</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">finished</span><span class="params">(AsyncCal call)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//传进runningAsyncCalls，而不是runningSyncCalls</span></span><br><span class="line">    finished(runningSyncCalls, call);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>至此okhttp的异步请求过程分析完毕，这里再次总结一下，当我们调用call.enqueue(Callback)时，就会发起一个异步请求，实际执行的是realCall.enqueue(Callback)，它比同步请求只是多了一个Callback参数，然后realCall.execute()中先把传进来的Callback包装成一个AsyncCall，然后执行Dispatcher的enqueue(AsyncCall)把这个异步请求任务保存进readyAsyncCalls队列中，保存后开始执行 promoteAndExecute()进行异步任务的调度，它会先把符合条件的异步请求任务从readyAsyncCalls转移到runningAsyncCalls队列和添加到executableCalls列表中去，然后遍历executableCalls列表，逐个执行AsyncCall 的executeOn(ExecutorService)，然后在这个方法中AsyncCall会把自己放进Dispatcher 的线程池，等待线程池的调度，当线程池执行到这个AsyncCall时，它的run方法就会被执行，从而执行重写的execute()方法，execute()方法中的流程和同步请求流程大致相同。</p><p>下面是异步请求过程的调用链：</p><img src="/2019/09/03/okhttp3%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B/okhttp2.png" class="" title="okhttp"><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>okhttp通过Builder模式创建OkHttpClient、Request和Response，通过client.newCall(Resquest)创建一个Call，用于发起异步或同步请求，请求会经过Dispatcher、一系列拦截器，最后通过okio与服务器建立连接、发送数据并解析返回结果，这个过程如图：</p><img src="/2019/09/03/okhttp3%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B/okhttp3.png" class="" title="okhttp"><p>以上就是对okhttp的请求流程的分析，如有错误，欢迎指出。</p><p>参考文章：</p><p><a href="https://tamicer.github.io/2017/10/31/okhttp3-2/" target="_blank" rel="noopener">OkHttp 3.x 源码解析之Dispather分发器</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在Android开发中，当下最火的网络请求框架莫过于okhttp和retrofit，它们都是square公司的产品，两个都是非常优秀开源库，值得我们去阅读它们的源码，学习它们的设计理念，但其实retrofit底层还是用okhttp来发起网络请求的，所以深入理解了okhttp也就深入理解了retrofit，它们的源码阅读顺序应该是先看okhttp，我在retrofit上发现它最近的一次提交才把okhttp版本更新到3.14，okhttp目前最新的版本是4.0.x，okhttp从4.0.x开始采用kotlin编写，在这之前还是用java，而我本次分析的okhttp源码版本是基本3.14.x，看哪个版本的不重要，重要的是阅读过后的收获，我打算分2篇文章去分析okhttp，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求流程(同步、异步)&lt;/li&gt;
&lt;li&gt;拦截器(Interceptor)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文是第一篇 - okhttp的请求流程，okhttp项目地址：&lt;a href=&quot;https://github.com/square/okhttp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;okhttp&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="优秀开源库分析" scheme="http://yoursite.com/categories/%E4%BC%98%E7%A7%80%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%86%E6%9E%90/"/>
    
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="okhttp" scheme="http://yoursite.com/tags/okhttp/"/>
    
  </entry>
  
  <entry>
    <title>自定义View实践-使用贝塞尔曲线实现一个loading控件</title>
    <link href="http://yoursite.com/2019/08/23/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5-%E4%BD%BF%E7%94%A8%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E5%AE%9E%E7%8E%B0WaveLoadingView/"/>
    <id>http://yoursite.com/2019/08/23/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5-%E4%BD%BF%E7%94%A8%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E5%AE%9E%E7%8E%B0WaveLoadingView/</id>
    <published>2019-08-23T10:19:46.000Z</published>
    <updated>2023-01-07T10:44:49.255Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇文章：<a href="https://juejin.im/post/5d48e06d51882505723c9d30" target="_blank" rel="noopener">仿微信滑动按钮</a></p><p>本文是自定义View实践第二篇，上一篇实现了一个简单的滑动按钮，知道了一些自定义View的基本步骤，本文是使用贝塞尔曲线实现的一个加载中控件，接下来进入正文讲解。</p><p>地址：<a href="https://github.com/rain9155/WaveLoadingView" target="_blank" rel="noopener">WaveLoadingView</a></p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><img src="/2019/08/23/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5-%E4%BD%BF%E7%94%A8%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E5%AE%9E%E7%8E%B0WaveLoadingView/waveloading1.gif" class="" title="waveloading"><p>可以看到，WaveLoadingView除了用于loading外，还可以用于显示进度的场景。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>在效果图中，波浪是曲线的形式的，所以我们需要想办法把曲线画出来，在数学领域中，用于实现曲线的函数有很多种，但在开发中，比较常用的就是正弦曲线和贝塞尔曲线了，下面简单介绍一下:</p><h3 id="1、正弦曲线"><a href="#1、正弦曲线" class="headerlink" title="1、正弦曲线"></a>1、正弦曲线</h3><p>正弦曲线是我们非常熟悉的曲线，它的函数如下：</p><p><strong>y = Asin(ωx + φ) + h</strong></p><p><strong>A</strong>表示振幅，用于表示曲线的波峰和波谷的距离;</p><p><strong>ω</strong>表示角速度，用于控制正弦曲线的周期;</p><p><strong>φ</strong>表示初相，用于控制正弦曲线的左右移动;</p><p><strong>h</strong>表示偏距，用于控制曲线的上下移动.</p><p>当A、ω、h取一定的值，φ取不同的值时，就可以让曲线在水平方向移动起来，如下：</p><img src="/2019/08/23/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5-%E4%BD%BF%E7%94%A8%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E5%AE%9E%E7%8E%B0WaveLoadingView/waveloading2.gif" class="" title="waveloading"><p>上面是A = 2，ω = 0.8， h = 0， φ不断变化的正弦曲线。</p><h3 id="2、贝塞尔曲线"><a href="#2、贝塞尔曲线" class="headerlink" title="2、贝塞尔曲线"></a>2、贝塞尔曲线</h3><p>贝塞尔曲线有一阶、二阶、… 、n阶，一阶的贝塞尔曲线是一条直线，从第2阶开始才是曲线，n阶的贝塞尔曲线可以由(n - 1)阶贝塞尔曲线推导出来，关于贝塞尔曲线的推导可以阅读<a href="https://juejin.im/post/5b854e1451882542fe28a53d#heading-1" target="_blank" rel="noopener"><strong>深入理解贝塞尔曲线</strong></a>。</p><p>这里我使用二阶贝塞尔曲线，它的函数如下：</p><p><strong>f(t) = (1- t)^2 * P0 + 2t(1- t)P1 + t^2 * P2   (0&lt;= t &lt;= 1)</strong></p><p><strong>P0、P1、P2</strong>都是已知的点，称为控制点,   <strong>t</strong>是一个变量，范围为0到1，函数值随着t的变化而变化.</p><p>下面我们取P0 = <strong>(x0,  y0)</strong> = <strong>(-20,  0)</strong>，P1 = <strong>(x1,  y1)</strong> = <strong>(-10,  20)</strong>，P2 = <strong>(x2,  y2)</strong> = <strong>(0,  0)</strong>，然后把这3个点的值代入二阶贝塞尔曲线函数，形成的曲线如下：</p><img src="/2019/08/23/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5-%E4%BD%BF%E7%94%A8%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E5%AE%9E%E7%8E%B0WaveLoadingView/waveloading3.png" class="" title="waveloading"><p><strong>图一</strong></p><p>这样就画出了一条曲线（那两条直线是用于辅助的），接下来我们继续取P3 = <strong>(x3, y3)</strong> = <strong>(10,  -20)</strong>，P4 = <strong>(x4,  y4)</strong> = <strong>(20,  0)</strong>，然后把P2、P3、P4<strong>再次代入</strong>二阶贝塞尔曲线函数，形成的曲线如下：</p><img src="/2019/08/23/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5-%E4%BD%BF%E7%94%A8%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E5%AE%9E%E7%8E%B0WaveLoadingView/waveloading4.png" class="" title="waveloading"><p><strong>图二</strong></p><p>这样就有点接近正弦曲线了，只要我们<strong>不断的取控制点，不断的代入二阶贝塞尔曲线函数，就可以形成一条周期的曲线</strong>，到这里我们也发现了二阶贝塞尔曲线函数不是一个周期函数，所以它不像正向曲线那样连绵不绝，一个二阶贝塞尔曲线函数一次只能通过3个控制点画出一条曲线。</p><h3 id="3、如何选择？"><a href="#3、如何选择？" class="headerlink" title="3、如何选择？"></a>3、如何选择？</h3><p>我们也发现了贝塞尔曲线相对正弦曲线的实现有点复杂，但是，在Android中，贝塞尔曲线已经有了<strong>封装好的api</strong>供我们使用，使用起来非常简单，不需要我们去用代码实现那个函数，相反正弦曲线就需要我们从零做起，要用代码去实现正弦函数，还要进行大量计算、范围检查等，所以从使用的复杂来看，<strong>选用贝塞尔曲线</strong>的工作量更小一点。</p><p>在Android中，贝塞尔曲线是通过<strong>Path</strong>来实现的，在Path中，与二阶贝塞尔曲线有关的函数是：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.quadTo(x1, y1, x2, y2)<span class="comment">//绝对坐标</span></span><br><span class="line">path.rQuadTo(x1, y1, x2, y2)<span class="comment">//相对坐标</span></span><br></pre></td></tr></table></figure><p>再贴一次图一的贝塞尔曲线：</p><img src="/2019/08/23/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5-%E4%BD%BF%E7%94%A8%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E5%AE%9E%E7%8E%B0WaveLoadingView/waveloading3.png" class="" title="waveloading"><p><strong>图一</strong></p><p>假设坐标系参考图一的xy轴，即x轴向右，y轴向上，原点是(0, 0)， 通过以下代码就可以画出上图的曲线，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = Path()</span><br><span class="line">path.moveTo(-<span class="number">20f</span>, <span class="number">0f</span>)<span class="comment">//(x0,  y0) = (-20,  0)</span></span><br><span class="line">path.quadTo(</span><br><span class="line">    -<span class="number">10f</span>, <span class="number">20f</span>, <span class="comment">//(x1,  y1) = (-10,  20)</span></span><br><span class="line">    <span class="number">0f</span>, <span class="number">0f</span>     <span class="comment">//(x2,  y2) = (0,  0)</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面是绝对坐标，下面代码使用相对坐标的方式画出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = Path()</span><br><span class="line">path.moveTo(-<span class="number">20f</span>, <span class="number">0f</span>)<span class="comment">//(x0,  y0) = (-20,  0)</span></span><br><span class="line">path.rQuadTo(</span><br><span class="line">    <span class="number">10f</span>, <span class="number">20f</span>,   <span class="comment">//(x1,  y1)相对(x0,  y0)为(10, 20)</span></span><br><span class="line">    <span class="number">20f</span>, <span class="number">0f</span>     <span class="comment">//(x2,  y2)相对(x0, y0)为(20, 0)</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>如果想要画出图二的贝塞尔曲线，只需要在前面曲线的基础上再加一句<strong>quadTo或rQuadTo</strong>，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = Path()</span><br><span class="line">path.moveTo(-<span class="number">20f</span>, <span class="number">0f</span>)<span class="comment">//(x0,  y0) = (-20,  0)</span></span><br><span class="line">path.quadTo(</span><br><span class="line">    -<span class="number">10f</span>, <span class="number">20f</span>, <span class="comment">//(x1,  y1) = (-10,  20)</span></span><br><span class="line">    <span class="number">0f</span>, <span class="number">0f</span>     <span class="comment">//(x2,  y2) = (0,  0)</span></span><br><span class="line">)</span><br><span class="line">path.quadTo(</span><br><span class="line">    <span class="number">10f</span>, -<span class="number">20f</span>,  <span class="comment">//(x3,  y3) = (10,  -20)</span></span><br><span class="line">    <span class="number">20f</span>, <span class="number">0f</span>    <span class="comment">//(x4,  y4) = (20,  0)</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//上面是绝对坐标，下面代码使用相对坐标的方式画出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = Path()</span><br><span class="line">path.moveTo(-<span class="number">20f</span>, <span class="number">0f</span>)<span class="comment">//(x0,  y0) = (-20,  0)</span></span><br><span class="line">path.rQuadTo(</span><br><span class="line">    <span class="number">10f</span>, <span class="number">20f</span>,   <span class="comment">//(x1,  y1)相对(x0,  y0)为(10, 20)</span></span><br><span class="line">    <span class="number">20f</span>, <span class="number">0f</span>     <span class="comment">//(x2,  y2)相对(x0, y0)为(20, 0)</span></span><br><span class="line">)</span><br><span class="line">path.rQuadTo(</span><br><span class="line">    <span class="number">10f</span>, -<span class="number">20f</span>,  <span class="comment">//(x3,  y3)相对(x2,  y2)为(10, -20)</span></span><br><span class="line">    <span class="number">20f</span>, <span class="number">0f</span>     <span class="comment">//(x4,  y4)相对(x2, y2)为(20, 0)</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>绝对坐标</strong>的每个点都是以<strong>坐标系的原点</strong>为参考；而<strong>相对坐标</strong>是以<strong>moveTo方法那个点</strong>为原点作为参考，如果只调用了一次moveTo方法，而调用了多次rQuadTo方法，那么从第二次rQuadTo方法开始，它参考<strong>上一次rQuadTo方法的最后一个坐标值</strong>，例如上面相对坐标计算中，第二次rQuadTo方法的(x3,  y3)，(x4,  y4)是参考(x2,  y2)计算出来的，而不是参考(x0,  y0)。</p><blockquote><p>上面是为了讲解方便把坐标系说成x轴向右，y轴向上，但是在android中，坐标系是<strong>x轴向右，y轴向下，原点是View的左上角</strong>，这一点要注意。</p></blockquote><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><p>下面开始讲主要的实现步骤：</p><h3 id="1、测量控件大小"><a href="#1、测量控件大小" class="headerlink" title="1、测量控件大小"></a>1、测量控件大小</h3><p>我使用一个Shape枚举表示控件的4种形状，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    CIRCLE,<span class="comment">//圆形，默认形状 </span></span><br><span class="line">    SQUARE, <span class="comment">//正方形</span></span><br><span class="line">    RECT, <span class="comment">//矩形</span></span><br><span class="line">    NONE<span class="comment">//没有形状约束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于圆形和正方形，控件的测量宽和高应该保持一样的，而对于矩形和NONE，控件的测量宽和高可以不一样，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onMeasure</span><span class="params">(widthMeasureSpec: <span class="type">Int</span>, heightMeasureSpec: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> measureWidth = MeasureSpec.getSize(widthMeasureSpec)</span><br><span class="line">    <span class="keyword">val</span> measureHeight = MeasureSpec.getSize(heightMeasureSpec)</span><br><span class="line">    <span class="keyword">when</span>(shape)&#123;</span><br><span class="line">        Shape.CIRCLE, Shape.SQUARE -&gt; &#123;<span class="comment">//圆形或正方形</span></span><br><span class="line">            <span class="keyword">val</span> measureSpec = <span class="keyword">if</span>(measureHeight &lt; measureWidth) heightMeasureSpec <span class="keyword">else</span> widthMeasureSpec</span><br><span class="line">            <span class="comment">//传入的measureSpec一样</span></span><br><span class="line">            <span class="keyword">super</span>.onMeasure(measureSpec, measureSpec)</span><br><span class="line">        &#125;<span class="keyword">else</span> -&gt; &#123;<span class="comment">//矩形或NONE</span></span><br><span class="line">            <span class="comment">//传入的measureSpec不一样</span></span><br><span class="line">            <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以如果用户使用圆形或正方形，但是输入的宽高不一样，我就取宽和高的最小值的测量模式去测量控件，这样就保证了控件的测量宽高一样；而用户如果使用矩形或NONE，就保持原来的测量就行了。</p><p>一个控件有可能经过多次measure后才确定测量宽高，在多次onMeasure()方法调用后，接下来会调用onSizeChanged()方法，且只会调用一次，这个方法调用后接下来就会调用onLayout()方法确定控件的最终宽高，我在onSizeChanged()里面获取测量宽高确定了控件作画的范围大小和暂时的控件大小，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSizeChanged</span><span class="params">(w: <span class="type">Int</span>, h: <span class="type">Int</span>, oldw: <span class="type">Int</span>, oldh: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">//控件作画的范围大小</span></span><br><span class="line">    canvasWidth = measuredWidth</span><br><span class="line">    canvasHeight = measuredHeight</span><br><span class="line">    <span class="comment">//控件大小，暂时等于canvas大小，后面在onlayout()中会改变</span></span><br><span class="line">    viewWidth = canvasWidth</span><br><span class="line">    viewHeight = canvasHeight</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控件作画的范围大小和控件大小关系如下：</p><img src="/2019/08/23/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5-%E4%BD%BF%E7%94%A8%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E5%AE%9E%E7%8E%B0WaveLoadingView/waveloading5.png" class="" title="waveloading"><p>绿色框就是控件作画的范围大小，红色框就是控件大小，也就是说每次控件大小确定之后，我只取中间的部分绘制，很多人会有疑问？为什么只取中间的部分绘制，而不在整个控件范围绘制？这是因为<strong>当控件的父布局是ConstraintLayout，控件宽或高取match_parent时</strong>，会出现以下情况：</p><img src="/2019/08/23/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5-%E4%BD%BF%E7%94%A8%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E5%AE%9E%E7%8E%B0WaveLoadingView/waveloading6.png" class="" title="waveloading"><p><strong>图1</strong> ：控件大小：layout_width = “match_parent” ， layout_height = “200dp”</p><img src="/2019/08/23/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5-%E4%BD%BF%E7%94%A8%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E5%AE%9E%E7%8E%B0WaveLoadingView/waveloading7.png" class="" title="waveloading"><p><strong>图2</strong>：控件大小：layout_width = “200dp” ， layout_height = “match_parent”</p><p>蓝色框就是手机屏幕，黑色背景就是控件大小，你还记得我上面在onMeasure()方法讲过，如果控件的形状是圆形，那么控件的测量宽高应该相等的，并取最小值为基准，所以如果控件大小输入是layout_width = “match_parent” ，layout_height = “200dp” 或 layout_width = “200dp” ，layout_height = “match_parent”，经过测量后控件大小应该是<strong>宽 = 高 = 200dp</strong>，效果应该都是如下图：</p><img src="/2019/08/23/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5-%E4%BD%BF%E7%94%A8%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E5%AE%9E%E7%8E%B0WaveLoadingView/waveloading8.png" class="" title="waveloading"><p><strong>图3</strong></p><p>可实际情况却不是图3，而是图1或图2，这是因为<strong>ConstraintLayout布局会让子控件的setMeasuredDimension()失效</strong>，所以导致 measuredHeight 和 height 不一样，宽同理，所以在遇到父布局是ConstraintLayout时，并且控件的宽或高设置了“match_parent”，并且你自定义了测量过程，就会导致自定义View过程中测量出来大小不等于View最终大小，即<strong>getMeasureHeigth()或getMeasureWidth() != getWidth()或getHeigth()</strong>，为什么ConstraintLayout就会有这种情况而其他如Linearlayout就没有？我也不知道，可能需要大家通过源码了解了，而我的解决办法就是让每次作画的范围在控件的中心，就像图1和图2一样，这样就不会那么难看。</p><h3 id="2、裁剪画布形状"><a href="#2、裁剪画布形状" class="headerlink" title="2、裁剪画布形状"></a>2、裁剪画布形状</h3><p>怎么把控件弄成圆形、正方形、矩形这些形状，如果控件形状是正方形或矩形，还可以设置圆角，一个方法是通过BitmapShader实现，使用BitmapShader要经过3步：</p><p>1、新建Bitmap；</p><p>2、以1新建的Bitmap创建一个Canvas，在Canvas上画出波浪；</p><p>3、最后新建一个BitmapShader与1的Bitmap关联，然后设置给画笔，用画笔在onDraw方法传进来的Canvas上画一个形状出来，然后这个形状就会含有波浪.</p><p>但我没有使用BitmapShader，因为波浪的移动需要开启一个无限循环动画，就会不断的调用onDraw()方法，而在onDraw()方法不断的新建对象是一个不推荐的做法，虽然Bitmap可以通过recycler()复用，但是还是避免不了每次都要新建Canvas对象, 所以为了减少对象分配，我使用了Canvas的<strong>clipPath</strong>API来把画布裁剪成我想要的形状，然后把波浪画在裁剪后的画布上，这样也能实现与BitmapShader同样的效果，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">preDrawShapePath</span><span class="params">(w: <span class="type">Int</span>, h: <span class="type">Int</span>)</span></span> &#123;                                                     </span><br><span class="line">    clipPath.reset()                                                                               </span><br><span class="line">    <span class="keyword">when</span> (shape) &#123;                                                                                 </span><br><span class="line">        Shape.CIRCLE -&gt; &#123;                                                                                       <span class="comment">//...</span></span><br><span class="line">            <span class="comment">//path路径为圆形</span></span><br><span class="line">            clipPath.addCircle(                                                                     </span><br><span class="line">                shapeCircle.centerX, shapeCircle.centerY,                                           </span><br><span class="line">                shapeCircle.circleRadius,                                                           </span><br><span class="line">                Path.Direction.CCW                                                                 </span><br><span class="line">            )                                                                                         </span><br><span class="line">        &#125;                                                                                           </span><br><span class="line">        Shape.SQUARE -&gt; &#123;                                                                           </span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="comment">//path路径为正方形或圆角正方形</span></span><br><span class="line">            <span class="keyword">if</span> (shapeCorner == <span class="number">0f</span>)                                                                 </span><br><span class="line">            clipPath?.addRect(shapeRect, Path.Direction.CCW)                                   </span><br><span class="line">            <span class="keyword">else</span>                                                                                   </span><br><span class="line">            clipPath.addRoundRect(                                                             </span><br><span class="line">                shapeRect,                                                                     </span><br><span class="line">                shapeCorner, shapeCorner,                                                       </span><br><span class="line">                Path.Direction.CCW     </span><br><span class="line">            )                                                                                   </span><br><span class="line">        &#125;                                                                                           </span><br><span class="line">        Shape.RECT -&gt; &#123;                                                                             </span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;                                                                                           </span><br><span class="line">    &#125;                                                                                               </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>preDrawShapePath()中根据Shape来add不同的形状给Path来把这些路径信息预先保存下来，前面已经讲过每次作画的范围都在控件的中心，//…省略的都是居中计算，保存好形状的Path将在onDraw方法中使用，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>?)</span></span> &#123;</span><br><span class="line">    clipCanvasShape(canvas)           </span><br><span class="line">    <span class="comment">//...                 </span></span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">clipCanvasShape</span><span class="params">(canvas: <span class="type">Canvas</span>?)</span></span> &#123;    </span><br><span class="line">    <span class="comment">//调用canvas的clipPath方法裁剪画布</span></span><br><span class="line">    <span class="keyword">if</span> (shape != Shape.NONE) canvas?.clipPath(clipPath)</span><br><span class="line">    <span class="comment">//...            </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在onDraw方法中使用canvas.clipPath()方法传入Path裁剪画布，这样以后作画的范围都被限定在这个画布形状之内。</p><h3 id="3、画波浪"><a href="#3、画波浪" class="headerlink" title="3、画波浪"></a>3、画波浪</h3><p>使用贝塞尔曲线画波浪，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">preDrawWavePath</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wavePath.reset()</span><br><span class="line">    <span class="comment">//波长等于画布的宽度</span></span><br><span class="line">    <span class="keyword">val</span> waveLen = canvasWidth</span><br><span class="line">    <span class="comment">//波峰</span></span><br><span class="line">    <span class="keyword">val</span> waveHeight = (waveAmplitude * canvasHeight).toInt()</span><br><span class="line">    <span class="comment">//波浪的起始y坐标</span></span><br><span class="line">    waveStartY = calculateWaveStartYbyProcess()</span><br><span class="line">    <span class="comment">//把path移到起始位置，这里使用了path.moveTo（）方法</span></span><br><span class="line">    wavePath.moveTo(-canvasWidth * <span class="number">2f</span>, waveStartY)</span><br><span class="line">    <span class="comment">//下面就是画波浪的过程，都使用了path.rXX（）方法，表示把上一次结束点的坐标作为原点，从而简化计算量</span></span><br><span class="line">    <span class="keyword">val</span> rang = -canvasWidth * <span class="number">2</span>..canvasWidth</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> rang step waveLen) &#123;</span><br><span class="line">        wavePath.rQuadTo(</span><br><span class="line">            waveLen / <span class="number">4f</span>, waveHeight / <span class="number">2f</span>,</span><br><span class="line">            waveLen / <span class="number">2f</span>, <span class="number">0f</span></span><br><span class="line">        )</span><br><span class="line">        wavePath.rQuadTo(</span><br><span class="line">            waveLen / <span class="number">4f</span>, -waveHeight / <span class="number">2f</span>,</span><br><span class="line">            waveLen / <span class="number">2f</span>, <span class="number">0f</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//波浪的深度就是画布的高度</span></span><br><span class="line">    wavePath.rLineTo(<span class="number">0f</span>, canvasHeight.toFloat())</span><br><span class="line">    wavePath.rLineTo(-canvasWidth * <span class="number">3f</span>, <span class="number">0f</span>)</span><br><span class="line">    <span class="comment">//最后使用path.close()把波浪的路径关闭，使整个波浪围起来</span></span><br><span class="line">    wavePath.close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>preDrawWavePath() 中把波浪路径的信息保存在path中，下面一张图很好的说明波浪的整个路径，如下：</p><img src="/2019/08/23/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5-%E4%BD%BF%E7%94%A8%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E5%AE%9E%E7%8E%B0WaveLoadingView/waveloading9.png" class="" title="waveloading"><p>我把控件大小充满了父容器，所以控件的作画范围就是绿色框的大小，波浪的波长就是一个画布的宽度即绿色框的宽度，我把波浪的起始点移到屏幕范围外，从起始点开始，画了三个波长，把波浪画出屏幕的范围，从而方便的待会的波浪的上下移动，最后记得使用path.close()把波浪的路径关闭，使整个波浪围起来。</p><p>保存好波浪路径的信息的Path在onDraw方法中使用，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>?)</span></span> &#123;</span><br><span class="line">    clipCanvasShape(canvas)</span><br><span class="line">    drawWave(canvas)</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">drawWave</span><span class="params">(canvas: <span class="type">Canvas</span>?)</span></span> &#123;</span><br><span class="line">    wavePaint.style = Paint.Style.FILL_AND_STROKE</span><br><span class="line">    wavePaint.color = waveColor</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//使用canvas的drawPath()方法把波浪画在画布上</span></span><br><span class="line">    canvas?.drawPath(wavePath, wavePaint)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用canvas的drawPath()方法直接把波浪画在画布上，这时在屏幕上显示的效果如下：</p><img src="/2019/08/23/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5-%E4%BD%BF%E7%94%A8%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E5%AE%9E%E7%8E%B0WaveLoadingView/waveloading10.png" class="" title="waveloading"><p>这样就画出了一条波浪了，第二条波浪呢？可以再用另外一个Path按照上述preDrawWavePath()方法的流程再画一条，只要波浪的起始点坐标不同就行，但我没有用这种办法，我是通过Canvas的translate()方法平移画布，利用两次平移的偏移量不一样，画出了第二条，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">drawWave</span><span class="params">(canvas: <span class="type">Canvas</span>?)</span></span> &#123;</span><br><span class="line">    wavePaint.style = Paint.Style.FILL_AND_STROKE</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//首先保存两次画布状态，记为画布1、2</span></span><br><span class="line">    canvas?.save()<span class="comment">//画布1</span></span><br><span class="line">    canvas?.save()<span class="comment">//画布2</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//记当前画布为画布3</span></span><br><span class="line">    <span class="comment">//调用canvas的translate（）方法水平平移一下画布3</span></span><br><span class="line">    canvas?.translate(canvasSlowOffsetX, <span class="number">0</span>)</span><br><span class="line">    wavePaint.color = adjustAlpha(waveColor, <span class="number">0.7f</span>)</span><br><span class="line">    <span class="comment">//首先在画布3画出第一条波浪</span></span><br><span class="line">    canvas?.drawPath(wavePath, wavePaint)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//恢复保存的画布2状态</span></span><br><span class="line">    canvas?.restore()</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//下面是在画布2上作画</span></span><br><span class="line">    <span class="comment">//调用canvas的translate（）方法水平平移一下画布2</span></span><br><span class="line">    canvas?.translate(canvasFastOffsetX, <span class="number">0</span>)</span><br><span class="line">    wavePaint.color = waveColor</span><br><span class="line">    <span class="comment">//然后在画布2上画出第二条波浪</span></span><br><span class="line">    canvas?.drawPath(wavePath, wavePaint)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//恢复保存的画布1状态</span></span><br><span class="line">    canvas?.restore()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//后面都是在画布1上作画</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>熟悉Canvas的save()、restore()方法都知道，每调用一次save()，可以理解为画布的一次入栈（保存），每调用一次restore()，可以理解为画布的出栈（恢复），画布3是默认就有的，画布1、2是我保存生成的，所以上述画布1，2，3之间是独立的，互不影响的，而canvasSlowOffsetX和canvasFastOffsetX两个值是不一样的，这样就造成了画布2和3平移时偏移量不一样，所以<strong>用同一个Path画在两个偏移量不一样的画布上就可以形成两条波浪</strong>，效果图如下：</p><img src="/2019/08/23/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5-%E4%BD%BF%E7%94%A8%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E5%AE%9E%E7%8E%B0WaveLoadingView/waveloading11.png" class="" title="waveloading"><p>4、让波浪动起来</p><p>让波浪移动起来很简单，使用一个无限循环动画，在动画的进度回调中计算画布的偏移量，然后调用invalidate()就行，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">waveValueAnim.apply &#123;</span><br><span class="line">    duration = ANIM_TIME</span><br><span class="line">    repeatCount = ValueAnimator.INFINITE<span class="comment">//无限循环</span></span><br><span class="line">    repeatMode = ValueAnimator.RESTART</span><br><span class="line">    addUpdateListener&#123; animation -&gt;</span><br><span class="line">      <span class="comment">//...  </span></span><br><span class="line">        canvasFastOffsetX = (canvasFastOffsetX + fastWaveOffsetX) % canvasWidth</span><br><span class="line">        canvasSlowOffsetX = (canvasSlowOffsetX + slowWaveOffsetX) % canvasWidth</span><br><span class="line">        invalidate()</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在适当的时机启动动画，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>?)</span></span> &#123;</span><br><span class="line">    clipCanvasShape(canvas)</span><br><span class="line">    drawWave(canvas)</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//启动动画</span></span><br><span class="line">    startLoading()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startLoading</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(!waveValueAnim.isStarted) waveValueAnim.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里整个控件就完成了。</p><h3 id="5、优化"><a href="#5、优化" class="headerlink" title="5、优化"></a>5、优化</h3><p>大家都知道手机的资源都是非常有限的，我在做自定义View时，特别是涉及到无限循环的动画时，要注意优化我们的代码，因为一般的屏幕刷新周期是16ms，这意味着在这16ms内你要把有关动画的所有计算和流程完成，不然就会造成掉帧，从而卡顿，在自定义View时我想到可以从下面几点做一些优化，提高效率：</p><h4 id="5-1、减少对象的内存分配，尽可能做到对象复用"><a href="#5-1、减少对象的内存分配，尽可能做到对象复用" class="headerlink" title="5.1、减少对象的内存分配，尽可能做到对象复用"></a>5.1、减少对象的内存分配，尽可能做到对象复用</h4><p>每次系统GC的时候都会暂停系统ms级别的时间，而无限循环的动画的逻辑代码会在短时间内被循环往复的调用, 这样如果在逻辑代码中在堆上创建过多的临时变量，会导致内存的使用量在短时间内上升，从而频繁的引发系统的GC行为，这样无疑会拖累动画的效率，让动画变得卡顿。</p><p>在自定义View涉及到无限循环动画时，我们不能忽略对象的内存分配，不要经常在onDraw()方法中new对象：如果这些临时变量每次的使用都是固定，完全不需要每次循环执行的时候重复创建，我们可以考虑将它们从临时变量转为成员变量，在动画初始化或View初始化时将这些成员变量初始化好，需要的时候直接调用即可；对于不规则图形的绘制我们会需要到Path，并且对于越复杂的 Path，Canvas 在绘制的时候，也会更加的耗时，因此我们需要做的就是尽量优化 Path 的创建过程， 还有Path 类中本身提供reset()和rewind()方法用于复用Path对象， reset()方法是用于对象的复位，rewind()方法在对象的复位基础上还可以让Path对象不释放之前已经分配的内存就，重用之前分配的内存。</p><h4 id="5-2、抽取重复运算，尽可能减少浮点运算"><a href="#5-2、抽取重复运算，尽可能减少浮点运算" class="headerlink" title="5.2、抽取重复运算，尽可能减少浮点运算"></a>5.2、抽取重复运算，尽可能减少浮点运算</h4><p>在自定义View的时候不难免遇到大量的运算，特别在做无限循环动画时，其逻辑代码会在短时间内被循环往复的调用, 这样如果在逻辑代码中在做过多的重复运算无疑会降低动画的效率，特别是在做浮点运算时，CPU 在处理浮点运算时候、会变的特别的慢，要多个指令周期才能完成。</p><p>因此我们还应该努力减少浮点运算，在不考虑精度的情况下，可以将浮点运算转成整型来运算，同时我们还应该把重复的运算从逻辑代码中抽取出来，不用每次都运算，例如在WaveLoadingView中， 我创建Path的过程的计算大部分都是在onLayout()中成，把重复运算的结果提前用Path保存好，然后在onDraw()中使用，因为onDraw()在做动画时会被频繁的被调用。</p><h4 id="5-3、考虑使用SurfaceView"><a href="#5-3、考虑使用SurfaceView" class="headerlink" title="5.3、考虑使用SurfaceView"></a>5.3、考虑使用SurfaceView</h4><p>传统的View的测量、布局、绘制都是在UI线程中完成的，而Android 的UI线程除了View的绘制之外，还需要进行额外的用户处理逻辑、轮询消息事件等，这样当View的绘制和动画比较复杂，计算量比较大的情况，就不再适合使用 View 这种方式来绘制了。这时候我们可以考虑使用SurfaceView ，SurfaceView 能够在非 UI 线程中进行图形绘制，释放了 UI 线程的压力。当然WaveLoadingView也可以使用SurfaceView 来实现。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>WaveLoadingView的实现就讲解完毕，本次自定义View的过程都使用了kotlin进行编写，整体的代码量的确比java的减少了许多，但语言毕竟只是一个工具，我们主要是学习自定义View的实践过程，当你经常动手实践后，你会发现自定义View没有想象那么难，来来去去就那几个方法，大部分时间都是花在实现的细节和运算上，更多实现请查看文末地址。</p><p>地址：<a href="https://github.com/rain9155/WaveLoadingView" target="_blank" rel="noopener">WaveLoadingView</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上一篇文章：&lt;a href=&quot;https://juejin.im/post/5d48e06d51882505723c9d30&quot; target
      
    
    </summary>
    
    
      <category term="开源项目" scheme="http://yoursite.com/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="自定义view" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89view/"/>
    
  </entry>
  
  <entry>
    <title>自定义View实践-仿微信的滑动按钮</title>
    <link href="http://yoursite.com/2019/08/06/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5-%E4%BB%BF%E5%BE%AE%E4%BF%A1%E7%9A%84%E6%BB%91%E5%8A%A8%E6%8C%89%E9%92%AE/"/>
    <id>http://yoursite.com/2019/08/06/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5-%E4%BB%BF%E5%BE%AE%E4%BF%A1%E7%9A%84%E6%BB%91%E5%8A%A8%E6%8C%89%E9%92%AE/</id>
    <published>2019-08-06T10:30:02.000Z</published>
    <updated>2023-01-07T10:44:49.248Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天写过一篇文章<a href="https://juejin.im/post/5d35a5fc518825019b0a3678" target="_blank" rel="noopener">View的工作原理</a>，有原理不行，还要有实践，刚好把以前项目写过的仿微信滑动按钮控件封装一下，所以本文记录一下我实现这个控件的细节。</p><p>地址：<a href="https://github.com/rain9155/SwitchButton" target="_blank" rel="noopener">SwitchButton</a></p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>控件使用效果如下：</p><img src="/2019/08/06/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5-%E4%BB%BF%E5%BE%AE%E4%BF%A1%E7%9A%84%E6%BB%91%E5%8A%A8%E6%8C%89%E9%92%AE/sb1.gif" class="" title="sb1"><p>除了颜色，看起来和微信的还是挺像的。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="1、选择自定义View的方式"><a href="#1、选择自定义View的方式" class="headerlink" title="1、选择自定义View的方式"></a>1、选择自定义View的方式</h3><p>自定义View有3种途径实现：1、组合控件；2、继承现有控件(如Button)；3、继承View。下面分别介绍一下：</p><ul><li>1、组合控件：我们并不需要自己去绘制视图上显示的内容，而是将几个系统原生的控件组合到一起，这样创建出的控件就被称为组合控件，比如标题栏就是个很常见的组合控件。</li><li>2、继承现有控件：我们并不需要自己重新去实现一个控件，只需要去继承一个现有的控件，然后在这个控件上增加一些新的功能。它的优点就是不仅能够按照我们的需求加入相应的功能，并且还可以继承现有控件已经封装好的属性，同时不用自己定义测量流程。</li><li>3、继承View：我们继承View，重写相应的方法，重新去实现一个控件。它的优点就是灵活性高，它给你一张白纸，你用画笔尽情发挥。</li></ul><p>现实情况使用什么方式根据实际情况考虑，我这个控件的选择是方式3: <strong>继承View</strong>，重写onMeasure方法定义它的测量流程，重写onDraw()方法定义它的绘制流程。</p><h3 id="2、选择让控件内容滑动的方式"><a href="#2、选择让控件内容滑动的方式" class="headerlink" title="2、选择让控件内容滑动的方式"></a>2、选择让控件内容滑动的方式</h3><p>既然是滑动按钮，肯定有滑动，当我点击按钮时，如果是打开，按钮的小圆会滑向右边，如果是关闭，按钮的小圆会滑向左边。让控件的内容滑动起来我想到的有3种方式：</p><ul><li>1、通过Scroller：调用Scroller的startScroll()方法，传入起始点坐标和终点坐标，然后重写View的computeScroll()方法，在这个方法里面调用Scroller的computeScrollOffset()方法开始滑动计算，然后调用View的scrollTo()或scrollBy()方法完成View的滑动距离的更新，然后调用View的invalidate()或postInvalidate()方法重绘View。</li><li>2、通过Handler不断的发送延时消息：通过Handler的 sendMessageDelayed(Message msg, long delayMillis)方法不断的发送延时消息，在Handler的handlerMessage()中收到消息后，完成滑动距离的更新，然后调用View的invalidate()或postInvalidate()方法重绘View。</li><li>3、通过动画：利用补间动画或属性动画的平移动画可以让View动起来，或者通过ValueAnimator，设定一个初始值和结点值，当调用ValueAnimator的start()方法后，就可以在回调中获取动画的进度，然后根据动画的进度更新滑动距离，然后调用View的invalidate()或postInvalidate()方法重绘View。</li></ul><p>对于方法1，它更适用于自定义ViewGroup的情景，如果自定义ViewGroup中有许多子View需要滑动起来，就可以考虑使用Scroller，例如Android的ViewPager内部就是使用了Scroller；而对于自定义View，可能方法2和3更适用，我这个控件的选择是方式3: <strong>通过ValueAnimator动画</strong>，在构造ValueAnimator时传入起点和终点，然后开启动画，根据动画进度计算滑动距离，让按钮的小圆滑动起来。</p><h3 id="3、要不要考虑padding属性"><a href="#3、要不要考虑padding属性" class="headerlink" title="3、要不要考虑padding属性"></a>3、要不要考虑padding属性</h3><p>如果你在自定义控件中没有考虑padding属性，那么用户定义控件的padding值就会失效，我的选择是<strong>不考虑用户的padding值</strong>，因为滑动按钮中的内容只有一个小圆，且只在一边，padding的意义不大，考虑padding会让很多地方的坐标计算复杂，我还不如让用户直接控制小圆的半径，这样也类似于padding的效果，也简化了计算。</p><p>所以现实情况要不要考虑padding属性需要根据实际情况考虑。而margin值是由父ViewGroup决定，不是由View控制的，我们不用考虑margin值。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="1、定义控件属性"><a href="#1、定义控件属性" class="headerlink" title="1、定义控件属性"></a>1、定义控件属性</h3><p>在自定义滑动按钮之前，我们先思考可以让用户自定义这个控件的什么属性，如按钮颜色，打开状态和关闭状态的颜色等，在 res -&gt; values 中，右键新建一个名为attrs的xml文件，在这个文件中定义控件属性，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"SwitchButton"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"sb_openBackground"</span> <span class="attr">format</span>=<span class="string">"color"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"sb_closeBackground"</span> <span class="attr">format</span>=<span class="string">"color"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"sb_circleColor"</span> <span class="attr">format</span>=<span class="string">"color"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"sb_circleRadius"</span> <span class="attr">format</span>=<span class="string">"dimension"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"sb_status"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"close"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"open"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">attr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"sb_interpolator"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"Linear"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"Overshoot"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"Accelerate"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"Decelerate"</span> <span class="attr">value</span>=<span class="string">"3"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"AccelerateDecelerate"</span> <span class="attr">value</span>=<span class="string">"4"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"LinearOutSlowIn"</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">attr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样用户在引用这个控件时就能使用这些属性，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.example.library.SwitchButton</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/sb_button2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:sb_interpolator</span>=<span class="string">"Accelerate"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:sb_status</span>=<span class="string">"open"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:sb_circleRadius</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:sb_closeBackground</span>=<span class="string">"@android:color/black"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:sb_openBackground</span>=<span class="string">"@android:color/holo_blue_bright"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:sb_circleColor</span>=<span class="string">"@android:color/white"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>属性的名称要做到见名知意，app只是一个命名空间，取什么名字都可以，不要和系统android相同就行。关于这些属性什么意思可以看<a href="https://github.com/rain9155/SwitchButton" target="_blank" rel="noopener">SwitchButton</a>。</p><h3 id="2、初始化控件属性"><a href="#2、初始化控件属性" class="headerlink" title="2、初始化控件属性"></a>2、初始化控件属性</h3><p>重写View的3个构造方法，分别在3个构造函数中调用init()方法获取控件属性并初始化控件，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchButton</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SwitchButton</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        init(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SwitchButton</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SwitchButton</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        init(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        TypedArray typedValue = context.obtainStyledAttributes(attrs, R.styleable.SwitchButton);</span><br><span class="line">        mOpenBackground = typedValue.getColor(R.styleable.SwitchButton_sb_openBackground, DEFAULT_OPEN_BACKGROUND);</span><br><span class="line">        mCloseBackground = typedValue.getColor(R.styleable.SwitchButton_sb_closeBackground, DEFAULT_CLOSE_BACKGROUND);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        typedValue.recycle();</span><br><span class="line">         <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//初始画笔，动画等</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在attrs中定义的控件属性都在AttributeSet这个集合中，然后通过TypedArray这个类帮助我们把值获取出来，最后一定要记得调用  typedValue.recycle() 方法回收资源。</p><p>为什么要重写3个构造函数呢？因为你的控件有可能在代码中引用或者在xml布局中引用，如果你的控件在xml布局中被引用，那么系统就会调用含有两个参数的构造函数来初始化控件；如果你直接在代码中 new 一个控件然后 add 到容器中，那么大多数情况你会使用含有一个参数的构造函数来初始化控件，如：SwitchButton button = new SwitchButton(this)，而不管一个参数的还是两个参数的系统最终都会调用含有三个参数的构造函数，以防万一，3个构造函数都要重写。</p><h3 id="3、重写onMeasure方法，设定按钮的测量宽高"><a href="#3、重写onMeasure方法，设定按钮的测量宽高" class="headerlink" title="3、重写onMeasure方法，设定按钮的测量宽高"></a>3、重写onMeasure方法，设定按钮的测量宽高</h3><p>重写onMeasure方法在这个方法设定滑动控件的测量宽高，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> measuredWidthMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line">    <span class="keyword">int</span> measuredHeightMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line">    <span class="comment">//取出系统测量宽高</span></span><br><span class="line">    <span class="keyword">int</span> measuredWidth = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">    <span class="keyword">int</span> measureHeight = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> defaultWidth = (<span class="keyword">int</span>) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, <span class="number">60</span>, getResources().getDisplayMetrics());<span class="comment">//控件的默认宽</span></span><br><span class="line">    <span class="keyword">int</span> defaultHeight = (<span class="keyword">int</span>) (defaultWidth *  <span class="number">0.5f</span>);<span class="comment">//控件的默认高是默认宽的一半</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//OFFSET == 6</span></span><br><span class="line">    <span class="keyword">int</span> offset = (<span class="keyword">int</span>) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, OFFSET * <span class="number">2</span> * <span class="number">1.0f</span>, getResources().getDisplayMetrics());<span class="comment">//控件宽和高的差距不能小于12dp, 否则按钮就不好看了</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//考虑wrap_content情况</span></span><br><span class="line">    <span class="keyword">if</span>(measuredWidthMode == MeasureSpec.AT_MOST &amp;&amp; measuredHeightMode == MeasureSpec.AT_MOST)&#123;</span><br><span class="line">        measuredWidth = defaultWidth;</span><br><span class="line">        measureHeight = defaultHeight;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(measuredHeightMode == MeasureSpec.AT_MOST)&#123;</span><br><span class="line">        measureHeight = defaultHeight;</span><br><span class="line">        <span class="keyword">if</span>(measuredWidth - measureHeight &lt; offset)</span><br><span class="line">            measuredWidth = defaultWidth;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(measuredWidthMode == MeasureSpec.AT_MOST)&#123;</span><br><span class="line">        measuredWidth = defaultWidth;</span><br><span class="line">        <span class="keyword">if</span>(measuredWidth - measureHeight &lt; offset)</span><br><span class="line">            measureHeight = defaultHeight;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//处理输入非法的宽高情况，即高度大于宽度，把它们交换就行</span></span><br><span class="line">        <span class="keyword">if</span>(measuredWidth &lt; measureHeight)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = measuredWidth;</span><br><span class="line">            measuredWidth = measureHeight;</span><br><span class="line">            measureHeight = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(Math.abs(measureHeight - measuredWidth) &lt; offset) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"layout_width cannot close to layout_height nearly, the diff must less than 12dp!"</span>);</span><br><span class="line">    </span><br><span class="line">    setMeasuredDimension(measuredWidth, measureHeight);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果知道View的工作原理，那么理解上面的代码就很简单，主要是考虑wrap_content情况，我们要给滑动按钮设置一个默认的宽或高，默认的宽是60dp，默认高是30dp即宽的一半，如果不是wrap_content情况就让View直接使用系统测量的宽或高，最后一定要记得调用setMeasuredDimension()设定View的测量宽高。</p><p>同时我们还要考虑理输入非法的宽高情况，一定要保证宽 &gt; 高，如果用户输入的宽高是 宽 &lt; 高，这样会导致按钮竖起来，这种情况，我直接让高度与宽度交换；如果用户输入的宽高是 宽 &gt; 高，但是如果高很接近宽甚至相等，那么导致滑动控件就是一个圆形，按钮就不好看了，所以我们还要控制宽高不能相差得太近，为了美观，我设定阈值是12dp，如果宽高相差小于12dp，我就抛个异常提示用户。</p><h3 id="4、在onLayout-方法中根据View的宽高计算坐标"><a href="#4、在onLayout-方法中根据View的宽高计算坐标" class="headerlink" title="4、在onLayout()方法中根据View的宽高计算坐标"></a>4、在onLayout()方法中根据View的宽高计算坐标</h3><p>滑动控件被分为4个部分：<strong>左圆、矩形、右圆、小圆</strong>，如下：</p><img src="/2019/08/06/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5-%E4%BB%BF%E5%BE%AE%E4%BF%A1%E7%9A%84%E6%BB%91%E5%8A%A8%E6%8C%89%E9%92%AE/sb2.png" class="" title="sb2"><p>在onDraw()方法中也会按顺序绘制滑动按钮的4个部分，在View的工作原理中讲到，onMeasure()有可能会被系统调用多次，所以最好在onLayout()方法中通过getHeight()和getWidth()方法获得View的真实宽高，所以在onLayout()方法中首先根据View的宽高计算出左圆的半径，小圆的半径，矩形左边界的x坐标，矩形右边界的x坐标，还有小圆圆心的x坐标，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onLayout(changed, left, top, right, bottom);</span><br><span class="line">    <span class="comment">//得出左圆的半径</span></span><br><span class="line">    mLeftSemiCircleRadius = getHeight() / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//小圆的半径 = 大圆半径减OFFER，OFFER = 6</span></span><br><span class="line">    <span class="keyword">if</span>(!checkCircleRaduis(mCircleRadius)) mCircleRadius = mLeftSemiCircleRadius - OFFSET;</span><br><span class="line">    <span class="comment">//矩形左边的x坐标</span></span><br><span class="line">    mLeftRectangleBolder = mLeftSemiCircleRadius;</span><br><span class="line">    <span class="comment">//矩形右边的x坐标</span></span><br><span class="line">    mRightRectangleBolder = getWidth() - mLeftSemiCircleRadius;</span><br><span class="line">    <span class="comment">//小圆的圆心x坐标一直在变化</span></span><br><span class="line">    mCircleCenter = isOpen ? mRightRectangleBolder : mLeftRectangleBolder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到左圆的半径等于View高的一半，然后基于左圆的半径得出其他坐标，小圆与左圆之间会有一些空隙，所以左圆半径减去offset值得出小圆半径，矩形左边的x坐标直接等于左圆的半径，矩形右边的x坐标View的宽度减左圆的半径，小圆圆心的x坐标根据初始状态是开启还是关闭，决定它的圆心的初始坐标是在矩形的右边界还是左边界。</p><p>在接下来只要你不断的改变小圆圆心的x坐标并重绘View，就可以让滑动按钮滑动起来。</p><h3 id="5、重写onDraw-方法，绘制按钮内容"><a href="#5、重写onDraw-方法，绘制按钮内容" class="headerlink" title="5、重写onDraw()方法，绘制按钮内容"></a>5、重写onDraw()方法，绘制按钮内容</h3><p>View的工作原理中我们知道，View会在onDraw()方法中绘制自己，所以我们重写onDraw()方法，绘制滑动按钮的四个部分，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//左圆</span></span><br><span class="line">    canvas.drawCircle(mLeftRectangleBolder, mLeftSemiCircleRadius, mLeftSemiCircleRadius, mPathWayPaint);</span><br><span class="line">    <span class="comment">//矩形</span></span><br><span class="line">    canvas.drawRect(mLeftRectangleBolder, <span class="number">0</span>, mRightRectangleBolder, getMeasuredHeight(), mPathWayPaint);</span><br><span class="line">    <span class="comment">//右圆</span></span><br><span class="line">    canvas.drawCircle(mRightRectangleBolder, mLeftSemiCircleRadius, mLeftSemiCircleRadius, mPathWayPaint);</span><br><span class="line">    <span class="comment">//小圆</span></span><br><span class="line">    canvas.drawCircle(mCircleCenter, mLeftSemiCircleRadius, mCircleRadius, mCirclePaint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>canvas是系统提供给我们的画布，在canvas绘制的东西就是View显示的内容，根据在onLayout中的计算，我们用画笔Paint在canvas中绘制出滑动按钮的4个部分，绘制后显示如下：</p><img src="/2019/08/06/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AE%9E%E8%B7%B5-%E4%BB%BF%E5%BE%AE%E4%BF%A1%E7%9A%84%E6%BB%91%E5%8A%A8%E6%8C%89%E9%92%AE/sb3.png" class="" title="sb3"><p>接下来就是让它滑动起来，这样就能达到效果图的效果。</p><h3 id="6、重写onTouchEvent-方法，让按钮滑动起来"><a href="#6、重写onTouchEvent-方法，让按钮滑动起来" class="headerlink" title="6、重写onTouchEvent()方法，让按钮滑动起来"></a>6、重写onTouchEvent()方法，让按钮滑动起来</h3><p>在<a href="https://juejin.im/post/5d3f0fc3f265da03e921a397" target="_blank" rel="noopener">View的事件分发机制</a>讲到，触摸事件如果不被拦截，最终会分发到View的onTouchEvent()方法中，在这个方法中我们可以根据事件的类型做出滑动按钮的不同行为，我们知道当手指按下按钮然后抬起，滑动按钮的小圆就会滑动到另一边；当手指按下按钮然后移动，滑动按钮的小圆也会跟随手指移动，知道了这两个行为后，我们看onTouchEvent()方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//不在动画的时候可以点击</span></span><br><span class="line">    <span class="keyword">if</span>(isAnim) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">switch</span>(event.getAction())&#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            <span class="comment">//开始的x坐标</span></span><br><span class="line">            startX = event.getX();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            <span class="keyword">float</span> distance = event.getX() - startX;</span><br><span class="line">            <span class="comment">//更新小圆圆心坐标</span></span><br><span class="line">            mCircleCenter += distance / <span class="number">10</span>;</span><br><span class="line">            <span class="comment">//控制范围</span></span><br><span class="line">            <span class="keyword">if</span> (mCircleCenter &gt; mRightRectangleBolder) &#123;<span class="comment">//最右</span></span><br><span class="line">                mCircleCenter = mRightRectangleBolder;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mCircleCenter &lt; mLeftRectangleBolder) &#123;<span class="comment">//最左</span></span><br><span class="line">                mCircleCenter = mLeftRectangleBolder;</span><br><span class="line">            &#125;</span><br><span class="line">            invalidate();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            <span class="keyword">float</span> offset = Math.abs(event.getX() - Math.abs(startX));</span><br><span class="line">            <span class="keyword">float</span> diff;</span><br><span class="line">            <span class="comment">//分2种情况</span></span><br><span class="line">            <span class="keyword">if</span> (offset &lt; mMinDistance) &#123; <span class="comment">//1.点击, 按下和抬起的距离小于mMinDistance确定是点击了</span></span><br><span class="line">                <span class="keyword">if</span>(isOpen)&#123;</span><br><span class="line">                    diff = mLeftRectangleBolder - mCircleCenter;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    diff = mRightRectangleBolder - mCircleCenter;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//2.滑动</span></span><br><span class="line">                <span class="keyword">if</span> (mCircleCenter &gt; getWidth() / <span class="number">2</span>) &#123;<span class="comment">//滑过中点，滑到最右</span></span><br><span class="line">                    <span class="keyword">this</span>.isOpen = <span class="keyword">false</span>;</span><br><span class="line">                    diff = mRightRectangleBolder - mCircleCenter;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;<span class="comment">//没滑过中点,回归原点</span></span><br><span class="line">                    <span class="keyword">this</span>.isOpen = <span class="keyword">true</span>;</span><br><span class="line">                    diff = mLeftRectangleBolder - mCircleCenter;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mValueAnimator.setFloatValues(<span class="number">0</span>, diff);</span><br><span class="line">            mValueAnimator.start();</span><br><span class="line">            startX = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先看ACTION_DOWN，当手指按下，我们记录手指按下的x坐标。</p><p>接着看ACTION_MOVE，如果按下后移动，我们就让小圆跟随手指移动即可，所以ACTION_MOVE中先计算出手指移动的距离distance，往右移distance是正数，往左移distance是负数，然后加到小圆的圆心坐标，还要控制小圆的圆心坐标的范围，不要超出矩形左右边界，最后调用 invalidate()重绘View，这样onDraw()方法就会重新执行，更新小圆的位置，就会让小圆慢慢滑动起来。</p><p>最后看ACTION_UP，<strong>mMinDistance = new ViewConfiguration().getScaledTouchSlop()</strong>，它是系统定义的临界值，当抬起手指时，如果移动的距离offset大于mMinDistance ，就认为抬起手指前，手指在移动，否则就认为在点击。如果手指在移动后抬起，这时就判断小圆圆心是否滑过中点算出滑动距离，如果滑过中点(getWidth() / 2)，就让小圆滑到最右，如果没有滑过中点，就让小圆滑到最左；如果手指只是在点击控件，这时就根据控件目前处于开启还是关闭状态算出滑动距离，如果目前处于开启状态，就让小圆滑到最左，如果目前处于关闭状态就让小圆滑到最右；而这个滑动距离diff就是小圆圆心到矩形边界的距离，至于是距离左边界还是右边界，就看上述情况了，计算出滑动距离后设置给ValueAnimator，最后开启动画，在ValueAnimator的updateListener中接收动画进度，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mValueAnimator.addUpdateListener(animation -&gt; &#123;</span><br><span class="line">    <span class="keyword">float</span> value = (<span class="keyword">float</span>)animation.getAnimatedValue();</span><br><span class="line">    mCircleCenter -= mPreAnimatedValue;</span><br><span class="line">    <span class="comment">//更新小圆圆心坐标</span></span><br><span class="line">    mCircleCenter += value;</span><br><span class="line">    mPreAnimatedValue = value;</span><br><span class="line">    invalidate();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在里面根据动画进度更新小圆圆心坐标，然后调用 invalidate()重绘View，这样onDraw()方法就会重新执行，更新小圆的位置，这样重复执行直到动画结束，就会让小圆慢慢滑动起来。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到最后就已经实现了效果图的效果，整个过程的原理还是挺简单，使用到了动画还有自定义View的基础知识，赶快动手实践一下。</p><p>地址：<a href="https://github.com/rain9155/SwitchButton" target="_blank" rel="noopener">SwitchButton</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前几天写过一篇文章&lt;a href=&quot;https://juejin.im/post/5d35a5fc518825019b0a3678&quot; tar
      
    
    </summary>
    
    
      <category term="开源项目" scheme="http://yoursite.com/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="自定义view" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89view/"/>
    
  </entry>
  
  <entry>
    <title>View的事件分发机制</title>
    <link href="http://yoursite.com/2019/07/29/View%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2019/07/29/View%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/</id>
    <published>2019-07-29T15:14:42.000Z</published>
    <updated>2023-01-07T10:44:48.810Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天写过一篇文章<a href="https://rain9155.github.io/2019/07/22/View%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/" target="_blank" rel="noopener">View的工作原理</a>，讲述的View工作的三大流程，其实与View的工作流程同样重要还有View的事件分发机制，平时我们经常通过setOnClickListener()方法来设置一个View的点击监听，那你有没有想过这个点击事件底层是怎么样传递到这个View的呢？当你自定义控件时，如果要处理滑动事件，那么到底返回true还是false？还有当你遇到了滑动嵌套的情景，你要怎么解决滑动嵌套引起的冲突？所以，本文通过 源码 + 流程图 来深入了解一个事件分发机制，当你掌握了它之后，当你遇到与滑动相关的问题时就更加的游刃有余。</p><a id="more"></a><blockquote><p>本文源码基于Android8.0</p></blockquote><h2 id="准备知识"><a href="#准备知识" class="headerlink" title="准备知识"></a>准备知识</h2><h3 id="1、什么是触摸事件"><a href="#1、什么是触摸事件" class="headerlink" title="1、什么是触摸事件"></a>1、什么是触摸事件</h3><p>触摸事件事件就是当你的手触摸到手机屏幕时所产生的最小单元事件，所谓最小单元，就是不可再拆分的，它一般有4种类型：<strong>按下（down)、移动（move）、抬起（up）、取消(cancel)</strong>。然后由若干个不可再拆分的最小单元事件就组成了<strong>点击事件、长按事件、滑动事件</strong>等。</p><h3 id="2、什么是MotionEvent"><a href="#2、什么是MotionEvent" class="headerlink" title="2、什么是MotionEvent"></a>2、什么是MotionEvent</h3><p>MotionEvent就是Android对上面触摸事件相关信息的封装，View的事件分发中的<strong>事件</strong>就是这个MotionEvent，当这个MotionEvent产生后，那么系统就会将这个MotionEvent传递给View的层级，MotionEvent在View的层级传递的过程就是事件分发。MotionEvent封装了事件类型和坐标两类信息。</p><p>事件类型可以通过 <strong>motionEvent.getAction()</strong> 方法获得，它返回一个常量，对应着一个事件类型，事件类型主要有以下4种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MotionEvent.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MotionEvent</span> <span class="keyword">extends</span> <span class="title">InputEvent</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//按下（down)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ACTION_DOWN             = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//抬起（up）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ACTION_UP               = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//移动（move）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ACTION_MOVE             = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//取消(cancel)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ACTION_CANCEL           = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">//还有很多就不一 一列举</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>坐标信息也是通过MotionEvent获取，<strong>motionEvent.getRawX()、motionEvent.getRawY()</strong> 可以获得以屏幕作为参考系的坐标值，<strong>motionEvent.getX()、motionEvent.getY()</strong> 可以获得以被触摸的 View 作为参考系的坐标值。参考下面的视图坐标：</p><img src="/2019/07/29/View%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/view1.png" class="" title="view1"><p>蓝色点想象成手指触摸屏幕的位置。</p><h3 id="3、一个事件序列"><a href="#3、一个事件序列" class="headerlink" title="3、一个事件序列"></a>3、一个事件序列</h3><p>从手指按下屏幕到抬起，在这个过程中所产生的一系列事件，就是一个事件序列，这个事件序列以down事件开始，中间含有数量不定的move事件，最终以up事件结束。所以可能会有下面两种事件序列：</p><ul><li>ACTION_DOWN -&gt; ACTION_UP：手指按下屏幕后又抬起</li><li>ACTION_DOWN -&gt; ACTION_MOVE -&gt; … -&gt; ACTION_MOVE -&gt; ACTION_UP：手指按下屏幕，滑动一会，然后抬起</li></ul><p>在分析事件分发的过程时，会有事件序列这个概念。</p><h3 id="4、事件分发的起点，事件从何而来"><a href="#4、事件分发的起点，事件从何而来" class="headerlink" title="4、事件分发的起点，事件从何而来"></a>4、事件分发的起点，事件从何而来</h3><p>我想大家都知道View的事件分发机制的起点是View的dispatchTouchEvent()方法，但是如果从View的dispatchTouchEvent()继续追溯上去，事件是从哪里来的呢？</p><p>Android的输入设备有很多种，如屏幕、键盘、鼠标、轨迹球等，而屏幕是我们接触最多的设备，当用户手指触摸屏幕时就会产生触摸事件，这时Android的输入系统就会为这个触摸事件在/dev/input/路径下写入以event[NUMBER]为名的输入设备节点，这时输入系统中的EventHub就会监听到这个输入事件，然后InputReader就会把这个原始输入事件读取并经过加工后交给输入系统中的InputDispatcher，InputDispatcher会在mWindowHandles列表（mWindowHandles列表在IMS中代表所有窗口）中会找到合适的WindowHandle(InputWindowHandle类型)，然后把输入事件经过WindowHandle中的InputChannel通过Socket发送给应用进程所在的ViewRootImp中的InputChannel，这时ViewRootImp会把接收到的事件通过内部类InputEventReceiver分发给ViewRootImp持有的顶级View，然后顶级View的dispatchTouchEvent方法就会回调，在该方法中会获取Window.Callback(Activity或Dialog等实现了这个接口)，然后把事件分发给Callback，这时Callback的dispatchTouchEvent方法回调，不同的实现类由不同的实现，在Activity的实现中，它会把事件交给PhoneWindow来分发，然后PhoneWindow又会把这个事件分发给顶级View，<strong>然后顶级View就调用super.dispatchTouchEvent方法，把这个输入事件在View树中层层分发下去，直到找到合适的View来处理这个事件，这来到了我们熟悉的View的事件分发机制</strong>。</p><p>这个事件传输的大概过程：<strong>IMS -&gt;  ViewRootImp -&gt; 顶级View -&gt; 实现Window.Callback的类 -&gt; Window -&gt; 顶级View</strong>。（更多细节可以查看<a href="https://www.jianshu.com/p/b7cef3b3e703" target="_blank" rel="noopener">原来Android触控机制竟是这样的？</a>）</p><p>上面的一些名词如EventHub、InputReader、InputReader都是属于Android的输入系统，这部分是一个很复杂的知识，我只是概括了一下，所以我们只要知道，<strong>输入系统监听到输入事件后，就会先交给Window，然后Window再交给顶级View，然后顶级View在把它分发下去</strong>。(关于Window和View的关系可以看这篇文章<a href="https://rain9155.github.io/2019/03/22/Window,%20WindowManager%E5%92%8CWindowManagerService%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/" target="_blank" rel="noopener">Window, WindowManager和WindowManagerService之间的关系</a>)</p><p>这个顶级View可能是View，也有可能是ViewGroup，具体情况看你添加Window到WMS时你的addView(View view, ViewGroup.LayoutParams params)方法中的View是View实例还是ViewGroup实例，所以本文接下来就分别分析View的事件分发和ViewGroup的事件分发。</p><h2 id="View的事件分发"><a href="#View的事件分发" class="headerlink" title="View的事件分发"></a>View的事件分发</h2><h3 id="1、View-dispatchTouchEvent"><a href="#1、View-dispatchTouchEvent" class="headerlink" title="1、View::dispatchTouchEvent()"></a>1、View::dispatchTouchEvent()</h3><p>View的事件分发比ViewGroup的简单，因为它只是一个单独的元素，所以它只需要处理自己的事件，View的事件分发从View的dispatchTouchEvent()方法开始，所以我们看它的dispatchTouchEvent方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//View.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//result默认为false</span></span><br><span class="line">    <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">     ListenerInfo li = mListenerInfo;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        li != <span class="keyword">null</span><span class="comment">//如果ListenerInfo不为空</span></span><br><span class="line">        &amp;&amp; li.mOnTouchListener != <span class="keyword">null</span><span class="comment">//如果触摸事件的监听不为空</span></span><br><span class="line">        &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED<span class="comment">//如果该控件是ENABLED状态</span></span><br><span class="line">        &amp;&amp; li.mOnTouchListener.onTouch(<span class="keyword">this</span>, event)<span class="comment">//如果onTouch方法返回了true</span></span><br><span class="line">    )&#123;</span><br><span class="line">        result = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        !result<span class="comment">//如果上面四个条件都不满足，result默认为false</span></span><br><span class="line">        &amp;&amp; onTouchEvent(event)<span class="comment">//如果onTouchEvent()方法返回了true</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        result = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//View.java</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenerInfo</span> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span> OnClickListener mOnClickListener;<span class="comment">//点击事件的监听</span></span><br><span class="line">     <span class="keyword">protected</span> OnLongClickListener mOnLongClickListener;<span class="comment">//长按事件的监听</span></span><br><span class="line">     <span class="keyword">private</span> OnTouchListener mOnTouchListener;<span class="comment">//触摸事件的监听</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从View的dispatchTouchEvent()方法的伪代码可以看出，dispatchTouchEvent()方法首先会根据4个条件来决定是否调用View的onTouchEvent方法，如下：</p><ul><li><p>1、如果ListenerInfo不为空：ListenerInfo里面有View的各种监听，那么mListenerInfo是什么时候被赋值的呢？答案是给View设置监听的时候，在我们给View设置任何监听的时候，如果这个mListenerInfo还没初始化就会先初始化，比如设置触摸事件的监听，我们看setOnTouchListener()方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//View.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnTouchListener</span><span class="params">(OnTouchListener l)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//先调用getListenerInfo方法初始化mListenerInfo，然后把触摸事件的监听赋值给mOnTouchListener</span></span><br><span class="line">    getListenerInfo().mOnTouchListener = l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//View.java</span></span><br><span class="line"><span class="function">ListenerInfo <span class="title">getListenerInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (mListenerInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> mListenerInfo;</span><br><span class="line">      &#125;</span><br><span class="line">      mListenerInfo = <span class="keyword">new</span> ListenerInfo();</span><br><span class="line">      <span class="keyword">return</span> mListenerInfo;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>2、如果触摸事件的监听不为空：即ListenerInfo的mOnTouchListener不为空，从1可以看出，当你给View设置OnTouchListener时，就已经满足了1、2条件了。</p></li><li><p>3、如果该控件是ENABLED状态：即该Vew处于enable状态，如果你没有手动调用过View的setEnable(false)设置控件为不可用的话，这个条件就为true，控件默认为enable状态。</p></li><li><p>4、如果onTouch方法返回了true：当你给View设置OnTouchListener，并且在onTouch方法中返回了true，表示消费了这次事件，那么这个条件就为true。所以到这里，如果4个条件都满足的话，result就会等于true，就会导致下面无法调用View的onTouchEvent()方法。</p></li></ul><p>但是如果你<strong>没有给你给View设置OnTouchListener或者你给View设置了OnTouchListener，但是onTouch方法返回了false</strong>，只要满足这两个条件之一，就会让result保持默认值false，从而满足下面的条件调用View的onTouchEvent()方法。这里得出一个结论：<strong>OnTouchListener的onTouch方法的优先级高于onTouchEvent()方法</strong>。</p><p>假设现在不满足上面4个条件，从而调用View的onTouchEvent()方法，我们来看View的onTouchEvent()方法。</p><h3 id="2、View-onTouchEvent"><a href="#2、View-onTouchEvent" class="headerlink" title="2、View::onTouchEvent()"></a>2、View::onTouchEvent()</h3><p>onTouchEvent()方法里面会处理View点击事件、长按事件，即回调你设置的OnClickListener的onClick()方法和OnLongClickListener的OnLongClick()方法，在你设置OnClickListener或OnLongClickListener回调时会同时把你的View设置为可点击状态即clickable状态，有些控件默认可点击如Button，而有些控件需要设置点击回调或setClickable(true)才可以点击如TextView。</p><p>接下来我们看View的onTouchEvent()方法的主要源码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//View.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> x = event.getX();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> y = event.getY();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> viewFlags = mViewFlags;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> action = event.getAction();</span><br><span class="line"><span class="comment">//该View是否可点击，可以看到这里点击包含3种点击：CLICKABLE、LONG_CLICKABLE和CONTEXT_CLICKABLE(回调OnContextClickListener)</span></span><br><span class="line">    <span class="comment">//这里我们关注CLICKABLE和LONG_CLICKABLE就行，即点击和长按</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> clickable = ((viewFlags &amp; CLICKABLE) == CLICKABLE</span><br><span class="line">        || (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)</span><br><span class="line">        || (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE;</span><br><span class="line">    <span class="comment">//1、如果View处于disabled状态，即不可用状态</span></span><br><span class="line">    <span class="keyword">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_UP &amp;&amp; (mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span>) &#123;</span><br><span class="line">            setPressed(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</span><br><span class="line">        <span class="comment">//这里说明了即使View处于不可用状态，但是如果它可以点击，它还是会消费点击事件</span></span><br><span class="line">        <span class="keyword">return</span> clickable;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2、如果View设置有代理机制，那么就会执行TouchDelegate的onTouchEvent()方法</span></span><br><span class="line">    <span class="keyword">if</span> (mTouchDelegate != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mTouchDelegate.onTouchEvent(event)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3、下面是onTouchEvent()对点击事件和长按事件的处理</span></span><br><span class="line">    <span class="comment">//如果控件可以点击</span></span><br><span class="line">    <span class="keyword">if</span> (clickable || (viewFlags &amp; TOOLTIP) == TOOLTIP) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">               <span class="comment">//...</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">               <span class="comment">//...</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从这里看出，如果我们的View是可以点击的，最终一定返回true，表示消费了此事件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4、最终虽然控件可用，但是不可点击，返回false，不消费此事件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个onTouchEvent()方法有点长，这里我截取了整体框架，这里我们先明确一点的是onTochEvent()中返回true就表示这个事件由这个View消费，返回false就表示这个View不消费这个事件然后它的父容器会继续找合适的View消费。首先我们看注释1，它说明了即使View处于不可用状态，但是如果它可以点击即clickable = true，它会返回true，表明不可用状态下的View它还是会消费事件，即使这个View会没有响应，反之返回false；接着注释2，如果设置了mTouchDelegate，则会将事件交给代理者处理，直接return true，如果大家希望自己的View增加它的touch范围，可以尝试使用TouchDelegate；接着注释3，如果控件可以点击，就判断事件类型：ACTION_UP、ACTION_DOWN、ACTION_CANCEL、ACTION_MOVE，然后根据不同的事件类型做出不同的行为，然后都返回了true，表示消费了此事件；最后注释4如果控件不可点击，就返回false，不消费此事件。</p><p>接下来我们重点看注释3，看onTouchEvent()是如何在ACTION_UP、ACTION_DOWN、ACTION_CANCEL、ACTION_MOVE中触发onClick()和onLingClick()回调的。</p><h4 id="2-1、case-ACTION-DOWN"><a href="#2-1、case-ACTION-DOWN" class="headerlink" title="2.1、case ACTION_DOWN:"></a>2.1、case ACTION_DOWN:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">      <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">          <span class="comment">//...</span></span><br><span class="line">          <span class="comment">//1、设置mHasPerformedLongPress为false</span></span><br><span class="line">          mHasPerformedLongPress = <span class="keyword">false</span>;</span><br><span class="line">          <span class="comment">//...</span></span><br><span class="line">          <span class="comment">//2、给mPrivateFlags设置一个PREPRESSED标识</span></span><br><span class="line">           mPrivateFlags |= PFLAG_PREPRESSED;</span><br><span class="line">          <span class="comment">//3、通过postDelayed发送一个延时100毫秒后执行的任务mPendingCheckForTap</span></span><br><span class="line">          postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());</span><br><span class="line">          <span class="comment">//...</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><p>我们想象一下，我们的手指按下这个View，这时进入ACTION_DOWN分支，在这个分支里，在注释1中它首先设置mHasPerformedLongPress为false，表示长按事件还没有触发，然后在注释2给mPrivateFlags设置一个PREPRESSED的标识，表示开始检查长按事件，然后在注释3通过postDelayed发送了一个延时消息，ViewConfiguration.getTapTimeout()返回100毫秒，即100毫秒后会执行任务mPendingCheckForTap，它一个CheckForTap类型任务，它是用来<strong>检测长按事件</strong>的。我们看这个任务是什么，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//View.java </span></span><br><span class="line"><span class="comment">//用来检测长按事件</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckForTap</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">float</span> x;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">float</span> y;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//1、mPrivateFlags清除PFLAG_PREPRESSED标识</span></span><br><span class="line">            mPrivateFlags &amp;= ~PFLAG_PREPRESSED;</span><br><span class="line">            <span class="comment">//2、见下面调用链，这里传入true，即给mPrivateFlags设置一个PFLAG_PRESSED标识</span></span><br><span class="line">            setPressed(<span class="keyword">true</span>, x, y);</span><br><span class="line">            <span class="comment">//3、调用checkForLongClick()方法，传入100毫秒</span></span><br><span class="line">            checkForLongClick(ViewConfiguration.getTapTimeout(), x, y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setPressed</span><span class="params">(<span class="keyword">boolean</span> pressed, <span class="keyword">float</span> x, <span class="keyword">float</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//主要调用了带一个参数的setPressed(pressed)方法</span></span><br><span class="line">        setPressed(pressed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置控件是否处于按下状态</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPressed</span><span class="params">(<span class="keyword">boolean</span> pressed)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">if</span> (pressed) &#123;<span class="comment">//如果pressed为true</span></span><br><span class="line">        <span class="comment">//给mPrivateFlags设置一个PFLAG_PRESSED标识</span></span><br><span class="line">        mPrivateFlags |= PFLAG_PRESSED;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果pressed为false</span></span><br><span class="line">        <span class="comment">//清除mPrivateFlags之前设置的PFLAG_PRESSED标识</span></span><br><span class="line">        mPrivateFlags &amp;= ~PFLAG_PRESSED;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mPendingCheckForTap的run方法里面在注释1首先会先清除mPrivateFlags中PFLAG_PREPRESSED标识，然后在注释2设置PFLAG_PRESSED标识，表示准备执行长按事件，最主要的是注释3，我们看checkForLongClick方法里面干了什么，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//View.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkForLongClick</span><span class="params">(<span class="keyword">int</span> delayOffset, <span class="keyword">float</span> x, <span class="keyword">float</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、检查mViewFlags，如果可以进行长按事件LONG_CLICKABLE</span></span><br><span class="line">    <span class="keyword">if</span> ((mViewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE || (mViewFlags &amp; TOOLTIP) == TOOLTIP) &#123;</span><br><span class="line">        <span class="comment">//此时mHasPerformedLongPress标志位还是false</span></span><br><span class="line">        mHasPerformedLongPress = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (mPendingCheckForLongPress == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//2、创建了一个CheckForLongPress类型的任务</span></span><br><span class="line">            mPendingCheckForLongPress = <span class="keyword">new</span> CheckForLongPress();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//3、ViewConfiguration.getLongPressTimeout()返回500毫秒，再减100毫秒等于400毫秒</span></span><br><span class="line">        <span class="comment">//通过postDelayed()发送延时400毫秒后执行的任务mPendingCheckForLongPress</span></span><br><span class="line">        postDelayed(mPendingCheckForLongPress,</span><br><span class="line">                    ViewConfiguration.getLongPressTimeout() - delayOffset);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法在注释1首先检测该View是否可以进行长按事件，View的LONG_CLICKABLE属性默认为false，但是在setOnLongClickListener（）时就会把它设置为true，然后在注释2创建了一个CheckForLongPress类型的任务，然后在注释3通过postDelayed()发送了一个延时消息，即400毫秒后执行mPendingCheckForLongPress任务，它是用来<strong>执行长按事件</strong>的，我们看这个任务的具体实现，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//View.java</span></span><br><span class="line"><span class="comment">//用来执行长按事件</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckForLongPress</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">float</span> mX;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">float</span> mY;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ((mOriginalPressedState == isPressed())<span class="comment">//1、首先检查mPrivateFlags中是否清除了PFLAG_PRESSED标识，如果清除了表示长按事件取消</span></span><br><span class="line">                &amp;&amp; (mParent != <span class="keyword">null</span>)</span><br><span class="line">                &amp;&amp; mOriginalWindowAttachCount == mWindowAttachCount) &#123;</span><br><span class="line">                <span class="comment">//2、调用performLongClick()方法</span></span><br><span class="line">                <span class="keyword">if</span> (performLongClick(mX, mY)) &#123;</span><br><span class="line">                    <span class="comment">//3、设置mHasPerformedLongPress为true</span></span><br><span class="line">                    mHasPerformedLongPress = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="comment">//...</span></span><br><span class="line">            <span class="keyword">if</span> (performLongClick(mX, mY)) &#123;</span><br><span class="line">                mHasPerformedLongPress = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//返回true表示检测mPrivateFlags中清除了PFLAG_PRESSED标识，false反之</span></span><br><span class="line">    <span class="keyword">return</span> (mPrivateFlags &amp; PFLAG_PRESSED) == PFLAG_PRESSED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CheckForLongPress就是用于执行长按事件的，它的run方法里面会先检查mPrivateFlags中是否清除了PFLAG_PRESSED标识，如果清除了就表示长按事件取消，否则就调用performLongClick()方法，里面会最终回调onLongClick()方法回调，如果performLongClick()返回true，就会设置mHasPerformedLongPress为true，否则mHasPerformedLongPress还是为false，即<strong>mHasPerformedLongPress是否为true取决performLongClick(float x, float y)是否返回true</strong>，接下来我们看performLongClick(float x, float y)方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//View.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">performLongClick</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> handled = performLongClick();</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">return</span> handled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">performLongClick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> performLongClickInternal(mLongClickX, mLongClickY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">performLongClickInternal</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">final</span> ListenerInfo li = mListenerInfo;</span><br><span class="line">    <span class="comment">//如果设置了OnLongClickListener回调</span></span><br><span class="line">    <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnLongClickListener != <span class="keyword">null</span>) &#123;       </span><br><span class="line">        <span class="comment">//回调OnLongClickListener的onLongClick方法</span></span><br><span class="line">        handled = li.mOnLongClickListener.onLongClick(View.<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> handled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个方法中一路跟进，最终来到了performLongClickInternal(float x, float y)方法中，在performLongClickInternal()方法中，如果我们通过setOnLongClickListener()设置了OnLongClickListener回调，这里就会回调我们熟悉的onLongClick()方法，而performLongClickInternal()是否返回true取决于我们在onLongClick()方法中是否返回true，performLongClick()是否返回true取决于performLongClickInternal()是否返回true，然后这里结合上面的黑体字得出一个结论：<strong>如果你设置了onLongClickListener，mHasPerformedLongPress是否为true取决我们在onLongClick()方法中是否返回true，如果没有设置，mHasPerformedLongPress就一直为false</strong>，这个mHasPerformedLongPress是否为true会影响我们在ACTION_UP是否能够回调onClick()方法的关键。</p><p>现在我们通过case ACTION_DOWN知道：<strong>如果我们按下手指在500毫秒内没有抬起，就会触发长按事件</strong>。下面分析ACTION_UP。</p><h4 id="2-2、case-ACTION-UP"><a href="#2-2、case-ACTION-UP" class="headerlink" title="2.2、case ACTION_UP:"></a>2.2、case ACTION_UP:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (action) &#123;</span><br><span class="line">    <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">boolean</span> prepressed = (mPrivateFlags &amp; PFLAG_PREPRESSED) != <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//1、如果mPrivateFlags中包含PFLAG_PRESSED或PFLAG_PREPRESSED标识，都会进入if分支</span></span><br><span class="line">        <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span> || prepressed) &#123;</span><br><span class="line">           <span class="comment">//...</span></span><br><span class="line">            <span class="keyword">if</span> (prepressed) &#123;<span class="comment">//如果mPrivateFlags中只包含PFLAG_PREPRESSED标识，表示用户在100毫秒内抬起了手指，还没执行CheckForTap任务</span></span><br><span class="line">                <span class="comment">//2、这里传入为true，即给mPrivateFlags设置一个PFLAG_PRESSED标识</span></span><br><span class="line">                <span class="comment">//这里主要让用户看到控件还是按下状态</span></span><br><span class="line">                setPressed(<span class="keyword">true</span>, x, y);</span><br><span class="line">            &#125;</span><br><span class="line">   <span class="comment">//3、这个mHasPerformedLongPress为false就进入if分支，mIgnoreNextUpEvent默认为false</span></span><br><span class="line">            <span class="keyword">if</span> (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123;</span><br><span class="line">                <span class="comment">//4、移除长按事件CheckForLongPress任务消息，即取消长按事件</span></span><br><span class="line">                removeLongPressCallback();</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                <span class="keyword">if</span> (mPerformClick == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//5、如果mPerformClick为null，初始化一个实例</span></span><br><span class="line">                    mPerformClick = <span class="keyword">new</span> PerformClick();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//6、通过Handler把mPerformClick添加到消息队列，但其实PerformClick中的run方法还是执行performClick()方法，所以我们只要看performClick()方法就行</span></span><br><span class="line">                <span class="keyword">if</span> (!post(mPerformClick)) &#123;</span><br><span class="line">                    <span class="comment">//如果post一个PerformClick失败就执行performClick()方法</span></span><br><span class="line">                    performClick();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="comment">//7、移除检测长按事件CheckForTap任务消息，即取消检测长按事件</span></span><br><span class="line">            removeTapCallback();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//View.java</span></span><br><span class="line"><span class="comment">//PerformClick中的run方法还是执行performClick()方法</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PerformClick</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         performClick();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>我们想象一下，现在我们抬起了手指，分三个时间段抬起：</p><ul><li><p>1、如果你在<strong>100毫秒内</strong>抬起手指，那么mPrivateFlags肯定只有PFLAG_PREPRESSED标识，且mHasPerformedLongPress为false，根据注释1和3，这样就会执行PerformClick()方法，在执行PerformClick()方法前，在注释4调用removeLongPressCallback()移除长按事件CheckForLongPress任务，即不会触发onLongClick()回调。</p></li><li><p>2、如果你在<strong>100毫秒后到500毫秒</strong>才抬起，那么mPrivateFlags肯定只有PFLAG_PRESSED标识，且mHasPerformedLongPress为false，接下来的逻辑和1一样。</p></li><li><p>3、如果你在<strong>500毫秒后</strong>才抬起，那么mPrivateFlags肯定只有PFLAG_PRESSED标识，而mHasPerformedLongPress是否为true取决我们是否设置onLongClickListener并在onLongClick()方法中是否返回true。如果你设置了onLongClickListener回调并在onLongClick()方法中返回了false或者你没有设置onLongClickListener回调，那么你还是可以走到注释6执行performClick()方法；但是如果你设置了onLongClickListener回调并在onLongClick()方法中返回了true，那么你就不能执行performClick()方法了。</p></li></ul><p>对照ACTION_DOWN的流程和ACTION_UP的流程就能更好的理解上面3个时间段，所以从这里我们知道：<strong>如果你在500毫秒内抬起手指，那么你就只能执行点击事件，不能执行长按事件；如果你在500毫秒后抬起，并且你设置了onLongClickListener并在onLongClick()方法中返回了false 或者 你没有设置onLongClickListener回调，那么你执行完长按事件后还可以执行点击事件，但是如果你设置了onLongClickListener回调并在onLongClick()方法中返回了true，那么你就不能执行点击事件</strong>。performClick()和 performLongClick()方法类似，它里面最终回调onClick()方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//View.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">performClick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">boolean</span> result;</span><br><span class="line">     <span class="keyword">final</span> ListenerInfo li = mListenerInfo;</span><br><span class="line">     <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">//1、执行了OnClickListener的onClick()方法</span></span><br><span class="line">         li.mOnClickListener.onClick(<span class="keyword">this</span>);</span><br><span class="line">         result = <span class="keyword">true</span>;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         result = <span class="keyword">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>performClick()方法中的逻辑是，如果你设置了OnClickListener回调，那么就会执行onClick(）方法，大家也注意到performClick()会返回一个true或者false，但是这个返回值对于onTouchEvent()方法没有任何意义，因为上面提到switch语句块的后面一定返回true。这里我们再得出一个结论：<strong>OnLongClickListener的onLongClick()方法的优先级高于onClickListener的onClick()方法</strong>。</p><p>好了现在我们的手指从按下到抬起，就已经分析完onTouchEvent()中的ACTION_DOWN和ACTION_UP分支，如果你的手指在抬起前，不小心移动了一下，就会触发ACTION_CANCEL或ACTION_MOVE，这个时候它就会根据条件(手指是否移出View的范围)通过调用 removeLongPressCallback()或 removeTapCallback()方法移除CheckForLongPress或CheckForTap任务，即取消长按或点击，这里限于篇幅就不再展开分析，大家可自行分析。</p><h3 id="3、小结"><a href="#3、小结" class="headerlink" title="3、小结"></a>3、小结</h3><p>1、View没有子View，所以它的的分发比较简单，从View的dispatchTouchEvent()方法开始进入View的事件分发流程，该方法只负责事件的分发，没有进行实际事件的处理，进行实际事件的处理有两处地方：1、通过外部设置的onTouchListener的onTouch()方法，2、View的onTouchEvent()方法。</p><p>2、当一个View要处理点击事件时，如果它设置了onTouchListener，那么onTouch方法就会回调，这时事件如何处理还要看onTouch()方法的返回值，如果返回true，那么onTouchEvent()方法将不会被调用，dispatchTouchEvent()方法直接返回true；如果返回false，onTouchEvent()方法会被调用，这时事件如何处理就要看onTouchEvent()的返回值，在onTouchEvent()中，不管控件可用还是不可用，返回值取决于控件是否可点击，如果控件可点击(clickabale或longClickabale，只要有一个为true)，onTouchEvent()返回true，如果控件不可点击(clickabale和longClickabale都为false)，onTouchEvent()返回false。</p><p>3、如果我们同时设置了OnTouchListener、OnLongClickListener和OnClickListener回调，根据优先级，事件的传递顺序是：<strong>onTouch() -&gt; onLongClick() -&gt; onClick()</strong>，其中除了onClick()都有boolean返回值，返回值能决定下一个方法是否被调用，onClick()优先级最低，连返回值都没有。</p><p>4、 对于ViewGroup（也就是当前 View 的父容器）而言，它只认识子 View的dispatchTouchEvent()方法，不认识另外两个处理事件的方法。子View的 onTouch()  和 onTouchEvent() 都是在自己的 dispatchTouchEvent() 里面调用的，他们两个会影响 dispatchTouchEvent() 的返回值，但是对于上级 ViewGroup 而言，它只认识 dispatchTouchEvent() 的返回值。</p><p>流程图：</p><img src="/2019/07/29/View%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/view2.png" class="" title="view2"><h2 id="ViewGroup的事件分发"><a href="#ViewGroup的事件分发" class="headerlink" title="ViewGroup的事件分发"></a>ViewGroup的事件分发</h2><h3 id="1、ViewGroup-dispatchTouchEvent"><a href="#1、ViewGroup-dispatchTouchEvent" class="headerlink" title="1、ViewGroup::dispatchTouchEvent()"></a>1、ViewGroup::dispatchTouchEvent()</h3><p>ViewGroup是View的子类，它是一组View的集合，它包含很多子View和子ViewGroup，所以ViewGroup的事件分发比View的复杂，但是ViewGroup的事件分发才是整个事件分发机制的精髓，和View一样ViewGroup的事件分发的起点也是dispatchTouchEvent()，虽然这个方法在View中，但是ViewGroup重写了它，因为它们的分发逻辑不一样。所以我们看ViewGroup的dispatchTouchEvent()方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewGroup.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//本次事件处理结果</span></span><br><span class="line">    <span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (onFilterTouchEventForSecurity(ev)) &#123;</span><br><span class="line">         <span class="keyword">final</span> <span class="keyword">int</span> action = ev.getAction();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> actionMasked = action &amp; MotionEvent.ACTION_MASK;</span><br><span class="line">        <span class="comment">//1、如果本次事件是ACTION_DOWN</span></span><br><span class="line">        <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            <span class="comment">//置空mFirstTouchTarget，mFirstTouchTarget是TouchTarget类型，是一个单链表结构</span></span><br><span class="line">            cancelAndClearTouchTargets(ev);</span><br><span class="line">            <span class="comment">//清除mGroupFlags中的FLAG_DISALLOW_INTERCEPT标志位，这个标志等同于下面的disallowIntercept</span></span><br><span class="line">            resetTouchState();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//ViewGroup是否拦截本次事件标志</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> intercepted;</span><br><span class="line">        <span class="comment">//2、如果本次事件是ACTION_DOWN 或者 mFirstTouchTarget为空</span></span><br><span class="line">        <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN</span><br><span class="line">            || mFirstTouchTarget != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//子View是否禁止ViewGroup拦截事件标志</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (!disallowIntercept) &#123;<span class="comment">//如果子View允许ViewGroup拦截事件</span></span><br><span class="line">                <span class="comment">//调用onInterceptTouchEvent()方法询问ViewGroup是否拦截事件，intercepted的值由onInterceptTouchEvent(ev)决定</span></span><br><span class="line">                intercepted = onInterceptTouchEvent(ev);</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果子View禁止ViewGroup拦截事件</span></span><br><span class="line">                intercepted = <span class="keyword">false</span>;<span class="comment">//intercepted值为false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果本次事件不是ACTION_DOWN又没有target</span></span><br><span class="line">            <span class="comment">//intercepted值为true，在此之后，当前事件序列中的所有事件序列都由ViewGroup处理，不会再传递给子View</span></span><br><span class="line">            intercepted = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//检查本次事件是否是ACTION_CANCEL</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> canceled = resetCancelNextUpFlag(<span class="keyword">this</span>) || actionMasked == MotionEvent.ACTION_CANCEL;</span><br><span class="line">        <span class="comment">//split默认为true</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> split = (mGroupFlags &amp; FLAG_SPLIT_MOTION_EVENTS) != <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//newTouchTarget用于记录本次事件的target</span></span><br><span class="line">        TouchTarget newTouchTarget = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//表示事件是否已经分发给target对应的子View，默认为false</span></span><br><span class="line">        <span class="keyword">boolean</span> alreadyDispatchedToNewTouchTarget = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//3、如果本次事件不取消并且不拦截，就寻找合适的子View处理</span></span><br><span class="line">        <span class="keyword">if</span> (!canceled &amp;&amp; !intercepted) &#123;</span><br><span class="line">            <span class="comment">//取出按下手指的index</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> actionIndex = ev.getActionIndex(); <span class="comment">// always 0 for down</span></span><br><span class="line">            <span class="comment">//getPointerId表示根据index取出按下手指的id，第一根手指为0，第二根手指为1，以此类推</span></span><br><span class="line">       <span class="comment">//idBitsToAssign与多点触控相关，本文不重点讨论</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> idBitsToAssign = split ? <span class="number">1</span> &lt;&lt; ev.getPointerId(actionIndex) : TouchTarget.ALL_POINTER_IDS;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="comment">//如果本次事件是ACTION_DOWN 或 ACTION_POINTER_DOWN 或ACTION_HOVER_MOVE</span></span><br><span class="line">            <span class="comment">//本文重点关注ACTION_DOWN事件，ACTION_POINTER_DOWN与多点触控相关</span></span><br><span class="line">            <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN</span><br><span class="line">                || (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_DOWN)</span><br><span class="line">                || actionMasked == MotionEvent.ACTION_HOVER_MOVE</span><br><span class="line">               ) &#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> childrenCount = mChildrenCount;</span><br><span class="line">                <span class="comment">//如果target是null并且ViewGroup有子View，就寻找某个子View当target</span></span><br><span class="line">                <span class="keyword">if</span> (newTouchTarget == <span class="keyword">null</span> &amp;&amp; childrenCount != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> x = ev.getX(actionIndex);</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> y = ev.getY(actionIndex);</span><br><span class="line">                    <span class="keyword">final</span> View[] children = mChildren;</span><br><span class="line">                    <span class="comment">//从后往前逐个取出子View</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = childrenCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> childIndex = getAndVerifyPreorderedIndex(childrenCount, i, customOrder);</span><br><span class="line">                        <span class="keyword">final</span> View child = getAndVerifyPreorderedView(preorderedList, children, childIndex);</span><br><span class="line">                        <span class="comment">//判断子View能否接受点击事件：子View可见或在播放动画，并且触摸点在子View范围内</span></span><br><span class="line">                        <span class="keyword">if</span> (!canViewReceivePointerEvents(child)</span><br><span class="line">                            || !isTransformedTouchPointInView(x, y, child, <span class="keyword">null</span>)) &#123;</span><br><span class="line">                            ev.setTargetAccessibilityFocus(<span class="keyword">false</span>);</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">  <span class="comment">//走到这里表示子View满足处理事件的条件</span></span><br><span class="line">                        <span class="comment">//...</span></span><br><span class="line">                        <span class="comment">//dispatchTransformedTouchEvent()里面会调用子View的dispatchTouchEvent()方法，在这个方法里把事件分发给子View</span></span><br><span class="line">                         <span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, <span class="keyword">false</span>, child, idBitsToAssign)) &#123;</span><br><span class="line">                             <span class="comment">//...</span></span><br><span class="line">                             <span class="comment">//如果dispatchTransformedTouchEvent()返回true，表示找到子View消费本次事件了，就会走到这里, 所以这个子View就被当作target，这里会调用addTouchTarget()方法为这个子View创建一个TouchTarget，并把这个target插入mFirstTouchTarget链表的表头，并把表头返回赋值给newTouchTarget</span></span><br><span class="line">                             newTouchTarget = addTouchTarget(child, idBitsToAssign);</span><br><span class="line"></span><br><span class="line">                             <span class="comment">//alreadyDispatchedToNewTouchTarget赋值为true，表示事件已经分发给target对应的子View</span></span><br><span class="line">                             alreadyDispatchedToNewTouchTarget = <span class="keyword">true</span>;</span><br><span class="line">                             <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">                    &#125;<span class="comment">//end...for（）</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//...</span></span><br><span class="line">                    </span><br><span class="line">                &#125;<span class="comment">//end...if(newTouchTarget == null &amp;&amp; childrenCount != 0)</span></span><br><span class="line">                </span><br><span class="line">            &#125;<span class="comment">//end...if(actionMasked == MotionEvent.ACTION_DOWN...)</span></span><br><span class="line">            </span><br><span class="line">        &#125;<span class="comment">///end...if(!canceled &amp;&amp; !intercepted)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4、根据mFirstTouchTarget是否为null做出不同行为</span></span><br><span class="line">        <span class="keyword">if</span> (mFirstTouchTarget == <span class="keyword">null</span>) &#123;<span class="comment">//这一般有三种情况导致mFirstTouchTarget为空：</span></span><br><span class="line">            <span class="comment">//1、ViewGroup没有子View；</span></span><br><span class="line">            <span class="comment">//2、子View处理了ACTION_DOWN事件，但是在dispatchTouchEvent()返回了false；</span></span><br><span class="line">            <span class="comment">//3、ViewGroup在DOWN事件中的onInterceptTouchEvent(ev)返回了true</span></span><br><span class="line">       <span class="comment">//在这三种情况下ViewGroup就会自己处理事件</span></span><br><span class="line">            handled = dispatchTransformedTouchEvent(ev, canceled, <span class="keyword">null</span>,</span><br><span class="line">                                                    TouchTarget.ALL_POINTER_IDS);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//有两种情况mFirstTouchTarget不为空，表示找到合适的子View为target：</span></span><br><span class="line">            <span class="comment">//1、本次事件是ACTION_DOWN，遍历完ViewGroup所有的子View后找到了合适的子View为target；</span></span><br><span class="line">            <span class="comment">//2、本次事件是除了ACTION_DOWN以外的其他事件，但是在ACTION_DOWN时已经找到了合适的子View为target，所以接下来就直接把事件分发给mFirstTouchTarget的child处理处理就行</span></span><br><span class="line">            TouchTarget predecessor = <span class="keyword">null</span>;</span><br><span class="line">            TouchTarget target = mFirstTouchTarget;</span><br><span class="line">            <span class="comment">//mFirstTouchTarget是一个单链表结构，下面是链表的遍历</span></span><br><span class="line">            <span class="keyword">while</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> TouchTarget next = target.next;</span><br><span class="line">                <span class="keyword">if</span> (alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget) &#123;<span class="comment">//情况1的处理</span></span><br><span class="line">                    <span class="comment">//因为在找到target时已经调用过dispatchTransformedTouchEvent()了，表示该target的View已经消费了该事件，handle直接等于true</span></span><br><span class="line">                    handled = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">//情况2的处理</span></span><br><span class="line">                    <span class="comment">//注意这个intercepted，如果为true，cancelChild就会为true，会导致子View收到一个ACTION_CANCEL, 表示子View的本次事件取消</span></span><br><span class="line">                     <span class="keyword">final</span> <span class="keyword">boolean</span> cancelChild = resetCancelNextUpFlag(target.child)</span><br><span class="line">                                || intercepted;</span><br><span class="line">                    <span class="comment">//调用dispatchTransformedTouchEvent()方法把事件分发给target对应的子View</span></span><br><span class="line">                    <span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, cancelChild, target.child, target.pointerIdBits)) &#123;</span><br><span class="line">                        <span class="comment">//handle的是否为true取决于子View的dispatchTouchEvent()返回值</span></span><br><span class="line">                        handled = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//如果需要取消本次事件，清空这个子View对应的target，并把这个tareget从链表中取消，导致该事件序列的后序事件该子View都无法再收到</span></span><br><span class="line">                     <span class="keyword">if</span> (cancelChild) &#123;</span><br><span class="line">                         <span class="keyword">if</span> (predecessor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                             mFirstTouchTarget = next;</span><br><span class="line">                         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                             predecessor.next = next;</span><br><span class="line">                         &#125;</span><br><span class="line">                         target.recycle();</span><br><span class="line">                         target = next;</span><br><span class="line">                         <span class="keyword">continue</span>;</span><br><span class="line">                     &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                predecessor = target;</span><br><span class="line">                <span class="comment">//继续分发给下一个target</span></span><br><span class="line">                target = next;</span><br><span class="line">            &#125;<span class="comment">//end...while (target != null) </span></span><br><span class="line">            </span><br><span class="line">         &#125;<span class="comment">//end...if (mFirstTouchTarget == null)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        </span><br><span class="line">    &#125;<span class="comment">//end...if (onFilterTouchEventForSecurity(ev))</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> handled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法特别长，里面就是整个ViewGroup的事件分发逻辑，我知道大家也没有想看的欲望了，这个方法对应的流程图如下：</p><img src="/2019/07/29/View%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/view3.png" class="" title="view3"><p>可以看到，<strong>在同一个事件序列内（从down开始，到up结束）</strong>，ViewGroup的dispatchTouchEvent()方法可以分为两大过程：<strong>1、ACTION_DOWN事件的处理流程；2、除了ACTION_DOWN以外的事件处理流程</strong>。下面跟着这两个流程分别走一遍。</p><h3 id="2、ViewGroup处理ACTION-DOWN事件的流程"><a href="#2、ViewGroup处理ACTION-DOWN事件的流程" class="headerlink" title="2、ViewGroup处理ACTION_DOWN事件的流程"></a>2、ViewGroup处理ACTION_DOWN事件的流程</h3><p>ACTION_DOWN事件的处理流程又可以分为两个流程即：<strong>ViewGroup拦截事件(intercepted = true)与不拦截事件（intercepted = false）</strong>。</p><img src="/2019/07/29/View%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/view4.png" class="" title="view4"><p>看流程图，在dispatchTouchEvent()方法注释2中的if语句会决定 intercepted 的值，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewGroup是否拦截本次事件标志</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> intercepted;</span><br><span class="line"><span class="comment">//2、如果本次事件是ACTION_DOWN 或者 mFirstTouchTarget为空</span></span><br><span class="line"><span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN || mFirstTouchTarget != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//2.1、子View是否禁止ViewGroup拦截事件标志</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!disallowIntercept) &#123;<span class="comment">//如果子View允许ViewGroup拦截事件</span></span><br><span class="line">        <span class="comment">//调用onInterceptTouchEvent()方法询问ViewGroup是否拦截事件，intercepted的值由onInterceptTouchEvent(ev)决定</span></span><br><span class="line">        intercepted = onInterceptTouchEvent(ev);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果子View禁止ViewGroup拦截事件</span></span><br><span class="line">        intercepted = <span class="keyword">false</span>;<span class="comment">//intercepted值为false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果本次事件是ACTION_DOWN也会进入这个if分支，看注释2.1检查 mGroupFlags 中是否包含FLAG_DISALLOW_INTERCEPT标识，默认没有，即默认disallowIntercept为false，所以就会调用onInterceptTouchEvent()方法询问ViewGroup是否拦截事件，intercepted的值由onInterceptTouchEvent()决定，onInterceptTouchEvent()默认返回false，所以<strong>intercepted = false</strong>。</p><h4 id="2-1、intercepted-false"><a href="#2-1、intercepted-false" class="headerlink" title="2.1、intercepted = false"></a>2.1、intercepted = false</h4><p>当DOWN事件没有被ViewGroup拦截，<strong>intercepted = false</strong>，它就会进入dispatchTouchEvent()方法注释3的if语句，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//检查本次事件是否是ACTION_CANCEL</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> canceled = resetCancelNextUpFlag(<span class="keyword">this</span>) || actionMasked == MotionEvent.ACTION_CANCEL;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//newTouchTarget用于记录本次事件的target</span></span><br><span class="line">TouchTarget newTouchTarget = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//表示事件是否已经分发给target对应的子View，默认为false</span></span><br><span class="line"><span class="keyword">boolean</span> alreadyDispatchedToNewTouchTarget = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//3、如果本次事件不取消并且不拦截，就寻找合适的子View处理</span></span><br><span class="line"><span class="keyword">if</span> (!canceled &amp;&amp; !intercepted) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//如果本次事件是ACTION_DOWN 或 ACTION_POINTER_DOWN 或ACTION_HOVER_MOVE</span></span><br><span class="line">    <span class="comment">//本文重点关注ACTION_DOWN事件，ACTION_POINTER_DOWN与多点触控相关</span></span><br><span class="line">    <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN</span><br><span class="line">        || (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_DOWN)</span><br><span class="line">        || actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childrenCount = mChildrenCount;</span><br><span class="line">        <span class="comment">//如果target是null并且ViewGroup有子View，就寻找某个子View当target</span></span><br><span class="line">        <span class="keyword">if</span> (newTouchTarget == <span class="keyword">null</span> &amp;&amp; childrenCount != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">float</span> x = ev.getX(actionIndex);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">float</span> y = ev.getY(actionIndex);</span><br><span class="line">            <span class="keyword">final</span> View[] children = mChildren;</span><br><span class="line">            <span class="comment">//从后往前逐个取出子View</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = childrenCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> childIndex = getAndVerifyPreorderedIndex(childrenCount, i, customOrder);</span><br><span class="line">                <span class="keyword">final</span> View child = getAndVerifyPreorderedView(preorderedList, children, childIndex);</span><br><span class="line">                <span class="comment">//3.1、判断子View能否接受点击事件：子View可见或在播放动画，并且触摸点在子View范围内</span></span><br><span class="line">                <span class="keyword">if</span> (!canViewReceivePointerEvents(child)</span><br><span class="line">                    || !isTransformedTouchPointInView(x, y, child, <span class="keyword">null</span>)) &#123;</span><br><span class="line">                    ev.setTargetAccessibilityFocus(<span class="keyword">false</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//走到这里表示子View满足处理事件的条件</span></span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                <span class="comment">//3.2、dispatchTransformedTouchEvent()里面会调用子View的dispatchTouchEvent()方法，在这个方法里把事件分发给子View</span></span><br><span class="line">                <span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, <span class="keyword">false</span>, child, idBitsToAssign)) &#123;</span><br><span class="line">                    <span class="comment">//...</span></span><br><span class="line">                    <span class="comment">//3.3、如果dispatchTransformedTouchEvent()返回true，表示找到子View消费本次事件了，就会走到这里, 所以这个子View就被当作target，这里会调用addTouchTarget()方法为这个子View创建一个TouchTarget，并把这个target插入mFirstTouchTarget链表的表头，并把表头返回赋值给newTouchTarget</span></span><br><span class="line">                    newTouchTarget = addTouchTarget(child, idBitsToAssign);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//alreadyDispatchedToNewTouchTarget赋值为true，表示事件已经分发给target对应的子View</span></span><br><span class="line">                    alreadyDispatchedToNewTouchTarget = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            &#125;<span class="comment">//end...for（）</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">        &#125;<span class="comment">//end...if(newTouchTarget == null &amp;&amp; childrenCount != 0)</span></span><br><span class="line"></span><br><span class="line">    &#125;<span class="comment">//end...if(actionMasked == MotionEvent.ACTION_DOWN...)</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">///end...if(!canceled &amp;&amp; !intercepted)</span></span><br></pre></td></tr></table></figure><p>如果是DOWN事件，假设ViewGroup有子View，就会进入for循环，ViewGroup就会遍历所有子View，先在注释3.1中判断这个子View是否满足接收事件的条件，如果不满足，就再找下一个子View，如果满足，就来到了注释3.2，然后调用dispatchTransformedTouchEvent()方法看这个子View是否消费DOWN事件。</p><p>dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewGroup.java</span></span><br><span class="line"><span class="comment">//dispatchTransformedTouchEvent（）只需要关注两个参数：</span></span><br><span class="line"><span class="comment">//@params cancel 是否取消本次事件</span></span><br><span class="line"><span class="comment">//@params child 准备接收分发事件的子View</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dispatchTransformedTouchEvent</span><span class="params">(MotionEvent event, <span class="keyword">boolean</span> cancel, View child, <span class="keyword">int</span> desiredPointerIdBits)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">boolean</span> handled;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> oldAction = event.getAction();</span><br><span class="line">    <span class="comment">//1、如果cancel为true，进入这个if分支</span></span><br><span class="line">    <span class="keyword">if</span> (cancel || oldAction == MotionEvent.ACTION_CANCEL) &#123;</span><br><span class="line">        <span class="comment">//设置ACTION_CANCEL事件</span></span><br><span class="line">        event.setAction(MotionEvent.ACTION_CANCEL);</span><br><span class="line">        <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">            handled = <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            handled = child.dispatchTouchEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">        event.setAction(oldAction);</span><br><span class="line">        <span class="keyword">return</span> handled;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...省略的是多点触控的处理</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2、如果cancel为false，进入这个if分支</span></span><br><span class="line">    <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;<span class="comment">//如果child为空</span></span><br><span class="line">        <span class="comment">//调用 super.dispatchTouchEvent(event)，表示ViewGroup自己决定是否处理本次事件</span></span><br><span class="line">        handled = <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果child不为空</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//调用child.dispatchTouchEvent(event)，表示让子View决定是否处理本次事件</span></span><br><span class="line">        handled = child.dispatchTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> handled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为传入cancel为false，所以来带注释2的if分支，因为传入的child不为空，所以调用child.dispatchTouchEvent(event)，表示让子View决定是否处理本次事件，<strong>到这里DOWN事件就传递给子View，如果子View是一个View，那么它的处理流程就像前面介绍的View的事件分发一样，如果子View是一个ViewGroup，那么它的处理流程就又是ViewGroup的事件分发</strong>。</p><p>好了，假设子View消费这个事件，返回true，则dispatchTransformedTouchEvent()返回true，ViewGrou找到了要消费这个DOWN事件的子View，这时到了dispatchTouchEvent方法的注释3.3，调用addTouchTarget(child, idBitsToAssign)方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewGroup.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> TouchTarget <span class="title">addTouchTarget</span><span class="params">(@NonNull View child, <span class="keyword">int</span> pointerIdBits)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//首先为传进来的View获取一个target关联</span></span><br><span class="line">    <span class="keyword">final</span> TouchTarget target = TouchTarget.obtain(child, pointerIdBits);</span><br><span class="line">    <span class="comment">//然后把这个target插入mFirstTouchTarget链表的表头</span></span><br><span class="line">    target.next = mFirstTouchTarget;</span><br><span class="line">    mFirstTouchTarget = target;<span class="comment">//mFirstTouchTarget重新移动到链表表头</span></span><br><span class="line">    <span class="comment">//返回链表表头的target</span></span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ViewGroup::TouchTarget</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TouchTarget <span class="title">obtain</span><span class="params">(@NonNull View child, <span class="keyword">int</span> pointerIdBits)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    target.child = child;</span><br><span class="line">    target.pointerIdBits = pointerIdBits;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果找到了要消费这个DOWN事件的子View，就会为这个子View创建一个target关联，同时这个子View会赋值给<strong>target</strong>的<strong>child</strong>字段，最后这个<strong>target</strong>就会插入链表的表头并返回，addTouchTarget方法返回后赋值给<strong>newTouchTarget</strong>字段。target的作用就是：做了一个记录，当下一个事件到来时，如果发现<strong>mFirstTouchTarget</strong>不为空，就会遍历链表找到对应的target，直接把事件分发给<strong>target</strong>中记录的View，就不用再去遍历ViewGroup中子View了。</p><p>那么我们上面所谈到的target、mFirstTouchTarget、newTouchTarget是什么？它们都是<strong>TouchTarget</strong>类型，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///ViewGroup::TouchTarget</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TouchTarget</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当前消费事件的View</span></span><br><span class="line">    <span class="keyword">public</span> View child;</span><br><span class="line">    <span class="comment">//它的下一个结点</span></span><br><span class="line">    <span class="keyword">public</span> TouchTarget next;</span><br><span class="line">    <span class="comment">//通过二进制位记录按在child上的手指数量，有多少个1就表示有多少根手指</span></span><br><span class="line">    <span class="comment">//例如pointerIdBits = 001表示有一根手指，pointerIdBits = 011表示有两根手指，</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> pointerIdBits;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它是一个链表结构，其中child表示本次需要消费事件的View，next表示下一个结点，pointerIdBits表示按在child上的手指数量，<strong>mFirstTouchTarget</strong>就是这个链表的表头，链表由很多的<strong>target</strong>串联起来，<strong>newTouchTarget</strong>就是代表最新插入的target，为什么mFirstTouchTarget是一个链表？我的猜测是由于<strong>多点触控</strong>的存在，例如我5个手指可以同时触摸到列表的5个子View，如果5个子View都是要消费这个DOWN事件的话，那么就要用链表把它们记录起来，当下一个事件到来时，5个子View都能分发到事件，所以后面遇到target的字眼，时刻记住它是一个链表结构。</p><blockquote><p>多点触控在事件分发中又是另外一个知识点，在多点触控中:<br>1、如果多个手指依此按在同一个View中，那么这个View会先收到第一个手指的ACTION_DOWN事件，接着会收到其他手指的ACTION_POINTER_DOWN事件;<br>2、如果多个手指依此按在不同的View中，那么每个View都会收到相应手指的ACTION_DOWN事件；<br>在Android中，通过idBitsToAssign、mFirstTouchTarget 和 mFirstTouchTarget中的pointerIdBits配合实现多点触控的事件分发，有兴趣的可以自行了解<a href="https://www.wanandroid.com/wenda/show/11287" target="_blank" rel="noopener">“事件分发只有一次 ACTION_DOWN，一次 ACTION_UP”严谨吗？</a>。</p></blockquote><p>好了，现在已经找到了可以消费事件的子View，并通过addTouchTarget方法为这个子View关联了一个target插入了mFirstTouchTarget，并且mFirstTouchTarget在链表插入时也被移动到链表表头了，不为null了，接着就一个break跳出for循环，直接来到dispatchTouchEvent()方法的注释4，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4、根据mFirstTouchTarget是否为null做出不同行为</span></span><br><span class="line"><span class="keyword">if</span> (mFirstTouchTarget == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">//有两种情况mFirstTouchTarget不为空，表示找到合适的子View为target：</span></span><br><span class="line">    <span class="comment">//1、本次事件是ACTION_DOWN，遍历完ViewGroup所有的子View后找到了合适的子View为target；</span></span><br><span class="line">    <span class="comment">//2、本次事件是除了ACTION_DOWN以外的其他事件，但是在ACTION_DOWN时已经找到了合适的子View为target，所以接下来就直接把事件分发给target的child处理就行</span></span><br><span class="line">    TouchTarget predecessor = <span class="keyword">null</span>;</span><br><span class="line">    TouchTarget target = mFirstTouchTarget;</span><br><span class="line">    <span class="comment">//mFirstTouchTarget是一个单链表结构，下面是链表的遍历</span></span><br><span class="line">    <span class="keyword">while</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> TouchTarget next = target.next;</span><br><span class="line">        <span class="keyword">if</span> (alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget) &#123;<span class="comment">//情况1的处理</span></span><br><span class="line">            <span class="comment">//因为在找到target时已经调用过dispatchTransformedTouchEvent()了，表示该target的View已经消费了该事件，handle直接等于true</span></span><br><span class="line">            handled = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//情况2的处理</span></span><br><span class="line">           <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">        predecessor = target;</span><br><span class="line">        <span class="comment">//继续分发给下一个target</span></span><br><span class="line">        target = next;</span><br><span class="line">    &#125;<span class="comment">//end...while (target != null) </span></span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//end...if (mFirstTouchTarget == null)</span></span><br></pre></td></tr></table></figure><p>mFirstTouchTarget不为空，就来到else分支，else分支中是一个链表的遍历，遍历所有的target，找到在上面的for循环消费了DOWN事件的子View对应的target，对应情况1的if分支，在上面的for循环中找到子View后，这个子View已经消费了DOWN事件，alreadyDispatchedToNewTouchTarget已经赋值为true，所以handle直接等于true。</p><p>到这里在DOWN事件下ViewGroup不拦截的情况下分析完毕。上面是假设找到了子View并且子View消费了事件，这样当下一次事件到来时mFirstTouchTarget不为空，就直接把这个事件给子View；但是如果上面是找到子View而这个子View不消费这个DOWN事件，即子View的dispatchTouchEvent()方法返回false，那么dispatchTransformedTouchEvent()返回false，就导致无法为mFirstTouchTarget赋值，mFirstTouchTarget为空，当下一次事件序列到来时，ViewGroup会直接处理，而不再转发给子View。这里得出一个结论：<strong>子View如果不消费ACTION_DOWN事件，那么同一事件序列的其他事件都不会再交给它来处理，而是交给它的父ViewGroup处理；子View一旦消费ACTION_DOWN事件，那么同一事件序列的其他事件都会交给它处理</strong>。</p><p>所以如果此时子View没有消费ACTION_DOWN事件，或者我重写了ViewGroup的onInterceptTouchEvent()并返回了true，那么ViewGroup就会开始拦截事件，接下来看在DOWN事件下ViewGroup拦截的情况，即<strong>intercepted = true</strong>。</p><h4 id="2-2、intercepted-true"><a href="#2-2、intercepted-true" class="headerlink" title="2.2、intercepted = true"></a>2.2、intercepted = true</h4><p>如果ViewGroup拦截DOWN事件，那么<strong>intercepted = true</strong>，就不会进入dispatchTouchEvent()方法的注释3的if语句，这样在DOWN事件下ViewGroup就不会遍历它的子View，也就无法调用dispatchTransformedTouchEvent()找到要消费事件的子View，同理无法调用addTouchTarget()方法为mFirstTouchTarget赋值，就会导致在DOWN事件下mFirstTouchTarget为空，这样就直接来到了dispatchTouchEvent()方法的注释4的if语句，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//检查本次事件是否是ACTION_CANCEL</span></span><br><span class="line"> <span class="keyword">final</span> <span class="keyword">boolean</span> canceled = resetCancelNextUpFlag(<span class="keyword">this</span>) || actionMasked == MotionEvent.ACTION_CANCEL;</span><br><span class="line"><span class="comment">//...   </span></span><br><span class="line"><span class="comment">//4、根据mFirstTouchTarget是否为null做出不同行为</span></span><br><span class="line"><span class="keyword">if</span> (mFirstTouchTarget == <span class="keyword">null</span>) &#123;<span class="comment">//这一般有三种情况导致mFirstTouchTarget为空：</span></span><br><span class="line">    <span class="comment">//1、ViewGroup没有子View；</span></span><br><span class="line">    <span class="comment">//2、子View处理了ACTION_DOWN事件，但是在dispatchTouchEvent()返回了false；</span></span><br><span class="line">    <span class="comment">//3、ViewGroup在DOWN事件中的onInterceptTouchEvent(ev)返回了true</span></span><br><span class="line">    <span class="comment">//在这三种情况下ViewGroup就会自己处理事件</span></span><br><span class="line">    <span class="comment">//注意第三个参数传入null，表示ViewGroup自己处理事件</span></span><br><span class="line">    handled = dispatchTransformedTouchEvent(ev, canceled, <span class="keyword">null</span>,</span><br><span class="line">                                            TouchTarget.ALL_POINTER_IDS);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;         </span><br><span class="line">    <span class="comment">//...           </span></span><br><span class="line">&#125;<span class="comment">//end...if (mFirstTouchTarget == null)</span></span><br></pre></td></tr></table></figure><p>很明显这里是情况3，因为没有找到子View，dispatchTransformedTouchEvent()方法的第三个参数为空，而第二个参数为false，因为不是ACTION_CANCEL事件，我们参考上面的dispatchTransformedTouchEvent()方法分析，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewGroup.java</span></span><br><span class="line"><span class="comment">//dispatchTransformedTouchEvent（）只需要关注两个参数：</span></span><br><span class="line"><span class="comment">//@params cancel 是否取消本次事件</span></span><br><span class="line"><span class="comment">//@params child 准备接收分发事件的子View</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dispatchTransformedTouchEvent</span><span class="params">(MotionEvent event, <span class="keyword">boolean</span> cancel, View child, <span class="keyword">int</span> desiredPointerIdBits)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">boolean</span> handled;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//2、如果cancel为false，进入这个if分支</span></span><br><span class="line">    <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;<span class="comment">//如果child为空</span></span><br><span class="line">        <span class="comment">//调用 super.dispatchTouchEvent(event)，表示ViewGroup自己决定是否处理本次事件</span></span><br><span class="line">        handled = <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果child不为空</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//调用child.dispatchTouchEvent(event)，表示让子View决定是否处理本次事件</span></span><br><span class="line">        handled = child.dispatchTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> handled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面就会调用 super.dispatchTouchEvent(event)，表示ViewGroup自己决定是否处理本次事件，ViewGroup的父类是View，所以super.dispatchTouchEvent(event)里面的处理逻辑就是View的事件分发的处理逻辑，见前面分析的View的事件分发。</p><p>到这里在DOWN事件下ViewGroup拦截的情况分析完毕。这里得出一个结论：<strong>ViewGroup如果在onInterceptTouchEvent()方法的ACTION_DOWN事件中返回true，那么整个事件序列都会交给ViewGroup处理，不再交给子View</strong>。</p><p>我们回到dispatchTouchEvent()方法，还有一点要注意的是在ACTION_DOWN下不管拦截还是不拦截都会进入dispatchTouchEvent()方法中注释1的if语句，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//1、如果本次事件是ACTION_DOWN</span></span><br><span class="line"><span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">    <span class="comment">//置空mFirstTouchTarget，mFirstTouchTarget是TouchTarget类型，是一个单链表结构</span></span><br><span class="line">    cancelAndClearTouchTargets(ev);</span><br><span class="line">    <span class="comment">//清除mGroupFlags中的FLAG_DISALLOW_INTERCEPT标志位，这个标志等同于下面的disallowIntercept</span></span><br><span class="line">    resetTouchState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个if语句的作用就是防止前一次事件序列对本次事件序列造成影响，所以它会向先调用 cancelAndClearTouchTargets(ev)清空mFirstTouchTarget，然后调用resetTouchState()清除FLAG_DISALLOW_INTERCEPT标志位，因为ACTION_DOWN事件是一个新的事件序列的开始，所以dispatchTouchEvent()方法首先要做的就是判断是不是迎来了一个新的事件序列，所以要判断该事件是否是ACTION_DOWN 事件，如果是 ACTION_DOWN 事件，作为一个事件序列的开头，应当要消除前面的事件序列可能留下的影响。关于FLAG_DISALLOW_INTERCEPT标志位后面会讲。</p><p>到这里ViewGroup处理ACTION_DOWN事件的流程分析完毕，下面我们来看除了ACTION_DOWN以外的事件的处理流程。</p><h3 id="3、ViewGroup处理除了ACTION-DOWN以外的事件的流程"><a href="#3、ViewGroup处理除了ACTION-DOWN以外的事件的流程" class="headerlink" title="3、ViewGroup处理除了ACTION_DOWN以外的事件的流程"></a>3、ViewGroup处理除了ACTION_DOWN以外的事件的流程</h3><p>ACTION_DOWN事件的处理流程又可以分为两个流程即：<strong>mFirstTouchTarget != null与mFirstTouchTarget == null</strong>。你会发现intercepted这个标记位似乎已经没有多大作用， 它如果是true，它根本不会进入dispatchTouchEvent()方法的注释3，就算是false进入了dispatchTouchEvent()方法的注释3，它也不会满足注释3.1的条件。所以我们就直接来到注释4。</p><img src="/2019/07/29/View%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/view5.png" class="" title="view5"><h4 id="3-1、mFirstTouchTarget-null"><a href="#3-1、mFirstTouchTarget-null" class="headerlink" title="3.1、mFirstTouchTarget == null"></a>3.1、mFirstTouchTarget == null</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检查本次事件是否是ACTION_CANCEL</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> canceled = resetCancelNextUpFlag(<span class="keyword">this</span>) || actionMasked == MotionEvent.ACTION_CANCEL;</span><br><span class="line"><span class="comment">//...   </span></span><br><span class="line"><span class="comment">//4、根据mFirstTouchTarget是否为null做出不同行为</span></span><br><span class="line"><span class="keyword">if</span> (mFirstTouchTarget == <span class="keyword">null</span>) &#123;<span class="comment">//这一般有三种情况导致mFirstTouchTarget为空：</span></span><br><span class="line">    <span class="comment">//1、ViewGroup没有子View；</span></span><br><span class="line">    <span class="comment">//2、子View处理了ACTION_DOWN事件，但是在dispatchTouchEvent()返回了false；</span></span><br><span class="line">    <span class="comment">//3、ViewGroup在DOWN事件中的onInterceptTouchEvent(ev)返回了true</span></span><br><span class="line">    <span class="comment">//在这三种情况下ViewGroup就会自己处理事件</span></span><br><span class="line">    <span class="comment">//注意第三个参数传入null，表示ViewGroup自己处理事件</span></span><br><span class="line">    handled = dispatchTransformedTouchEvent(ev, canceled, <span class="keyword">null</span>,</span><br><span class="line">                                            TouchTarget.ALL_POINTER_IDS);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;         </span><br><span class="line">    <span class="comment">//...           </span></span><br><span class="line">&#125;<span class="comment">//end...if (mFirstTouchTarget == null)</span></span><br></pre></td></tr></table></figure><p>这里1、2、3情况都有可能发生，<strong>从ACTION_DOWN的处理流程我们知道为mFirstTouchTarget赋值的过程只会在处理ACTION_DOWN事件的时候出现</strong>，所以如果在处理ACTION_DOWN事件的时候ViewGroup没有子View，不会进入for循环，导致mFirstTouchTarget为空；如果ViewGroup有子View，进入了for循环，但是View不消费DOWN事件，即在dispatchTouchEvent()返回了false，导致无法调用addTouchTarget()方法为mFirstTouchTarget赋值，导致mFirstTouchTarget为空；ViewGroup在DOWN事件中的onInterceptTouchEvent(ev)返回了true，不会进入注释3的if语句，导致mFirstTouchTarget为空；所以在处理ACTION_DOWN事件的时候没有找到mFirstTouchTarget，就会导致在除了ACTION_DOWN其他事件到来时mFirstTouchTarget == null，这里就直接让ViewGroup自己处理事件了。</p><h4 id="3-2、mFirstTouchTarget-null"><a href="#3-2、mFirstTouchTarget-null" class="headerlink" title="3.2、mFirstTouchTarget != null"></a>3.2、mFirstTouchTarget != null</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4、根据mFirstTouchTarget是否为null做出不同行为</span></span><br><span class="line"><span class="keyword">if</span> (mFirstTouchTarget == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">//有两种情况mFirstTouchTarget不为空，表示找到合适的子View为target：</span></span><br><span class="line">    <span class="comment">//1、本次事件是ACTION_DOWN，遍历完ViewGroup所有的子View后找到了合适的子View为target；</span></span><br><span class="line">    <span class="comment">//2、本次事件是除了ACTION_DOWN以外的其他事件，但是在ACTION_DOWN时已经找到了合适的子View为target，所以接下来就直接把事件分发给target的child处理就行</span></span><br><span class="line">    TouchTarget predecessor = <span class="keyword">null</span>;</span><br><span class="line">    TouchTarget target = mFirstTouchTarget;</span><br><span class="line">    <span class="comment">//mFirstTouchTarget是一个单链表结构，下面是链表的遍历</span></span><br><span class="line">    <span class="keyword">while</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> TouchTarget next = target.next;</span><br><span class="line">        <span class="keyword">if</span> (alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget) &#123;<span class="comment">//情况1的处理</span></span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//情况2的处理</span></span><br><span class="line">            <span class="comment">//4.1、注意这个intercepted，如果为true，cancelChild就会为true，会导致子View收到一个ACTION_CANCEL, 表示子View的本次事件取消</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> cancelChild = resetCancelNextUpFlag(target.child)</span><br><span class="line">                || intercepted;</span><br><span class="line">            <span class="comment">//4.2、调用dispatchTransformedTouchEvent()方法把事件分发给target</span></span><br><span class="line">            <span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, cancelChild, target.child, target.pointerIdBits)) &#123;</span><br><span class="line">                <span class="comment">//handle的是否为true取决于子View的dispatchTouchEvent()返回值</span></span><br><span class="line">                handled = <span class="keyword">true</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">//4.3、如果需要取消本次事件，清空这个子View对应的target，并把这个tareget从链表中取消，导致该事件序列的后序事件该子View都无法再收到</span></span><br><span class="line">            <span class="keyword">if</span> (cancelChild) &#123;</span><br><span class="line">                <span class="keyword">if</span> (predecessor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mFirstTouchTarget = next;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    predecessor.next = next;</span><br><span class="line">                &#125;</span><br><span class="line">                target.recycle();</span><br><span class="line">                target = next;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        predecessor = target;</span><br><span class="line">        <span class="comment">//继续分发给下一个target</span></span><br><span class="line">        target = next;</span><br><span class="line">    &#125;</span><br><span class="line">    predecessor = target;</span><br><span class="line">    target = next;</span><br><span class="line">&#125;<span class="comment">//end...while (target != null) </span></span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//end...if (mFirstTouchTarget == null)</span></span><br></pre></td></tr></table></figure><p>mFirstTouchTarget != null，表示在处理ACTION_DOWN事件的时候已经找到mFirstTouchTarget，就会进入注释4的else分支，这里是情况2，就会进入情况2的处理的else分支，注释4.1的cancelChild这个值会决定子View是收到ACTION_CANCEL事件还是其他事件，而cancelChild的值取决于intercepted的值，所以如果ViewGroup在除了ACTION_DOWN以外的其他事件中的onInterceptTouchEvent(ev)方法返回了true，导致intercepted = true，从而cancelChild = true，而如果ViewGroup一直保持默认状态，intercepted = false，从而cancelChild = false，紧接着在注释4.2把cancelChild和target.child传进了dispatchTransformedTouchEvent()方法中。</p><p>我再贴一下dispatchTransformedTouchEvent()方法的代码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewGroup.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dispatchTransformedTouchEvent</span><span class="params">(MotionEvent event, <span class="keyword">boolean</span> cancel, View child, <span class="keyword">int</span> desiredPointerIdBits)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">boolean</span> handled;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> oldAction = event.getAction();</span><br><span class="line">    <span class="comment">//1、如果cancel为true，进入这个if分支</span></span><br><span class="line">    <span class="keyword">if</span> (cancel || oldAction == MotionEvent.ACTION_CANCEL) &#123;</span><br><span class="line">        <span class="comment">//设置ACTION_CANCEL事件</span></span><br><span class="line">        event.setAction(MotionEvent.ACTION_CANCEL);</span><br><span class="line">        <span class="comment">//分发ACTION_CANCEL事件</span></span><br><span class="line">        <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">            handled = <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            handled = child.dispatchTouchEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">        event.setAction(oldAction);</span><br><span class="line">        <span class="keyword">return</span> handled;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...省略多点触控处理</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2、如果cancel为false，进入这个if分支</span></span><br><span class="line">    <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//调用 super.dispatchTouchEvent(event)，表示ViewGroup自己决定是否处理本次事件</span></span><br><span class="line">        handled = <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//调用child.dispatchTouchEvent(event)，表示让子View决定是否处理本次事件</span></span><br><span class="line">        handled = child.dispatchTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> handled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到如果cancel为true，进入注释1这个if分支，里面会set一个ACTION_CANCEL事件，然后传递给target记录的子View；如果cancel为false，进入注释2这个else分支，调用child.dispatchTouchEvent(event)，表示让target记录的子View决定是否处理本次事件，前面已经讲过了。</p><p>好，现在我们走出dispatchTransformedTouchEvent()方法，来到注释4.3，如果cancelChild为true，就会调用TouchTarget的recycler()方法回收这个target，这样做的后果是什么呢？这样相当于清空了这个子View对应的target，并把这个tareget从链表中取消，导致该事件序列的后序事件该子View都无法再收到。</p><p>到这里ViewGroup处理除了ACTION_DOWN以外事件的流程分析完毕。</p><h3 id="4、子View如何禁止ViewGroup拦截事件"><a href="#4、子View如何禁止ViewGroup拦截事件" class="headerlink" title="4、子View如何禁止ViewGroup拦截事件"></a>4、子View如何禁止ViewGroup拦截事件</h3><p>前面的分析都是默认子View不禁止ViewGroup拦截事件，所以ViewGroup可以通过onInterceptTouchEvent()返回true从而拦截下子View的事件，但此时子View希望依然能够响应这些事件该怎么办呢？Android给我们提供了一个方法：requestDisallowInterceptTouchEvent(boolean) 用于设置是否允许拦截，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewGroup.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDisallowInterceptTouchEvent</span><span class="params">(<span class="keyword">boolean</span> disallowIntercept)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">if</span> (disallowIntercept) &#123;</span><br><span class="line">        mGroupFlags |= FLAG_DISALLOW_INTERCEPT;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mGroupFlags &amp;= ~FLAG_DISALLOW_INTERCEPT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Pass it up to our parent</span></span><br><span class="line">    <span class="keyword">if</span> (mParent != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mParent.requestDisallowInterceptTouchEvent(disallowIntercept);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当子View调用getParent.requestDisallowInterceptTouchEvent(true)，mGroupFlags就会有FLAG_DISALLOW_INTERCEPT标识，当子View调用getParent.requestDisallowInterceptTouchEvent(false)，mGroupFlags就会清除FLAG_DISALLOW_INTERCEPT标识，那么FLAG_DISALLOW_INTERCEPT标识又是怎么控制ViewGroup的拦截的呢？如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!disallowIntercept) &#123;<span class="comment">//如果子View允许ViewGroup拦截事件</span></span><br><span class="line">    <span class="comment">//调用onInterceptTouchEvent()方法询问ViewGroup是否拦截事件，intercepted的值由onInterceptTouchEvent(ev)决定</span></span><br><span class="line">    intercepted = onInterceptTouchEvent(ev);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">//如果子View禁止ViewGroup拦截事件</span></span><br><span class="line">    intercepted = <span class="keyword">false</span>;<span class="comment">//intercepted值为false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子View通过调用getParent.requestDisallowInterceptTouchEvent(true)，来禁止ViewGroup拦截除了ACTION_DOWN以外的其他事件，这样当下一个事件到来时就会交给这个子View，</p><p>为什么是除了ACTION_DOWN以外的其他事件？因为ACTION_DOWN事件是事件序列的开始，ACTION_DOWN事件会先经过ViewGroup的onInterceptTouchEvent()方法，从<strong>ACTION_DOWN事件的处理流程 - intercepted = true</strong>我们知道，如果ViewGroup一开始在onInterceptTouchEvent()的ACTION_DOWN返回true，它就不会进入dispatchTouchEvent()方法的注释3的if语句，这样在DOWN事件下就无法找到mFirstTouchTarget，这样当同一个事件序列的其他事件到来时，mFirstTouchTarget == null，这样ViewGroup只能把事件交给自己处理，无法传递给子View，也就无法调用子View的dispatchTouchEvent()方法，这样子View在dispatchTouchEvent()方法中调用getParent.requestDisallowInterceptTouchEvent(true)就没有意义了。</p><h3 id="5、小结"><a href="#5、小结" class="headerlink" title="5、小结"></a>5、小结</h3><p>从ViewGroup的事件分发中得出几个结论：</p><p>1、ViewGroup如果在onInterceptTouchEvent()方法的ACTION_DOWN事件中返回true，那么整个事件序列都会交给ViewGroup处理，不再交给子View，从而导致无法调用子View的dispatchTouchEvent()方法，导致子View调用getParent.requestDisallowInterceptTouchEvent(true)失效。</p><p>2、ViewGroup如果在onInterceptTouchEvent()方法中一旦拦截除了ACTION_DOWN的事件，那么子View将会收到一个ACTION_CANCEL事件，并且接下来的事件都是交给ViewGroup处理。</p><p>3、1、2点的含义都是ViewGroup决定拦截事件，那么一旦ViewGroup决定拦截事件，那么接下来的事件都是交给ViewGroup处理，并且ViewGroup的onInterceptTouchEvent()方法在这个事件序列内不会再调用，这说明ViewGroup的onInterceptTouchEvent()方法不是每次都调用,只有ViewGroup的dispatchTouchEvent()才能保证每次调用。</p><p>3、在ViewGroup中ACTION_DOWN 事件负责寻找 target，即寻找能够消费ACTION_DOWN事件的子View，如果找到，那么接下来同一事件序列内的所有事件都会交给这个子View处理，不再交给ViewGroup；如果没有找到，有两种情况：1、ViewGroup没有子View，2、子View处理了ACTION_DOWN事件，但是在dispatchTouchEvent()返回了false，那么接下来同一事件序列下的所有事件都是ViewGroup自己处理。</p><p>4、子View如果不消费ACTION_DOWN事件，那么同一事件序列的其他事件都不会再交给它来处理，而是交给它的父ViewGroup处理；子View一旦消费ACTION_DOWN事件，如果ViewGroup不拦截，那么同一事件序列的其他事件都会交给子View处理。</p><p>5、当调用super.dispatchTouchEvent(event)就代表ViewGroup开始自己处理事件，里面会执行ViewGroup的onTouchEvent(), 逻辑和View的事件分发一样。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>当点击事件到达ViewGroup时，它的dispatchTouchEvent()方法就会被调用，如果这个ViewGroup的onInterceptTouchEvent()方法返回true，就表示它要拦截当前事件，接下来这个事件序列内的事件都会交给它处理，即super.dispatchTouchEvent()方法得到调用；如果这个ViewGroup的onInterceptTouchEvent()方法返回false，就表示它不拦截当前事件，这时当前事件就会传递给它的子View，接着子View的dispatchTouchEvent()方法就会被调用，如果子View是一个View，那么它的处理流程就像前面介绍的View的事件分发一样，如果子View是一个ViewGroup，那么它的处理流程就又是ViewGroup的事件分发，如此递归，<strong>从上到下</strong>，直到整颗View树都收到事件，接下来递归返回，<strong>从下到上</strong>，每一层的返回值都决定是否消费本次事件，如果消费，返回true，它的上一层就无法处理这个事件，如果不消费，返回false，它的上一层又继续传给上一层，直到根视图。</p><p>View的事件分发小结和ViewGroup的事件分发小结都可以在源码中找到证明，可以自行验证一下，本文通过源码 + 流程图 说明了整个View的事件分发体制，在看的过程最好要结合上下文来看，始终记住这是在同一个事件序列内，跟着流程图的每一个分支在源码中走一遍，那样你就会有更深刻的理解。</p><p>参考资料：</p><p><a href="https://blog.csdn.net/qq_43660664/article/details/84026785" target="_blank" rel="noopener">Android事件分发完全解析之事件从何而来</a></p><p><a href="https://blog.csdn.net/u010707039/article/details/85211658#commentBox" target="_blank" rel="noopener">通过流程图来分析Android事件分发</a></p><p><a href="https://www.jianshu.com/p/f05d6b05ba17" target="_blank" rel="noopener">十分钟了解Android触摸事件原理（InputManagerService）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前几天写过一篇文章&lt;a href=&quot;https://rain9155.github.io/2019/07/22/View%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;View的工作原理&lt;/a&gt;，讲述的View工作的三大流程，其实与View的工作流程同样重要还有View的事件分发机制，平时我们经常通过setOnClickListener()方法来设置一个View的点击监听，那你有没有想过这个点击事件底层是怎么样传递到这个View的呢？当你自定义控件时，如果要处理滑动事件，那么到底返回true还是false？还有当你遇到了滑动嵌套的情景，你要怎么解决滑动嵌套引起的冲突？所以，本文通过 源码 + 流程图 来深入了解一个事件分发机制，当你掌握了它之后，当你遇到与滑动相关的问题时就更加的游刃有余。&lt;/p&gt;
    
    </summary>
    
    
      <category term="View机制" scheme="http://yoursite.com/categories/View%E6%9C%BA%E5%88%B6/"/>
    
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="view" scheme="http://yoursite.com/tags/view/"/>
    
  </entry>
  
  <entry>
    <title>View的工作原理</title>
    <link href="http://yoursite.com/2019/07/22/View%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2019/07/22/View%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</id>
    <published>2019-07-22T11:57:11.000Z</published>
    <updated>2023-01-07T10:44:48.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Android中View一直扮演着一个很重要的角色，它是我们开发中视觉的呈现，我平常也使用着Android提供的丰富且功能强大的控件，有时候遇到一个很炫酷的自定义View的开源库，我们也是拿来主义，时间长了你就会发现你只是一个只会使用控件和依赖被人开源库的程序员，这并不是一个开发者，所以我们并不能只满足于使用，我们要理解它背后的工作原理和流程，这样才能自己做出一个属于自己的控件，一直都说自定View是Android进阶中的一道门槛，当其实自定义View当你理解了它的原理后，你就会发现它也不过如此。本文将从源码的角度探讨View工作的三大流程，对View做进一步的认识。俗话说的好：源码才是最好的老师。</p><a id="more"></a><pre><code>本文代码基于Android8.0，相关源码位置如下：frameworks/base/core/java/android/*.java(*代表View, ViewGroup, ViewRootImpl)frameworks/base/core/java/android/FrameLayout.java</code></pre><h2 id="View何时开始绘制？-requestLayout"><a href="#View何时开始绘制？-requestLayout" class="headerlink" title="View何时开始绘制？- requestLayout()"></a>View何时开始绘制？- requestLayout()</h2><p>提到View，就不得不讲起Window，在<a href="https://rain9155.github.io/2019/03/22/Window,%20WindowManager和WindowManagerService之间的关系/" target="_blank" rel="noopener">Window,WindowManager和WindowManagerService之间的关系</a>文章中讲过，Widnow是View得载体，在ViewRootImpl的setView方法中添加Winodw到WMS之前，会先调用requestLayout绘制整颗View Hierarchy的绘制，如下：</p><img src="/2019/07/22/View%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/view1.png" class="" title="view1"><p>所以我们先从requestLayout()中看起，该方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewRootImpl.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mHandlingLayoutInLayoutRequest) &#123;</span><br><span class="line">        <span class="comment">//检查是否在主线程，在子线程绘制UI会抛出异常，见下方</span></span><br><span class="line">        checkThread();</span><br><span class="line">        <span class="comment">//是否measure和layout布局的开关</span></span><br><span class="line">        mLayoutRequested = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//1、准备开始遍历View Hierarchy绘制</span></span><br><span class="line">        scheduleTraversals();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mThread != Thread.currentThread()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CalledFromWrongThreadException(</span><br><span class="line">            <span class="string">"Only the original thread that created a view hierarchy can touch its views."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>requestLayout()中首先会检查线程的合法性，Android规定必须在主线程中操作UI，那么为什么不能在子线程中访问UI呢？这是因为Android的UI控件都不是线程安全的，如果在多线程环境下并发访问控件会导致控件处于不可预测状态。接着我们来看注释1，调用了ViewRootImpl的scheduleTraversals方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewRootImpl.java</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scheduleTraversals</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mTraversalScheduled) &#123;<span class="comment">//防止同一帧绘制多次</span></span><br><span class="line">            mTraversalScheduled = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">//拦截同步Message，优先处理异步Message</span></span><br><span class="line">            mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier();</span><br><span class="line">             <span class="comment">//1、Choreographer回调，里面执行最终会执行mTraversalRunnable中的绘制任务</span></span><br><span class="line">            mChoreographer.postCallback(</span><br><span class="line">                    Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在Android4.1之前Android的UI流畅性很差，所以在Android4.1之后引入了Choreographer机制和Vsync机制用来解决这个问题，Choreographer管理者动画、输入和绘制的时机，Vsync叫Vertical Synchronization（垂直同步）信号，每隔 16ms Choreographer就会收到来自native层的Vsync信号，这时Choreographer就会根据事件类型进行相应的回调操作，Choreographer支持4种事件类型回调：输入(CALLBACK_INPUT)、绘制(CALLBACK_TRAVERSAL)、动画(CALLBACK_ANIMATION)、提交(CALLBACK_COMMIT)，并通过postCallback方法在对应需要同步Vsync刷新处进行注册，等待回调，关于这个细节和原理可以看<a href="https://www.jianshu.com/p/bab0b454e39e" target="_blank" rel="noopener">Android图形系统-Choreographer</a>和<a href="http://www.apkbus.com/blog-705730-61226.html" target="_blank" rel="noopener">Android垂直同步和三重缓存</a>，这里我们并不深究Choreographer机制和Vsync机制，我们看到注释1中的Choreographer的postCallback方法提交了CALLBACK_TRAVERSAL类型的回调，它对应着mTraversalRunnable绘制操作，而mTraversalRunnable是一个TraversalRunnable类型的绘制任务，最终回调会执行这个任务，mTraversalRunnable的run方法源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewRootImpl.java</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TraversalRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1、里面会执行performTraversals()</span></span><br><span class="line">        doTraversal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>doTraversal()里面会执行performTraversals方法，点开doTraversal方法看一下，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewRootImpl.java</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doTraversal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mTraversalScheduled) &#123;</span><br><span class="line">        mTraversalScheduled = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//移除拦截同步Message屏障</span></span><br><span class="line">        mHandler.getLooper().getQueue().removeSyncBarrier(mTraversalBarrier);</span><br><span class="line">        <span class="comment">//1、今天的主角，performTraversals()方法</span></span><br><span class="line">        performTraversals();</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在doTraversal() 方法里面我们终于看到我们熟悉的方法：<strong>performTraversals()</strong>。</p><h2 id="View树绘制的起点-performTraversals"><a href="#View树绘制的起点-performTraversals" class="headerlink" title="View树绘制的起点 - performTraversals()"></a>View树绘制的起点 - performTraversals()</h2><p>performTraversals()它是整个View Hierarchy绘制的起点，它里面会执行View绘制的三大工作流程，我们先看一下精简版的performTraversals方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewRootImpl.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performTraversals</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//mView是在View与ViewRootImpl建立关联的时候被赋值的，即调用ViewRootImpl的setView方法时，它代表着View Hierarchy的根节点，即根视图</span></span><br><span class="line">    <span class="keyword">final</span> View host = mView;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    WindowManager.LayoutParams lp = mWindowAttributes;</span><br><span class="line">    <span class="comment">//desiredWindowWidth和desiredWindowHeight分别代表着屏幕的宽度和高度</span></span><br><span class="line">    <span class="keyword">int</span> desiredWindowWidth;</span><br><span class="line">    <span class="keyword">int</span> desiredWindowHeight;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">if</span> (mLayoutRequested) &#123;</span><br><span class="line">        <span class="keyword">final</span> Resources res = mView.getContext().getResources();</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//1、这里调用了measureHierarchy方法，里面会调用performMeasure方法，执行View Hierarchy的measure流程，见下方</span></span><br><span class="line">        windowSizeMayChange |= measureHierarchy(host, lp, res,</span><br><span class="line">                                              desiredWindowWidth, desiredWindowHeight);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">if</span>(didLayout)&#123;</span><br><span class="line">          <span class="comment">//2、这里调用了performLayout方法，执行View Hierarchy的layout流程</span></span><br><span class="line">         performLayout(lp, mWidth, mHeight);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">if</span> (!cancelDraw &amp;&amp; !newSurface) &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//3、这里调用了performDraw方法，执行View Hierarchy的draw流程</span></span><br><span class="line">   performDraw();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">measureHierarchy</span><span class="params">(<span class="keyword">final</span> View host, <span class="keyword">final</span> WindowManager.LayoutParams lp,  <span class="keyword">final</span> Resources res, <span class="keyword">final</span> <span class="keyword">int</span> desiredWindowWidth, <span class="keyword">final</span> <span class="keyword">int</span> desiredWindowHeight)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> childWidthMeasureSpec;</span><br><span class="line">     <span class="keyword">int</span> childHeightMeasureSpec;</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">     <span class="comment">//1.1、顶级View在调用performMeasure方法之前，会先调用getRootMeasureSpec方法来生成自身宽和高的MeasureSpec</span></span><br><span class="line">     childWidthMeasureSpec = getRootMeasureSpec(desiredWindowWidth, lp.width);</span><br><span class="line">     childHeightMeasureSpec = getRootMeasureSpec(desiredWindowHeight, lp.height);</span><br><span class="line">     <span class="comment">//1.2、这里调用performMeasure方法，执行View Hierarchy的measure流程</span></span><br><span class="line">     performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>performTraversals方法里面非常复杂，我们看的时候千万不要深究其中的细节，不然就走火入魔了，我们找出个整体框架就行，我们先看注释1、2、3，可以看到依此调用<strong>measureHierarchy() -&gt; performLayout() -&gt; performDraw()，</strong>而measureHierarchy()里面最终调用performMeasure()，所以performTraversals()可以看作依此调用了<strong>performMeasure() -&gt; performLayout() -&gt; performDraw()，</strong>分别对应顶级View的<strong>measure、layout和draw流程，</strong>顶级View可以理解为View Hierarchy的根节点，它一般是一个ViewGroup，就像Activity的DecorView一样。</p><blockquote><p>ps：</p><p>1、在performTraversals()方法中，performMeasure()可能会执行多次，而performLayout()和performDraw()最多执行一次。</p><p>2、本文讨论的顶级View你可以把它类比成Activity的DecorView，但是它其实就是View树的根结点，DecorView也是Activity中View树的根结点。</p></blockquote><p>接下来我们就照着performTraversals() 中的整体框架来讲解View工作的三大流程。</p><h2 id="View的测量流程-performMeasure"><a href="#View的测量流程-performMeasure" class="headerlink" title="View的测量流程 - performMeasure()"></a>View的测量流程 - performMeasure()</h2><h3 id="1、MeasureSpec"><a href="#1、MeasureSpec" class="headerlink" title="1、MeasureSpec"></a>1、MeasureSpec</h3><p>讲解View的measure流程前，不得不先讲解一下MeasureSpec的含义，MeasureSpec是一个32位的int值，它是View的一个内部类，它的高2位代表着SpecMode，表示测量模式，它的低30位表示SpecSize，表示测量大小，系统通过位运算把SpecMode和SpecSize合二为一组成一个32位int值的MeasureSpec。</p><p>下面看一下MeasureSpec的里面组成，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//View.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MeasureSpec</span> </span>&#123;</span><br><span class="line">    <span class="comment">//左移位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_SHIFT = <span class="number">30</span>;</span><br><span class="line">    <span class="comment">//位掩码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_MASK  = <span class="number">0x3</span> &lt;&lt; MODE_SHIFT;</span><br><span class="line">    <span class="comment">//代表着三种SpecMode</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNSPECIFIED = <span class="number">0</span> &lt;&lt; MODE_SHIFT;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXACTLY     = <span class="number">1</span> &lt;&lt; MODE_SHIFT;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AT_MOST     = <span class="number">2</span> &lt;&lt; MODE_SHIFT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//makeMeasureSpec方法是把SpecMode和SpecSize通过位运算组成一个MeasureSpec并返回</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">makeMeasureSpec</span><span class="params">(<span class="keyword">int</span> size,<span class="keyword">int</span> mode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sUseBrokenMakeMeasureSpec) &#123;</span><br><span class="line">            <span class="keyword">return</span> size + mode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (size &amp; ~MODE_MASK) | (mode &amp; MODE_MASK);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getMode方法是从给定的MeasureSpec中取出SpecMode</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMode</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (measureSpec &amp; MODE_MASK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getSize方法是从给定的MeasureSpec中取出SpecSize</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (measureSpec &amp; ~MODE_MASK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到MeasureSpec提供了三个工具方法分别用来组合MeasureSpec、从MeasureSpec中取出SpecMode、从MeasureSpec中取出SpecSize，其中SpecMode有三种取值，如下：</p><ul><li>UNSPECIFIED：它表示父容器对子View的绘制的大小没有任何限制，要多大给多大，这种情况一般适用于系统内部，表示一种测量状态。</li><li>EXACTLY：它表示父容器已经测量出子View需要的精确大小SpecSize，这个时候View的最终大小就是SpecSize的值，它对应于LayoutParams中match_parcent和具体的数值这两种模式。</li><li>AT_MOST：它表示父容器为子View的大小指定了一个最大值SpecSize，这个时候View的大小不能大于这个值，它对应于LayoutParams中的wrap_content这种模式。</li></ul><h4 id="1-1-如何确定View的MeasureSpec？"><a href="#1-1-如何确定View的MeasureSpec？" class="headerlink" title="1.1 如何确定View的MeasureSpec？"></a>1.1 如何确定View的MeasureSpec？</h4><p>除了顶级View，其他View的MeasureSpec都是由父容器的MeasureSpec和自身的LayoutParams共同决定的，LayoutParams就是你平时在编写View的xml属性时那些带有<strong>layout_XX</strong>前缀开头的布局属性，对于顶级View和在View树中子View的MeasureSpec的生成规则有点不一样，见下面分析：</p><h5 id="1-1-1、顶级View的MeasureSpec的创建-getRootMeasureSpec"><a href="#1-1-1、顶级View的MeasureSpec的创建-getRootMeasureSpec" class="headerlink" title="1.1.1、顶级View的MeasureSpec的创建 - getRootMeasureSpec()"></a>1.1.1、顶级View的MeasureSpec的创建 - getRootMeasureSpec()</h5><p>由于顶级View是View树的根结点，所以它没有父容器，所以它的MeasureSpec是由屏幕窗口的尺寸和自身的LayoutParams来共同决定，上面注释1.1我们讲到顶级View在调用performMeasure方法之前，会先调用ViewRootImpl的getRootMeasureSpec方法来生成自身宽和高的MeasureSpec，我们来看一下getRootMeasureSpec方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewRootImpl.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getRootMeasureSpec</span><span class="params">(<span class="keyword">int</span> windowSize, <span class="keyword">int</span> rootDimension)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> measureSpec;</span><br><span class="line">    <span class="keyword">switch</span> (rootDimension) &#123;</span><br><span class="line">        <span class="keyword">case</span> ViewGroup.LayoutParams.MATCH_PARENT:<span class="comment">//如果是MATCH_PARENT,那么就是EXACTLY</span></span><br><span class="line">            measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ViewGroup.LayoutParams.WRAP_CONTENT:<span class="comment">//如果是WRAP_CONTENT,就是AT_MOST</span></span><br><span class="line">            measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.AT_MOST);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:<span class="comment">//如果是固定的值,也是EXACTLY</span></span><br><span class="line">            measureSpec = MeasureSpec.makeMeasureSpec(rootDimension, MeasureSpec.EXACTLY);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> measureSpec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>windowSize就是是传入的desiredWindowWidth或desiredWindowHeight，它表示屏幕的大小，rootDimension就是传入的屏幕窗口的LayoutParams的大小模式，对应我们平时写的layout_width或layout_height属性，该属性无非就三个值：match_parent、wrap_content和固定的数值，所以从getRootMeasureSpec方法可以看到，顶级View的MeasureSpec的创建规则如下：</p><img src="/2019/07/22/View%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/view2.png" class="" title="view2"><p>其中rootSize表示顶级View大小。</p><h5 id="1-1-2、子View的MeasureSpec的创建-getChildMeasureSpec"><a href="#1-1-2、子View的MeasureSpec的创建-getChildMeasureSpec" class="headerlink" title="1.1.2、子View的MeasureSpec的创建 - getChildMeasureSpec()"></a>1.1.2、子View的MeasureSpec的创建 - getChildMeasureSpec()</h5><p>在1中，顶级View的MeasureSpec已经创建好了，这时候就要根据这个MeasureSpec去生成子View的MeasureSpec，子View的MeasureSpec的创建是从ViewGroup的measureChildWithMargins方法开始，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewGroup.java</span></span><br><span class="line"><span class="function">rotected <span class="keyword">void</span> <span class="title">measureChildWithMargins</span><span class="params">(View child, <span class="keyword">int</span> parentWidthMeasureSpec, <span class="keyword">int</span> widthUsed, <span class="keyword">int</span> parentHeightMeasureSpec, <span class="keyword">int</span> heightUsed)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//得到子View的margin</span></span><br><span class="line">    <span class="keyword">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</span><br><span class="line">    <span class="comment">//1、这里调用了getChildMeasureSpec方法，里面就是创建子View的MeasureSpec，这里创建子View宽的MeasureSpec</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec, mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin + widthUsed, lp.width);</span><br><span class="line">    <span class="comment">//同理，这里创建子View高的MeasureSpec</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,  mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin + heightUsed, lp.height);</span><br><span class="line">    <span class="comment">//如果子View是一个ViewGroup，递归measure下去</span></span><br><span class="line">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述方法会对子View进行measure，由注释1得知，在调用子View的measure方法前，会先调用getChildMeasureSpec方法获得子View的MeasureSpec，从getChildMeasureSpec方法的参数可以看出，子View的MeasureSpec的创建与父容器的MeasureSpec和子View本身的LayoutParams有关，此外还和View的margin及padding有关，下面我们来看ViewGroup的getChildMeasureSpec方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewGroup.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getChildMeasureSpec</span><span class="params">(<span class="keyword">int</span> spec, <span class="keyword">int</span> padding, <span class="keyword">int</span> childDimension)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//取出父容器的测量模式specMode</span></span><br><span class="line">    <span class="keyword">int</span> specMode = MeasureSpec.getMode(spec);</span><br><span class="line">    <span class="comment">//取出父容器的测量大小specSize</span></span><br><span class="line">    <span class="keyword">int</span> specSize = MeasureSpec.getSize(spec);</span><br><span class="line"><span class="comment">// padding是指父容器中已占用的空间大小，因此子View最大可用大小size == 父容器剩余大小 == 父容器的尺寸减去padding </span></span><br><span class="line">    <span class="keyword">int</span> size = Math.max(<span class="number">0</span>, specSize - padding);</span><br><span class="line">    <span class="keyword">int</span> resultSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> resultMode = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (specMode) &#123;</span><br><span class="line">        <span class="keyword">case</span> MeasureSpec.EXACTLY:<span class="comment">//如果父容器是EXACTLY</span></span><br><span class="line">            <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;<span class="comment">//如果子View的LayoutParams是固定大小</span></span><br><span class="line">                resultSize = childDimension;</span><br><span class="line">                resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;<span class="comment">//如果子View的LayoutParams是MATCH_PARENT//子View的MeasureSpec为父容器剩余大小 + EXACTLY</span></span><br><span class="line">                resultSize = size;</span><br><span class="line">                resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;<span class="comment">//如果子View的LayoutParams是WRAP_CONTENT</span></span><br><span class="line">                <span class="comment">//子View的MeasureSpec为父容器剩余大小 + AT_MOST</span></span><br><span class="line">                resultSize = size;</span><br><span class="line">                resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MeasureSpec.AT_MOST:<span class="comment">//如果父容器是AT_MOST</span></span><br><span class="line">            <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//子View的MeasureSpec为子View大小 + EXACTLY</span></span><br><span class="line">                resultSize = childDimension;</span><br><span class="line">                resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">                <span class="comment">//子View的MeasureSpec为父容器剩余大小 + AT_MOST</span></span><br><span class="line">                resultSize = size;</span><br><span class="line">                resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">               <span class="comment">//子View的MeasureSpec为父容器剩余大小 + AT_MOST</span></span><br><span class="line">                resultSize = size;</span><br><span class="line">                resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:<span class="comment">//如果父容器是UNSPECIFIED，这个平时开发用不到</span></span><br><span class="line">            <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                resultSize = childDimension;</span><br><span class="line">                resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class="number">0</span> : size;</span><br><span class="line">                resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class="number">0</span> : size;</span><br><span class="line">                resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到getChildMeasureSpec方法里面的逻辑还是很清楚的，首先根据父容器的测量模式specMode分为三大类：<strong>EXACTLY、AT_MOST和UNSPECIFIED，</strong>每一类又和子View的LayoutParams的的三种大小模式：<strong>固定大小、MATCH_PARENT和WRAP_CONTENT</strong>组合，所以总共有3 X 3 = 9种组合，所以根据getChildMeasureSpec方法可以得出子View的MeasureSpec的创建规则如下：</p><img src="/2019/07/22/View%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/view3.png" class="" title="view3"><p>其中childSize表示子View的大小，parentSize表示父容器剩余大小。</p><h3 id="2、View和ViewGroup的measure流程"><a href="#2、View和ViewGroup的measure流程" class="headerlink" title="2、View和ViewGroup的measure流程"></a>2、View和ViewGroup的measure流程</h3><p>分析完View的MeasureSpec的创建后，我们继续回到View的measure流程，大家都知道ViewGroup是继承自View的，所以View的measure流程，分为两种情况，一种是View的measure流程，一种是ViewGroup的measure流程，但是不管是View的measure流程还是ViewGroup的measure流程都是从ViewRootImpl的performMeasure()开始，并且都会先调用View的measure方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewRootImpl.java </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performMeasure</span><span class="params">(<span class="keyword">int</span> childWidthMeasureSpec, <span class="keyword">int</span> childHeightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//1、调用了View的measure方法</span></span><br><span class="line">    mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们继续看View的measure方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//View.java</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">measure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">      <span class="comment">//1、调用了onMeasure方法</span></span><br><span class="line">      onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看到measure方法是一个final方法，说明这个方法不能够被子类重写，这个方法把measure的具体过程交给了onMeasure方法去实现，所以View和ViewGroup的measure流程的差异就从这个onMeasure方法开始，见下面分析。</p><h4 id="2-1、View的measure流程"><a href="#2-1、View的measure流程" class="headerlink" title="2.1、View的measure流程"></a>2.1、View的measure流程</h4><p>从上述知道View的measure起点在View的measure方法中，并且View的measure方法会调用View的onMeasure方法，<strong>View::measure() -&gt; View::onMeasure()</strong>，所以我们直接看onMeasure方法在View中的实现，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//View.java</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、 如果View没有重写onMeasure方法，则会调用setMeasuredDimension方法设置宽高，在设置之前先调用getDefaultSize方法获取默认宽高</span></span><br><span class="line">    setMeasuredDimension(</span><br><span class="line">            getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</span><br><span class="line">                         getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>View中的onMeasure方法的默认实现是先调用getDefaultSize方法获取默认宽高，然后再调用调用setMeasuredDimension方法设置View的宽高，当调用setMeasuredDimension方法设置View的宽高后，就可以通过getMeasureWidth()或getMeasureHeight()获得View测量的宽高，所以我们先看一下 getDefaultSize()方法是如何获取默认的宽高，该方法源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//View.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDefaultSize</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = size;</span><br><span class="line">        <span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class="line">        <span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br><span class="line">        <span class="keyword">switch</span> (specMode) &#123;</span><br><span class="line">        <span class="comment">//如果specMode是UNSPECIFIED，返回的大小就是传进来的size，而这个size就是通过getSuggestedMinimumWidth()或getSuggestedMinimumHeight()方法获得的</span></span><br><span class="line">        <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class="line">            result = size;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//如果specMode是AT_MOST或EXACTLY，返回的大小就是MeasureSpec中的specSize</span></span><br><span class="line">        <span class="keyword">case</span> MeasureSpec.AT_MOST:</span><br><span class="line">        <span class="keyword">case</span> MeasureSpec.EXACTLY:</span><br><span class="line">            result = specSize;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>getDefaultSize方法的逻辑很简单，除了UNSPECIFIED这种模式，其他测量模式都返回MeasureSpec中的specSize，而这个specSize就等于父容器给View测量后的大小，所以我们可以得出一个结论：<strong>直接继承View写自定义控件时需要重写onMeasure方法并设置wrap_content时自定义View自身的大小，这是因为如果自定义View在xml文件写了layout_XX = wrap_content这个属性，那么在创建它的MeasureSpec时，它的specMode就会等于AT_MOST，而从getDefaultSize方法看出，如果specMode是AT_MOST或EXACTLY，它们两个返回的值是一样的，都是MeasureSpec中的specSize，通过上面所讲的子View的MeasureSpec的创建规则可知specSize是等于parentSize即父容器剩余的大小，这样就会造成这个自定义View会填充满整个父容器，效果和match_parent一样，并不按你想象那样的大小</strong>。所以以后在自定义View时，如果有wrap_content这个场景，就要重写onMeasure方法，可以参考下面的模板，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//View.java</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;               </span><br><span class="line">     <span class="keyword">int</span> measureWidth = MeasureSpec.getSize(widthMeasureSpec); </span><br><span class="line">     <span class="keyword">int</span> measureHeight = MeasureSpec.getSize(heightMeasureSpec);  </span><br><span class="line">     <span class="keyword">int</span> measureWidthMode = MeasureSpec.getMode(widthMeasureSpec);   </span><br><span class="line">     <span class="keyword">int</span> measureHeightMode = MeasureSpec.getMode(heightMeasureSpec);  </span><br><span class="line">     <span class="keyword">int</span> width, height;</span><br><span class="line">     <span class="comment">//经过计算，控件所占的宽和高分别对应width和height</span></span><br><span class="line">     <span class="comment">// …………   </span></span><br><span class="line">     <span class="comment">//我们只需要在View为wrap_content时设置我们经过计算得出的View的默认宽高width和height即可</span></span><br><span class="line">     <span class="comment">//其他模式如EXACTLY，就直接设置父容器给我们测量出来的宽高即可</span></span><br><span class="line">  setMeasuredDimension(</span><br><span class="line">         (measureWidthMode == MeasureSpec.AT_MOST) ? width : measureWidth , </span><br><span class="line">         (measureHeightMode == MeasureSpec.AT_MOST) ? height : measureHeight</span><br><span class="line">     );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>讲完了getDefaultSize()中AT_MOST和EXACTLY模式情况，接着讲UNSPECIFIED这种模式的情况，从getDefaultSize方法中可以看出如果specMode是UNSPECIFIED，返回的大小就是传进来的size，而这个size就是通过getSuggestedMinimumWidth()或getSuggestedMinimumHeight()方法获得的，所以我们以getSuggestedMinimumWidth方法为例子，看一些如果获取在UNSPECIFIED模式下的宽，getSuggestedMinimumHeight()方法同理，getSuggestedMinimumWidth方法源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//View.java </span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getSuggestedMinimumWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//根据View有无背景返回大小，getMinimumWidth()见下方</span></span><br><span class="line">    <span class="keyword">return</span> (mBackground == <span class="keyword">null</span>) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Drawable.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMinimumWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//getIntrinsicWidth()返回Drawable的宽，默认返回-1</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> intrinsicWidth = getIntrinsicWidth();</span><br><span class="line">    <span class="keyword">return</span> intrinsicWidth &gt; <span class="number">0</span> ? intrinsicWidth : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mBackground就等于View的背景，即android:background属性，mMinWidth就等于你在View的xml布局中写了“android:minWidth”这个属性，mBackground.getMinimumWidth()就是获取View的背景的宽度，所以我们得出结论：<strong>在UNSPECIFIED模式下，如果View没有设置背景，那么View的宽就等于android:minWidth，如果View设置了背景，那么View的宽就等于View的背景background的宽和android:minWidth的最大值，高度同理</strong>。</p><blockquote><p>View的onMeasure方法执行完后，就可以通过getMeasureWidth()或getMeasureHeight()获得View测量的宽高，但是有可能会不准确，因为有时候系统会进行多次measure，才能确定最终测量宽高，所以最好是在onLayout方法中去获取View的宽高。</p></blockquote><h4 id="2-2、ViewGroup的measure流程-以FrameLayout为例"><a href="#2-2、ViewGroup的measure流程-以FrameLayout为例" class="headerlink" title="2.2、ViewGroup的measure流程 (以FrameLayout为例)"></a>2.2、ViewGroup的measure流程 (以FrameLayout为例)</h4><p>从上述知道ViewGroup的measure起点也在View的measure方法中，而View的measure方法会调用View的onMeasure方法，ViewGroup继承自View，但是它是一个抽象类并没有重写View的onMeasure方法，而是由ViewGroup的子类如LinearLayout、FrameLayout等重写onMeasure方法以实现不同的measure流程，这里以FrameLayout为例，*<em>View::measure() -&gt; FrameLayout::onMeasure() *</em>，我们来看FrameLayout的onMeasure方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//FrameLayout.java</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取子View的个数</span></span><br><span class="line">    <span class="keyword">int</span> count = getChildCount();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//遍历所有子View，测量每个子View的大小</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> View child = getChildAt(i);</span><br><span class="line">        <span class="keyword">if</span> (mMeasureAllChildren || child.getVisibility() != GONE) &#123;<span class="comment">//如果子View可见</span></span><br><span class="line">            <span class="comment">//1、调用ViewGroup的measureChildWithMargins方法，测量子View的大小</span></span><br><span class="line">            measureChildWithMargins(child, widthMeasureSpec, <span class="number">0</span>, heightMeasureSpec, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</span><br><span class="line">            <span class="comment">//子View测量完后，FrameLayout就可以通过View的getMeasuredWidth或getMeasuredHeight获得子View的宽高，从而得出自己的宽高</span></span><br><span class="line">            <span class="comment">//根据FrameLayout的叠加特性，它自身的测量宽高就是所有子View宽高中的最大值</span></span><br><span class="line">            maxWidth = Math.max(maxWidth,</span><br><span class="line">                                child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin);</span><br><span class="line">            maxHeight = Math.max(maxHeight,</span><br><span class="line">                                 child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到与View的onMeasure方法不同的是，FrameLayout的onMeasure方法是遍历它所有的子View，然后逐个测量子View的大小，这个测量子View是通过注释1的measureChildWithMargins方法来完成，这个方法已经在上面子View的MeasureSpec的创建中讲过一点，measureChildWithMargins方法是在FrameLayout的父类ViewGroup中，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChildWithMargins</span><span class="params">(View child, <span class="keyword">int</span> parentWidthMeasureSpec, <span class="keyword">int</span> widthUsed, <span class="keyword">int</span> parentHeightMeasureSpec, <span class="keyword">int</span> heightUsed)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略的这部分在上面已经讲过，主要是创建子View的MeasureSpec（childWidthMeasureSpec, childHeightMeasureSpec）</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//1、调用子View的measure方法，叫子View自己测量自己</span></span><br><span class="line">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>measureChildWithMargins方法中首先会根据父容器传进来的parenXXMeasureSpec来创建子View的childXXMeasureSpec，然后调用子View的measure方法，把测量子View的任务又推给了子View，这个过程又回到了2.1所讲的View的measure流程，就不再赘述，所有子View测量完后，ViewGroup就可以得出自己的测量宽高。</p><h3 id="3、小结"><a href="#3、小结" class="headerlink" title="3、小结"></a>3、小结</h3><p>measure流程是三大流程中最复杂的一个，它的整体流程是：从ViewRootImp的performTraversals()方法进入performMeasure()方法，开始整颗View树的测量流程，在performMeasure方法里面会调用View的measure方法，然后measure方法会调用onMeasure方法，如果是View就直接开始测量，设置View的宽高，如果是ViewGroup，则在onMeasure方法中则会对所有的子View进行measure过程，如果子View是一个ViewGroup，那么继续向下传递，直到所有的View都已测量完成。如图：</p><img src="/2019/07/22/View%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/view4.png" class="" title="view4"><p>measure过后就可以通过getMeasureWidth()或getMeasureHeight()获得View测量的宽高。</p><h2 id="View的布局流程-performLayout"><a href="#View的布局流程-performLayout" class="headerlink" title="View的布局流程 - performLayout()"></a>View的布局流程 - performLayout()</h2><p>前面讲解了View的measure过程，如果你理解了，那么View的布局过程也很容易理解的，和measure相似，View的布局过程是从ViewRootImpl的performLayout()开始的，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewRootImpl.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performLayout</span><span class="params">(WindowManager.LayoutParams lp, <span class="keyword">int</span> desiredWindowWidth, <span class="keyword">int</span> desiredWindowHeight)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">final</span> View host = mView;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//1、调用了顶级View的layout方法</span></span><br><span class="line">     host.layout(<span class="number">0</span>, <span class="number">0</span>, host.getMeasuredWidth(), host.getMeasuredHeight());</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在performLayout中主要调用了顶级View的layout方法，顶级View的实例有可能是View也有可能是ViewGroup，但是这个layout方法是在View中，它不像measure方法那样，它不是final修饰，所以它可以被重写，并且ViewGroup重写了layout方法，我们先看一下ViewGroup中的layout方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewGroup.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">layout</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (...) &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">         <span class="comment">//1、ViewGroup中的重写的layout方法还是调用了父类即View的layout方法</span></span><br><span class="line">        <span class="keyword">super</span>.layout(l, t, r, b);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到ViewGroup重写的layout方法只是做了一些判断，然后最终还是还是调用了父类即View的layout方法，所以我们直接看View的layout方法即可。</p><h3 id="1、View和ViewGroup的layout流程"><a href="#1、View和ViewGroup的layout流程" class="headerlink" title="1、View和ViewGroup的layout流程"></a>1、View和ViewGroup的layout流程</h3><p>View的layout方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//View.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">layout</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注意传进来的四个参数：</span></span><br><span class="line">    <span class="comment">// l 表示子View的左边缘相对于父容器的上边缘的距离</span></span><br><span class="line">    <span class="comment">// t 表示子View的上边缘相对于父容器的上边缘的距离</span></span><br><span class="line">    <span class="comment">// r 表示子View的右边缘相对于父容器的右边缘的距离</span></span><br><span class="line">    <span class="comment">// b 表示子View的下边缘相对于父容器的下边缘的距离</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">int</span> oldL = mLeft;</span><br><span class="line">    <span class="keyword">int</span> oldT = mTop;</span><br><span class="line">    <span class="keyword">int</span> oldB = mBottom;</span><br><span class="line">    <span class="keyword">int</span> oldR = mRight;</span><br><span class="line">    <span class="comment">//1、调用setFrame方法设定View的四个顶点的位置</span></span><br><span class="line">    <span class="keyword">boolean</span> changed = isLayoutModeOptical(mParent) ? setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</span><br><span class="line">    <span class="keyword">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</span><br><span class="line">        <span class="comment">//2、调用onlayout方法</span></span><br><span class="line">    onLayout(changed, l, t, r, b);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>layout方法传进来的l、t、r、b分别代表着View的上下左右四个点的坐标，这个四个点的坐标是相对于它的父容器来说的，这个layout方法主要干了两件事：</p><ul><li>1、注释1：调用View的setFrame方法设定View的四个顶点的位置，我们先看View的setFrame()方法，如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//View.java</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">setFrame</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> changed = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (mLeft != left || mRight != right || mTop != top || mBottom != bottom) &#123;</span><br><span class="line">        changed = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        mLeft = left;</span><br><span class="line">        mTop = top;</span><br><span class="line">        mRight = right;</span><br><span class="line">        mBottom = bottom;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> changed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，setFrame方法主要把l、t、r、b分别赋值给mLeft、mTop、mBottom、mRight，即更新View的四个顶点的位置，这个四个顶点一旦确定，那么View在父容器中的位置也就确定了。</p><ul><li>2、我们继续看注释2：调用了onLayout方法，这个方法在View中是一个空实现，如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//View.java </span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在ViewGroup中是一个抽象方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewGroup.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure><p>这是因为onLayout方法主要用途是给父容器确定子View的位置，所以如果本身就是一个View，就无需实现这个方法，但是如果是ViewGroup，它还要布局子View，所以是ViewGroup的子类就要强制实现这个方法，不同的ViewGroup具有不同的布局方式，所以不同的ViewGroup的onLayout方法的实现就不一样，我们还是以FrameLayout为例，看一下FrameLayout的onLayout方法的实现，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//FrameLayout.java</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">        layoutChildren(left, top, right, bottom, <span class="keyword">false</span> <span class="comment">/* no force left gravity */</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FrameLayout的onLayout方法只调用了layoutChildren方法，该方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">layoutChildren</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom, <span class="keyword">boolean</span> forceLeftGravity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> count = getChildCount();</span><br><span class="line"><span class="comment">//获取padding值</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> parentLeft = getPaddingLeftWithForeground();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> parentRight = right - left - getPaddingRightWithForeground();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> parentTop = getPaddingTopWithForeground();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> parentBottom = bottom - top - getPaddingBottomWithForeground();</span><br><span class="line"><span class="comment">//遍历所有子View，布局每个子View</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> View child = getChildAt(i);</span><br><span class="line">            <span class="comment">//如果子View可见</span></span><br><span class="line">            <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class="line">                <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</span><br><span class="line">                <span class="comment">//获得measue流程测量出来的子View的宽高</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> width = child.getMeasuredWidth();</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> height = child.getMeasuredHeight();</span><br><span class="line">                <span class="comment">//子View的左边缘位置</span></span><br><span class="line">                <span class="keyword">int</span> childLeft;</span><br><span class="line">                <span class="comment">//子View的上边缘位置</span></span><br><span class="line">                <span class="keyword">int</span> childTop;</span><br><span class="line">                <span class="comment">//下面是获取布局方向</span></span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                <span class="comment">//下面根据布局方向计算出childLeft和childTop</span></span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">   <span class="comment">//1、根据上面的计算，就算出了一个子View的左边缘位置childLeft和上边缘位置childTop</span></span><br><span class="line">                <span class="comment">//从而根据childLeft和childTop得出子View的右边缘位置childRight = childLeft + width，下边缘位置childButtom = childTop + height</span></span><br><span class="line">                <span class="comment">//然后调用子View的layout方法</span></span><br><span class="line">                child.layout(childLeft, childTop, childLeft + width, childTop + height);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以发现layoutChildren里面过程和onMeasure里面的过程很像，只是注释1中调用的是子View的layout方法而不是measure方法，如果这个子View是一个View，那么layout方法里面就可以通过setFrame方法直接确定自身的位置，如果这个子View是一个ViewGroup，除了调用setFrame方法确定自身的位置外，还要重复onLayout方法中确定子View位置的过程，最后一层一层的往下，直到全部都子View的layout完成。</p><h3 id="2、小结"><a href="#2、小结" class="headerlink" title="2、小结"></a>2、小结</h3><p>我们再来看一下layout的整体流程：从ViewRootImp的performTraversals()方法进入performLayout()方法，开始整颗View树的布局流程，在performLayout方法里面会调用layout方法，我们发现，View的布局过程其实也可想测量过程那样分为View的layout流程和ViewGroup的layout流程，对于View来说，执行layout方法时只需要直接确定自身四个顶点的位置即可，而onLayout方法是一个空实现；对于ViewGroup来说，执行layout方法时除了要确定自身的四个顶点的位置外，那么它在onLayout方法中还要对自己所有的子View进行layout，最后一层一层的往下，直到全部都layout完成。如下：</p><img src="/2019/07/22/View%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/view5.png" class="" title="view5"><p>layout过后就可以通过View的getWidth()和getHeight()来获取最终的宽高的，这个两个方法的实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//View.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mRight - mLeft;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mBottom - mTop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现就是通过View的四个顶点的差值来得到View的准确宽高。</p><h2 id="View的绘制流程-performDraw"><a href="#View的绘制流程-performDraw" class="headerlink" title="View的绘制流程 - performDraw()"></a>View的绘制流程 - performDraw()</h2><p>和上面两步相似，View的绘制从ViewRootImpl的performDraw()开始的，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewRootImpl.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performDraw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> fullRedrawNeeded = mFullRedrawNeeded;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//1、调用ViewRootImpl的draw方法</span></span><br><span class="line">    draw(fullRedrawNeeded);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>performDraw()方法中并不是先调用View的draw方法，而是先调用ViewRootImpl的draw方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewRootImpl.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">boolean</span> fullRedrawNeeded)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取surface绘制表面</span></span><br><span class="line">    Surface surface = mSurface;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//如果surface表面需要更新</span></span><br><span class="line">    <span class="keyword">if</span> (!dirty.isEmpty() || mIsAnimating || accessibilityFocusDirty) &#123;</span><br><span class="line">        <span class="comment">//判断是否启用硬件加速，即是否使用GPU绘制</span></span><br><span class="line">        <span class="keyword">if</span> (mAttachInfo.mThreadedRenderer != <span class="keyword">null</span> &amp;&amp; mAttachInfo.mThreadedRenderer.isEnabled()) &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="comment">//使用GPU绘制</span></span><br><span class="line">            mAttachInfo.mThreadedRenderer.draw(mView, mAttachInfo, <span class="keyword">this</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="comment">//1、调用drawSoftware方法，使用CPU绘制</span></span><br><span class="line">            <span class="keyword">if</span> (!drawSoftware(surface, mAttachInfo, xOffset, yOffset, scalingRequired, dirty)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ViewRootImpl的draw方法中首先获取需要绘制的区域，然后判断是否使用GPU进行绘制，使用硬件加速是为提高了Android系统显示和刷新的速度，是在在API 11之后引入GPU加速的支持，关于这部分知识可自行查阅资料，不是本文重点，这里我们只关心注释1，通常情况下我们使用的是CPU绘制，也就是调用ViewRootImpl的drawSoftware方法来绘制，ViewRootImpl的drawSoftware()方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewRootImpl.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">drawSoftware</span><span class="params">(Surface surface, AttachInfo attachInfo, <span class="keyword">int</span> xoff, <span class="keyword">int</span> yoff, <span class="keyword">boolean</span> scalingRequired, Rect dirty)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Canvas canvas;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> left = dirty.left;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> top = dirty.top;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> right = dirty.right;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> bottom = dirty.bottom;</span><br><span class="line">        <span class="comment">//1、获取指定区域的Canvas对象，即画布，用于绘制</span></span><br><span class="line">        canvas = mSurface.lockCanvas(dirty);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;<span class="comment">//省略catch</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="comment">//2、从View树的根节点开始绘制，触发整颗View树的绘制</span></span><br><span class="line">            mView.draw(canvas);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//3、释放Canvas锁，然后通知SurfaceFlinger更新这块区域</span></span><br><span class="line">            surface.unlockCanvasAndPost(canvas);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">           <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>drawSoftware方法中主要做了3件事：</p><ul><li>1、获取Surface对象并锁住Canvas绘图对象</li><li>2、从View树的根视图开始绘制整颗视图树</li><li>3、释放Surface对象并解锁Canvas，通知SurfaceFlinger更新视图</li></ul><h3 id="1、View和ViewGroup的draw流程"><a href="#1、View和ViewGroup的draw流程" class="headerlink" title="1、View和ViewGroup的draw流程"></a>1、View和ViewGroup的draw流程</h3><p>第1和第3点都是操作Surface的基本流程，我们主要看第二点即注释2，调用了View的draw方法，它就是一个模板方法，定义了几个固定的绘制步骤，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//View.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">int</span> privateFlags = mPrivateFlags;</span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">boolean</span> dirtyOpaque = (privateFlags &amp; PFLAG_DIRTY_MASK) == PFLAG_DIRTY_OPAQUE &amp;&amp;</span><br><span class="line">                (mAttachInfo == <span class="keyword">null</span> || !mAttachInfo.mIgnoreDirtyState);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Draw traversal performs several drawing steps which must be executed</span></span><br><span class="line"><span class="comment">         * in the appropriate order:</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *      1. Draw the background</span></span><br><span class="line"><span class="comment">         *      2. If necessary, save the canvas' layers to prepare for fading</span></span><br><span class="line"><span class="comment">         *      3. Draw view's content</span></span><br><span class="line"><span class="comment">         *      4. Draw children</span></span><br><span class="line"><span class="comment">         *      5. If necessary, draw the fading edges and restore layers</span></span><br><span class="line"><span class="comment">         *      6. Draw decorations (scrollbars for instance)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="comment">//1、绘制背景</span></span><br><span class="line">    <span class="keyword">if</span> (!dirtyOpaque) &#123;</span><br><span class="line">        drawBackground(canvas);</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//2、保存Canvas图层，为fadin做准备</span></span><br><span class="line">    saveCount = canvas.getSaveCount();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//3、 绘制自身内容，setWillNotDraw()可以控制dirtyOpaque这个标志位</span></span><br><span class="line">    <span class="keyword">if</span>(!dirtyOpaque) onDraw(canvas);</span><br><span class="line">    <span class="comment">//4、如果是ViewGroup，绘制子View</span></span><br><span class="line">    dispatchDraw(canvas);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//5、如果需要的话，绘制View的fading边缘并恢复图层</span></span><br><span class="line">    canvas.drawRect(left, top, right, top + length, p);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    <span class="comment">//6、绘制装饰，如滚动条</span></span><br><span class="line">    onDrawForeground(canvas);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你看那英文注释，它已经替我们把draw方法中的6大步骤写出来了，其中最重要的就是注释3和4，我们分别来介绍一下：</p><ul><li><strong>onDraw(canvas)</strong>：onDraw方法是用来绘制自身内容，如果你的自定义View或ViewGroup需要绘制内容，就要重写这个方法在Canvas上绘制自身内容。</li><li><strong>dispatchDraw(canvas)</strong>：如果是ViewGroup，除了绘制自身内容外，还需要绘制子View的内容，所以dispatchDraw就是把View的绘制一层一层的传递下去，直到整颗View树绘制完毕，ViewGroup重写了该方法，我们看一下它的主要源码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewGroup.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispatchDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childrenCount = mChildrenCount;</span><br><span class="line">    <span class="keyword">final</span> View[] children = mChildren;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childrenCount; i++) &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//如果子View可见</span></span><br><span class="line">        <span class="keyword">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE || child.getAnimation() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//调用drawChild方法，见下面</span></span><br><span class="line">            more |= drawChild(canvas, child, drawingTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ViewGroup.java</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">drawChild</span><span class="params">(Canvas canvas, View child, <span class="keyword">long</span> drawingTime)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//还是调用了View的draw方法</span></span><br><span class="line">     <span class="keyword">return</span> child.draw(canvas, <span class="keyword">this</span>, drawingTime);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>可以看到，dispatchDraw方法把绘制子View的任务通过drawChild方法分发给它的子View，如果是一个ViewGroup，又会重复dispatchDraw()过程。</p><h3 id="2、onDraw-绘制开关-setWillNotDraw"><a href="#2、onDraw-绘制开关-setWillNotDraw" class="headerlink" title="2、onDraw()绘制开关 - setWillNotDraw()"></a>2、onDraw()绘制开关 - setWillNotDraw()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//View.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWillNotDraw</span><span class="params">(<span class="keyword">boolean</span> willNotDraw)</span> </span>&#123;</span><br><span class="line">    setFlags(willNotDraw ? WILL_NOT_DRAW : <span class="number">0</span>, DRAW_MASK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果你不需要绘制任何内容，你可以通过View的setWillNotDraw(true)方法关闭绘制，在默认情况下，View没有启用这个优化标志位，但是ViewGroup会启用，所以<strong>当你的自定义ViewGroup需要通过onDraw来绘制内容时，需要显式的打开这个开关setWillNotDraw(false)，当你的自定义View不需要onDraw来绘制内容时，需要显式的关闭这个开关setWillNotDraw(true)</strong>。</p><h3 id="3、小结-1"><a href="#3、小结-1" class="headerlink" title="3、小结"></a>3、小结</h3><p>到这里，我们走完了View的绘制过程，我们再来看一下draw的整体流程：从ViewRootImp的performTraversals()方法进入performDraw()方法，开始整颗View树的绘制流程，在performDraw()方法中经过层层调用：<strong>ViewRootImpl :: draw() -&gt; ViewRootImpl :: drawSoftware() -&gt; View :: draw()</strong>，来到View的draw()方法，它里面定义了View绘制的6大步骤，其中对于View来说，直接调用onDraw()方法绘制自身，对于ViewGroup来说，还要通过dispatchDraw()把绘制子View的流程分发下去，一层层传递，直到所有View都绘制完毕。如图：</p><img src="/2019/07/22/View%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/view6.png" class="" title="view6"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们一直讲View的工作原理，但有没有发现ViewRootImpl也出现的很频繁，它虽然不是一个View，但它是连接View和Window之间的纽带，View三大工作流程的起点就是ViewRootImpl的performTraversals()方法，performTraversals()中依此调用了<strong>performMeasure() -&gt; performLayout() -&gt; performDraw()</strong>，分别对应顶级View的<strong>measure、layout和draw流程</strong>，然后顶级View的<strong>measure流程</strong>和<strong>layout流程</strong>又会分别调用我们熟悉的<strong>onMeasure()、onLayout()方法</strong> ，<strong>draw流程</strong>有点特别，它是通过<strong>dispatchDraw()方法</strong>来进行draw流程的传递, 而onDraw()方法只是单纯的绘制自身内容，在onMeasure()方法中会对所有child进行measure过程，同理onLayout()方法中会对所有child进行layout过程，dispatchDraw()方法中会对所有child进行draw过程，如此递归直到完成整颗View Hierarchy的遍历。</p><p>该过程如图:</p><img src="/2019/07/22/View%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/view7.png" class="" title="view7"><p>在阅读Android源码时，如果你只是在追踪方法的调用链，这种过程是毫无意义的，但是如果你在这个阅读过程加入了自己的思考，把它的知识点用自己的语言整理，这样才会有所收获。以上就是我对View的工作原理的理解，希望大家有所收获。</p><p>参考资料：</p><p>《Android开发艺术探索》</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在Android中View一直扮演着一个很重要的角色，它是我们开发中视觉的呈现，我平常也使用着Android提供的丰富且功能强大的控件，有时候遇到一个很炫酷的自定义View的开源库，我们也是拿来主义，时间长了你就会发现你只是一个只会使用控件和依赖被人开源库的程序员，这并不是一个开发者，所以我们并不能只满足于使用，我们要理解它背后的工作原理和流程，这样才能自己做出一个属于自己的控件，一直都说自定View是Android进阶中的一道门槛，当其实自定义View当你理解了它的原理后，你就会发现它也不过如此。本文将从源码的角度探讨View工作的三大流程，对View做进一步的认识。俗话说的好：源码才是最好的老师。&lt;/p&gt;
    
    </summary>
    
    
      <category term="View机制" scheme="http://yoursite.com/categories/View%E6%9C%BA%E5%88%B6/"/>
    
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="view" scheme="http://yoursite.com/tags/view/"/>
    
  </entry>
  
  <entry>
    <title>java学习总结之面向对象</title>
    <link href="http://yoursite.com/2019/07/19/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2019/07/19/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2019-07-19T04:29:50.000Z</published>
    <updated>2023-01-07T10:44:48.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>上一篇文章<a href="https://rain9155.github.io/2019/07/19/java%E5%9F%BA%E7%A1%80/#more" target="_blank" rel="noopener">java基础</a><br>本篇文章继续Java知识点的归纳，梳理一下关于面向对象的知识点，涉及到封装、继承、多态，还有接口，类之间的关系。</li></ul><a id="more"></a><h2 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h2><h3 id="1、抽象类"><a href="#1、抽象类" class="headerlink" title="1、抽象类"></a>1、抽象类</h3><p>抽象类和抽象方法都用abstract关键字进行声明，抽象类不能被实例化，不能直接创建，抽象方法必须放在抽象类中，类中如果有抽象方法，这个类继续声明为抽象类，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fight</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类实现抽象方法，完成实际操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Warrior</span> <span class="keyword">extends</span> <span class="title">Hero</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fight</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类继续声明为抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LongRange</span> <span class="keyword">extends</span> <span class="title">Hero</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="2、接口"><a href="#2、接口" class="headerlink" title="2、接口"></a>2、接口</h3><p>接口被认为是一种特殊的抽象类，同样不能使用new实例化，接口的字段和方法都默认为public，且不能声明为private或protected，接口只能包含常量(static final)和待实现的方法，java8以后接口中可以有方法的实现，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Eat</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eating</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"eating"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在接口中，也可以定义内部类，但是只能是public static修饰的内部类，所以接口中只能定义静态内部类，但是在接口中定义内部类的用处不大，很少使用。</p></blockquote><h3 id="3、接口和抽象类的比较"><a href="#3、接口和抽象类的比较" class="headerlink" title="3、接口和抽象类的比较"></a>3、接口和抽象类的比较</h3><table><thead><tr><th align="center"></th><th align="center">变量</th><th align="center">成员方法</th><th align="center">构造方法</th><th align="center">使用场合</th></tr></thead><tbody><tr><td align="center">抽象类</td><td align="center">无限制</td><td align="center">无限制</td><td align="center">可以有</td><td align="center">强的“is a”关系（是一种）</td></tr><tr><td align="center">接口</td><td align="center">所有变量必须是public static final</td><td align="center">所有方法必须是public abstract</td><td align="center">无</td><td align="center">弱的“is a”关系（is kind of，是一类）</td></tr></tbody></table><p>在很多情况下，接口优先于抽象类。因为接口没有抽象类严格的类层次结构要求，可以灵活地为一个类添加行为。并且从 Java 8 开始，接口也可以有默认的方法实现，使得修改接口的成本也变的很低，而且接口可以实现多继承。</p><h2 id="外部类和内部类"><a href="#外部类和内部类" class="headerlink" title="外部类和内部类"></a>外部类和内部类</h2><p>把一个类放在另外一个类的内部，处于类内部的类就叫做内部类，包含内部类的类就叫做外部类，一个外部类不一定有内部类，但是一个内部类就一定有一个”依附“的外部类，内部类比外部类多使用3个修饰符：private、protected、static，外部类不能使用这3个修饰符，虽然外部类和内部类整体是一个类文件，但是编译之后，它会分别生成外部类的class文件和内部类的class文件，这说明在运行时外部类和内部类其实是两个独立的类，内部类可以分为：<strong>非静态内部类</strong>、<strong>静态内部类</strong>、<strong>局部内部类</strong>、<strong>匿名内部类</strong>。</p><h3 id="1、非静态内部类"><a href="#1、非静态内部类" class="headerlink" title="1、非静态内部类"></a>1、非静态内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String outer = <span class="string">"外部类私有变量"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">outerMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"外部类私有方法"</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">innerMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">//非静态内部类调用外部类的私有方法</span></span><br><span class="line">            outerMethod();</span><br><span class="line">            <span class="comment">//非静态内部类访问外部类的私有变量</span></span><br><span class="line">            System.out.println(outer);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有使用static修饰的就是非静态内部类，它依赖于<strong>外部类实例</strong>，要创建非静态内部类实例，必须先创建外部类实例，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    OuterClass outerClass = <span class="keyword">new</span> OuterClass();</span><br><span class="line">    <span class="comment">//通过 外部类实例 调用非静态内部类的构造器</span></span><br><span class="line">    OuterClass.InnerClass innerClass = outerClass.<span class="keyword">new</span> InnerClass();</span><br><span class="line">    innerClass.innerMethod();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总的来说，非静态内部类有以下几个特点：</p><ul><li>1、非静态内部类属于外部类实例，必须依赖外部类实例才能够创建；</li><li>2、非静态内部类编译之后，会保留一个外部类对象的引用(在构造方法中传入)；</li><li>3、非静态内部类不能含有静态成员、静态方法和static语句块；</li><li>4、非静态内部类中可以直接访问外部类的所有成员和方法(包括private的)，但是在外部类中不能直接访问内部类的任何成员和方法，必须先创建实例后才能访问(包括private的)。</li></ul><blockquote><p>如果外部类和内部类的成员变量重名，可以通过<strong>this</strong>和<strong>外部类.this</strong>区分。</p></blockquote><h3 id="2、静态内部类"><a href="#2、静态内部类" class="headerlink" title="2、静态内部类"></a>2、静态内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String outer = <span class="string">"外部类私有变量"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">outerMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"外部类私有方法"</span> );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">innerMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">//静态内部类调用外部类的私有静态方法</span></span><br><span class="line">            outerMethod();</span><br><span class="line">            <span class="comment">//静态内部类访问外部类的私有静态变量</span></span><br><span class="line">            System.out.println(outer);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用static修饰的就是静态内部类，它依赖于<strong>外部类</strong>，创建静态内部类实例时，不需要先创建外部类实例，因为静态内部类依赖的是类而不是类实例，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//通过 外部类 调用静态内部类的构造器</span></span><br><span class="line">    OuterClass.InnerClass innerClass = <span class="keyword">new</span> OuterClass.InnerClass();</span><br><span class="line">    innerClass.innerMethod();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总的来说，静态内部类有以下几个特点：</p><ul><li>1、静态内部类属于类，而不属于类实例；</li><li>2、静态内部类编译之后，不会含有外部类对象的引用；</li><li>3、静态内部类可以包含静态成员、静态方法和static语句块，也能包含非静态的；</li><li>4、静态内部类不能直接访问外部类的实例成员或方法，只能访问静态成员或方法(包括private的)，外部类可以直接通过类名访问静态内部类的静态成员或方法(包括private的)，如果要访问实例成员或方法，必须先创建实例后才能访问(包括private的)。</li></ul><blockquote><p>外部类和内部类之间要访问对方的private/protected成员时，编译器会自动生成合适的“access method”静态方法来提供合适的可访问性，这样就绕开了原本的成员的可访问性不足的问题。</p></blockquote><h3 id="3、局部内部类"><a href="#3、局部内部类" class="headerlink" title="3、局部内部类"></a>3、局部内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">       <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">            <span class="keyword">private</span> String inner = <span class="string">"内部类私有变量"</span>;</span><br><span class="line">            <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">innerMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"内部类私有方法"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       InnerClass innerClass = <span class="keyword">new</span> InnerClass();</span><br><span class="line">       <span class="comment">//访问局部内部类的私有变量</span></span><br><span class="line">       System.out.println(innerClass.inner);</span><br><span class="line">       <span class="comment">//调用局部内部类的私有方法</span></span><br><span class="line">        innerClass.innerMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把一个类在方法里定义，这个类就是局部内部类，局部内部类只能在方法里面使用，它的作用域在方法之内，由于局部内部类不能在方法之外使用，所以它不能使用static和任何访问修饰符修饰，局部内部类在开发中很少用到，因为它的作用域太小了，不能被其他方法复用。</p><h3 id="4、匿名内部类"><a href="#4、匿名内部类" class="headerlink" title="4、匿名内部类"></a>4、匿名内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">outerMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建匿名内部类</span></span><br><span class="line">        InnerClass innerClass = <span class="keyword">new</span> InnerClass()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">innerMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"内部类私有方法"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//调用匿名内部类的方法</span></span><br><span class="line">        innerClass.innerMethod();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">innerMethod</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名内部类就是没有名字的内部类，它没有使用class关键字来定义类，而是在使用时直接创建接口或抽象父类的实现类来使用，匿名内部类一般在只使用一次的场景下使用，总的来说，匿名内部类有以下几个特点：</p><ul><li>1、匿名内部类不能继续声明为抽象类，它必须实现接口或抽象父类的所有抽象方法；</li><li>2、匿名内部类不能定义构造器，因为它没有名字，但是它可以使用实例语句块来完成初始化；</li><li>3、匿名内部类必须实现一个接口或抽象父类，但最多只能实现一个接口或抽象父类；</li><li>4、匿名内部类编译之后，会保留一个外部类对象的引用。</li></ul><blockquote><p>在java8之前，局部内部类或匿名内部类访问方法的局部变量时，这个局部变量必须使用final修饰，在java8之后，被局部内部类或匿名内部类访问的局部变量编译器会自动加上final，无需显式声明，但是如果局部变量在内部类中被修改，那么它还是要显式声明final，总之，在局部内部类或匿名内部类中使用局部变量时，必须按照有final修饰的方式来用(一次赋值，以后不能重复赋值)。</p></blockquote><h2 id="面向对象三大特性"><a href="#面向对象三大特性" class="headerlink" title="面向对象三大特性"></a>面向对象三大特性</h2><p>面向对象是一种程序设计方法，它的基本思想是封装、继承、多态，根据现实世界中各种事物的本质特点，把它们抽象成类，作为系统的基本构成单元，然后这些类可以生成系统中的多个对象，而这些对象则是映射成客观世界的各种事物的实例。</p><h3 id="1、封装"><a href="#1、封装" class="headerlink" title="1、封装"></a>1、封装</h3><p>封装就是尽可能地隐藏对象内部的实现细节，只保留一些对外接口使之与外部发生联系。用户无需知道对象内部的细节，但可以通过对象对外提供的接口来访问该对象。</p><h3 id="2、继承"><a href="#2、继承" class="headerlink" title="2、继承"></a>2、继承</h3><p>继承是面向对象实现复用的手段，继承是一种“is a”关系，父类和子类之间必须存在“is a”关系，通过继承，子类可以获得父类的所有非 private 属性和方法，父类的私有属性在子类中不能直接访问，例如Cat 和 Animal 就是一种 “is a” 关系，因此 Cat 可以继承自 Animal，从而获得 Animal 非 private 的属性和方法。</p><h4 id="2-1、父类构造和子类构造"><a href="#2-1、父类构造和子类构造" class="headerlink" title="2.1、父类构造和子类构造"></a>2.1、父类构造和子类构造</h4><ul><li>构造方法不可继承，使用super关键字调用父类构造</li><li>默认会先调用父类构造，再调用子类构造</li></ul><h4 id="2-2、子类调用父类信息"><a href="#2-2、子类调用父类信息" class="headerlink" title="2.2、子类调用父类信息"></a>2.2、子类调用父类信息</h4><ul><li>使用super关键字</li><li>可以调用父类的公有属性和方法</li><li>可以调用父类的protected属性和方法</li></ul><p>下面一张表给出java中访问权限修饰符的访问范围：</p><table><thead><tr><th align="center">修饰符</th><th align="center">在同一类中可访问</th><th align="center">在同一包内可访问</th><th align="center">在子类内可访问</th><th align="center">在不同包可访问</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">可以</td><td align="center">可以</td><td align="center">可以</td><td align="center">可以</td></tr><tr><td align="center">protected</td><td align="center">可以</td><td align="center">可以</td><td align="center">可以</td><td align="center">–</td></tr><tr><td align="center">default</td><td align="center">可以</td><td align="center">可以</td><td align="center">–</td><td align="center">–</td></tr><tr><td align="center">private</td><td align="center">可以</td><td align="center">–</td><td align="center">–</td><td align="center">–</td></tr></tbody></table><h4 id="2-3、方法重写"><a href="#2-3、方法重写" class="headerlink" title="2.3、方法重写"></a>2.3、方法重写</h4><p>在子类中提供一个对方法的新的实现。</p><ul><li>方法重写发生在通过继承而相关的不同类中；</li><li>方法重写具有相同的方法签名和返回值；</li><li>子类重写方法时子类方法访问权限大于父类的；</li><li>子类重写方法时子类抛出的异常类型是父类抛出异常的子类；</li><li>@Overiide称为重写标注，用来保证重写的方法和原方法的签名和返回值一致。</li></ul><blockquote><p>方法重载：方法重载是指在于同一个类中，一个方法与已经存在的方法名称上相同，但是参数类型、个数、顺序至少有一个不同。应该注意的是，返回值不同，其它都相同不算是重载。</p></blockquote><h3 id="3、多态"><a href="#3、多态" class="headerlink" title="3、多态"></a>3、多态</h3><p>多态是指子类对象可以直接赋值给父类变量，但是运行时依然表现出子类的行为特征，这表示同一个类型的对象在运行时可以具有多种形态，多态分为以下两种：</p><ul><li>编译时多态：主要指方法的重载</li><li>运行时多态：指程序中定义的对象引用所指向的具体类型在运行期间才确定（运行时多态有三个条件：继承，方法重写，向上转型）</li></ul><p>例如下面的代码中，子类Warrior<strong>继承</strong>父类Hero，它<strong>重写</strong>了父类的fight方法，并且在main函数中父类Hero引用子类Warrior（父类引用指向子类对象称为<strong>向上转型</strong>），在Hero引用调用fight方法时，会执行实际对象所在类的fight方法，即Warrior类的fight方法，而不是Hero的fight方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fight</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hero"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Warrior</span> <span class="keyword">extends</span> <span class="title">Hero</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fight</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Warrior"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Hero warrior = <span class="keyword">new</span> Warrior();</span><br><span class="line">    warrior.fight();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：Warrior</span><br></pre></td></tr></table></figure><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p>了解下面6种关系有助于看懂UML图。</p><h3 id="1、泛化关系（Generalization）"><a href="#1、泛化关系（Generalization）" class="headerlink" title="1、泛化关系（Generalization）"></a>1、泛化关系（Generalization）</h3><p>泛化关系用一条带空心箭头的直线表示，在类图中表示为类的继承关系（“is a”关系），在java中用extends关键字表示，最终代码中，泛化关系表现为继承非抽象类。例如下面ASUS继承自Laptop，ASUS是一台笔记本，ASUS与Laptop之间是泛化关系。</p><img src="/2019/07/19/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/generalization.png" class="" title="generalization"><h3 id="2、实现关系（Realization）"><a href="#2、实现关系（Realization）" class="headerlink" title="2、实现关系（Realization）"></a>2、实现关系（Realization）</h3><p>实现关系用一条带空心箭头的虚线表示，在类图中表示实现了一个接口（在java中用implements 关键字表示），或继承抽象类，实现了抽象类中的方法。例如下面Laptop实现了IO接口，同时它继承Computer这个抽象类，Laptop是它们的具体实现。</p><img src="/2019/07/19/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/realization.png" class="" title="realization"><h3 id="3、聚合关系（Aggregation）"><a href="#3、聚合关系（Aggregation）" class="headerlink" title="3、聚合关系（Aggregation）"></a>3、聚合关系（Aggregation）</h3><p>聚合关系用一条带空心菱形箭头的直线表示，表示整体是由部分组成的，但是整体和部分之间并不是强依赖的，整体不存在了，部分还是会存在。例如下面表示Staff聚合到Department，或者说部门是由员工组成的，部门不存在了，员工还是会存在的。</p><img src="/2019/07/19/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/aggregation.png" class="" title="aggregation"><h3 id="4、组合关系-Composition"><a href="#4、组合关系-Composition" class="headerlink" title="4、组合关系  ( Composition )"></a>4、组合关系  ( Composition )</h3><p>组合关系是用一条带实心菱形箭头的直线表示，和聚合关系不同，组合关系中整体和部分是强依赖的，即整体不存在了部分也不存在，组合关系是一种强依赖的特殊聚合关系。例如下面表示Department组合到Company中，或者说Company是由Department组成的，但是公司不存在了，部门也将不存在。</p><img src="/2019/07/19/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/composition.png" class="" title="composition"><h3 id="5、关联关系（Association）"><a href="#5、关联关系（Association）" class="headerlink" title="5、关联关系（Association）"></a>5、关联关系（Association）</h3><p>关联关系用一条直线表示，表示不同类对象之间有关联，这是一种静态关系，与运行过程的状态无关，在最开始就可以确定。因此也可以用 1 对 1、多对 1、多对多这种关联关系来表示.。例如下面学生和学校就是一种关联关系，一个学校可以有很多学生，但是一个学生只属于一个学校，因此这是一种多对一的关系，在运行开始之前就可以确定。</p><img src="/2019/07/19/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/association.png" class="" title="association"><p>关联关系默认不强调方向，表示对象之间相互知道，如果要特别强调方向，如下图，表示A知道B，但是B不知道A，这又叫DirectedAssociation。</p><img src="/2019/07/19/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/directedassociation.png" class="" title="directedassociation"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps: 在最终代码中，关联对象通常以成员变量的形式存在。</span><br></pre></td></tr></table></figure><h3 id="6、依赖关系（Dependency）"><a href="#6、依赖关系（Dependency）" class="headerlink" title="6、依赖关系（Dependency）"></a>6、依赖关系（Dependency）</h3><p>依赖关系用一条带箭头的虚线表示，与关联关系不同的是，他描述一个对象在运行期间会用到另一个对象的关系，是一种动态关系，并且随着运行时的变化， 依赖关系也可能发生变化。依赖也有方向，但是我们总是应该保持单向依赖，避免双向依赖的产生。例如下面表示A依赖于B，A的一个方法中使用到了B作为参数。</p><img src="/2019/07/19/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/dependency.png" class="" title="dependency"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps: 在最终代码中，依赖关系主要表现为：</span><br><span class="line">1、A 类是 B 类方法的局部变量；</span><br><span class="line">2、A 类是 B 类方法或构造的传入参数；</span><br><span class="line">3、A 类向 B 类发送消息，从而影响 B 类发生变化;</span><br></pre></td></tr></table></figure><p>箭头的指向为调用关系。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文都是关于面向对象的一些知识，虽然简单，但是也挺繁琐的，积少成多，希望大家阅读过后有所收获。</p><p>参考资料：</p><p><a href="https://www.jianshu.com/p/00cb3c4e6336" target="_blank" rel="noopener">看懂UML类图和时序图</a></p><p><a href="https://www.zhihu.com/question/54730071" target="_blank" rel="noopener">为什么内部类的private变量可被外部类直接访问？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;上一篇文章&lt;a href=&quot;https://rain9155.github.io/2019/07/19/java%E5%9F%BA%E7%A1%80/#more&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;java基础&lt;/a&gt;&lt;br&gt;本篇文章继续Java知识点的归纳，梳理一下关于面向对象的知识点，涉及到封装、继承、多态，还有接口，类之间的关系。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>java学习总结之线程池</title>
    <link href="http://yoursite.com/2019/07/19/java%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://yoursite.com/2019/07/19/java%E7%BA%BF%E7%A8%8B%E6%B1%A0/</id>
    <published>2019-07-19T04:26:00.000Z</published>
    <updated>2023-01-07T10:44:48.892Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>上一篇文章：<a href="https://rain9155.github.io/2019/07/19/java%E7%BA%BF%E7%A8%8B/" target="_blank" rel="noopener">java学习总结之线程</a></li></ul><p>当我们需要频繁的创建多个线程时，每次都通过new一个Thread是一种不好的操作，创建一个线程是要消耗资源，频繁的创建会导致性能较差，而且我们还要管理多个线程的状态，管理不好还可能会出现死锁，浪费资源。这时就需要java提供的线程池，它能够有效的管理、调度线程，避免过多资源的消耗，通过线程池的统一调度、管理，使得多线程开发变得更简单。本文讲解一下有关线程池的知识点。</p><a id="more"></a><h2 id="一、Executor框架"><a href="#一、Executor框架" class="headerlink" title="一、Executor框架"></a>一、Executor框架</h2><p>线程池属于Executor框架的<strong>一部分</strong>，Executor框架包括<strong>任务</strong>，<strong>任务的执行</strong>、<strong>任务执行的结果</strong>三部分，其中线程池属于任务的执行那一部分，线程池的主要类和接口如下：</p><img src="/2019/07/19/java%E7%BA%BF%E7%A8%8B%E6%B1%A0/executor1.png" class="" title="executor"><p>主要角色介绍：</p><ul><li><strong>Executor</strong>：它是一个接口，里面只有一个方法execute(Runnable command)，用来提交任务到线程池执行；</li><li><strong>ExecutorService</strong>：它继承Executor，同样是一个接口，里面提供了更多的方法用于操作线程池，如Future&lt;?&gt; submit(Runnable task)可以提交有返回值的任务到线程池执行、shutdown和shutdownNow方法可以用来关闭线程池；</li><li><strong>ThreadPoolExecutor</strong>：它是真正的线程池的实现，它实现了上面接口的方法，还提供了一系列参数来配置线程池；</li><li><strong>ScheduleThreadPoolExecutor</strong>：它继承自ThreadPoolExecutor，实现了ScheduledExecutorService接口，也是线程池的实现，它在ThreadPoolExecutor的基础上提供了用于执行定时或延迟任务的方法，如scheduleAtFixedRate和scheduleWithFixedDelay方法，它可以用来取代java中的Timer；</li><li><strong>Executors</strong>：它是一个工厂类，通过它提供的工厂方法可以创建不同的线程池，即返回不同配置参数的ThreadPoolExecutor或ScheduleThreadPoolExecutor实例.</li></ul><p>而线程池是用来执行<strong>任务</strong>的，在java中，任务被分为两种，一种是没有返回值的任务，它用<strong>Runnable</strong>接口表示，一种是有返回值的任务，它用<strong>Callable</strong>接口表示；而在线程池中，<strong>任务的执行结果</strong>用<strong>Future</strong>接口表示，只要实现了Furure接口的类都可以作为线程池的任务返回结果，在java中，Furure接口的一个主要实现类是<strong>FutureTask</strong>，任务和任务执行结果它们之间的关系如下：</p><img src="/2019/07/19/java%E7%BA%BF%E7%A8%8B%E6%B1%A0/executor2.png" class="" title="executor"><p>主要角色介绍：</p><ul><li><strong>Runnable</strong>：一个接口，代表没有返回值的任务，通过Executor的execute(Runnable)方法执行其中的run方法；</li><li><strong>Callable</strong>：一个接口，代表有返回值的任务，可以使用ExecutorService的submit(Callable)方法执行，还可以通过FutureTask<strong>包装</strong>后，使用ExecutorService的submit(Runnable)方法执行，任务完成后，返回V类型的结果，V是一个泛型；</li><li><strong>Future</strong>：一个接口，代表着异步任务的返回结果，只要实现了Furure接口的类都可以作为线程池的任务返回结果，通过get方法(阻塞)可以获取返回结果，通过cancel可以取消任务的执行；</li><li><strong>FutureTask</strong>：它实现了Runnable和Future接口，所以它里面会有run方法用来执行任务和get、cancel等方法用来操作任务，这说明FutureTask即可以被<strong>当作任务</strong>提交到线程池执行，又可以被当作线程池的<strong>任务返回结果</strong>，它的内部是通过AQS(AbstractQueuedSynchronizer)来实现同步管理，AQS是java5之后加入的一个同步框架.</li></ul><blockquote><p>FutureTask它有两个构造器： FutureTask(Callable<V> )和FutureTask(Runnable, V) ，第一个构造器可以用来包装一个Callable对象；第二个构造器可以用来包装一个Runnable对象，里面会通过Executors的callable方法把Runnable对象适配成Callable对象，并以第二个参数的V类型作为返回值类型，如果没有返回值，传入null就可以.</p><p>所以FutureTask的run方法中最终执行的是<strong>Callable的call方法</strong>，返回V类型的结果，更多细节可以查看FutureTask内部实现。</p></blockquote><p><strong>线程池使用的大概流程如下</strong>：</p><p>首先程序创建实现了Runnable或者Callable接口的任务，然后通过Executors相应方法返回或自己配置一个<strong>ThreadPoolExecutor</strong>，然后把任务通过ThreadPoolExecutor的相应方法提交，如果提交的是Callable任务，ThreadPoolExecutor还会把它包装成FutureTask任务，由于FutureTask也实现了Runnable接口，所以不管提交的是Runnable还是Callable任务，ThreadPoolExecutor最终执行的还是Runnable类型的任务；</p><p>如果你使用的是ThreadPoolExecutor的submit(XX)来提交任务，它会返回一个实现了Future接口的对象，在java中，默认返回的是FutureTask，然后程序就可以通过FutureTask.get()来等待任务执行完成，也可以通过FutureTask.cancel(boolean)来取消任务的执行；</p><p>如果你使用的是ThreadPoolExecutor的execute(XX)来提交任务，任务就会等待ThreadPoolExecutor调度执行直到完成或抛出异常，你无法操作它的执行过程。</p><h2 id="二、线程池的配置参数"><a href="#二、线程池的配置参数" class="headerlink" title="二、线程池的配置参数"></a>二、线程池的配置参数</h2><p>ThreadPoolExecutor是线程池的真正实现，它的构造方法提供了一系列的参数来配置线程池，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                             TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                             BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                             ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                             RejectedExecutionHandler handler)</span></span></span><br></pre></td></tr></table></figure><p>下面对这几个参数进行说明：</p><h3 id="1、int-corePoolSize"><a href="#1、int-corePoolSize" class="headerlink" title="1、int  corePoolSize"></a>1、int  corePoolSize</h3><p><strong>含义</strong>：线程池中的核心线程数。</p><p>线程池启动后默认是空的，只有任务到来时才会创建线程以处理请求，如果调用了ThreadPoolExecutor的<strong>prestartAllCoreThreads方法</strong>，可以在线程池启动后立即创建所有的核心线程以等待任务。</p><p>还有在默认情况下，核心线程一旦创建后就会在线程池中一直存活，即使它们处于空闲状态，如果设置ThreadPoolExecutor的<strong>allowCoreThreadTimeOut(boolean value)方法为true</strong>，那么空闲的核心线程在等待新任务到来时就会有超时策略，这个超时时间由keepAliveTime指定，当等待时间超过keepAliveTime后，核心线程就会被终止。</p><h3 id="2、int-maximumPoolSize"><a href="#2、int-maximumPoolSize" class="headerlink" title="2、int  maximumPoolSize"></a>2、int  maximumPoolSize</h3><p><strong>含义</strong>：线程池所能创建的最大线程数，它与<strong>corePoolSize</strong>、<strong>workQueue</strong>共同调整线程池中实际运行的线程数量。</p><p> 当线程池中的工作线程数小于corePoolSize时，每次来任务的时候都会创建一个新的工作线程。不管工作线程集合中有没有线程是处于空闲状态；当池中工作线程数大于等于 corePoolSize 的时候，每次任务来的时候都会首先尝试将线程放入队列，而不是直接去创建线程。</p><p>如果放入队列失败，说明队列满了，且当线程中线程数小于 maximumPoolSize 的时候，则会创建一个工作线程（非核心线程）来执行这个任务，如果线程池中的线程数大于maximumPoolSize，调用给定的拒绝策略；如果任务成功放入队列，就等待线程取出执行。</p><p>如图，线程池的工作流程如下:</p><img src="/2019/07/19/java%E7%BA%BF%E7%A8%8B%E6%B1%A0/executor3.png" class="" title="executor3"><blockquote><p>工作线程：执行任务的线程;<br>空闲线程：已经执行完任务，并且还在存活着的线程.</p></blockquote><h3 id="3、-long-keepAliveTime"><a href="#3、-long-keepAliveTime" class="headerlink" title="3、 long  keepAliveTime"></a>3、 long  keepAliveTime</h3><p><strong>含义</strong>：非核心线程空闲时的超时时长，超过这个时长，非核心线程就会被回收。</p><p>默认情况下只对非核心线程有作用，我们可以通过调用<strong>allowCoreThreadTimeout(true)</strong>来将这种策略应用给核心线程，这样核心线程也会有超时机制。</p><h3 id="4、TimeUnit-unit"><a href="#4、TimeUnit-unit" class="headerlink" title="4、TimeUnit  unit"></a>4、TimeUnit  unit</h3><p><strong>含义</strong>：指定keepAliveTime的单位，可选值有毫秒、秒、分等。</p><h3 id="5、-BlockingQueue-workQueue"><a href="#5、-BlockingQueue-workQueue" class="headerlink" title="5、 BlockingQueue   workQueue"></a>5、 BlockingQueue   workQueue</h3><p><strong>含义</strong>：线程池中的任务队列，用来保存等待执行任务的阻塞队列。</p><p>首先 BlockingQueue 是一个接口，这是一个很特殊的队列，如果 BlockQueue 是空的，从 BlockingQueue 取东西的操作将会被阻断进入等待状态，直到 BlockingQueue 进了东西才会被唤醒。同样，如果 BlockingQueue 是满的，任何试图往里存东西的操作也会被阻断进入等待状态，直到 BlockingQueue 里有空间才会被唤醒继续操作。</p><p>BlockingQueue 大致有四个实现类，如下：</p><ul><li><strong>ArrayBlockingQueue</strong>：规定大小的基于数组结构的 BlockingQueue，即有界队列，其构造函数必须带一个 int 参数来指明其大小，其所含的对象是以 FIFO(先入先出)顺序排序的，如果队列满了调用给定的拒绝策略；</li><li><strong>LinkedBlockingQueue</strong>： 大小不定的基于链表结构的 BlockingQueue，既可以有界也可以无界，若其构造函数带一个规定大小的参数，生成的 BlockingQueue 有大小限制，若不带大小参数，所生成的 BlockingQueue 的大小由 Integer.MAX_VALUE 来决定，其所含的对象是以 FIFO(先入先出)顺序排序的；所以如果该队列是无界的，则可以忽略给定的拒绝策略，因为它永远都不会满，同时还可以忽略maximumPoolSize 参数，因为起当核心线程都在忙的时候，新的任务被放在队列上，永远不会有大于 corePoolSize 的线程被创建；</li><li><strong>PriorityBlockingQueue</strong>：优先级队列，类似于 LinkedBlockQueue，可以有界也可以无界，但其所含对象的排序不是 FIFO，而是依据对象的自然排序顺序或者是构造函数的 Comparator 决定的顺序；</li><li><strong>SynchronousQueue</strong>：特殊的 BlockingQueue，对其的操作必须是放和取交替完成的，因为其特殊的操作，所以如果有一个任务要插入队列，那么它必须要等到另一个移除任务的操作，所以使用该队列会直接把任务提交给线程池，而不会将任务加入队列，如果线程池没有任何可用的线程处理，就调用给定的拒绝策略。</li></ul><p>BlockingQueue 的常用方法：</p><ul><li>add(object)：把 object 加到 BlockingQueue 里，如果 BlockingQueue 可以容纳，则返回 true，否则报异常；</li><li>offer(object)：把 object 加到 BlockingQueue 里，如果 BlockingQueue 可以容纳，则返回 true，否则返回 false；</li><li>put(object)：把 object 加到 BlockingQueue 里，如果 BlockQueue 没有空间，则调用此方法的线程被阻断直到 BlockingQueue 里面有空间再继续；</li><li>take()：取走 BlockingQueue 里排在首位的对象，若 BlockingQueue 为空，阻断进入等待状态直到 Blocking 有新的对象被加入为止；</li><li>poll(time)：取走 BlockingQueue 里排在首位的对象，若不能立即取出，则可以等 time 参数规定的时间，取不到时返回 null。</li></ul><h3 id="6、ThreadFactory-threadFactory"><a href="#6、ThreadFactory-threadFactory" class="headerlink" title="6、ThreadFactory  threadFactory"></a>6、ThreadFactory  threadFactory</h3><p><strong>含义</strong>：线程工厂，让用户可以定制创建线程的过程。</p><p>ThreadFactory  是一个接口，它只有一个<strong>Thread newThread(Runnable)方法</strong>，如果没有指定threadFactory，默认调用Executors的<strong>defaultThreadFactory方法</strong>返回一个DefaultThreadFactory，DefaultThreadFactory创建的线程都属于同一个线程组和拥有同样的优先级。</p><p>除了默认的ThreadFactory，我们可以实现ThreadFactory 接口自定义自己的ThreadFactory，这样就可以自定义线程的名字、线程组合等状态，如果newThread方法返回null，线程池将不会执行任何任务。</p><h3 id="7、RejectedExecutionHandler-handler"><a href="#7、RejectedExecutionHandler-handler" class="headerlink" title="7、RejectedExecutionHandler handler"></a>7、RejectedExecutionHandler handler</h3><p><strong>含义</strong>：当新任务到来时，线程池被<strong>关闭</strong>或线程数maximumPoolSize和任务队列大小已经<strong>达到上限</strong>的时候，对新任务采取的拒绝策略。</p><p>RejectedExecutionHandler 同样是一个接口，里面只有一个<strong>rejectedExecution(Runnable, ThreadPoolExecutor)方法</strong>，下面介绍一下几个默认的实现，都定义在ThreadPoolExecutor中，都实现了RejectedExecutionHandler 接口：</p><ul><li><strong>AbortPolicy</strong>：直接抛出 RejectedExecutionException 异常，线程池的默认实现；</li><li><strong>CallerRunsPolicy</strong>：这个策略将会使用 Caller 线程来执行这个新任务，可以降低任务提交的速度；</li><li><strong>DiscardPolicy</strong>：这个策略将会直接丢弃新任务；</li><li><strong>DiscardOldestPolicy</strong>：这个策略将会把任务队列头部的任务丢弃，然后重新尝试执行新任务，如果还是失败则继续实施该策略（这样的结果是最后加入的任务反而更有可能先被执行）.</li></ul><p>和ThreadFactory  一样，我们也可以实现RejectedExecutionHandler 接口自定义自己的拒绝策略。</p><h2 id="三、线程池的生命周期"><a href="#三、线程池的生命周期" class="headerlink" title="三、线程池的生命周期"></a>三、线程池的生命周期</h2><p>线程池的生命周期包含<strong>5</strong>种状态，如下：</p><h3 id="1、RUNNING"><a href="#1、RUNNING" class="headerlink" title="1、RUNNING"></a>1、RUNNING</h3><p>线程池创建后就进入RUNNING状态，这个时候可以向线程池提交任务，可以通过ThreadPoolExecutor的<strong>execute</strong>方法或<strong>submit</strong>方法，只有处于RUNNING的状态的线程池才能提交任务。</p><p><strong>execute方法</strong>用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功；而<strong>submit方法</strong>用于提交需要返回值的任务，这时线程池会返回一个Future类型的对象，通过这个Future对象可以判断任务是否执行成功，并且可以通过Future的get方法来获取返回值，get方法会阻塞当前线程直到任务完成，而使用get（long timeout，TimeUnit unit）方法则会阻塞当前线程timeout时间后立即返回，这时候有可能任务没有执行完，当线程池的任务还没有执行完时，会报超时异常。</p><h3 id="2、SHUTDOWN"><a href="#2、SHUTDOWN" class="headerlink" title="2、SHUTDOWN"></a>2、SHUTDOWN</h3><p>当调用ThreadPoolExecutor的<strong>shutdown</strong>方法后，便会进入SHUTDOWN状态，这时意味线程池不再接受新的任务，isShutdown方法会返回true，但此时线程池会把阻塞队列中保存的所有任务执行完毕后，再中断所有线程。</p><h3 id="3、STOP"><a href="#3、STOP" class="headerlink" title="3、STOP"></a>3、STOP</h3><p>如果调用的是ThreadPoolExecutor的<strong>shutdownNow方法</strong>，便会进入STOP状态，这时线程池也不能再接受新的任务，isShutdown方法也会返回true，它会中断线程池中的所有线程，不管你是空闲线程还是正在执行任务的线程，同时也不会处理阻塞队列中保存的任务。</p><p>shutdown方法和shutdownNow方法方法中断线程的原理都是通过调用线程的<strong>interrupt方法</strong>，所以如果你的没有正确处理中断事件，你的线程还是不会马上停止，而是等到线程执行完毕或抛出异常后才停止，如何正确中断一个线程? 可以查看我的上一篇文章<a href="https://rain9155.github.io/2019/07/19/java%E7%BA%BF%E7%A8%8B/" target="_blank" rel="noopener">java学习总结之线程</a>。</p><blockquote><p>可以看到，线程池SHUTDOWN或STOP的时候最终都会把所有线程中断，并关闭线程池，这时你的线程池就无法再次提交任何任务了，所以如果你只是想中断线程池中的一个或几个任务，可以通过使用 submit方法来提交任务，它会返回一个 Future&lt;?&gt; 对象，通过调用该对象的 cancel(true) 方法就可以中断这个任务。</p></blockquote><h3 id="4、TIDYING"><a href="#4、TIDYING" class="headerlink" title="4、TIDYING"></a>4、TIDYING</h3><p>处于SHUTDOWN或STOP状态的线程池的工作线程数为0时，线程池便会进入TIDYING状态，这是一个过渡状态，很快就会进入TERMINATED状态。</p><h3 id="5、TERMINATED"><a href="#5、TERMINATED" class="headerlink" title="5、TERMINATED"></a>5、TERMINATED</h3><p>在TIDYING状态的线程池调用<strong>terminated</strong>方法后，就变为TERMINATED状态，这时调用isTerminated方法会返回true。</p><p>线程池的生命周期转换如下：</p><img src="/2019/07/19/java%E7%BA%BF%E7%A8%8B%E6%B1%A0/executor4.png" class="" title="executor"><h2 id="四、线程池的分类"><a href="#四、线程池的分类" class="headerlink" title="四、线程池的分类"></a>四、线程池的分类</h2><p>通过配置ThreadPoolExecutor的构造函数的参数就可以实现不同类型的线程池，但是配置一个ThreadPoolExecutor会很繁琐，需要了解那么多参数，所以我们可以使用工厂类来Executors创建线程池，Executors已经为我们配置好了四种类型的线程池，它们分别是：FixedThreadPool、CachedThreadPool、ScheduleThreadPool和SingleThreadExecutor，我们通过调用Executors的newXX方法就可以得到这些线程池的实例，下面分别介绍：</p><h3 id="1、FixedThreadPool"><a href="#1、FixedThreadPool" class="headerlink" title="1、FixedThreadPool"></a>1、FixedThreadPool</h3><p>ThreadPoolExecutor类型，通过传入的参数大小，创建一种固定线程数量的线程池，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到核心线程数和最大线程数相同，没有超时机制，队列为无界队列，每当新任务到来时，如果线程池中的线程数还没有到达核心线程数，就会立即创建一个工作线程来处理这个任务，如果线程数达到核心线程数，那么新任务就会被放入任务队列等待，并且这个队列能够容纳无限个任务，这样做的后果是导致<strong>最大线程数和超时机制无效</strong>，只要线程池没有被关闭，那么对于新任务的到来，只有两种处理：被核心线程执行或放入任务队列，永远不会创建一个非核心线程。</p><p>FixedThreadPool适用于资源有限，需要限制当前线程数量的场景。</p><h3 id="2、CachedThreadPool"><a href="#2、CachedThreadPool" class="headerlink" title="2、CachedThreadPool"></a>2、CachedThreadPool</h3><p> ThreadPoolExecutor类型，与FixedThreadPool相反，它是一种线程数量不固定的线程池，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                      <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的核心线程数为0，最大线程数为Integer.MAX_VALUE，相当于无限大，这说明线程池中的线程足够多，每个线程的超时时间为60秒，超过60秒空闲的线程就会被回收，它的任务队列是SynchronousQueue，它是一种特殊的队列，它不会保存任务，每当有新任务插入队列，它都会把新任务<strong>立即</strong>提交给线程池处理，如果线程池没有空闲线程，它会<strong>立即</strong>创建一个线程处理，如果有空闲线程就交给空闲线程处理，所以只要线程池没有被关闭，对于每个新任务，它都来者不拒。</p><p>CachedThreadPool适用于任务执行时间短、并发量比较大的场景。</p><blockquote><p>在极端情况下，任务数量非常多，任务执行时间非常长，CachedThreadPool会因为创建过多线程而导致耗尽CPU资源和内存资源。</p></blockquote><h3 id="3、SingleThreadExecutor"><a href="#3、SingleThreadExecutor" class="headerlink" title="3、SingleThreadExecutor"></a>3、SingleThreadExecutor</h3><p>ThreadPoolExecutor，它是只有一个核心线程的线程池。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">            (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                    <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                    <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>它相当于大小为一的FixedThreadPool，因为只有一个线程用来执行任务，所以使得这些任务之间不需要处理线程同步的问题，任务都按顺序的排队执行。</p><p>SingleThreadExecutor适用于需要按顺序执行任务的场景。</p><h3 id="4、ScheduleThreadPool"><a href="#4、ScheduleThreadPool" class="headerlink" title="4、ScheduleThreadPool"></a>4、ScheduleThreadPool</h3><p>它和前面3个线程池不一样，它是ScheduledThreadPoolExecutor类型的，ScheduledThreadPoolExecutor继承自ThreadPoolExecutor，实现了ScheduledExecutorService接口，ScheduledExecutorService接口提供了一些用于用于执行定时任务和周期任务的方法，如scheduleAtFixedRate和scheduleWithFixedDelay方法。</p><p>我们看一下Executors的newScheduledThreadPool方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> DEFAULT_KEEPALIVE_MILLIS = <span class="number">10L</span>;</span><br><span class="line"> MILLISECONDS(TimeUnit.MILLI_SCALE),</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//super就是ThreadPoolExecutor的构造函数</span></span><br><span class="line">        <span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE,</span><br><span class="line">              DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,<span class="comment">//DEFAULT_KEEPALIVE_MILLIS为10L，单位为毫秒</span></span><br><span class="line">              <span class="keyword">new</span> DelayedWorkQueue());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到它是一个核心线程数大小为corePoolSize，最大线程数大小为 Integer.MAX_VALUE的线程池，它的空闲线程的超时时间为10毫秒，并且使用<strong>DelayedWorkQueue</strong>作为任务队列，DelayedWorkQueue是一个延时队列，它也是实现了BlockingQueue接口的队列，并且是一个无界队列，所以<strong>最大线程数和超时机制无效</strong>，当一个新任务到来时，它会把新任务放入任务队列中，因为任务队列是一个DelayedQueue，所以任务会按照它的执行时间排序，越先执行的排在越前面，队列中的任务等时间到了，会被线程池中的线程取出执行，任务执行后，修改时间为下次执行时间，再放入队列，等待下次再次执行。</p><p>下面演示一下如何使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledThreadPoolDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建定时执行的线程池</span></span><br><span class="line">        ScheduledExecutorService executor = Executors.newScheduledThreadPool(<span class="number">3</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//参数1是执行的任务</span></span><br><span class="line">        <span class="comment">//参数2是第一次运行任务延迟的时间</span></span><br><span class="line">        <span class="comment">//参数3是定时任务的周期</span></span><br><span class="line">        <span class="comment">//参数4是单位</span></span><br><span class="line">        executor.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"工作线程： "</span> + Thread.currentThread().getName() + <span class="string">", 结果："</span> + fibc(<span class="number">10</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1</span>, <span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">fibc</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> fibc(n - <span class="number">1</span>) + fibc(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面设计了一个定时任务，计算10的斐波那契数，它会延时1秒后开始执行，然后每隔2秒重复执行一次。</p><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ScheduledThreadPoolDemo().doWork();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">工作线程： pool-<span class="number">1</span>-thread-<span class="number">1</span>, 结果：<span class="number">55</span></span><br><span class="line">工作线程： pool-<span class="number">1</span>-thread-<span class="number">1</span>, 结果：<span class="number">55</span></span><br><span class="line">工作线程： pool-<span class="number">1</span>-thread-<span class="number">2</span>, 结果：<span class="number">55</span></span><br><span class="line">工作线程： pool-<span class="number">1</span>-thread-<span class="number">2</span>, 结果：<span class="number">55</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>ScheduleThreadPool适用于资源有限，需要有限个线程执行周期任务的场景.</p><blockquote><p>Executors中还有一个newSingleThreadScheduledExecutor方法，用于创建大小为1的ScheduleThreadPool，适用于需要单个线程执行周期任务，并且任务需要排队处理的场景。</p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文简单的介绍了Executor框架和介绍了线程池ThreadPoolExecutor的配置参数，还介绍了Executors工厂类提供的四种类型线程池，分别是：FixedThreadPool、CachedThreadPool、ScheduleThreadPool和SingleThreadExecutor，它们都有着各自的应用场景，在开发中，如果Executors中提供的线程池无法满足我们，就需要我们自己手动去配置，所以一定要<strong>熟悉</strong>线程池的各种配置参数，不然会导致你配置出一个错误的线程池，最简单的办法就是参考Executors中的配置，我们只需要合理的修改一下参数的大小和队列类型就能为我们所用。</p><p>有关线程池的基础知识先介绍到这里了，希望大家有所收获！</p><p>参考资料：</p><p><a href="https://mp.weixin.qq.com/s/baYuX8aCwQ9PP6k7TDl2Ww" target="_blank" rel="noopener">Java线程池实现原理及其在美团业务中的实践</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;上一篇文章：&lt;a href=&quot;https://rain9155.github.io/2019/07/19/java%E7%BA%BF%E7%A8%8B/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;java学习总结之线程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当我们需要频繁的创建多个线程时，每次都通过new一个Thread是一种不好的操作，创建一个线程是要消耗资源，频繁的创建会导致性能较差，而且我们还要管理多个线程的状态，管理不好还可能会出现死锁，浪费资源。这时就需要java提供的线程池，它能够有效的管理、调度线程，避免过多资源的消耗，通过线程池的统一调度、管理，使得多线程开发变得更简单。本文讲解一下有关线程池的知识点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="线程池" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>java学习总结之线程</title>
    <link href="http://yoursite.com/2019/07/19/java%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/07/19/java%E7%BA%BF%E7%A8%8B/</id>
    <published>2019-07-19T04:25:50.000Z</published>
    <updated>2023-01-07T10:44:48.887Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在java中，线程非常重要，我们要分清楚进程和线程的区别：进程是操作系统中<strong>资源分配</strong>的基本单位，进程是指一个内存中运行的应用程序，每个进程都拥有自己的一块独立的内存空间，进程之间的资源不共享；而线程是<strong>CPU调度</strong>的最小单元，一个进程可以有多个线程，线程之间的堆空间是共享的，但栈空间是独立的，java程序的进程至少包含主线程和后台线程(垃圾回收线程)。了解这些知识后，来看下文有关线程的知识。</p><a id="more"></a><h2 id="一、并发和并行"><a href="#一、并发和并行" class="headerlink" title="一、并发和并行"></a>一、并发和并行</h2><p>我们先来看一下概念：</p><ul><li>并行：指两个或多个事件在<strong>同一时刻点</strong>发生</li><li>并发：指两个或多个事件在<strong>同一时间段内发生</strong></li></ul><p>对于单核CPU的计算机来说，它是不能并行的处理多个任务，它的每一时刻只能有一个程序执行时间片（时间片是指CPU分配给各个程序的运行时间），故在微观上这些程序只是<strong>分时交替的运行</strong>，所以在宏观看来在一段时间内有多个程序在同时运行，看起来像是并行运行。</p><p>对于多核CPU的计算机来说，它就可以并行的处理多个任务，可以做到多个程序在同一时刻同时运行。</p><p>同理对线程也一样，但系统只有一个CPU时，线程会以某种顺序执行，我们把这种情况称为线程调度，所以从宏观角度上看线程是并行运行的，但是从微观角度来看，却是串行运行，即一个线程一个线程的运行。</p><blockquote><p>一般来说，JVM的进程和线程都是与操作系统的进程和线程<strong>一 一对应</strong>的，这样做的好处是可以使操作系统来调度进程和线程，进程和线程调度是操作系统的核心模块，它的实现是非常复杂的，特别是考虑到多核的情况，因此，就完全没有必要在JVM中再提供一个进程和线程调度机制。</p></blockquote><h2 id="二、线程的创建与启动"><a href="#二、线程的创建与启动" class="headerlink" title="二、线程的创建与启动"></a>二、线程的创建与启动</h2><p>有3种方式使用线程。</p><h3 id="方式1：继承Thread类"><a href="#方式1：继承Thread类" class="headerlink" title="方式1：继承Thread类"></a>方式1：继承Thread类</h3><p>定义一个类继承java.lang.Thread类，重写Thread类中的run方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用线程</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Thread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">     thread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式2：实现Runnable接口"><a href="#方式2：实现Runnable接口" class="headerlink" title="方式2：实现Runnable接口"></a>方式2：实现Runnable接口</h3><h4 id="2-1：定义一个类实现Runnable接口"><a href="#2-1：定义一个类实现Runnable接口" class="headerlink" title="2.1：定义一个类实现Runnable接口"></a>2.1：定义一个类实现Runnable接口</h4><p>实现 Runnable只能当做一个可以在线程中运行的任务，不是真正意义上的线程，因此最后还需要通过 Thread 来调用，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用线程</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MyRunnable instance = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(instance);</span><br><span class="line">    thread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2、使用匿名内部类"><a href="#2-2、使用匿名内部类" class="headerlink" title="2.2、使用匿名内部类"></a>2.2、使用匿名内部类</h4><p>这种方式只适用于这个线程只使用一次的情况，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用线程</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式3：实现Callable接口"><a href="#方式3：实现Callable接口" class="headerlink" title="方式3：实现Callable接口"></a>方式3：实现Callable接口</h3><p>与 Runnable 相比，Callable 可以有返回值，返回值通过 FutureTask 进行封装，所以在创建Thread时，要把FutureTask 传进去，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用线程</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">    MyCallable mc = <span class="keyword">new</span> MyCallable();</span><br><span class="line">    FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> FutureTask&lt;&gt;(mc);</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(ft);</span><br><span class="line">    thread.start();</span><br><span class="line">    System.out.println(ft.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承与实现的区别"><a href="#继承与实现的区别" class="headerlink" title="继承与实现的区别"></a>继承与实现的区别</h3><p>1、继承方式：</p><p>（1）java中类是单继承的，如果继承了Thread，该类就不能有其他父类了，但是可以实现多个接口</p><p>（2）从操作上分析，继承方式更简单，获取线程名字也简单</p><p>2、实现方式：</p><p>（1）java中类可以实现多接口，此时该类还可以继承其他类，并且还可以实现其他接口</p><p>（2）从操作上分析，实现方式稍复杂，获取线程名字也比较复杂，得通过Thread.currentThread来获取当前线程得引用</p><p>综上所述，实现接口会更好一些。</p><h2 id="三、线程的中断与终止"><a href="#三、线程的中断与终止" class="headerlink" title="三、线程的中断与终止"></a>三、线程的中断与终止</h2><h3 id="1、interrupt-、isInterrupted-、interrupted-的作用"><a href="#1、interrupt-、isInterrupted-、interrupted-的作用" class="headerlink" title="1、interrupt()、isInterrupted()、interrupted()的作用"></a>1、interrupt()、isInterrupted()、interrupted()的作用</h3><p>中断就是线程的一个标识位，它表示一个运行中的线程是否被其他线程调用了中断操作，其他线程可以通过调用线程的interrupt()方法对其进行中断操作，线程可以通过调用isInterrupted()方法判断是否被中断，线程也可以通过调用Thread的interrupted()静态方法对当前线程的中断标识位进行复位。</p><p>大家不要认为调用了线程的interrupt()方法，该线程就会停止，它只是做了一个标志位，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//一个死循环</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"InterruptThread正在执行"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    InterruptThread interruptThread = <span class="keyword">new</span> InterruptThread();</span><br><span class="line">    interruptThread.start();</span><br><span class="line">    interruptThread.interrupt();<span class="comment">//调用线程的interrupt()</span></span><br><span class="line">    System.out.println(<span class="string">"interruptThread是否被中断，interrupt  = "</span> + interruptThread.isInterrupted());<span class="comment">//此时isInterrupted()方法返回true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">interruptThread是否被中断，interrupt  = <span class="keyword">true</span></span><br><span class="line">InterruptThread正在执行</span><br><span class="line">InterruptThread正在执行</span><br><span class="line">InterruptThread正在执行</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>可以看到当你调用了线程的interrupt()方法后，此时调用isInterrupted()方法会返回true，但是该线程还是会继续执行下去。所以怎么样才能终止一个线程的运行呢？</p><h3 id="2、终止线程的运行"><a href="#2、终止线程的运行" class="headerlink" title="2、终止线程的运行"></a>2、终止线程的运行</h3><p>一个线程正常执行完run方法之后会自动结束，如果在运行过程中发生异常也会提前结束；所以利用这两种情况，我们还可以通过以下三种种方式安全的终止运行中的线程：</p><h4 id="2-1、利用中断标志位"><a href="#2-1、利用中断标志位" class="headerlink" title="2.1、利用中断标志位"></a>2.1、利用中断标志位</h4><p>前面讲到的中断操作就可以用来取消线程任务，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!isInterrupted())&#123;<span class="comment">//利用中断标记位</span></span><br><span class="line">            System.out.println(<span class="string">"InterruptThread正在执行"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当不需要运行InterruptThread线程时，通过调用InterruptThread.interrupt()使得isInterrupted()返回true，就可以让线程退出循环，正常执行完毕之后自动结束。</p><h4 id="2-2、利用一个boolean变量"><a href="#2-2、利用一个boolean变量" class="headerlink" title="2.2、利用一个boolean变量"></a>2.2、利用一个boolean变量</h4><p>利用一个boolean变量和上述方法同理，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> isCancel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!isCancel)&#123;<span class="comment">//利用boolean变量</span></span><br><span class="line">            System.out.println(<span class="string">"InterruptThread正在执行"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        isCancel = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当不需要运行InterruptThread线程时，通过调用InterruptThread.cancel()使isCancel等于true，就可以让线程退出循环，正常执行完毕之后自动结束，这里要注意boolean变量要用volatile修饰保证内存的可见性。</p><h4 id="2-3、响应InterruptedException"><a href="#2-3、响应InterruptedException" class="headerlink" title="2.3、响应InterruptedException"></a>2.3、响应InterruptedException</h4><p>通过调用一个线程的 interrupt() 来中断该线程时，如果该线程处于阻塞、限期等待或者无限期等待状态，那么就会抛出 InterruptedException，从而提前结束该线程，例如当你调用Thread.sleep()方法时，通常会让你捕获一个InterruptedException异常，如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);<span class="comment">//Thread.sleep会抛出InterruptedException</span></span><br><span class="line">                System.out.println(<span class="string">"InterruptThread正在执行"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当不需要运行InterruptThread线程时，通过调用InterruptThread.interrupt()使得 Thread.sleep() 抛出InterruptedException，就可以让线程退出循环，提前结束。在抛出InterruptedException异常之前，JVM会把中断标识位复位，此时调用线程的isInterrupted()方法将会返回false。</p><h2 id="四、线程的生命周期"><a href="#四、线程的生命周期" class="headerlink" title="四、线程的生命周期"></a>四、线程的生命周期</h2><h3 id="1、线程的6种状态"><a href="#1、线程的6种状态" class="headerlink" title="1、线程的6种状态"></a>1、线程的6种状态</h3><p>线程也是有生命周期，也就是存在不同的状态，状态之间相互转换，线程可以处于以下的状态之一：</p><h4 id="1-1、NEW-新建状态"><a href="#1-1、NEW-新建状态" class="headerlink" title="1.1、NEW(新建状态)"></a>1.1、NEW(新建状态)</h4><p>使用new创建一个线程对象，但还没有调用线程的start方法，<strong>Thread t = new Thread()</strong>，此时属于新建状态。</p><h4 id="1-2、RUNNABLE-可运行状态"><a href="#1-2、RUNNABLE-可运行状态" class="headerlink" title="1.2、RUNNABLE(可运行状态)"></a>1.2、RUNNABLE(可运行状态)</h4><p>但在新建状态下线程调用了start方法，<strong>t.start()</strong>，此时进入了可运行状态。可运行状态又分为两种状态：</p><ul><li>ready(就绪状态)：线程对象调用stat方法后，等待JVM的调度，此时线程并没有运行。</li><li>running(运行状态)：线程对象获得JVM调度，此时线程开始运行，如果存在多个CPU，那么允许多个线程并行运行。</li></ul><p>线程的start方法只能调用一次，否则报错（IllegalThreadStateException）。</p><h4 id="1-3、BLOCKED-阻塞状态"><a href="#1-3、BLOCKED-阻塞状态" class="headerlink" title="1.3、BLOCKED(阻塞状态)"></a>1.3、BLOCKED(阻塞状态)</h4><p>正在运行的线程因为某些原因放弃CPU，暂时停止运行，就会进入阻塞状态，此时JVM不会给该线程分配CPU，直到线程重新进入就绪状态，才有机会转到运行状态，阻塞状态只能先进入就绪状态，不能跳过就绪状态直接进入运行状态。线程进入阻塞状态常见的情况有：</p><ul><li>1、当A线程处于运行状态时，试图获取同步锁，却被B线程获取，此时JVM把当前A线程放到对象的锁池(同步队列)中，A线程进入阻塞状态，等待获取对象的同步锁。</li><li>2、当线程处于运行状态时，发出了IO请求，此时进入阻塞状态。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps: 如果是使用Synchronize关键字，那么尝试获取锁的线程会进入BLOCKED状态；如果是使用java.util.concurrent 类库中的Lock，那么尝试获取锁的线程则会进入WAITING或TIMED WAITING状态，因为java.util.concurrent 类库中的Lock是使用LockSupport来进行同步的。</span><br></pre></td></tr></table></figure><h4 id="1-4、WAITING-等待状态"><a href="#1-4、WAITING-等待状态" class="headerlink" title="1.4、WAITING(等待状态)"></a>1.4、WAITING(等待状态)</h4><p>正在运行的线程调用了无参数的wait方法，此时JVM把该线程放入对象的等待池（等待队列）中，此时线程进入等待状态，等待状态的线程只能被其他线程唤醒，否则不会被分配 CPU 时间片。下面是让线程进入等待状态的方法：</p><table><thead><tr><th>进入方法</th><th>退出方法</th></tr></thead><tbody><tr><td>无Timeout参数的Object.wait()</td><td>Object.notify() / Object.notifyAll()</td></tr><tr><td>无Timeout参数的Thread.join() 方法</td><td>被调用的线程执行完毕</td></tr><tr><td>LockSupport.park() 方法</td><td>LockSupport.unpark(Thread)</td></tr></tbody></table><h4 id="1-5、TIMED-WAITING-计时等待状态"><a href="#1-5、TIMED-WAITING-计时等待状态" class="headerlink" title="1.5、TIMED WAITING(计时等待状态)"></a>1.5、TIMED WAITING(计时等待状态)</h4><p>正在运行的线程调用了有参数的wait方法，此时JVM把该线程放入对象的等待池中，此时线程进入计时等待状态，计时等待状态的线程被其它线程显式地唤醒，在一定时间之后会被系统自动唤醒。下面是让线程进入等待状态的方法：</p><table><thead><tr><th>进入方法</th><th>退出方法</th></tr></thead><tbody><tr><td>调用Thread.sleep(int timeout) 方法</td><td>时间结束</td></tr><tr><td>有Timeout 参数的 Object.wait() 方法</td><td>时间结束 / Object.notify() / Object.notifyAll()</td></tr><tr><td>有Timeout 参数的 Thread.join() 方法</td><td>时间结束 / 被调用的线程执行完毕</td></tr><tr><td>LockSupport.parkNanos() 方法</td><td>LockSupport.unpark(Thread)</td></tr><tr><td>LockSupport.parkUntil() 方法</td><td>LockSupport.unpark(Thread)</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps：阻塞和等待的区别在于，阻塞是被动的，它是在等待获取一个排它锁。而等待是主动的，通过调用 Thread.sleep() 和 Object.wait() 等方法进入。</span><br></pre></td></tr></table></figure><h4 id="1-6、TREMINATED-终止状态"><a href="#1-6、TREMINATED-终止状态" class="headerlink" title="1. 6、TREMINATED(终止状态)"></a>1. 6、TREMINATED(终止状态)</h4><p>又称死亡状态，表示线程的终止。线程进入终止状态的情况有：</p><ul><li>1、正常执行完run方法，线程正常退出。</li><li>2、遇到异常而退出</li></ul><p>线程一旦终止了，就不能再次启动，否则报错（IllegalThreadStateException）</p><h3 id="2、线程的状态转换图"><a href="#2、线程的状态转换图" class="headerlink" title="2、线程的状态转换图"></a>2、线程的状态转换图</h3><img src="/2019/07/19/java%E7%BA%BF%E7%A8%8B/thread1.png" class="" title="thread1"><h2 id="六、线程之间的通信"><a href="#六、线程之间的通信" class="headerlink" title="六、线程之间的通信"></a>六、线程之间的通信</h2><p>如果一个线程从头到尾的执行完一个任务，不需要和其他线程打交道的话，那么就不会存在安全性问题了，由于java内存模式的存在，如下：</p><img src="/2019/07/19/java%E7%BA%BF%E7%A8%8B/thread2.png" class="" title="thread2"><p>每一个java线程都有自己的工作内存，线程之间要想协作完成一个任务，就必须通过主内存来通信，所以这里就涉及到对共享资源的竞争，在主内存中的东西都是线程之间共享，所以这里就必须通过一些手段来让线程之间完成正常通信。主要有以下两种方法：</p><h3 id="1、wait-notify-notifyAll-机制"><a href="#1、wait-notify-notifyAll-机制" class="headerlink" title="1、wait() / notify()  notifyAll() 机制"></a>1、wait() / notify()  notifyAll() 机制</h3><p>它们都是Object类中的方法，它们的主要作用如下：</p><ul><li>wait()：执行该方法的线程对象释放同步锁（这是因为，如果没有释放锁，那么其它线程就无法进入对象的同步方法或者同步控制块中，那么就无法执行 notify() 或者 notifyAll() 来唤醒挂起的线程，造成死锁），然后JVM把该线程存放在等待池中，等待其他线程唤醒该线程</li><li>notify()：执行该方法的线程唤醒在等待池中等待的任意一个线程，把线程转到锁池中等待</li><li>notifyAll()：执行该方法的线程唤醒在等待池中等待的所有线程，把线程转到锁池中等待</li></ul><p>注意：上述方法只能在同步方法或者同步代码中使用，否则会报IllegalMonitorStateException异常，还有上述方法只能被同步监听锁对象来调用，不能使用其他对象调用，否则会报IllegalMonitorStateException异常。</p><p>假设A线程和B线程共同操作一个X对象，A、B线程可以通过X对象的wait方法和notify方法进行通信，流程如下：</p><p>1、当A线程执行X对象的同步方法时，A线程持有X对象的锁，则B线程没有执行同步方法的机会，B线程在X对象的锁池中等待。</p><p>2、A线程在同步方法中执行X.wait()时，A线程释放X对象的锁，进入X对象的等待池中。</p><p>3、在X对象的锁池中等待获取锁的B线程在这时获取X对象的锁，执行X对象的另一个同步方法。</p><p>4、B线程在同步方法中执行X.notify()或notifyAll()时，JVM把A线程从X对象的等待池中移到X对象的锁池中，等待获取锁。</p><p>5、B线程执行完同步方法，释放锁，A线程获取锁，从上次停下来的地方继续执行同步方法。</p><p>下面以一个ATM机存钱取钱的例子说明，ATM机要在银行把钱存进去后，其他人才能取钱，如果没钱取，只能先回家等待，等银行通知你有钱取了，再来取，如果有钱取，就直接取钱。</p><p>ATM机，存钱和取钱方法都是同步方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ATM</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isEmpty = <span class="keyword">true</span>;<span class="comment">//标志ATM是否有钱的状态</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往ATM机中存钱</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> money)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//ATM中有钱，等待被人把钱取走</span></span><br><span class="line">            <span class="keyword">while</span> (!isEmpty)&#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//ATM中没钱了，开始存钱</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + <span class="string">"发现ATM机没钱了，存钱中..."</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            <span class="keyword">this</span>.money = money;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + <span class="string">"存钱完毕，存了"</span> + money + <span class="string">"元"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//存钱完毕，把标志置为false</span></span><br><span class="line">            isEmpty = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//ATM中有钱了，通知别人取钱</span></span><br><span class="line">            <span class="keyword">this</span>.notify();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从ATM机中取钱</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//ATM中没钱取，等待通知</span></span><br><span class="line">                <span class="keyword">while</span> (isEmpty)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + <span class="string">"ATM机没钱，等待中..."</span>);</span><br><span class="line">                    <span class="keyword">this</span>.wait();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//ATM中有钱了，开始取钱</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + <span class="string">"收到通知，取钱中..."</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":"</span>+ <span class="string">"取出完毕，取出了"</span> + <span class="keyword">this</span>.money + <span class="string">"钱"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//取钱完毕，把标志置为true</span></span><br><span class="line">                isEmpty = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//ATM没钱了，通知银行存钱</span></span><br><span class="line">                <span class="keyword">this</span>.notify();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>银行， 需要传入同一个ATM示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blank</span> <span class="keyword">implements</span>  <span class="title">Runnable</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ATM mAtm;<span class="comment">//共享资源</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Blank</span><span class="params">(ATM atm)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mAtm = atm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//银行来存钱</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">            mAtm.push(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小明， 需要传入同一个ATM示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ATM mAtm;<span class="comment">//共享资源</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(ATM atm)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mAtm = atm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这个人来取钱</span></span><br><span class="line">        mAtm.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端操作，我特地让小明提前来取钱，此时ATM机中是没钱的，小明要等待：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//创建一个ATM机</span></span><br><span class="line">       ATM atm = <span class="keyword">new</span> ATM();</span><br><span class="line">       <span class="comment">//小明来取钱</span></span><br><span class="line">       Thread tPerson = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Person(atm), <span class="string">"XiaoMing"</span>);</span><br><span class="line">       tPerson.start();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//银行来存钱</span></span><br><span class="line">       Thread tBlank = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Blank(atm), <span class="string">"Blank"</span>);</span><br><span class="line">       tBlank.start();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">XiaoMing:ATM机没钱，等待中...</span><br><span class="line">Blank:发现ATM机没钱了，存钱中...</span><br><span class="line">Blank:存钱完毕，存了<span class="number">100</span>元</span><br><span class="line">XiaoMing:收到通知，取钱中...</span><br><span class="line">XiaoMing:取出完毕，取出了<span class="number">100</span>钱</span><br><span class="line">Blank:发现ATM机没钱了，存钱中...</span><br><span class="line">Blank:存钱完毕，存了<span class="number">100</span>元</span><br></pre></td></tr></table></figure><p>可以看到，小明总是在收到ATM的通知后才来取钱，如果通过这个存钱取钱的例子还不了解wait/notify机制的话，可以看看这个<a href="https://mp.weixin.qq.com/s/OriB-ouTDuCzquoFmjv9Lg" target="_blank" rel="noopener">修厕所的例子</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps: wait() 和 sleep() 的区别是什么，首先wait()是Object的方法，而sleep()是Thread的静态方法，其次调用wait()会释放同步锁，而sleep()不会，最后一点不同的是调用&#96;wait&#96;方法需要先获得锁，而调用&#96;sleep&#96;方法是不需要的。</span><br></pre></td></tr></table></figure><h3 id="2、await-signal-signalAll-机制"><a href="#2、await-signal-signalAll-机制" class="headerlink" title="2、await()  / signal() signalAll()机制"></a>2、await()  / signal() signalAll()机制</h3><p>从java5开始，可以使用Lock机制取代synchronized代码块和synchronized方法，使用java.util.concurrent 类库中提供的Condition 接口的await / signal() signalAll()方法取代Object的wait() / notify()  notifyAll() 方法。</p><p>下面使用Lock机制和Condition 提供的方法改写上面的那个例子，如下：</p><p>ATM2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ATM2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isEmpty = <span class="keyword">true</span>;<span class="comment">//标志ATM是否有钱的状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Lock mLock = <span class="keyword">new</span> ReentrantLock();<span class="comment">//新建一个lock</span></span><br><span class="line">    <span class="keyword">private</span> Condition mCondition = mLock.newCondition();<span class="comment">//通过lock的newCondition方法获得一个Condition对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往ATM机中存钱</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> money)</span></span>&#123;</span><br><span class="line">        mLock.lock();<span class="comment">//获取锁</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//ATM中有钱，等待被人把钱取走</span></span><br><span class="line">            <span class="keyword">while</span> (!isEmpty)&#123;</span><br><span class="line">                mCondition.await();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//ATM中没钱了，开始存钱</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + <span class="string">"发现ATM机没钱了，存钱中..."</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            <span class="keyword">this</span>.money = money;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + <span class="string">"存钱完毕，存了"</span> + money + <span class="string">"元"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//存钱完毕，把标志置为false</span></span><br><span class="line">            isEmpty = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//ATM中有钱了，通知别人取钱</span></span><br><span class="line">            mCondition.signal();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            mLock.unlock();<span class="comment">//释放锁</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从ATM机中取钱</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        mLock.lock();<span class="comment">//获取锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//ATM中没钱取，等待通知</span></span><br><span class="line">            <span class="keyword">while</span> (isEmpty)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + <span class="string">"ATM机没钱，等待中..."</span>);</span><br><span class="line">                 mCondition.await();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//ATM中有钱了，开始取钱</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + <span class="string">"收到通知，取钱中..."</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":"</span>+ <span class="string">"取出完毕，取出了"</span> + <span class="keyword">this</span>.money + <span class="string">"钱"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//取钱完毕，把标志置为true</span></span><br><span class="line">            isEmpty = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//ATM没钱了，通知银行存钱</span></span><br><span class="line">            mCondition.signal();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            mLock.unlock();<span class="comment">//释放锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到ATM2改写ATM后，把方法的synchronized去掉，因为Lock机制没有同步锁的概念，然后获取lock锁，在finally里释放lock锁，还把原本Object.wait()用Condition.await()代替，原本Object.notify()用Condition.signal()代替。</p><p>客户端操作只是把ATM换成ATM2，输出结果和上面的一样，就不在累述。</p><h3 id="3、死锁"><a href="#3、死锁" class="headerlink" title="3、死锁"></a>3、死锁</h3><p>多线程通信的时候很容易造成死锁，死锁一旦发生，只能通过外力解决。</p><p><strong>死锁是什么？</strong></p><p>当A线程等待获取由B线程持有的锁，而B线程正在等待获取由A线程持有的锁，发生死锁现象，JVM既不检测也不会避免这种情况，所以程序员必须保证不导致死锁。</p><blockquote><p>官方定义：如果一组进程中的每一个进程都在等待仅由该进程组中的其他进程才能引发的事件，那么该组进程就是死锁。</p></blockquote><p><strong>产生死锁的原因？</strong></p><p>多个线程对<strong>不可抢占性资源</strong>或<strong>可消耗性资源</strong>的进行争夺时，可能会产生死锁。</p><p><strong>产生死锁的必要条件？</strong></p><p>同时满足以下4个条件，就会产生死锁：</p><p>1、 互斥条件：线程对分配到的资源进行排他性使用；</p><p>2、 请求和保持条件：线程已经保持了至少一个资源，又提出了新的资源请求;</p><p>3、 不可抢占条件: 线程已获得的资源在未使用完之前不能被抢占；</p><p>4、 循环等待条件：发生死锁时，一定存在一个线程-资源的循环链。</p><p><strong>如何预防死锁？</strong></p><p>在程序运行之前，可以通过以下3点来预防死锁：</p><p>1、破坏必要条件中的一个或几个就行；</p><p>2、当多个线程都要访问共享资源A、B、C时，保证每一个线程都按照相同的顺序去访问去访问他们，比如先访问A，接着访问B，最后访问C；</p><p>3、不要使用Thread类中过时的方法，因为容易导致死锁，所以被废弃，例如A线程获得对象锁，正在执行一个同步方法，如果B线程调用A线程的suspend()，此时A线程暂停运行，放弃CPU，但是不会放弃锁，所以B就永远不会得到A持有的锁。</p><blockquote><p>在操作系统中，还可以在程序运行时，通过<strong>银行家算法</strong>来避免死锁。</p></blockquote><p><strong>解决死锁的办法？</strong></p><p>1、从一个或多个线程中，抢占足够数量的资源分配给死锁线程，解决死锁状态；</p><p>2、终止或撤销系统中一个或多个线程，直到打破死锁状态。</p><blockquote><p>上面对死锁讨论的所有情况，同样适用于进程，线程就是””轻量级进程””。</p></blockquote><h3 id="4、-Thread类中过时的方法"><a href="#4、-Thread类中过时的方法" class="headerlink" title="4、 Thread类中过时的方法"></a>4、 Thread类中过时的方法</h3><p>由于线程安全问题，被弃用，如下：</p><ul><li>void suspend()：暂停当前线程。</li><li>void resume()：恢复当前线程。</li><li>void stop()：结束当前线程</li></ul><p>suspend()方法在调用之后不会释放已经占有的资源(锁)，然后进入睡眠状态，这样很容易导致死锁； stop()方法直接终止线程，不会保证线程资源的正常释放，导致程序处于不确定状态。对于suspend()和 resume()可以用上面提到的等待/通知机制代替，而 stop()方法可以用上面提到的终止线程运行的3种方式代替。</p><h2 id="七、线程的控制操作"><a href="#七、线程的控制操作" class="headerlink" title="七、线程的控制操作"></a>七、线程的控制操作</h2><p>下面来看一些可以控制线程的操作。</p><h3 id="1、线程休眠"><a href="#1、线程休眠" class="headerlink" title="1、线程休眠"></a>1、线程休眠</h3><p>让执行的线程暂停等待一段时间，进入计时等待状态，使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用sleep()后，当前线程放弃CPU，在指定的时间段内，sleep所在的线程不会获得执行的机会，在此状态下该线程不会释放同步锁。</p><h3 id="2、联合线程"><a href="#2、联合线程" class="headerlink" title="2、联合线程"></a>2、联合线程</h3><p>在线程中调用另一个线程的 join() 方法，会将当前线程置于阻塞状态，等待另一个线程完成后才继续执行，原理就是等待/通知机制，使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"JoinThread执行完毕！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        JoinThread joinThread = <span class="keyword">new</span> JoinThread();</span><br><span class="line">        joinThread.start();</span><br><span class="line">        System.out.println(<span class="string">"主线程等待..."</span>);</span><br><span class="line">        joinThread.join();<span class="comment">//主线程等join线程执行完毕后才继续执行</span></span><br><span class="line">        System.out.println(<span class="string">"主线程执行完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">主线程等待...</span><br><span class="line">JoinThread执行完毕！</span><br><span class="line">主线程执行完毕</span><br></pre></td></tr></table></figure><p>对于以上代码，主线程会等join线程执行完毕后才继续执行，因此最后的结果能保证join线程的输出先于主线程的输出。</p><h3 id="3、后台线程"><a href="#3、后台线程" class="headerlink" title="3、后台线程"></a>3、后台线程</h3><p>顾名思义，在后台运行的线程，其目的是为其他线程提供服务，也称“守护线程”，JVM的垃圾回收线程就是典型的后台线程，通过<strong>t.setDaemon(true)</strong>把一个线程设置为后台线程，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeamonThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//主线程不是后台线程，是前台线程</span></span><br><span class="line">        DeamonThread deamonThread = <span class="keyword">new</span> DeamonThread();</span><br><span class="line">        deamonThread.setDaemon(<span class="keyword">true</span>);<span class="comment">//设置子线程为后台线程</span></span><br><span class="line">        deamonThread.start();</span><br><span class="line">        <span class="comment">//通过deamonThread.isDaemon()判断是否是后台线程</span></span><br><span class="line">        System.out.println(deamonThread.isDaemon());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">输出结果：<span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>后台线程有以下几个特点：</p><p>1、若所有的前台线程死亡，后台线程自动死亡，若前台线程没有结束，后台线程是不会结束的。</p><p>2、前台线程创建的线程默认是前台线程，可以通过setDaemon(true)设置为后台线程，在后台线程创建的新线程，新线程是后台线程。</p><p>注意：t.setDaemon(true)方法必须在start方法前调用，否则会报IllegalMonitorStateException异常</p><h3 id="4、线程优先级"><a href="#4、线程优先级" class="headerlink" title="4、线程优先级"></a>4、线程优先级</h3><p>当线程的时间片用完时就会发生线程调度，而线程优先级就是决定线程需要多或少分配一些CPU时间片的线程属性，在java中，通过一个成员变量priority来控制优先级，在线程构建时可以通过setPriority(int)方法来修改线程的优先级，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    PriorityThread priorityThread = <span class="keyword">new</span> PriorityThread();</span><br><span class="line">    priorityThread.setPriority(Thread.MAX_PRIORITY);<span class="comment">//10</span></span><br><span class="line">    priorityThread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优先级范围从1到10，默认是5，优先级高的线程分配的时间片数量要多于优先级低的线程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps: 在不同的JVM以及操作系统上，线程优先级规划会有差异，有些操作系统会忽略对线程优先级的设定，所以线程优先级不能作为程序正确性的依赖保证，因为操作系统可以完全不用理会线程优先级的设定</span><br></pre></td></tr></table></figure><h3 id="5、线程礼让"><a href="#5、线程礼让" class="headerlink" title="5、线程礼让"></a>5、线程礼让</h3><p>对静态方法 Thread.yield() 的调用，声明了当前线程已经完成了生命周期中最重要的部分，可以切换给其它线程来执行。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YieldThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"已经完成重要部分，可以让其他线程获取CPU时间片"</span>);</span><br><span class="line">        Thread.yield();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法只是对线程调度器的一个建议，而且也只是建议具有相同优先级的其它线程可以运行。也就是说，就算你执行了这个方法，该线程还是有可能继续运行下去。</p><h3 id="6、线程组"><a href="#6、线程组" class="headerlink" title="6、线程组"></a>6、线程组</h3><p>java.lang.ThreadGroup类表示线程组，可以对一组线程进行集中管理，当用户在创建线程对象时，可以通过构造器指定其所属的线程组：Thread(ThreadGroup group, String name)。</p><p>如果A线程创建B线程，如果没有设置B线程的分组，那么B线程加入到A线程的线程组，一旦线程加入某个线程组，该线程就一直存在于该线程组中直到线程死亡，不能在中途修改线程的分组。</p><p>当java程序运行时，JVM会创建名为main的线程组，在默认情况下，所以的线程都属于该线程组。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文到这里就结束了，在平时开发中我们一般都只会使用线程，但却很少去了解线程的生命周期、通信机制等，但我们不要忽略掉这些知识点，它们都是<strong>面试常客</strong>，也是非常的重要，在java中，一般不推荐你直接<strong>new</strong>一个线程使用，如果你需要创建的线程数量非常多的话，这时就需要使用<a href="https://blog.csdn.net/Rain_9155/article/details/90757694" target="_blank" rel="noopener"><strong>线程池</strong></a>来帮助你管理线程的创建，在线程的内部中，还有一个用于存储数据的<strong>Map集合</strong>，java提供了一个<a href="https://blog.csdn.net/Rain_9155/article/details/86768467" target="_blank" rel="noopener"><strong>ThreadLocal</strong></a>类来操作这些集合，ThreadLocal在多线程环境下可以很好的保证了这些数据只能为本线程使用，从而避免了并发问题。</p><p>以上就是我对线程的总结，希望对大家有所帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在java中，线程非常重要，我们要分清楚进程和线程的区别：进程是操作系统中&lt;strong&gt;资源分配&lt;/strong&gt;的基本单位，进程是指一个内存中运行的应用程序，每个进程都拥有自己的一块独立的内存空间，进程之间的资源不共享；而线程是&lt;strong&gt;CPU调度&lt;/strong&gt;的最小单元，一个进程可以有多个线程，线程之间的堆空间是共享的，但栈空间是独立的，java程序的进程至少包含主线程和后台线程(垃圾回收线程)。了解这些知识后，来看下文有关线程的知识。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="线程" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java学习总结之基础</title>
    <link href="http://yoursite.com/2019/07/19/java%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/07/19/java%E5%9F%BA%E7%A1%80/</id>
    <published>2019-07-19T04:24:58.000Z</published>
    <updated>2023-01-07T10:44:48.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>万事开头难，准备从零把java相关知识点捡起来，把自己所学的Java知识点归纳，下面是关于java的一些基本知识点。</p><a id="more"></a><h2 id="java代码的运行过程"><a href="#java代码的运行过程" class="headerlink" title="java代码的运行过程"></a>java代码的运行过程</h2><img src="/2019/07/19/java%E5%9F%BA%E7%A1%80/java1.png" class="" title="java1"><ul><li>创建java源程序，扩展名为.java</li><li>使用javac命令编译源程序为字节码文件，扩展名为.class</li><li>使用java命令运行字节码文件，在不同平台执行</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>下面用一张表概括：</p><table><thead><tr><th align="center">数据类型</th><th align="center">类型说明符</th><th align="center">位数</th><th align="center">字节</th></tr></thead><tbody><tr><td align="center">整形</td><td align="center">int</td><td align="center">32</td><td align="center">4</td></tr><tr><td align="center">短整型</td><td align="center">short</td><td align="center">16</td><td align="center">2</td></tr><tr><td align="center">长整形</td><td align="center">long</td><td align="center">64</td><td align="center">8</td></tr><tr><td align="center">字节型</td><td align="center">byte</td><td align="center">8</td><td align="center">1</td></tr><tr><td align="center">单精度浮点型</td><td align="center">float</td><td align="center">32</td><td align="center">4</td></tr><tr><td align="center">双精度浮点型</td><td align="center">double</td><td align="center">64</td><td align="center">8</td></tr><tr><td align="center">字符类型</td><td align="center">char</td><td align="center">16</td><td align="center">2</td></tr><tr><td align="center">布尔类型</td><td align="center">boolean</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">字符串类型</td><td align="center">String</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">自定义类型</td><td align="center">public class …</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">其中java的数据类型又分为：</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">* 基本类型/原始类型（primitive type）：用来保存简单的单个数据，如：int、short、long、byte、float、double、boolean、char共8种。</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><ul><li>类类型/引用类型（class type or reference types）：用来保存复杂的组合数据，如String和自定义类型。</li></ul><p>在java中，char类型实际是一个16位的无符号整数（&lt;=65535），可以保存中文和转义字符(<code>\b</code>,<code>\t</code>,<code>\n</code>等)。</p><p>而在java中并没有明确的表示boolean类型应该占多少位，其大小与JVM实现相关，JVM的建议如下：</p><p>1、boolean 类型应该被编译成 int 类型来使用，占 4 个字节；</p><p>2、boolean 数组应该被编译成 byte 数组类型，每个 boolean 数组成员占 1 个 字节.</p><p>可以肯定的是，boolean 类型不会只占 1 个位，boolean 类型的大小与JVM实现相关。</p><h2 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line"></span><br><span class="line">    数据类型 变量<span class="number">1</span>；<span class="comment">//成员变量</span></span><br><span class="line">    </span><br><span class="line">    返回值类型 方法名()&#123;</span><br><span class="line">    </span><br><span class="line">        数据类型 变量<span class="number">2</span>；<span class="comment">//局部变量</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、成员变量的作用域在整个类都是可见的。<br>2、局部变量的作用域仅在定义它们的方法中可见。<br>3、成员变量有默认的初始值（数字为0，对象为null）。<br>4、局部变量没有默认的初始值，需要赋初值再使用。<br>5、成员变量和局部变量重名时，局部变量的优先级更高。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="1、String类型"><a href="#1、String类型" class="headerlink" title="1、String类型"></a>1、String类型</h3><p>在java中String是引用类型，它的构造器如下：</p><img src="/2019/07/19/java%E5%9F%BA%E7%A1%80/java2.png" class="" title="java2"><p>除了用以上new的方法创建一个字符串，还可以用以下方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String name1 = <span class="string">"rain"</span>;</span><br><span class="line">String name2 = <span class="string">"rain"</span>;</span><br></pre></td></tr></table></figure><p>那么用<code>new</code>和用<code>=</code>有什么不同的呢? new出来字符串是一个String对象，它被放在堆中，地址不一样。用=赋值的字符串是从字符串池（String Pool，保存着所有字符串字面量，这些字面量在编译时期就确定）中拿的，如果这个字符串在池中没有，就会先放进池，所以上面两个name1和name2是同一个字符串。</p><p><strong>String中常用的方法：</strong></p><img src="/2019/07/19/java%E5%9F%BA%E7%A1%80/java3.png" class="" title="java3"><p><strong>String的比较：</strong></p><img src="/2019/07/19/java%E5%9F%BA%E7%A1%80/java4.png" class="" title="java4"><p><strong>获取String的字串的方法：</strong></p><img src="/2019/07/19/java%E5%9F%BA%E7%A1%80/java5.png" class="" title="java5"><p>在 Java 8 中，String 内部使用 char 数组存储数据，在 Java 9 之后，String 类的实现改用 byte 数组存储字符串，这些数组在都用final修饰，所以才保证String是<strong>不可变</strong>的，不可变就是每次意图修改String，都会产生一个新的String对象。</p><blockquote><p>1、在字符串的比较中<code>==</code>是用来比较地址的，String的equals方法才是用来比较两个字符串是否相等 ；<br>2、在 Java 7 之前，String Pool 被放在运行时常量池中，它属于永久代，而在 Java 7，String Pool 被移到堆中。这是因为永久代的空间有限，在大量使用字符串的场景下会导致 OutOfMemoryError 错误。</p></blockquote><h3 id="2、StringBuffer和StringBuilder"><a href="#2、StringBuffer和StringBuilder" class="headerlink" title="2、StringBuffer和StringBuilder"></a>2、StringBuffer和StringBuilder</h3><p>与String类不同的是，StringBuffer和StringBuilder是<strong>可变</strong>的，它们的对象可以被多次修改，因为它里面的数组并没有使用final修饰，所以每次意图修改StringBuffer或StringBuilder对象时，都会在原始对象上进行修改，不会产生新的对象，StringBuilder是在JDK5中被提出来的，它和StringBuffer之间最大的不同是StringBuilder的方法都不是线程安全的，而StringBuffer的方法都是线程安全的。</p><p><strong>StringBuffer的构造方法（StringBuilder类似）：</strong></p><img src="/2019/07/19/java%E5%9F%BA%E7%A1%80/java6.png" class="" title="java6"><p><strong>StringBuffer的常用方法：</strong></p><img src="/2019/07/19/java%E5%9F%BA%E7%A1%80/java7.png" class="" title="java7"><h3 id="3、字符串的拼接"><a href="#3、字符串的拼接" class="headerlink" title="3、字符串的拼接"></a>3、字符串的拼接</h3><p>在java中，可以通过<strong>+</strong>、String的<strong>concat方法</strong>、StringBuilder的<strong>append</strong>方法和StringBuffer的<strong>append</strong>方法来拼接字符串，如下：</p><p><strong>使用+拼接：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str1 = <span class="string">"Hello"</span>;</span><br><span class="line">    String str2 = <span class="string">"World!"</span>;</span><br><span class="line">    String str = str1 + <span class="string">" "</span> + str2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译后，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str1 = <span class="string">"Hello"</span>;</span><br><span class="line">    String str2 = <span class="string">"World!"</span>;</span><br><span class="line">    String str = (<span class="keyword">new</span> StringBuilder()).append(str1).append(<span class="string">" "</span>).append(str2).toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到使用<strong>+</strong>拼接字符串时，底层会new一个StringBuilder对象，调用StringBuilder的append方法来拼接。</p><p><strong>使用String的concat方法拼接：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str1 = <span class="string">"Hello"</span>;</span><br><span class="line">    String str2 = <span class="string">"World!"</span>;</span><br><span class="line">    String str = str1.concat(<span class="string">" "</span>).concat(str2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看String的concat方法的源码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">concat</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> olen = str.length();</span><br><span class="line">    <span class="keyword">if</span> (olen == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">int</span> len = length();</span><br><span class="line">    <span class="comment">//创建一个新的长度的字节数组，新长度 = 原始字符串长度len + 要拼接字符串长度olen</span></span><br><span class="line">    <span class="keyword">byte</span>[] buf = StringUTF16.newBytesFor(len + olen);</span><br><span class="line">    <span class="comment">//把原始字符串的字节数组复制到buf中</span></span><br><span class="line">    getBytes(buf, <span class="number">0</span>, UTF16);</span><br><span class="line">    <span class="comment">//把要拼接的字符串的字节数组复制到buf中</span></span><br><span class="line">    str.getBytes(buf, len, UTF16);</span><br><span class="line">    <span class="comment">//通过buf创建一个String返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(buf, UTF16);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到concat方法底层是新创建一个字节数组，长度为原始字符串长度和要拼接字符串长度之和，然后把原始字符串和要拼接字符串的字节数组复制到新的字节数组中，最后通过新的字节数组创建一个新的String对象返回，所以String的concat方法最终会返回一个新的String对象，这也说明了String的<strong>不可变性</strong>，不会修改原始字符串的字节数组到达拼接字符串的目的。</p><p><strong>使用StringBuilder和StringBuffer的append方法拼接：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以StringBuilder举例，StringBuffer类似</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str1 = <span class="string">"Hello"</span>;</span><br><span class="line">    String str2 = <span class="string">"World!"</span>;</span><br><span class="line">    StringBuilder str = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    str.append(str1).append(<span class="string">" "</span>).append(str2).toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看StringBuilder的append方法的源码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.append(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//StringBuilder的父类AbstractStringBuilder中的append方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> appendNull();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> len = str.length();</span><br><span class="line">    <span class="comment">//扩容内部的字节数组，扩容后长度 = 原始字符串长度count + 要拼接的字符串长度len</span></span><br><span class="line">    ensureCapacityInternal(count + len);</span><br><span class="line">    <span class="comment">//把要拼接的字符串追加到内部的字节数组</span></span><br><span class="line">    putStringAt(count, str);</span><br><span class="line">    count += len;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，StringBuilder的append方法会直接拷贝待拼接的字符串字节数组到<strong>内部的字节数组</strong>中，如果内部的字节数组长度不够，就会先扩容后再拷贝，所以append方法并不会产生新的StringBuilder对象，对于StringBuffer的append方法，它和StringBuilder的append方法的逻辑一样，只是多了一个synchronized关键字。</p><p><strong>效率比较：</strong></p><p>分别使用+、concat方法、StringBuffer和StringBuilder的append方法来拼接字符串，各自的效率怎么样？在单线程环境下的一个for循环中拼接大量字符串，经过测试，它们的效率高低如下：</p><p><strong>StringBuilder &gt; StringBuffer &gt; concat &gt; +</strong></p><p>+效率最低，这是因为每次拼接字符串时，都会new一个StringBuilder对象来拼接，频繁的新建对象是很耗时的，而StringBuffer每次append都需要进行同步，所以它的效率比StringBuilder低。</p><blockquote><p>阿里巴巴Java开发手册建议：在循环体内，使用 <code>StringBuilder</code> 的 <code>append</code> 方法进行字符串的拼接，而不要使用<code>+</code>，因为<code>+</code>会频繁的创建新的<code>StringBuilder</code>对象导致耗费更多的时间和造成内存资源的浪费。</p></blockquote><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>包装类就是将java的基本数据类型打包成对象处理，包装类都在java.lang包中，下面用一个表显示：</p><table><thead><tr><th align="center">基本数据类型</th><th align="center">包装类</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">Interger</td></tr><tr><td align="center">short</td><td align="center">Short</td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">char</td><td align="center">Character</td></tr><tr><td align="center">byte</td><td align="center">Byte</td></tr><tr><td align="center">float</td><td align="center">Float</td></tr><tr><td align="center">double</td><td align="center">Double</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr><tr><td align="center">它涉及到以下两种操作：</td><td align="center"></td></tr><tr><td align="center">### 1、装箱(boxing)</td><td align="center"></td></tr><tr><td align="center">以double装箱为例：</td><td align="center"></td></tr><tr><td align="center"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> num = <span class="number">3.14</span>；</span><br><span class="line">Double dnum1 = <span class="keyword">new</span> Double(num);<span class="comment">//1</span></span><br><span class="line">Double dnum2 = Double.valueOf(num);<span class="comment">//2</span></span><br><span class="line">Double dnum3 = num;<span class="comment">//3</span></span><br></pre></td></tr></table></figure></td><td align="center"></td></tr><tr><td align="center">注释1、2都是手动装箱，注释3是自动装箱。</td><td align="center"></td></tr><tr><td align="center">### 2、拆箱(unboxing)</td><td align="center"></td></tr><tr><td align="center">同样上述double拆箱为例：</td><td align="center"></td></tr><tr><td align="center"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = dnum1;<span class="comment">//1</span></span><br><span class="line">num = dnum2.doubleValue();<span class="comment">//2</span></span><br></pre></td></tr></table></figure></td><td align="center"></td></tr><tr><td align="center">注释1是自动拆箱，注释2是手动拆箱。</td><td align="center"></td></tr></tbody></table><p>除了Double和Float，每个包装类都会有一个默认大小的缓存池，例如Integer，缓存池默认大小是-128-127，缓存池中都是缓存了一些经常使用的值，而对于Double和Float，都是浮点型，它们没有经常使用的值，编译器会在自动装箱过程中会调用 valueOf() 方法，因此多个值相同，且值在缓存池范围内的包装类实例使用自动装箱来创建，那么就会引用相同的对象。</p><blockquote><p>ps:<br>1、包装类没有无参构造，所有包装类的实例都是不可变的，一旦创建对象后，它们的内部值就不能再改变。<br>2、每个基本类型包装类都有常量MAX_VALUE和MIN_VALUE。</p></blockquote><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h3 id="1、final"><a href="#1、final" class="headerlink" title="1、final"></a>1、final</h3><p>防止扩展和重写。</p><ul><li>修饰成员变量：常量（可以是编译时常量，也可以是在运行时被初始化后不能被改变的常量），不可更改（对于基本数据类型，final使数值不能改变，对于引用类型，final使引用不能改变，即不能引用其他对象，但引用本身可以更改）</li><li>修饰方法：不可被重写</li><li>修饰类：不可被继承</li></ul><h3 id="2、static"><a href="#2、static" class="headerlink" title="2、static"></a>2、static</h3><p>可以通过类名直接访问它修饰的属性，静态属性和方法都是优先于类的实例存在。</p><ul><li>修饰变量：称为静态变量（区别于实例变量）、类变量，类的所有实例都共享静态变量，静态变量在内存中只存在一份</li><li>修饰方法：称为静态方法，静态方法必须有实现，它不依赖于任何实例，静态方法中只能调用类的静态属性和静态方法，方法中不能有 this 和 super 关键字</li><li>修饰语句块：称为静态语句块，在类初始化时运行一次</li><li>修饰内部类：称为静态内部类，非静态内部类依赖于外部类的实例，而静态内部类不需要</li></ul><p>存在继承的情况下，初始化顺序为：</p><p>父类(静态变量、静态语句块) -&gt; 子类（静态变量、静态语句块） -&gt; 父类（实例变量、普通语句块）-&gt; 父类（构造函数）-&gt; 子类（实例变量、普通语句块） -&gt; 子类（构造函数）</p><h2 id="关于-、equal-和hashCode"><a href="#关于-、equal-和hashCode" class="headerlink" title="关于==、equal()和hashCode()"></a>关于==、equal()和hashCode()</h2><h3 id="1、"><a href="#1、" class="headerlink" title="1、=="></a>1、==</h3><p>==是一个关系操作符，所以：</p><ul><li>如果左右两边的操作数是基本数据类型，那么X==Y，就是判断左右两边的操作数的值是否相等.</li><li>如果左右两边的操作数是引用数据类型，那么X==Y，就是判断左右两边的操作数的内存地址是否相等.</li></ul><h3 id="2、equal"><a href="#2、equal" class="headerlink" title="2、equal()"></a>2、equal()</h3><p>equal()是用来判断两个对象是否等价，即两个对象是否相等，所以如果要重写一个equal方法，需要做到以下3步：</p><ul><li>先使用<strong>==</strong>判断两个对象的引用是否相等.（地址相同）</li><li>然后使用*<em>instanceof *</em>判断两个对象是否是同一个类型.（类型相同）</li><li>最后比较两个对象的内容是否一致.(内容相同)</li></ul><p>按照上面3步重写的equal方法，满足自反性、对称性、传递性，如下：</p><ul><li>自反性：对于非null的x，x.equal(x)返回true；</li><li>对称性：对于非null的x，y，x.equal(y)返回true当且仅当y.equal(x)返回true；</li><li>传递性：对于非null的x，y，z，如果x.equal(y)返回true，并且y.equal(z)返回true，那么x.equal(z)返回true。</li></ul><h3 id="3、hashCode"><a href="#3、hashCode" class="headerlink" title="3、hashCode()"></a>3、hashCode()</h3><p>hashCode()用来返回一个对象的hash值，它是一个native方法，它主要使用于哈希表中的hash算法，用于定位一个元素的位置，所以当你的对象要作为哈希表中的元素时，你要保证以下几个原则：</p><ul><li>要比较两个对象是否相等，必须使用equal方法，如果相等，那么调用两个对象的 hashCode 方法必须返回相同的结果，即相等的两个对象返回的hashCode必须是相等的.</li><li>如果两个对象根据 equals方法比较是不相等的，则 hashCode 方法不一定得返回不同的整数.</li><li>对同一个对象调用多次hashcode方法必须返回相同的hash值.</li><li>两个不同对象的hashcode可能相等.</li><li>两个不同hashcode的对象一定不相等.</li></ul><p>在使用hashXX集合添加对象时，集合先调用该对象的hashCode方法，根据哈希函数得到对象在哈希表中的位置，如果该位置没有元素，就直接把它存储在该位置上；如果该位置已经有元素了，就调用对象的equal方法与该位置的每个元素逐个比较，如果相等，就更新该元素，如果都不相等，就把该对象的映射添加到这个位置对应的链表中。</p><p>因此在覆盖 equals() 方法时应当总是覆盖 hashCode() 方法，保证等价的两个对象hash值也相等，不然会导致集合中出现重复的元素，一个好的习惯是equals方法中用到的成员变量也必定会在hashcode方法中用到，这样就能保证<strong>两个相等的对象hash值也相等</strong>。</p><blockquote><p>当你没有重写hashCode方法时，它可能返回以下的值：<br>1、随机生成数字；<br>2、对象的内存地址，强制转换为int；<br>3、根据对象的内存地址生成；<br>4、1硬编码（用于敏感性测试）；<br>5、一个序列；<br>6、使用线程状态结合xorshift算法生成。<br>具体返回什么需要看不同JDK版本的实现。</p></blockquote><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>异常就是一种对象(Exception), 表示阻止程序正常执行的错误。异常类的层次结构如下：</p><img src="/2019/07/19/java%E5%9F%BA%E7%A1%80/error1.png" class="" title="error1"><ul><li>1、RuntimeException和Error以及它们的子类都称为免检异常, 这种异常一般是由程序逻辑错误引起的，对于这种异常，可以选择捕获处理，也可以不处理；</li><li>2、除了免检异常，其他异常都称为必检异常，这种异常跟程序运行的上下文环境有关，即使程序设计无误，仍然可能因使用的问题而引发，所以Java强制要求我们必须对这些异常进行处理.</li></ul><p>由于免检异常可能在程序的任何一个地方出现，为了避免过多的使用try-catch块，java语言不强制要求编写代码捕获免检异常，也不要求在方法头显示声明免检异常。</p><h3 id="1、常见的异常类型"><a href="#1、常见的异常类型" class="headerlink" title="1、常见的异常类型"></a>1、常见的异常类型</h3><img src="/2019/07/19/java%E5%9F%BA%E7%A1%80/error2.png" class="" title="error2"><h3 id="2、java中的异常处理机制"><a href="#2、java中的异常处理机制" class="headerlink" title="2、java中的异常处理机制"></a>2、java中的异常处理机制</h3><p>异常处理机制就是可以使程序处理非预期的情景，并继续正常执行，异常处理机制的主要组成如下：</p><ul><li>try：监控有可能产生异常的语句块</li><li>catch：以合理的方式捕获异常</li><li>finally：不管有没有异常，一定会执行的语句块（一般用来释放资源），除了遇到System.exit(0)语句</li><li>throw：手动引发异常</li><li>throws: 指定由方法引发的异常</li></ul><p>所以一个异常捕获处理语句可以如下形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//监控可能产生异常的语句块</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception1 e)&#123;</span><br><span class="line">    <span class="comment">//捕获异常，处理异常，如打印异常信息，日志纪录</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception2 e)&#123;</span><br><span class="line">    <span class="comment">//JDK7后简化写法catch(Exception1|Exception2|Exception3|... e)</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//不管有无异常，一定会执行的语句，用来释放资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>try块中的代码可能会引发多种类型的异常，当引发异常时，会按照catch的顺序进行匹配异常类型，并执行第一个匹配的catch语句。</p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="1、为什么使用泛型"><a href="#1、为什么使用泛型" class="headerlink" title="1、为什么使用泛型"></a>1、为什么使用泛型</h3><p>在java5之前，任何类型的元素都可以“丢进“集合中，元素一旦进入集合中，元素的类型就会被集合忘记，导致从集合中取出的元素都是<strong>Object</strong>类型，需要进行<strong>强制类型转换</strong>后才能变成我们”丢进“集合前的元素类型，这样就导致了以下两个缺点：</p><ul><li>1、编程的复杂度增加：任何从集合中取出的元素都要进行强制类型转换，增加编程的工作量；</li><li>2、运行时容易引发ClassCastException：由于任何类型的元素都可以放进集合中，导致集合中的元素的类型不一致，在取出元素强制类型转换时，就有可能人为地转换错误，引发ClassCastException异常，导致程序崩溃.</li></ul><p>所以为了解决集合编译时不检查类型的问题，就出现了<strong>泛型</strong>，泛型(GenericType)是从java5开始支持的新语法，它又被称为参数化类型<strong>ParameterizedType</strong>，ParameterizedType是java5新增的Type，泛型它表示广泛通用的类型，可以在代码编译期就进行<strong>类型检查</strong>，在创建集合的时候可以动态地指明元素的类型是什么，从而约束所有放进集合的元素<strong>类型一致</strong>，这样从集合中取出元素时就<strong>不需要进行强制类型转换</strong>，从而避免了在运行时出现<strong>ClassCastException</strong>异常，如果把错误类型元素放入集合，编译器就会提出<strong>错误</strong>，所以在java中使用泛型时它<strong>保证只要程序在编译期没有提示“UnChecked”未经检查警告，那么运行时就不会产生ClassCastException</strong>。</p><p>所以从java5之后，集合框架中的全部类和接口都增加了泛型支持，从而在创建集合时可以动态地指明元素的类型是什么，如：<strong>List&lt;String&gt; list = new ArrayList&lt;String&gt;()</strong>，其中List&lt;String&gt;、ArrayList&lt;String&gt;就统称为泛型，而&lt;&gt;括号中的类型就称为<strong>类型形参</strong>。</p><blockquote><p>java7的时候出现了菱形语法简化了泛型的写法，java7开始允许使用泛型时构造器后面的&lt;&gt;括号内不带类型形参，只需要给出&lt;&gt;括号就行，如：List&lt;String&gt; list = new ArrayList&lt;&gt;()。</p></blockquote><p>泛型可以分为<strong>泛型类</strong>(包括类和接口)和<strong>泛型方法</strong>。</p><h3 id="2、泛型类"><a href="#2、泛型类" class="headerlink" title="2、泛型类"></a>2、泛型类</h3><p>泛型类就是直接在类或接口上定义的泛型，上面所讲的集合也是属于泛型类，如下创建一个泛型类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T t;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T t)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.t = t; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有多个类型形参，在&lt;&gt;括号中就用 <strong>,</strong> 隔开，在创建Bean实例的时候就可以动态的指明<strong>T</strong>(类型形参)的类型，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bean&lt;String&gt; bean = <span class="keyword">new</span> Bean&lt;String&gt;();</span><br></pre></td></tr></table></figure><p>泛型类中的<strong>T</strong>(类型形参)不存在继承的关系，如下是错误的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bean&lt;Object&gt; bean = <span class="keyword">new</span> Bean&lt;String&gt;();<span class="comment">//错误，Bean&lt;String&gt;并不是Bean&lt;Object&gt;的子类。</span></span><br></pre></td></tr></table></figure><p>同时需要注意静态变量不能使用类型形参修饰，还有静态方法不能使用泛型类声明的类型形参，如下是错误的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T t;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> T t2; <span class="comment">//错误，类型形参在编译后会被擦除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">(Bean&lt;T&gt; bean)</span></span>&#123;&#125;<span class="comment">//错误，类型形参在编译后会被擦除，如果静态方法需要使用泛型，只能使用泛型方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有instanceof运算符后面不能使用泛型类，如下是错误的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(XX <span class="keyword">instanceof</span> Bean&lt;String&gt;)&#123;<span class="comment">//错误，不存在Bean&lt;String&gt;对应的Class&lt;String&gt;对象</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上错误的原因都可以归结为泛型擦除，不管传入的类型形参是什么类型，在运行时它们总是具有相同的类(Class)。</p><blockquote><p>如果从泛型类派生子类时，必须为作为父类的泛型类的类型形参指明类型或者不写&lt;&gt;括号，不写&lt;&gt;括号时泛型类的类型形参默认为上限类型，如果没有上限，默认为Object类型。</p></blockquote><h3 id="3、泛型方法"><a href="#3、泛型方法" class="headerlink" title="3、泛型方法"></a>3、泛型方法</h3><p>泛型方法就是直接在方法上定义的泛型，如下创建一个泛型方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">doWork</span><span class="params">(Bean&lt;T&gt; bean)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bean.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有多个类型形参，在&lt;&gt;括号中就用 <strong>,</strong> 隔开，在调用doWork方法时，java会自动推断方法形参的类型，从而推断出类型形参的类型，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bean&lt;String&gt; bean = <span class="keyword">new</span> Bean&lt;String&gt;();</span><br><span class="line">doWork(bean);</span><br></pre></td></tr></table></figure><p>上面doWork方法传入形参为bean实例，它的类型形参为String类型，从而推断出doWork方法的类型形参T为String类型。</p><blockquote><p>泛型方法允许类型形参被用来表示方法的一个或多个参数之间的类型依赖关系，或者返回值与参数之间的类型依赖关系，如果没有这样的类型依赖关系，就不应该使用泛型方法，可以考虑使用类型通配符。</p></blockquote><h3 id="4、类型通配符、上限和下限"><a href="#4、类型通配符、上限和下限" class="headerlink" title="4、类型通配符、上限和下限"></a>4、类型通配符、上限和下限</h3><p>类型通配符使用<strong>?</strong>表示，它表示未知的元素类型，当不知道使用什么类型接收时，此时可以使用<strong>?</strong>，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此时可以往doWork传入List&lt;String&gt;、List&lt;Integer&gt;等实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">(List&lt;?&gt; list)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(Object o : list)&#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不管往doWork方法中传入任何类型的List&lt;XX&gt;实例，当用<strong>?</strong>接收后，此时List集合中的所有元素类型都是Object，不能往元素类型是<strong>?</strong>的集合中增加、修改元素，只能查询、删除。</p><p>类型通配符<strong>?</strong>一般代表所有类型的父类，即Object，可以为<strong>?</strong>添加上限或下限，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上限：此时的类型形参必须为Number或Number的子类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">(List&lt;? extends Number&gt; list)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(Number o : list)&#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下限：此时的类型形参必须为Number或Number的父类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">(List&lt;? <span class="keyword">super</span> Number&gt; list)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(Object o : list)&#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在&lt;&gt;中加入extends，就是 <strong>&lt;=</strong> 的关系，在&lt;&gt;中加入super，就是 <strong>&gt;=</strong> 的关系。</p><blockquote><p>extends和super也可以用于限制泛型的类型形参的上限和下限。</p></blockquote><h3 id="5、泛型擦除"><a href="#5、泛型擦除" class="headerlink" title="5、泛型擦除"></a>5、泛型擦除</h3><p>泛型其实是一个语法糖，系统并不会为每个泛型生成一个Class对象，它们在运行时始终具有相同的Class对象，例如List&lt;String&gt;、List&lt;Integer&gt;等泛型类在编译之后，&lt;&gt;括号内的类型信息都会被擦除，在运行时都是使用List的Class对象，并且在反编译后，还是使用强制类型来获取元素，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//类型形参为Integer的泛型</span></span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="number">1</span>);</span><br><span class="line">    Integer num = list.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//类型形参为String的泛型</span></span><br><span class="line">    List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list2.add(<span class="string">"1"</span>);</span><br><span class="line">    String str = list2.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//反编译后</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Integer类型被擦除</span></span><br><span class="line">    List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    list.add(Integer.valueOf(<span class="number">1</span>));</span><br><span class="line">    Integer num = (Integer)list.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//String类型被擦除</span></span><br><span class="line">    List list2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    list2.add(<span class="string">"1"</span>);</span><br><span class="line">    String str = (String)list2.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有当把一个具有泛型信息的变量赋值给另一个没有泛型信息的变量时，所有&lt;&gt;括号之间的类型信息都会被擦除，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型形参为Integer的泛型</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//把具有Integer类型信息的泛型list赋值给没有泛型信息的list2</span></span><br><span class="line">List list2 = list;</span><br><span class="line"><span class="comment">//此时list的所有类型信息被擦除，变成了Object类型，这是可以往里面添加任何类型的元素</span></span><br><span class="line"><span class="comment">//添加元素时会提示"UnChecked"警告，所以在访问list2中的元素时，如果访问不当就会在运行时引发ClassCastException</span></span><br><span class="line">list2.add(<span class="string">"123"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里尝试把"123"转化为Integer，将会引发ClassCastException</span></span><br><span class="line">Integer num = (Integer) list2.get(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//这里访问正确</span></span><br><span class="line">Object o = list2.get(<span class="number">1</span>);<span class="comment">//或者String num = (String)list2.get(1)</span></span><br></pre></td></tr></table></figure><p>同时系统支持把没有泛型信息的变量赋值给具有泛型信息的变量，而不会提示任何警告或错误，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型形参为Integer的泛型</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//list的Integer类型信息被擦除</span></span><br><span class="line">List list2 = list;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把擦除后的list赋值给类型形参为String的泛型list3</span></span><br><span class="line">List&lt;String&gt; list3 = list2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面的访问将会引起ClassCastException</span></span><br><span class="line"><span class="comment">//等价于String num = 1；</span></span><br><span class="line">String num = list3.get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>上述代码将会引发ClassCastException，因为list3的类型信息是String，编译器会把list3中的元素类型当作是String，而此时list3实际引用的变量泛型擦除后的list，泛型擦除后的list中的元素类型在编译时是Object，但在运行时却是Integer，所以在运行时，从list3中取出的元素是Integer类型，Integer是不可以强转成String的，从而引起ClassCastException。</p><p>所以总的来说，泛型擦除主要在以下两个方面：</p><ul><li>1、编译之后，泛型会被擦除；(自动擦除)</li><li>2、把泛型变量赋值给原始变量时，泛型会被擦除。(手动擦除)</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文简单整理了一下java语言的基本知识点，希望大家有所收获！</p><p>参考资料：</p><p><a href="https://blog.csdn.net/justloveyou_/article/details/52464440" target="_blank" rel="noopener">java 中的 ==, equals 与 hashCode 的区别与联系</a></p><p><a href="https://www.jianshu.com/p/0ce2279c5691" target="_blank" rel="noopener">Java 自动装箱与拆箱的实现原理</a></p><p><a href="https://mp.weixin.qq.com/s/Mvi-qq3-9Y_mi1eFKahEYw" target="_blank" rel="noopener">为什么阿里不建议在for循环中使用”+”进行字符串拼接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;万事开头难，准备从零把java相关知识点捡起来，把自己所学的Java知识点归纳，下面是关于java的一些基本知识点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>搞定两种场景下的Fragment懒加载</title>
    <link href="http://yoursite.com/2019/07/14/%E6%90%9E%E5%AE%9A%E4%B8%A4%E7%A7%8D%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84Fragment%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <id>http://yoursite.com/2019/07/14/%E6%90%9E%E5%AE%9A%E4%B8%A4%E7%A7%8D%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84Fragment%E6%87%92%E5%8A%A0%E8%BD%BD/</id>
    <published>2019-07-14T10:33:57.000Z</published>
    <updated>2023-01-07T10:44:49.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我对懒加载的定义是：数据的加载要等到页面对用户可见时才加载，否则的话会浪费用户流量。网上实现懒加载的方案非常多，但大多数都是解决了我下面说到的场景一的懒加载，本文还解决场景二的懒加载方式。</p><p>如果不想看下面的分析，直接这个类导入你的项目中，需要懒加载的Fragment继承这个类，并重写相应的方法就行：<a href="https://github.com/rain9155/lazyLoagingFragment/tree/master/app/src/main/java/com/example/lazyloading/fragment" target="_blank" rel="noopener">传送门</a>。</p><h2 id="场景一：-Viewpager-Tablayout-Fragment"><a href="#场景一：-Viewpager-Tablayout-Fragment" class="headerlink" title="场景一： Viewpager + Tablayout + Fragment"></a>场景一： Viewpager + Tablayout + Fragment</h2><p>什么？不会用Viewpager，可以看一下这个入门系列：<a href="https://blog.csdn.net/harvic880925/article/details/38453725" target="_blank" rel="noopener">ViewPager 详解（一）—基本入门</a>。</p><p>场景一应该是很多人都遇到过的情况，界面整体使用Viewpager + Tablayout + Fragment组合，左右滑动界面以展示数据给用户，当你滑动到下一页的时候，Fragment已经有数据了，因为Viewpager默认会预加载好相邻的Fragment页面，这个预加载数量可以通过如下设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">viewPager.setOffscreenPageLimit(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>那么上面这句代码不是把预加载数量设置为0了吗？这样Fragment就不会预先加载了，这样想你就太天真，通过看setOffscreenPageLimit的源码得知，如果你传入的数值小于1，那么ViewPager就会把预加载数量设置成默认值，而默认值就是1，所以说就算你传入了0，ViewPager还是会预先加载好当前页面的左右两个Fragment页面。</p><h3 id="懒加载原理"><a href="#懒加载原理" class="headerlink" title="懒加载原理"></a>懒加载原理</h3><p>那么怎么解决呢？这时要认识Fragment中的一个函数：<strong>setUserVisibleHint(boolean isVisibleToUser)</strong>：</p><p>setUserVisibleHint方法是Fragment中的一个回调函数。当前Fragment可见对用户可见时，setUserVisibleHint()回调，其中参数isVisibleToUser=true，当前Fragment由可见到不可见或实例化时，setUserVisibleHint()回调，其中参数isVisibleToUser=false。</p><p>下面看一下这个方法在Fragment生命周期中的调用时机：</p><ul><li>1、当Fragment被实例化时，即Fragment被装载进ViewPager适配器中，并：setUserVisibleHint() -&gt;onAttach()  -&gt; onCreate() -&gt; onCreateView() -&gt; onViewCreated() -&gt; onActivityCreate()  -&gt;  onStart()   -&gt; onResume()。此时setUserVisibleHint() 中的参数为false。</li><li>2、在Fragmente可见时，即ViewPager滑动到当前页面时：setUserVisibleHint()。只会调用setUserVisibleHint方法，因为已经预加载过了，Fragment在之前生命周期已经走到onResume() 了。此时setUserVisibleHint() 中的参数为true。</li><li>3、在Fragment由可见变为不可见，即ViewPager由当前页面滑动到另一个页面：setUserVisibleHint()。只会调用setUserVisibleHint方法，因为还要保持当前页面的预加载过程，此时setUserVisibleHint() 中的参数为false。</li><li>4、点击由TabLayout直接跳转到一个未预加载的页面，此时生命周期的回调过程：setUserVisibleHint() -&gt; setUserVisibleHint() -&gt; onAttach()  -&gt; onCreate() -&gt; onCreateView() -&gt; onViewCreated() -&gt; onActivityCreate()  -&gt; onStart() -&gt; onResume()。回调了两次setUserVisibleHint() ，一次代表初始化时，传入参数是false，一次代表可见时，传入参数是true。</li></ul><p>可以看到此时setUserVisibleHint的调用时机总是在<strong>初始化时调用，可见时调用，由可见转换成不可见时调用。</strong></p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>下面讲讲场景一的懒加载实现思路：我们一般在Fragment的onActivityCreated中加载数据，这个时候我们可以判断此时的Fragment是否对用户可见，调用fragment.getUserVisibleHint()可以获得isVisibleToUser的值，如果为true，表示可见，就加载数据，如果不可见，就不加载数据了，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">      <span class="keyword">if</span>(isFragmentVisible(<span class="keyword">this</span>) &amp;&amp; <span class="keyword">this</span>.isAdded())&#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.getParentFragment() == <span class="keyword">null</span> || isFragmentVisible(<span class="keyword">this</span>.getParentFragment())) &#123;</span><br><span class="line">              onLazyLoadData();</span><br><span class="line">              isLoadData = <span class="keyword">true</span>;</span><br><span class="line">              <span class="comment">//...</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>判读Fragment是否对用户可见封装在isFragmentVisible方法中， onLazyLoadData()是子类需要重写的方法，用来加载数据，加载完数据后把isLoadData设置为true，表示已经加载过数据。</p><p>上面就控制了当Fragment不可见时就不加载数据，而且此时Fragment的生命周期也走到onResume了，那么当我滑到这个Fragment时，只会调用它的setUserVisibleHint方法，那么就要在setUserVisibleHint方法中加载数据，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserVisibleHint</span><span class="params">(<span class="keyword">boolean</span> isVisibleToUser)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>.setUserVisibleHint(isVisibleToUser);</span><br><span class="line">     <span class="keyword">if</span>(isFragmentVisible(<span class="keyword">this</span>) &amp;&amp; !isLoadData &amp;&amp; isViewCreated &amp;&amp; <span class="keyword">this</span>.isAdded())&#123;</span><br><span class="line">         onLazyLoadData();</span><br><span class="line">         isLoadData = <span class="keyword">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>isViewCreated字段表示布局是否被初始化，它在onViewCreated方法中被赋值为true，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(@NonNull View view, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">       isViewCreated = <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>onViewCreated方法的回调在onCreateView方法后，当调用onViewCreated方法时，Fragment的View布局一定创建好了。</p><p>我们再回到setUserVisibleHint方法中，在if中它会依此判断当前Fragment可见、还没有加载数据、布局已经创建好等这些条件满足后才加载数据，并把isLoadData赋值为true。</p><h3 id="应用示例"><a href="#应用示例" class="headerlink" title="应用示例"></a>应用示例</h3><p>下面是我在<a href="https://github.com/rain9155/WanAndroid" target="_blank" rel="noopener">项目</a>中使用的情况：</p><img src="/2019/07/14/%E6%90%9E%E5%AE%9A%E4%B8%A4%E7%A7%8D%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84Fragment%E6%87%92%E5%8A%A0%E8%BD%BD/fragment1.gif" class="" title="fragment1"><p>可以看到，当我滑倒这个Fragment时才加载数据。</p><h2 id="场景二：FragmentManager-FragmentTransaction-Fragment"><a href="#场景二：FragmentManager-FragmentTransaction-Fragment" class="headerlink" title="场景二：FragmentManager + FragmentTransaction+ Fragment"></a>场景二：FragmentManager + FragmentTransaction+ Fragment</h2><p>这个场景就是你把几个Fragment通过FragmentTransaction的add方法add到FragmentManager 中，切换Fragment的时候通过FragmentTransaction的hide和show方法配合使用，类似于微信的主界面，底部有一个tab，然后点击tab，切换页面。</p><p>当Fragment被add进manager中时，Fragment生命周期已经执行到onResume了，所以在后续的hide和show方法切换Fragment时，Fragment已经有数据了，在我的项目中，我想要的效果是，当我点到这个tab时，该tab对于的Fragment才加载数据，所以我对这种情况实现了懒加载。</p><h3 id="懒加载原理-1"><a href="#懒加载原理-1" class="headerlink" title="懒加载原理"></a>懒加载原理</h3><p>那么要怎么实现呢？照搬场景2的实现方式？可惜了，不行，因为这种情况下setUserVisibleHint方法不会被调用。这个时候我们又重新认识一个方法<strong>onHiddenChanged（boolean hidden）</strong>：</p><p>onHiddenChanged方法是当Fragment的隐藏状态变化示被调用，当Fragment没有被隐藏时即调用show方法，当前onHiddenChanged回调，其中参数hidde=false，当Fragment被隐藏时即调用hide了方法，onHiddenChanged()回调，其中参数hidde=true。还有一点注意的是使用hide和show时，fragment的所有生命周期方法都不会调用，除了onHiddenChanged（）。</p><p>下面看一下这个方法在Fragment生命周期中的调用时机：</p><ul><li>1、当Fragment被add进manager时：onAttach()  -&gt; onCreate() -&gt; onCreateView() -&gt; onViewCreated() -&gt; onActivityCreate()  -&gt;  onHiddenChanged() -&gt; onStart()   -&gt; onResume()。此时onHiddenChanged() 中的参数为false。</li><li>2、当用hide方法隐藏Fragment时：onHiddenChanged()，只会调用onHiddenChanged方法，此时setUserVisibleHint() 中的参数为true。</li><li>3、当用show方法显示Fragment时：onHiddenChanged()，只会调用onHiddenChanged方法，此时setUserVisibleHint() 中的参数为false。</li></ul><p>可以看到此时onHiddenChanged的调用时机总是在<strong>初始化时调用，hide时调用，show时调用。</strong></p><h3 id="实现思路-1"><a href="#实现思路-1" class="headerlink" title="实现思路"></a>实现思路</h3><p>场景二是在setUserVisibleHint方法中做文章，而这次是在onHiddenChanged方法中做文章，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onHiddenChanged</span><span class="params">(<span class="keyword">boolean</span> hidden)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.onHiddenChanged(hidden);</span><br><span class="line">      <span class="comment">//1、onHiddenChanged调用在Resumed之前，所以此时可能fragment被add, 但还没resumed</span></span><br><span class="line">      <span class="keyword">if</span>(!hidden &amp;&amp; !<span class="keyword">this</span>.isResumed())</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      <span class="comment">//2、使用hide和show时，fragment的所有生命周期方法都不会调用，除了onHiddenChanged（）</span></span><br><span class="line">      <span class="keyword">if</span>(!hidden &amp;&amp; isFirstVisible &amp;&amp; <span class="keyword">this</span>.isAdded())&#123;</span><br><span class="line">          onLazyLoadData();</span><br><span class="line">          isFirstVisible = <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>首先看注释1，因为当add的时候，onHiddenChanged调用在onResumed之前，此时还没有执行onResume方法，用户还看不见这个Fragment，如果此时加载数据就没有什么用，等于用户看到这个Fragmen时它就已经执行完数据了，如果这里要加一个判断，如果Fragment还没有Resume，就直接return，不做操作。</p><p>接下来看注释2，执行到注释2表示此时Fragment已经可见了，就可以通过hidden字段控制懒加载，hidden为false表示调用了show方法，通过isFirstVisible控制只加载一次，为什么要用isFirstVisible呢，因为在onActivityCreate方法中就有可能已经加载过数据，如果加载过就不用再加载了，在onActivityCreate中会把这个字段赋值为true，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">      <span class="keyword">if</span>(isFragmentVisible(<span class="keyword">this</span>) &amp;&amp; <span class="keyword">this</span>.isAdded())&#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.getParentFragment() == <span class="keyword">null</span> || isFragmentVisible(<span class="keyword">this</span>.getParentFragment())) &#123;</span><br><span class="line">              onLazyLoadData();</span><br><span class="line">              isLoadData = <span class="keyword">true</span>;</span><br><span class="line">              <span class="keyword">if</span>(isFirstVisible)</span><br><span class="line">                  isFirstVisible = <span class="keyword">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="应用示例-1"><a href="#应用示例-1" class="headerlink" title="应用示例"></a>应用示例</h3><p>下面是我在项目中使用的情况：</p><img src="/2019/07/14/%E6%90%9E%E5%AE%9A%E4%B8%A4%E7%A7%8D%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84Fragment%E6%87%92%E5%8A%A0%E8%BD%BD/fragment2.gif" class="" title="fragment2"><p>可以看到，当我点击到这个tab时，对应的Fragment才加载数据。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上就是我的懒加载历程，虽然现在也有一些Fragment库可以实现这个效果，但是它的原理也是这个，我们要知其所以然，该<a href="https://github.com/rain9155/lazyLoagingFragment/tree/master/app/src/main/java/com/example/lazyloading/fragment" target="_blank" rel="noopener">懒加载类</a>整合场景一和场景二，只有简单的几句代码，只要继承就能在两种场景下使用。</p><p>参考文章：</p><p><a href="https://www.jianshu.com/p/354fbb20ffe3" target="_blank" rel="noopener">Fragment 知识梳理(3)</a></p><p><a href="https://blog.csdn.net/u013588712/article/details/52145217" target="_blank" rel="noopener">FragmentPagerAdapter与FragmentStatePagerAdapter区别</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我对懒加载的定义是：数据的加载要等到页面对用户可见时才加载，否则的话会浪费用户流量。网上实现懒加载的方案非常多，但大多数都是解决了我下面说到
      
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="fragment" scheme="http://yoursite.com/tags/fragment/"/>
    
  </entry>
  
  <entry>
    <title>如何获取Android应用和系统信息</title>
    <link href="http://yoursite.com/2019/07/12/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96Android%E5%BA%94%E7%94%A8%E4%B8%8E%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/"/>
    <id>http://yoursite.com/2019/07/12/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96Android%E5%BA%94%E7%94%A8%E4%B8%8E%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/</id>
    <published>2019-07-12T14:36:32.000Z</published>
    <updated>2023-01-07T10:44:49.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本主要了解一下Android系统信息的获取，apk应用信息的获取。</p><a id="more"></a><pre><code>本文相关源码在文末给出</code></pre><h2 id="Android系统信息的获取"><a href="#Android系统信息的获取" class="headerlink" title="Android系统信息的获取"></a>Android系统信息的获取</h2><p>有时我们想要获取手机系统的配置信息，通常可以从以下俩方面获取：</p><ul><li><p>android.os.Build</p></li><li><p>SystemProperty</p></li></ul><h3 id="1、android-os-Build"><a href="#1、android-os-Build" class="headerlink" title="1、android.os.Build"></a>1、android.os.Build</h3><p>android.os.Build包含了系统编译时的大量设备，配置信息，它里面的字段含义如下：</p><ul><li>Build.BOARD; //主板</li><li>Build.BRAND; //Android系统指定商</li><li>supported_abis = null;//CPU指令集</li><li>Build.DEVICE;//设备参数</li><li>Build.DISPLAY;//显示屏参数</li><li>Build.FINGERPRINT;//唯一编号</li><li>Build.SERIAL;//硬件序列号</li><li>Build.ID;//修订版本列表</li><li>Build.MANUFACTURER;//硬件制造商</li><li>Build.MODEL;//版本</li><li>Build.HARDWARE;//硬件名</li><li>Build.PRODUCT;//手机产品名</li><li>Build.TAGS;//描述Build的标签</li><li>Build.TYPE;//Builder类型</li><li>Build.VERSION.CODENAME;//当前开发号</li><li>Build.VERSION.INCREMENTAL;//源码版本控制号</li><li>Build.VERSION.RELEASE;//版本字符串</li><li>Build.VERSION.SDK_INT;//版本号</li><li>Build.HOST;//Host值</li><li>Build.USER;//User名</li><li>Build.TIME;//编译时间<h3 id="2、SystemProperty"><a href="#2、SystemProperty" class="headerlink" title="2、SystemProperty"></a>2、SystemProperty</h3>SystemProperty包含许多系统，配置属性值和参数，很多与上面通过android.os.Build获取的相同,下面给出常用的信息：</li><li>System.getProperty(“os.version”);//os 版本</li><li>System.getProperty(“os.name”);//os 名称</li><li>System.getProperty(“os.arch”);//os 架构</li><li>System.getProperty(“user.home”);//Home 属性</li><li>System.getProperty(“user.name”);//Name 属性</li><li>System.getProperty(“user.dir”);//Dir 属性</li><li>System.getProperty(“user.timezone”);//时区</li><li>System.getProperty(“path.separator”);//路径分隔符</li><li>System.getProperty(“line.separator”);//行分隔符</li><li>System.getProperty(“file.separator”);//文件分隔符</li><li>System.getProperty(“java.vendor.url”);//java vender URL 属性</li><li>System.getProperty(“java.class.path”);//java Class 路径</li><li>System.getProperty(“java.class.version”);//java Class 版本</li><li>System.getProperty(“java.vendor”);//java Vender 属性</li><li>System.getProperty(“java.version”);//java 版本</li><li>System.getProperty(“java_home”);//java HOME属性<h3 id="3、实例"><a href="#3、实例" class="headerlink" title="3、实例"></a>3、实例</h3></li></ul><p>通过一个简单的示例查看如何使用（更多细节查看文末源码），如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 通过android.os.Build，可以直接获得一些Build提供的系统信息 */</span></span><br><span class="line">String board = Build.BOARD;</span><br><span class="line">String brand = Build.BRAND;</span><br><span class="line">Log.d(TAG, <span class="string">"android.os.Build，board："</span> + board);</span><br><span class="line">Log.d(TAG, <span class="string">"android.os.Build，brand： "</span> + brand);</span><br><span class="line"><span class="comment">/* 通过SystemProperty，要使用System.getProperty("XXX") */</span></span><br><span class="line">String os_version = System.getProperty(<span class="string">"os.version"</span>);</span><br><span class="line">String os_name = System.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line">Log.d(TAG, <span class="string">"SystemProperty，os_version: "</span> + os_version);</span><br><span class="line">Log.d(TAG, <span class="string">"SystemProperty, os_name: "</span> + os_name);</span><br></pre></td></tr></table></figure><p>可以看到，获取系统信息还是很简单的。</p><h2 id="Apk应用信息的获取"><a href="#Apk应用信息的获取" class="headerlink" title="Apk应用信息的获取"></a>Apk应用信息的获取</h2><p>Apk应用信息的获取无非分为，apk包信息的获取与应用进程信息的获取。</p><h3 id="1、PackageManager"><a href="#1、PackageManager" class="headerlink" title="1、PackageManager"></a>1、PackageManager</h3><p>通过PackageManager可以获得应用的apk包信息，先看下面一张图：</p><img src="/2019/07/12/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96Android%E5%BA%94%E7%94%A8%E4%B8%8E%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/system1.png" class="" title="system1"> <p>最里面的框代表了整个Activity的信息，系统提供了ActivityInfo类来进行封装，以此类推。</p><h4 id="1-1、下面列举一些常用的系统封装信息"><a href="#1-1、下面列举一些常用的系统封装信息" class="headerlink" title="1.1、下面列举一些常用的系统封装信息"></a>1.1、下面列举一些常用的系统封装信息</h4><p>下面这些封装信息与PackageManager在同一个包内。</p><ul><li><p><strong>ActivityInfo</strong><br>ActivityInfo 封装了在Manifest文件中&lt;activity&gt;&lt;/activity&gt;和&lt;receiver&gt;&lt;/receiver&gt;之间的所有信息，包括name，icon，label，launchmod等 。</p></li><li><p><strong>ServiceInfo</strong><br>和ActivityInfo类似，它封装了&lt;service&gt;&lt;/service&gt;之间的所有信息 。</p></li><li><p><strong>ApplicationInfo</strong><br>它封装了&lt;application&gt;&lt;/application&gt;之间的信息，特别的是，Application包含很多Flag，FLAG_SYSTEM表示为系统应用，FLAG_EXTERNAL_STORAGE表示为安装在sd卡上的应用等，通过这些FLAG可以很方便的判断应用类型 。</p></li><li><p><strong>PackageInfo</strong><br>它用于封装Manifest文件相关节点的信息，包含了所有Activity、Service等信息 。</p></li><li><p><strong>ResolveInfo</strong><br>这个比较特殊，它封装的是包含&lt;intent&gt;信息的上一级信息，所以它可以返回ActivityInfo，ServiceInfo等包含<intent>的信息，它经常用来帮助我们找到那些包含特定intent条件的信息，如带分享，播放功能的应用。</p><p>  通过上面的对象，PackageManager 就可以通过调用各种方法来返回不同类型的Bean</p></li></ul><h4 id="1-2、PackageManager常用方法"><a href="#1-2、PackageManager常用方法" class="headerlink" title="1.2、PackageManager常用方法"></a>1.2、PackageManager常用方法</h4><ul><li><strong>getPackagerManager</strong>: 通过调用这个方法返回一个PackageManager对象</li><li><strong>getApplicationInfo</strong>: 以ApplicationInfo形式返回指定包名的Application</li><li><strong>getApplicationIcon</strong>：返回指定包名的icon</li><li><strong>getInstalledApplications</strong>： 以ApplicationInfo形式返回安装的应用</li><li><strong>getInstalledPackages</strong>：以PackageInfo的形式返回安装的应用</li><li><strong>queryIntentActivities</strong>: 返回指定intent的ResolveInfo对象、Activity集合</li><li><strong>queryIntentServices</strong>：返回指定intent的ResolveInfo对象、service集合</li><li><strong>resolveActivity</strong>：返回指定intent的Activity</li><li><strong>resolveService</strong>：返回指定的intentService<h4 id="1-3、实例"><a href="#1-3、实例" class="headerlink" title="1.3、实例"></a>1.3、实例</h4></li></ul><p>下面通过一个例子来了解如何通过PackageManager来选出不同类型的app，判断app类型的依据，就是利用Applicationinfo中的FLAG_SYSTEM来进行判断，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.flags &amp; Applicationinfo.FLAG_SYSTEM</span><br></pre></td></tr></table></figure><ul><li><strong>如果flags &amp; Applicationinfo.FLAG_SYSTEM ！= 0，则为系统应用</strong></li><li><strong>如果flags &amp; Applicationinfo.FLAG_SYSTEM &lt;= 0, 则为第三方应用</strong> </li><li><strong>如果flags &amp; Applicationinfo.FLAG_EXTERNAL_STORAGE != 0, 则为SD卡上的应用</strong> </li><li><strong>特殊的，当系统应用经过升级后，也将成为第三方应用：flags &amp; Applicationinfo.FLAG_UPDATED_SYSTEM_APP != 0</strong></li></ul><p>首先封装一个Bean保存我所需要的app信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PMAppInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String appName;<span class="comment">//app名称</span></span><br><span class="line">    <span class="keyword">private</span> Drawable appIcon;<span class="comment">//图标</span></span><br><span class="line">    <span class="keyword">private</span> String pkgName;<span class="comment">//所在包名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PMAppInfo</span><span class="params">(String appLabel, Drawable appIcon, String pkgName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.appName = appLabel;</span><br><span class="line">        <span class="keyword">this</span>.appIcon = appIcon;</span><br><span class="line">        <span class="keyword">this</span>.pkgName = pkgName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAppLabel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> appName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAppLabel</span><span class="params">(String appName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.appName = appName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Drawable <span class="title">getAppIcon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> appIcon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAppIcon</span><span class="params">(Drawable appIcon)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.appIcon = appIcon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPkgName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pkgName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPkgName</span><span class="params">(String pkgName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pkgName = pkgName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，通过上面所说的方法判断各种类型的app：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;PMAppInfo&gt; <span class="title">getAppInfoList</span><span class="params">(<span class="keyword">int</span> flag)</span></span>&#123;</span><br><span class="line">        pm = <span class="keyword">this</span>.getPackageManager();</span><br><span class="line">        <span class="comment">//获取应用信息</span></span><br><span class="line">        List&lt;ApplicationInfo&gt; applicationInfoList = pm.getInstalledApplications(PackageManager.GET_UNINSTALLED_PACKAGES);</span><br><span class="line">        List&lt;PMAppInfo&gt; appInfoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//判断应用类型</span></span><br><span class="line">        <span class="keyword">switch</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">case</span> ALL_APP:</span><br><span class="line">                appInfoList.clear();</span><br><span class="line">                <span class="keyword">for</span> (ApplicationInfo app : applicationInfoList) &#123;</span><br><span class="line">                    appInfoList.add(<span class="keyword">new</span> PMAppInfo(</span><br><span class="line">                            ((String) app.loadLabel(pm)),</span><br><span class="line">                            app.loadIcon(pm),</span><br><span class="line">                            app.packageName));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SYSTEM_APP:</span><br><span class="line">                appInfoList.clear();</span><br><span class="line">                <span class="keyword">for</span> (ApplicationInfo app : applicationInfoList) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((app.flags &amp; ApplicationInfo.FLAG_SYSTEM) != <span class="number">0</span>) &#123;</span><br><span class="line">                        appInfoList.add(<span class="keyword">new</span> PMAppInfo(</span><br><span class="line">                                ((String) app.loadLabel(pm)),</span><br><span class="line">                                app.loadIcon(pm),</span><br><span class="line">                                app.packageName));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> THIRD_APP:</span><br><span class="line">                appInfoList.clear();</span><br><span class="line">                <span class="keyword">for</span> (ApplicationInfo app : applicationInfoList) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((app.flags &amp; ApplicationInfo.FLAG_SYSTEM) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        appInfoList.add(<span class="keyword">new</span> PMAppInfo(</span><br><span class="line">                                ((String) app.loadLabel(pm)),</span><br><span class="line">                                app.loadIcon(pm),</span><br><span class="line">                                app.packageName));</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((app.flags &amp; ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) != <span class="number">0</span>) &#123;</span><br><span class="line">                        appInfoList.add(<span class="keyword">new</span> PMAppInfo(</span><br><span class="line">                                ((String) app.loadLabel(pm)),</span><br><span class="line">                                app.loadIcon(pm),</span><br><span class="line">                                app.packageName));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SDCARD_APP:</span><br><span class="line">                appInfoList.clear();</span><br><span class="line">                <span class="keyword">for</span> (ApplicationInfo app : applicationInfoList) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((app.flags &amp; ApplicationInfo.FLAG_EXTERNAL_STORAGE) != <span class="number">0</span>) &#123;</span><br><span class="line">                        appInfoList.add(<span class="keyword">new</span> PMAppInfo(</span><br><span class="line">                                ((String) app.loadLabel(pm)),</span><br><span class="line">                                app.loadIcon(pm),</span><br><span class="line">                                app.packageName));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> appInfoList;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行效果图：</p><img src="/2019/07/12/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96Android%E5%BA%94%E7%94%A8%E4%B8%8E%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/system2.png" class="" title="system2">  <p>如上图所示，通过点击不同的按钮，在下方显示出不同类型的apk信息。</p><h3 id="2、ActivityManager"><a href="#2、ActivityManager" class="headerlink" title="2、ActivityManager"></a>2、ActivityManager</h3><p>前面使用了PackageManager获得了应用包的信息，PackageMessager重点在于获得应用的包信息，而ActivityManager重点在于获得在运行时的应用程序的进程信息。</p><h4 id="2-1、同PackageManager一样，-ActivityManager也封装了很多Bean对象"><a href="#2-1、同PackageManager一样，-ActivityManager也封装了很多Bean对象" class="headerlink" title="2.1、同PackageManager一样， ActivityManager也封装了很多Bean对象"></a>2.1、同PackageManager一样， ActivityManager也封装了很多Bean对象</h4><p>下面的封装类都在ActivityManager的类中。</p><ul><li><p><strong>ActivityManager.MemoryInfo</strong><br>它封装了内存信息，MemoryInfo中有几个重要的字段：availMem - 系统可用内存，totalMen - 总内存，threshold - 低内存的阈值，即区分是否是低内存，lowMemory - 是否处于低内存。</p></li><li><p><strong>Debug.MemoryInfo</strong><br>android中还有一个MemoryInfo，它来自Debug.MemoryInfo,前面的MemoryInfo通常用于获取全局的内存使用信息，而它用于统计进程下的内存信息。</p></li><li><p><strong>RunningAppProcessInfo</strong><br>顾名思义，就是运行间进程信息，储存的字段自然进程相关的信息，processName - 进程名， pid - 进程pid, uid - 进程uid，pkgList - 该进程下所有的包 。 </p></li><li><p><strong>RunningServiceInfo</strong><br>RunningServiceInfo与RunningAppProcessInfo类似，用于封装运行时的服务信息，它包含了进程信息的同时还包含了其他的信息，activeSince - 第一次被激活的时间，方式，foreground - 服务是否在后台运行。</p></li></ul><h4 id="2-2、实例"><a href="#2-2、实例" class="headerlink" title="2.2、实例"></a>2.2、实例</h4><p>下面同样通过一个例子来使用ActivityManager，先封装一个Bean来保存一个我们需要的字段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AMProcessInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String uid;</span><br><span class="line">    <span class="keyword">private</span> String pid;</span><br><span class="line">    <span class="keyword">private</span> String memorySize;</span><br><span class="line">    <span class="keyword">private</span> String processName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AMProcessInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPid</span><span class="params">(String pid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pid = pid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(String uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMemorySize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memorySize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemorySize</span><span class="params">(String memorySize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memorySize = memorySize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProcessName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> processName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProcessName</span><span class="params">(String processName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.processName = processName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过调用getRunningAppProcesses（）返回当前运行时的进程信息集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;AMProcessInfo&gt; <span class="title">getRunningProcessesInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      amProcessInfoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      <span class="comment">//获取正在运行的进程集合</span></span><br><span class="line">      List&lt;ActivityManager.RunningAppProcessInfo&gt; appProcessList = am.getRunningAppProcesses();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; appProcessList.size(); i++) &#123;</span><br><span class="line">          ActivityManager.RunningAppProcessInfo info = appProcessList.get(i);</span><br><span class="line">          <span class="keyword">int</span> pid = info.pid;</span><br><span class="line">          <span class="keyword">int</span> uid = info.uid;</span><br><span class="line">          String processName = info.processName;</span><br><span class="line">          <span class="comment">//获取该进程下的内存</span></span><br><span class="line">          <span class="keyword">int</span>[] memoryPid = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;pid&#125;;</span><br><span class="line">          Debug.MemoryInfo[] memoryInfo = am.getProcessMemoryInfo(memoryPid);</span><br><span class="line">          <span class="keyword">int</span> memorySize = memoryInfo[<span class="number">0</span>].getTotalPss();</span><br><span class="line">          AMProcessInfo processInfo = <span class="keyword">new</span> AMProcessInfo();</span><br><span class="line">          <span class="comment">//</span></span><br><span class="line">          processInfo.setPid(<span class="string">""</span> + pid);</span><br><span class="line">          processInfo.setUid(<span class="string">""</span> + uid);</span><br><span class="line">          processInfo.setMemorySize(<span class="string">""</span> + memorySize);</span><br><span class="line">          processInfo.setProcessName(processName);</span><br><span class="line">          amProcessInfoList.add(processInfo);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> amProcessInfoList;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>运行效果图： </p><img src="/2019/07/12/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96Android%E5%BA%94%E7%94%A8%E4%B8%8E%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/system3.png" class="" title="system3"> <p>上图运行给出了当前运行的一个进程的pid，uid，占用内存，进程名的信息。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>PackageManager是用来获取apk包信息的，ActivityManager是用来获取运行时进程信息的，如果想要获取手机系统信息，可以通过SystemProperty和android.os.Build，本文同样是一篇学习记录，希望大家读完后和我一样有所收获。</p><p><a href="https://github.com/rain9155/AndroidMessageObtainTest" target="_blank" rel="noopener">本文相关源码位置</a></p><p>参考资料：</p><p>《android群英传》</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本主要了解一下Android系统信息的获取，apk应用信息的获取。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="ActivityManager" scheme="http://yoursite.com/tags/ActivityManager/"/>
    
      <category term="PackageManager" scheme="http://yoursite.com/tags/PackageManager/"/>
    
  </entry>
  
  <entry>
    <title>基于P2P的局域网即时通信应用</title>
    <link href="http://yoursite.com/2019/07/12/%E5%9F%BA%E4%BA%8EP2P%E7%9A%84%E5%B1%80%E5%9F%9F%E7%BD%91%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2019/07/12/%E5%9F%BA%E4%BA%8EP2P%E7%9A%84%E5%B1%80%E5%9F%9F%E7%BD%91%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E5%BA%94%E7%94%A8/</id>
    <published>2019-07-12T11:25:30.000Z</published>
    <updated>2023-01-07T10:44:49.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是一个使用java语言开发的基于P2P的局域网即时通信Android应用，界面是高仿微信的聊天界面，在里面你将会学到java多线程并发编程、Socket编程、UDP广播、TCP连接、还有图片加载相关知识等。</p><p>项目地址：<a href="https://github.com/rain9155/P2P" target="_blank" rel="noopener">P2P</a></p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>P2P不同于C/S方式，它没有集中式的服务器，在P2P中，程序既是服务器又是客户端，在同一个局域网内，每个用户发送的消息不会经过路由器转发到其他局域网，那么如何保证大家都在同一个局域网内呢？答案是只要大家都连上同一个WIFI就行，这样就保证大家在同一个局域网内，这时你手机或电脑就会被路由器分配一个ip地址。</p><p>如下图：</p><img src="/2019/07/12/%E5%9F%BA%E4%BA%8EP2P%E7%9A%84%E5%B1%80%E5%9F%9F%E7%BD%91%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E5%BA%94%E7%94%A8/core1.png" class="" title="core1"><p>下面是设计思路：</p><h3 id="1、用户登陆阶段"><a href="#1、用户登陆阶段" class="headerlink" title="1、用户登陆阶段"></a>1、用户登陆阶段</h3><p>（1）用户A打开P2P程序的，选择一个名字和头像后，点击登陆，就开始登陆上局域网，用户A登陆时程序同时会启动两个线程，一个线程里面启动UDP服务端(端口号9156)，用来等待其他用户的登陆，另一个线程里面启动TCP服务端(端口号9155)，用来等待其他用户的Socket连接，在登陆同时用户A还会使用UDP广播一个UDP包出去。这个UDP包包含了用户姓名和ip地址等信息，UDP包会发送给同一局域网内所有具有相同端口的UDP服务端程序，包括本程序。</p><p>（2）这时如果有其他在线的用户，那么每个在线的用户程序中的UDP服务端就会收下这个UDP包，然后把用户信息取出来并把用户A加入在线列表，因为UDP包中包含用户A ip地址，所以每个在线的用户使用用户A的ip地址向用户A发一个回复。</p><p>（3）用户A等待一段时间后，就会收到所有在线用户的回复，然后把所有的在线用户加入自己的在线列表。</p><p>登陆阶段如图：</p><img src="/2019/07/12/%E5%9F%BA%E4%BA%8EP2P%E7%9A%84%E5%B1%80%E5%9F%9F%E7%BD%91%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E5%BA%94%E7%94%A8/user1.png" class="" title="user1"><h3 id="2、-用户聊天阶段"><a href="#2、-用户聊天阶段" class="headerlink" title="2、 用户聊天阶段"></a>2、 用户聊天阶段</h3><p>（1）用户A选择自己的在线列表中的用户B聊天，这时用户A就会向用户B发起TCP连接，与此同时用户B的TCP服务端中就会收到一个Socket请求，用户B把这个Socket请求缓存起来，同理用户A发起连接时也会产生一个Socket，用户A也把这个Socket保存缓存起来，这样下一次就不用重复建立连接。</p><p>（2）这样双方都拥有一个Socket，双方基于Socket与Socket之间建立的连接上聊天（传输文件，文字等）。</p><p>聊天阶段如图：</p><img src="/2019/07/12/%E5%9F%BA%E4%BA%8EP2P%E7%9A%84%E5%B1%80%E5%9F%9F%E7%BD%91%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E5%BA%94%E7%94%A8/user2.png" class="" title="user2"><h3 id="3、用户退出阶段"><a href="#3、用户退出阶段" class="headerlink" title="3、用户退出阶段"></a>3、用户退出阶段</h3><p>（1）当用户A离开程序，退出局域网时，用户A就像登陆一样使用广播地址广播一个UDP包出去，UDP中包含了要退出登陆的信息，那么在局域网内的在线用户收到这个UDP后，就把用户A移除出在线用户列表，如果有用户A的Socket连接，就把Socket连接关闭掉。</p><p>（2）用户A发出退出广播后，也把自己缓存的所有Socket连接关闭掉。 </p><img src="/2019/07/12/%E5%9F%BA%E4%BA%8EP2P%E7%9A%84%E5%B1%80%E5%9F%9F%E7%BD%91%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E5%BA%94%E7%94%A8/user3.png" class="" title="user3"><h2 id="程序运行截图"><a href="#程序运行截图" class="headerlink" title="程序运行截图"></a>程序运行截图</h2><p>首先用户A和用户B登陆，分别选择一个头像和姓名，如下</p><img src="/2019/07/12/%E5%9F%BA%E4%BA%8EP2P%E7%9A%84%E5%B1%80%E5%9F%9F%E7%BD%91%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E5%BA%94%E7%94%A8/p2p1.png" class="" title="p2p1"><p>登陆后，双方正常来讲，是只有一个在线用户的，但是考虑到平时测试两台手机不方便，就没有把自己过滤掉，所以现在双方都有两个在线用户，用户A的在线用户是用户B和自己，用户B的在线用户是用户A和自己，如下：</p><img src="/2019/07/12/%E5%9F%BA%E4%BA%8EP2P%E7%9A%84%E5%B1%80%E5%9F%9F%E7%BD%91%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E5%BA%94%E7%94%A8/p2p2.png" class="" title="p2p2"><p>下面是双方聊天的过程，现在可以发文字、图片、语音、文件(支持发送大文件，发送大文件有进度显示)。</p><img src="/2019/07/12/%E5%9F%BA%E4%BA%8EP2P%E7%9A%84%E5%B1%80%E5%9F%9F%E7%BD%91%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E5%BA%94%E7%94%A8/p2p3.png" class="" title="p2p3"><h2 id="关键性的代码"><a href="#关键性的代码" class="headerlink" title="关键性的代码"></a>关键性的代码</h2><p>下面红色方框内的是关键性类，如下：</p><img src="/2019/07/12/%E5%9F%BA%E4%BA%8EP2P%E7%9A%84%E5%B1%80%E5%9F%9F%E7%BD%91%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E5%BA%94%E7%94%A8/core2.png" class="" title="core2"><p>下面讲解一些关键性代码：</p><h3 id="1、初始化TCP服务端"><a href="#1、初始化TCP服务端" class="headerlink" title="1、初始化TCP服务端"></a>1、初始化TCP服务端</h3><p>初始化TCP服务端，在<strong>ConnectManager</strong>类中，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 初始化ServerSocket监听，绑定端口号, 等待客户端连接</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mExecutor.execute(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建ServerSocket监听，并绑定端口号</span></span><br><span class="line">            mServerSocket = <span class="keyword">new</span> ServerSocket(PORT);</span><br><span class="line">            LogUtil.d(TAG, <span class="string">"开启服务端监听，端口号 = "</span> + PORT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            LogUtil.e(TAG, <span class="string">"绑定端口号失败，e = "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//调用accept()开始监听，等待客户端的连接</span></span><br><span class="line">                Socket socket = mServerSocket.accept();</span><br><span class="line">                String ipAddress = socket.getInetAddress().getHostAddress();</span><br><span class="line">                <span class="keyword">if</span>(isClose(ipAddress))&#123;</span><br><span class="line">                    LogUtil.d(TAG, <span class="string">"一个用户加入聊天，socket = "</span> + socket);</span><br><span class="line">                    <span class="comment">//每个客户端连接用一个线程不断的读</span></span><br><span class="line">                    ReceiveThread receiveThread = <span class="keyword">new</span> ReceiveThread(socket);</span><br><span class="line">                    <span class="comment">//缓存客户端的连接</span></span><br><span class="line">                    mClients.put(ipAddress, socket);</span><br><span class="line">                    <span class="comment">//放到线程池中执行</span></span><br><span class="line">                    mExecutor.execute(receiveThread);</span><br><span class="line">                    LogUtil.d(TAG, <span class="string">"已连接的客户端数量："</span> + mClients.size());</span><br><span class="line">                    <span class="comment">//简单的心跳机制</span></span><br><span class="line">                    heartBeat(ipAddress);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                LogUtil.e(TAG, <span class="string">"调用accept()监听失败， e = "</span> + e.getMessage());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//释放掉ServerSocket占用的端口号</span></span><br><span class="line">            mServerSocket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            LogUtil.e(TAG, <span class="string">"关闭端口号失败， e = "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ConnectManager是用来管理每个用户的连接，ConnectManager的initListener()方法里面会绑定一个端口号，然后调用accept()方法等待其他客户端的连接，如果有客户端的连接请求，就会为每一个客户端的连接创建一个Thread，这个Thread会不停等待接收客户端的消息。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            Mes mes;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                InputStream in = mSocket.getInputStream();</span><br><span class="line">                mes = receiveMessageByType(in);</span><br><span class="line">               <span class="comment">//...</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                LogUtil.e(TAG, <span class="string">"获取客户端消息失败，e = "</span> + e.getMessage());</span><br><span class="line">                <span class="comment">//两端的Socker连接都要关闭</span></span><br><span class="line">                ConnectManager.getInstance().removeConnect(mClientIp);</span><br><span class="line">                ConnectManager.getInstance().removeReceiveCallback(mClientIp);</span><br><span class="line">                ConnectManager.getInstance().cancelScheduledTask(mClientIp);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、初始化UDP服务端"><a href="#2、初始化UDP服务端" class="headerlink" title="2、初始化UDP服务端"></a>2、初始化UDP服务端</h3><p>初始化UDP服务端，在<strong>OnlineUserManager</strong>类中，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 初始化监听，绑定指定端口, 等待接受广播</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mExecutor.execute(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mDatagramSocket = <span class="keyword">new</span> DatagramSocket(PORT);</span><br><span class="line">            LogUtil.d(TAG, <span class="string">"开启广播监听，端口号 = "</span> + PORT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            LogUtil.e(TAG, <span class="string">"创建DatagramSocket监听失败， e = "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[MAX_RECEIVE_DATA];</span><br><span class="line">                DatagramPacket datagramPacket = <span class="keyword">new</span> DatagramPacket(buffer, buffer.length);</span><br><span class="line">                mDatagramSocket.receive(datagramPacket);</span><br><span class="line">                <span class="keyword">byte</span>[] data = datagramPacket.getData();</span><br><span class="line">                <span class="comment">//获得发送方的ip地址</span></span><br><span class="line">                String receiveIp = datagramPacket.getAddress().getHostAddress();</span><br><span class="line">                <span class="comment">//解析数据</span></span><br><span class="line">                Data datas = resolveData(data);</span><br><span class="line">                <span class="keyword">if</span>(datas != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="comment">//用户数据</span></span><br><span class="line">                    <span class="keyword">int</span> code = datas.getCode();</span><br><span class="line">                    User user = datas.getUser();</span><br><span class="line">                    user.setIp(receiveIp);</span><br><span class="line">                    <span class="keyword">if</span>(code == <span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="comment">//把它加入在线用户列表</span></span><br><span class="line">                        <span class="keyword">if</span>(!mOnlineUsers.containsKey(receiveIp))&#123;</span><br><span class="line">                            mOnlineUsers.put(receiveIp, user);</span><br><span class="line">                            <span class="comment">//通知主活动用用户加入</span></span><br><span class="line">                            <span class="keyword">if</span>(mUserCallback != <span class="keyword">null</span>)&#123;</span><br><span class="line">                                mHandler.obtainMessage(TYPE_JOIN_USER, mOnlineUsers.get(receiveIp)).sendToTarget();</span><br><span class="line">                            &#125;</span><br><span class="line">                            LogUtil.d(TAG, <span class="string">"一个用户加入，地址 = "</span> + receiveIp);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//回复它</span></span><br><span class="line">                        reply(receiveIp);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(code == <span class="number">1</span>)&#123;</span><br><span class="line">                        <span class="comment">//用户退出在线用户列表</span></span><br><span class="line">                        <span class="keyword">if</span>(mOnlineUsers.containsKey(receiveIp))&#123;</span><br><span class="line">                            User exitUser = mOnlineUsers.remove(receiveIp);</span><br><span class="line">                            <span class="keyword">if</span>(mUserCallback != <span class="keyword">null</span>)&#123;</span><br><span class="line">                                mHandler.obtainMessage(TYPE_EXIT_USER, exitUser).sendToTarget();</span><br><span class="line">                            &#125;</span><br><span class="line">                            LogUtil.d(TAG, <span class="string">"一个用户退出，地址 = "</span> + receiveIp);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//得到所有在线用户列表</span></span><br><span class="line">                        <span class="keyword">if</span>(!mOnlineUsers.containsKey(receiveIp)) &#123;</span><br><span class="line">                            mOnlineUsers.put(receiveIp, user);</span><br><span class="line">                            <span class="comment">//通知主活动用用户加入</span></span><br><span class="line">                            <span class="keyword">if</span>(mUserCallback != <span class="keyword">null</span>)&#123;</span><br><span class="line">                                mHandler.obtainMessage(TYPE_JOIN_USER, mOnlineUsers.get(receiveIp)).sendToTarget();</span><br><span class="line">                            &#125;</span><br><span class="line">                            LogUtil.d(TAG, <span class="string">"获得一个用户信息，地址 = "</span> + receiveIp);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                LogUtil.d(TAG, <span class="string">"当前在线用户，count = "</span> + mOnlineUsers.size());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                LogUtil.e(TAG, <span class="string">"接受广播失败， e = "</span> + e.getMessage());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mDatagramSocket != <span class="keyword">null</span>)&#123;</span><br><span class="line">            mDatagramSocket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OnlineUserManager是用来管理在线用户的，OnlineUserManager的initListener()方法里面也是会绑定一个端口号，然后调用receive()方法等待用户的广播信息，如果有用户的广播信息，就根据用户的广播信息类型做出不同的动作，如把用户加入在线用户列表。</p><h3 id="3、Mes类的设计"><a href="#3、Mes类的设计" class="headerlink" title="3、Mes类的设计"></a>3、Mes类的设计</h3><p>Mes类是用户之间建立连接后传输消息的实体类，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mes</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ItemType itemType;<span class="comment">//Mes的Item类型</span></span><br><span class="line">    <span class="keyword">public</span> MesType mesType;<span class="comment">//Mes的类型</span></span><br><span class="line">    <span class="keyword">public</span> String userIp;<span class="comment">//发送Mes的用户的ip</span></span><br><span class="line">    <span class="keyword">public</span> T data;<span class="comment">//具体消息</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<strong>T</strong>是一个泛型，它可以代表着文本、音频、文件、图片的类型，所以在构造一个Mes时，就要确定它是属于什么类型，然后文本、音频、文件、图片分别在对应一个实体类。</p><h3 id="4、User类的设计"><a href="#4、User类的设计" class="headerlink" title="4、User类的设计"></a>4、User类的设计</h3><p>User就代表着用户，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String mName;<span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span> String mIp;<span class="comment">//ip</span></span><br><span class="line">    <span class="keyword">private</span> String mImagePath;<span class="comment">//头像路径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mImageLen;<span class="comment">//头像长度</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它在传输前中会转成一个Json字符串，收到后再把它转成User类，这样就很容易的把它里面的数据解析出来也方便了传输。</p><h3 id="5、关于心跳机制的实现"><a href="#5、关于心跳机制的实现" class="headerlink" title="5、关于心跳机制的实现"></a>5、关于心跳机制的实现</h3><p>心跳机制是什么？它就每隔一段事件发一个探测，探测在线的用户是否存活。有些在线用户由于手机关机，不正常退出应用等会导致它无法正常退出登陆，这时就需要每隔一段时间探测它是否存活。</p><p>P2P中实现了一个简单的心跳机制，其实它就是一个定时任务，线程池中可以提交周期执行的任务，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 简单心跳机制</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">heartBeat</span><span class="params">(String ipAddress)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!mScheduledTasks.containsKey(ipAddress))&#123;</span><br><span class="line">        ScheduledFuture task = mScheduledExecutor.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">int</span> result = PingManager.getInstance().ping(ipAddress);</span><br><span class="line">            Log.d(TAG, <span class="string">"探测对方是否在线, result = "</span> + result + <span class="string">", ipAddress = "</span> + ipAddress);</span><br><span class="line">            <span class="keyword">if</span>(result != <span class="number">0</span>)&#123;</span><br><span class="line">                removeConnect(ipAddress);</span><br><span class="line">                cancelScheduledTask(ipAddress);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">10</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        mScheduledTasks.put(ipAddress, task);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它每隔10秒就会执行一次，然后会ping一下用户的ip地址，如果它不连通了，就要把它从在线用户中移除。</p><h2 id="开发过程中遇到的问题及解决办法"><a href="#开发过程中遇到的问题及解决办法" class="headerlink" title="开发过程中遇到的问题及解决办法"></a>开发过程中遇到的问题及解决办法</h2><ul><li><strong>问题1：获取获得在线用户列表和如果告诉别人我上线了？</strong></li></ul><p>因为第一次开发P2P应用，所以不知道用户体系建立的逻辑，尝试的第一种方法是：使用Ping命令把ip地址的最后三位用循环从0~255不断的ping，如果ping通，就说明这个ip地址的用户连接着局域网的同一个WIFI，把它记录下来，但是这有一个缺点，能ping通的ip地址只是说明这个用户连着WIFI，并没有说明这个用户打开了P2P应用，也并不代表这个用户上线了，所以这种方法不行；后来想到了一种改进办法：就是把ping通的ip地址列表逐个建立Socket连接，如果能够连接上，就说明这个用户打开了P2P应用并且上线了，这个办法可以，但是逐个建立连接有很麻烦，耗时。</p><p>解决办法：就是使用UDP的广播，UDP广播能够告诉同一局域网内的所有打开了同一端口的在线用户我上线了，并且收到他们的回复。</p><ul><li><strong>问题2：用户头像的发送？</strong></li></ul><p>因为使用UDP广播，但是UDP广播每次最大只能发送64Kb数据，一个头像就算压缩了，也有几百Kb，所以如何把头像发送出去是一个问题，尝试的第一种方法是：把头像转化成字节数组和用户信息一起转化为json数据，json数据再转化为字节数组，然后把json数据的字节数组分段发送出去，但是这有一个缺点，就是会额外增大发送时UDP的字节数组的长度导致发送额外多的字节，耗时，这种方法不行；尝试的第二种方法是：把头像和用户信息分开发送，先发送用户信息，然后再把头像转化为字节数组分段发送，但是有一个无法解决的问题，就是UDP是不可靠，很难保证分段后的字节再重新组合成一个完整的头像字节数组，会有顺序问题，所以这种办法不行。</p><p>解决办法：用户信息用UDP广播发送，因为用户信息短，不用分段，然后等获取到在线用户列表后再逐一建立TCP连接把用户头像发送给在线用户列表，TCP可靠。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这是一个使用java语言开发的基于P2P的局域网即时通信Android应用，界面是高仿微信的聊天界面，在里面你将会学到java多线程并发编程
      
    
    </summary>
    
    
      <category term="开源项目" scheme="http://yoursite.com/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="p2p" scheme="http://yoursite.com/tags/p2p/"/>
    
  </entry>
  
  <entry>
    <title>SVG入门学习</title>
    <link href="http://yoursite.com/2019/07/12/SVG%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/07/12/SVG%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</id>
    <published>2019-07-12T09:39:00.000Z</published>
    <updated>2023-01-07T10:44:48.778Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SVG对于android开发者听起来是陌生的东西，因为它是属于前端的产物，其实Android中也是支持SVG的，语法也很简单易懂，本文就通过我自己学习的经历，和大家一起学习一下SVG。</p><a id="more"></a><h2 id="什么是SVG"><a href="#什么是SVG" class="headerlink" title="什么是SVG?"></a>什么是SVG?</h2><p>Google 在Android5.X中增加了对SVG矢量图形的支持，可以用来创建高效率的动画, 所以我们先来了解一下SVG的定义： </p><ul><li>可伸缩矢量图形（Scalable Vector Graphics）</li><li>使用XML格式定义图形</li><li>图像在放大或改变尺寸的情况下图片质量不会有所损失</li><li>android中使用vector标签表示SVG</li></ul><p>与bitmap相比，SVG最大的优点是放大不会失真，而bitmap需要为不同的分辨率准备很多套图标，而SVG则不需要，前面说了SVG要用vector表示，我们先来看看vector标签中属性的含义。</p><h2 id="vector的各个属性是什么意义？"><a href="#vector的各个属性是什么意义？" class="headerlink" title="vector的各个属性是什么意义？"></a>vector的各个属性是什么意义？</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">vector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  //命名空间</span></span><br><span class="line"><span class="tag">    <span class="attr">android:height</span>=<span class="string">"200dp"</span>  //这个是图片的<span class="attr">intrinsic</span>高度</span></span><br><span class="line"><span class="tag">    <span class="attr">android:width</span>=<span class="string">"200dp"</span>   //这个是图片的<span class="attr">intrinsic</span>宽度</span></span><br><span class="line"><span class="tag">    <span class="attr">android:viewportHeight</span>=<span class="string">"100"</span>    //这个是为这个图片设置的纵坐标,表示将图片分为<span class="attr">100</span>等份,主要下面的<span class="attr">pathData</span>需要依赖这个坐标的划分</span></span><br><span class="line"><span class="tag">    <span class="attr">android:viewportWidth</span>=<span class="string">"100"</span>     //同上,只不过这个是横坐标, <span class="attr">heigh</span>，<span class="attr">width</span>的比例和<span class="attr">viewportHeight</span>，<span class="attr">viewportWidth</span>的比例必须保持一致，不然图形就会发生形变</span></span><br><span class="line"><span class="tag">    <span class="attr">android:alpha</span>=<span class="string">"0.2"</span>     //这个是整个图像的透明度,取值范围<span class="attr">0</span>到<span class="attr">1</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;group      //这个标签中可以放入若干个&lt;path/&gt;标签,并给它们设置一些共同的属性</span><br><span class="line">        android:name="group_name"   //这个name很有用,在设置objectAnimator的时候用来区分给那个部分施加动画</span><br><span class="line">        android:pivotY="50"     //这个设置这个group的中心点的X坐标,取值范围为0到100,在做rotation时有用</span><br><span class="line">        android:pivotX="50"     //这个设置这个group的中心点的Y坐标,取值范围为0到100,在做rotation时有用</span><br><span class="line">        android:translateX="20" //将整个group在X轴方向平移多少像素</span><br><span class="line">        android:translateY="30" //将整个group在Y轴方向平移多少像素</span><br><span class="line">        android:rotation="90"   //将整个group以中心点左边旋转的角度,360为一圈</span><br><span class="line">        android:scaleX="0.5"    //横坐标的缩放比例 , 取值1表示100%</span><br><span class="line">        android:scaleY="0.3"&gt;   //纵坐标的缩放比例,取值0.5表示50%,取值1.5表示150%</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>   //这个标签是重头戏,矢量图绘制的路径</span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"path_name"</span>    //为这个<span class="attr">path</span>标记的名字,在使用<span class="attr">objectAnimator</span>的时候用来区分给哪个部分施加动画</span></span><br><span class="line"><span class="tag">            <span class="attr">android:pathData</span>=<span class="string">"m 0,0 L50,0 L100,100 L0,100 z"</span>    //这个是<span class="attr">SVG</span>的语法,下面讲</span></span><br><span class="line"><span class="tag">            <span class="attr">android:fillColor</span>=<span class="string">"@color/red"</span>  //定义填充图形的颜色，如果没有定义则不填充路径</span></span><br><span class="line"><span class="tag">            <span class="attr">android:fillAlpha</span>=<span class="string">"1"</span>       //定义填充图形的透明度，取值范围<span class="attr">0</span>到<span class="attr">1</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:strokeAlpha</span>=<span class="string">"0.5"</span>   //定义路径的透明度,取值范围<span class="attr">0</span>到<span class="attr">1</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:strokeColor</span>=<span class="string">"#ff0000ff"</span> //定义如何绘制路径，如果没有定义则不显示路径</span></span><br><span class="line"><span class="tag">            <span class="attr">android:strokeWidth</span>=<span class="string">"20"</span>    //线段的宽度</span></span><br><span class="line"><span class="tag">            <span class="attr">android:strokeLineCap</span>=<span class="string">"butt|round|square"</span>   //线的末端形状,<span class="attr">butt</span>严格到指定的坐标就截至,<span class="attr">round</span>是圆角,<span class="attr">square</span>是方形，到指定的坐标后还会再冒出一点来</span></span><br><span class="line"><span class="tag">            <span class="attr">android:strokeLineJoin</span>=<span class="string">"round|bevel|miter"</span>  //线的连接处形状,<span class="attr">round</span>是圆角的,<span class="attr">bevel</span>和<span class="attr">miter</span>貌似看不出来有什么区别<span class="attr">....</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:trimPathStart</span>=<span class="string">"0.5"</span>    //顾名思义,从<span class="attr">path</span>开始的地方(<span class="attr">0</span>%)去除<span class="attr">path</span>,去除到指定的百分比位置,取值范围<span class="attr">0</span>到<span class="attr">1</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:trimPathEnd</span>=<span class="string">"0.5"</span>      //顾名思义,从<span class="attr">path</span>结束的地方(<span class="attr">100</span>%的地方)去除<span class="attr">path</span>,去除到指定的百分比位置,取值范围<span class="attr">0</span>到<span class="attr">1</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:trimPathOffset</span>=<span class="string">"0.5"</span>   //这个属性是和上面两个属性共同使用的,单独使用没有用,这个属性的意思是,在去除<span class="attr">path</span>的时候设置<span class="attr">path</span>原点的位置,按百分比设置,取值范围<span class="attr">0</span>到<span class="attr">1</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">vector</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面就来重点讲解path标签，path标签是用来创建SVG的，就像用指令控制一只画笔，path标签所支持的指令有以下几种。</p><h2 id="path-标签中的绘图指令"><a href="#path-标签中的绘图指令" class="headerlink" title="path 标签中的绘图指令"></a>path 标签中的绘图指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">M &#x3D; moveto(M X, Y): 将画笔移动到指定的位置，但未发生绘制</span><br><span class="line">L &#x3D; lineto(L X, Y): 画直线到指定位置</span><br><span class="line">H &#x3D; horizontal(H X): 画水平线到指定X坐标</span><br><span class="line">V &#x3D; vertical lineto(V Y): 画垂直线到指定Y坐标</span><br><span class="line">C &#x3D; curveto(C X1,Y1,X1,Y2,ENDX,ENDY): 画三次贝塞尔曲线</span><br><span class="line">S &#x3D; smooth curveto(S X2,Y2,ENDX,ENDY): 画三次贝塞尔曲线</span><br><span class="line">Q &#x3D; quadratic Belzier curve(Q X,Y,ENDX,ENDY): 二次贝塞尔曲线</span><br><span class="line">T &#x3D; smooth quadratic Belzier curveto(T ENDX,ENDY): 映射前面路径后的终点</span><br><span class="line">A &#x3D; elliptical Arc(A RX,RY,XROTATION,FLAG1,FLAG2,X,Y): 画弧线</span><br><span class="line">Z &#x3D; closepath(): 关闭路径，把前面的路径连起来</span><br></pre></td></tr></table></figure><p>在使用以上指令时，需要注意：</p><ol><li>坐标轴以（0，0）为中心，X轴水平向右，Y轴水平向下</li><li>所有指令大小写均可。大写绝对定位，参考全局坐标系；小写相对定位，参考父容器坐标系</li><li>指令和数据间的空格可以省略，可以用逗号隔开，也可以用空格</li><li>同一指令出现多次可以只用一个</li></ol><p>SVG的指令参数非常复杂，但是在android中，不需要太多太复杂的SVG图形，所以我们先来掌握几个常用的指令，在以后的学习中，读者将会慢慢掌握更多的SVG绘制技巧和方法。</p><h3 id="常用指令讲解"><a href="#常用指令讲解" class="headerlink" title="常用指令讲解"></a>常用指令讲解</h3><ul><li>M ：类似Android绘图中path类的moveTo方法，即将画笔移动到某一点但并没有发生绘制动作，下面配合L进行讲解</li></ul><hr><ul><li>L ：画一条直线</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">      <span class="attr">...</span>省略一些代码</span></span><br><span class="line"><span class="tag">      <span class="attr">android:pathData</span>=<span class="string">"M 20 50 L 80 50"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>如图：</p><img src="/2019/07/12/SVG%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/svg1.png" class="" title="svg1"><p> 上面表示把画笔放在（20,50）位置，连直线到80，50点 。</p><p>同时L后面还可以跟H或V指令来绘制水平、竖直线，后面的参数是x坐标（H指令）或y坐标（V指令）,如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">        <span class="attr">...</span>省略一些代码</span></span><br><span class="line"><span class="tag">        <span class="attr">android:pathData</span>=<span class="string">"M 20 50 L 80 50 V 80 H 20"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>如图：</p><img src="/2019/07/12/SVG%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/svg2.png" class="" title="svg2"><hr><ul><li>A ：绘制一段弧线，且弧线不允许闭合，可以把弧线想象成椭圆的某一段，A指令有以下7个参数：</li></ul><ol><li><p>RX，RY 指所在椭圆的半轴大小</p></li><li><p>XROTATION 指椭圆的X轴与水平方向的顺时针方向夹角，可以想象成一个水平的椭圆绕中心点顺时针旋转XRORATION的额角度</p></li><li><p>FLAG1 只有俩个值，1表示大角度弧线，0表示小角度弧线</p></li><li><p>FLAG2 只有俩个值，1为顺时针，0反之</p></li><li><p>X，Y 为终点坐标  </p></li></ol><p>看代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">        <span class="attr">...</span>省略一些代码</span></span><br><span class="line"><span class="tag">        <span class="attr">android:pathData</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        M 50 50</span></span></span><br><span class="line"><span class="tag"><span class="string">        a 30 15 0 1 0 1 0"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>再看图：</p><img src="/2019/07/12/SVG%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/svg3.png" class="" title="svg3"><p> <strong>图一</strong> </p><p>上面表示把画笔放在（50,50）位置；30, 15分别表示椭圆的x，y半轴大小；0表示x轴不旋转；1表示用大角度弧线绘制；0表示顺时针：1，0表示相对与以（50，50）为起始点的坐标轴的坐标，因为a是小写。<br>再看一段代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">     <span class="attr">...</span>省略一些代码</span></span><br><span class="line"><span class="tag">     <span class="attr">android:pathData</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">     M 25 50</span></span></span><br><span class="line"><span class="tag"><span class="string">     a 25 25 0 1 0 50 0"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>再看图：</p><img src="/2019/07/12/SVG%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/svg4.png" class="" title="svg4"><p> <strong>图二</strong> </p><p>可以看到这里显示了一个半圆，因为这里的X，Y轴大小相等 。 </p><p>再看一段代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">      <span class="attr">...</span>省略一些代码</span></span><br><span class="line"><span class="tag">      <span class="attr">android:pathData</span>=<span class="string">"M 25 50</span></span></span><br><span class="line"><span class="tag"><span class="string">      a 25 25 0 1 0 40 0"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>再看图：</p><img src="/2019/07/12/SVG%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/svg5.png" class="" title="svg5"><p> <strong>图三</strong> </p><p>这里把终点x轴坐标改为40，图中显示了圆的大部分 。 </p><p>看一段代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">       <span class="attr">...</span>省略一些代码</span></span><br><span class="line"><span class="tag">       <span class="attr">android:pathData</span>=<span class="string">"M 25 50</span></span></span><br><span class="line"><span class="tag"><span class="string">       a 25 25 0 0 0 40 0"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>再看图：</p><img src="/2019/07/12/SVG%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/svg6.png" class="" title="svg6"><p> <strong>图四</strong> </p><p>这里把FLAG1改为0，与图三相比，发现弧度变小了，因为用小弧度画。 </p><p>看一段代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">      <span class="attr">...</span>省略一些代码  </span></span><br><span class="line"><span class="tag">      <span class="attr">android:pathData</span>=<span class="string">"M 25 50</span></span></span><br><span class="line"><span class="tag"><span class="string">      a 25 25 0 0 1 40 0"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>再看图：</p><img src="/2019/07/12/SVG%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/svg7.png" class="" title="svg7"><p><strong>图五</strong> </p><p>这里把FLAG2改为1，与图四相比，图形翻转了，因为画的方向不一样了 ,  把A指令的几个图结合看一下，就能弄懂A这个指令了。</p><hr><p>关于贝塞尔指令的，这里就不过多介绍了，放出几个链接供大家学习：<br><a href="http://www.cnblogs.com/jay-dong/archive/2012/09/26/2704188.html" target="_blank" rel="noopener">贝塞尔曲线初探</a><br><a href="https://github.com/OCNYang/Android-Animation-Set/wiki/SVG-讲解" target="_blank" rel="noopener">SVG讲解</a> </p><hr><h2 id="VectorDrawable和AnimatedVectorDrawable"><a href="#VectorDrawable和AnimatedVectorDrawable" class="headerlink" title="VectorDrawable和AnimatedVectorDrawable"></a>VectorDrawable和AnimatedVectorDrawable</h2><p>Coogle在Android5.0X中提供了俩个API来帮助支持SVG：</p><ul><li><p>VectorDrawable</p></li><li><p>AnimatedVectorDrawable</p><p>其中VectorDrawable用于创建XML文件的SVG图形，即前面的vector标签，并结合AnimatedVectorDrawable来完成动画效果。</p><h3 id="1、-VectorDrawable"><a href="#1、-VectorDrawable" class="headerlink" title="1、 VectorDrawable"></a>1、 VectorDrawable</h3><p>在XML中创建一个静态的XMLSVG图形，通常会形成如下的树形结构：</p></li></ul><img src="/2019/07/12/SVG%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/svg8.png" class="" title="svg8"><p> <strong>树形结构</strong>  </p><p>path是树形结构中最小的单位，而通过Group可以将不同的path进行组合，接下来我们使用vector标签创建SVG图形，代码如下： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">vector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:width</span>=<span class="string">"200dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:height</span>=<span class="string">"200dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:viewportWidth</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:viewportHeight</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"line"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"path1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:strokeColor</span>=<span class="string">"@android:color/holo_green_dark"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:strokeWidth</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:strokeLineCap</span>=<span class="string">"round"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:pathData</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">            M 20 20</span></span></span><br><span class="line"><span class="tag"><span class="string">            L 50 20 80 20"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"path2"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:strokeLineCap</span>=<span class="string">"round"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:strokeWidth</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:strokeColor</span>=<span class="string">"@android:color/holo_green_dark"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:pathData</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">            M 20 80</span></span></span><br><span class="line"><span class="tag"><span class="string">            L 50 80 80 80"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">vector</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码画了俩条线，每条线由三个点控制，形成初始状态，下面立马通过AnimatedVectorDrawable来实现动画效果。</p><pre><code>源码文末给出</code></pre><h3 id="2、-AnimatedVectorDrawable"><a href="#2、-AnimatedVectorDrawable" class="headerlink" title="2、 AnimatedVectorDrawable"></a>2、 AnimatedVectorDrawable</h3><p>AnimatedVectorDrawable就是通过连接静态的VectorDrawable和动态的objectAninmator来为VectorDrawable提供动画效果，分几个步骤来使用：</p><ul><li>1、在XML中通过animated-vector标签来声明对AnimatedVectorDrawable的使用，并指定它的drawable属性，target标签中的name属性和animation属性 </li></ul><p>代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">animated-vector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:drawable</span>=<span class="string">"@drawable/svg_path"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:animation</span>=<span class="string">"@animator/anim_path1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"path1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:animation</span>=<span class="string">"@animator/anim_path2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"path2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">animated-vector</span>&gt;</span></span><br></pre></td></tr></table></figure><p>android:drawable=”@drawable/svg_path”指定了上面创建的VectorDrawable即画的俩条线；target标签中的name指定了要作用动画的path或Group的name, 即俩者的name要保持一致，这样系统才能找到要实现动画的元素;taret标签中的animation指定了要作用的都动画。</p><p>在本例中，path1的动画代码如下: </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">objectAnimator</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:duration</span>=<span class="string">"500"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:propertyName</span>=<span class="string">"pathData"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:valueType</span>=<span class="string">"pathType"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:valueFrom</span>=</span></span><br><span class="line"><span class="tag">    "<span class="attr">M</span> <span class="attr">20</span> <span class="attr">20</span></span></span><br><span class="line"><span class="tag">     <span class="attr">L</span> <span class="attr">50</span> <span class="attr">20</span> <span class="attr">80</span> <span class="attr">20</span>"</span></span><br><span class="line"><span class="tag">    <span class="attr">android:valueTo</span>=</span></span><br><span class="line"><span class="tag">    "<span class="attr">M</span> <span class="attr">20</span> <span class="attr">20</span></span></span><br><span class="line"><span class="tag">     <span class="attr">L</span> <span class="attr">50</span> <span class="attr">50</span> <span class="attr">80</span> <span class="attr">20</span>"</span></span><br><span class="line"><span class="tag">    <span class="attr">android:interpolator</span>=<span class="string">"@android:anim/bounce_interpolator"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">objectAnimator</span>&gt;</span></span><br></pre></td></tr></table></figure><p>path2的动画代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">objectAnimator</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:duration</span>=<span class="string">"500"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:propertyName</span>=<span class="string">"pathData"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:valueType</span>=<span class="string">"pathType"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:valueFrom</span>=</span></span><br><span class="line"><span class="tag">    "<span class="attr">M</span> <span class="attr">20</span> <span class="attr">80</span></span></span><br><span class="line"><span class="tag">     <span class="attr">L</span> <span class="attr">50</span> <span class="attr">80</span> <span class="attr">80</span> <span class="attr">80</span>"</span></span><br><span class="line"><span class="tag">    <span class="attr">android:valueTo</span>=</span></span><br><span class="line"><span class="tag">    "<span class="attr">M</span> <span class="attr">20</span> <span class="attr">80</span></span></span><br><span class="line"><span class="tag">     <span class="attr">L</span> <span class="attr">50</span> <span class="attr">50</span> <span class="attr">80</span> <span class="attr">80</span>"</span></span><br><span class="line"><span class="tag">    <span class="attr">android:interpolator</span>=<span class="string">"@android:anim/bounce_interpolator"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">objectAnimator</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上的俩个动画代码中都定义了一个pathType的属性动画，并指定了变换的初始值分别为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//path1</span><br><span class="line"> android:valueFrom=</span><br><span class="line">    "M 20 20</span><br><span class="line">     L 50 20 80 20"</span><br><span class="line">//path2</span><br><span class="line"> android:valueFrom=</span><br><span class="line">    "M 20 80</span><br><span class="line">     L 50 80 80 80"</span><br></pre></td></tr></table></figure><p>结束值为: </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//path1</span><br><span class="line"> android:valueTo=</span><br><span class="line">    "M 20 20</span><br><span class="line">     L 50 50 80 20"</span><br><span class="line">//path2</span><br><span class="line">  android:valueTo=</span><br><span class="line">    "M 20 80</span><br><span class="line">     L 50 50 80 80"</span><br></pre></td></tr></table></figure><p>这里要注意的是，SVG的路径变换属性动画中，变换前后的节点数必须相同，这也是为什么前面需要使用三个点来绘制一条直线，因为后面需要中点进行动画变换 。</p><ul><li>2、把AnimatedVectorDrawable的XML文件设置给ImageView</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">"@+id/iv_path"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:src</span>=<span class="string">"@drawable/svg_path_anim"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">...</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>3、代码中启动AnimatedVectorDrawable动画</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ImageView ivPath;</span><br><span class="line">...</span><br><span class="line">ivPath = findViewById(R.id.iv_path);</span><br><span class="line">       ivPath.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void onClick(View v) &#123;</span><br><span class="line">               Drawable drawable = ivPath.getDrawable();</span><br><span class="line">               if(drawable instanceof Animatable)&#123;</span><br><span class="line">                   ((Animatable)drawable).start();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><p>这样俩个path就实现了动画效果，如图：</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>了解了上面SVG知识，也就基本入门了，可以用SVG来实现简单的图标，当然现在也有一些工具来生成SVG图片，不用我们手动去写xml，但是了解它背后的实现也是很重要的，在以后的深入学习中，你会发现SVG结合动画会产生非常好看的动态效果。希望大家阅读完有所收获。</p><p><a href="https://github.com/rain9155/SVGTest" target="_blank" rel="noopener">本文相关源码</a></p><p>参考资料：</p><p>《Android群英传》</p><p><a href="http://www.w3school.com.cn/svg/index.asp" target="_blank" rel="noopener">SVG教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;SVG对于android开发者听起来是陌生的东西，因为它是属于前端的产物，其实Android中也是支持SVG的，语法也很简单易懂，本文就通过我自己学习的经历，和大家一起学习一下SVG。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="svg" scheme="http://yoursite.com/tags/svg/"/>
    
  </entry>
  
  <entry>
    <title>Activity应用窗口的添加过程</title>
    <link href="http://yoursite.com/2019/07/10/Activity%E5%BA%94%E7%94%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%B7%BB%E5%8A%A0%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/07/10/Activity%E5%BA%94%E7%94%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%B7%BB%E5%8A%A0%E8%BF%87%E7%A8%8B/</id>
    <published>2019-07-10T07:20:32.000Z</published>
    <updated>2023-01-07T10:44:48.650Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>上一篇文章<a href="https://rain9155.github.io/2019/03/22/Window,%20WindowManager%E5%92%8CWindowManagerService%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/" target="_blank" rel="noopener">Window, WindowManager和WindowManagerService之间的关系</a></li></ul><p>从上一篇文章中，我们了解到了Window的体系机制，也知道了window分为三种类型，分别是应用窗口(Application Window)、子窗口(Sub Window)、系统窗口(System Window），本文通过源码以Activity为例讲解一下应用窗口的添加过程，如果没看过上一篇文章建议先看，对于不同类型的窗口的添加，它们在WindowManager中的处理过程会有一点不一样，但是对于在WMS的处理过程中，基本上都是一样的。所以本文深入讲解一下Activity窗口的添加过程，知道了这个过程，对于其他类型的窗口添加也就能举一反三了。</p><a id="more"></a><pre><code>本文基于Android8.0, 相关源码位置如下:frameworks/base/core/java/android/view/*.java（*代表Window, WindowManager,         WindowManagerImpl，WindowManagerGlobal, ViewRootImpl）frameworks/base/core/java/android/app/*.java（*代表Activity，ActivityThread）            frameworks/base/core/java/com/android/internal/policy/PhoneWindow.java    frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java    frameworks/base/services/core/java/com/android/server/wm/Session.java</code></pre><h2 id="Activity的Window创建-Activity-attach"><a href="#Activity的Window创建-Activity-attach" class="headerlink" title="Activity的Window创建 - Activity  :: attach()"></a>Activity的Window创建 - Activity  :: attach()</h2><p>熟悉<a href="https://rain9155.github.io/2019/05/19/Android8.0%E7%9A%84Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B1/" target="_blank" rel="noopener">Activity启动流程</a>的都知道Window的创建过程是在activity的attach方法中，它在调用Activity的onCreate方法前完成一些重要数据的初始化，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Activity.java</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Context context, ActivityThread aThread,</span></span></span><br><span class="line"><span class="function"><span class="params">            Instrumentation instr, IBinder token, <span class="keyword">int</span> ident,</span></span></span><br><span class="line"><span class="function"><span class="params">            Application application, Intent intent, ActivityInfo info,</span></span></span><br><span class="line"><span class="function"><span class="params">            CharSequence title, Activity parent, String id,</span></span></span><br><span class="line"><span class="function"><span class="params">            NonConfigurationInstances lastNonConfigurationInstances,</span></span></span><br><span class="line"><span class="function"><span class="params">            Configuration config, String referrer, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="function"><span class="params">                  Window window, ActivityConfigCallback activityConfigCallback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//1、关注这里，创建PhoneWindow</span></span><br><span class="line">    mWindow = <span class="keyword">new</span> PhoneWindow(<span class="keyword">this</span>, window, activityConfigCallback);</span><br><span class="line">    <span class="comment">//下面都是设置window的一些属性，如回调、软键盘模式</span></span><br><span class="line">    mWindow.setWindowControllerCallback(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//这个设置Window的Callback回调</span></span><br><span class="line">    mWindow.setCallback(<span class="keyword">this</span>);</span><br><span class="line">    mWindow.setOnWindowDismissedCallback(<span class="keyword">this</span>);</span><br><span class="line">    mWindow.getLayoutInflater().setPrivateFactory(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (info.softInputMode != WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED) &#123;</span><br><span class="line">        mWindow.setSoftInputMode(info.softInputMode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (info.uiOptions != <span class="number">0</span>) &#123;</span><br><span class="line">        mWindow.setUiOptions(info.uiOptions);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//2、关注这里，把Window与WindowManager进行关联</span></span><br><span class="line">     mWindow.setWindowManager(</span><br><span class="line">                (WindowManager)context.getSystemService(Context.WINDOW_SERVICE),</span><br><span class="line">                mToken, mComponent.flattenToString(),</span><br><span class="line">                (info.flags &amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) != <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//把WindowManager与Activity进行关联</span></span><br><span class="line">    mWindowManager = mWindow.getWindowManager();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在attach里。跟Window无关的我都省略掉了，我们看到attach方法里，在注释1中，首先new 了一个PhoneWindow赋值mWinow，mWindow是Window类型，它是一个抽象类，所以从这里可以看出Activity的Window的具体实现类是PhoneWindow，接下来，给mWindow设置回调，传入的参数是this，说明Activity实现了这些回调接口，这样当Window接收到外界的状态变化或输入事件时就会回调Activity的方法，其中我们比较熟悉的接口回调是Window的Callback接口，它里面有我们熟悉的回调方法如：dispatchTouchEvent()、onWindowFocusChanged()、onAttachedToWindow()和onDetachedFromWindow()。</p><p>接着我们来看注释2，这里通过Window的setWindowManager方法把WanagerManger与Window进行关联，然后通过Window的getWindowManager()把WanagerManger与Activity进行关联。</p><h2 id="Window与WanagerManager的关联-Window-setWindowManager"><a href="#Window与WanagerManager的关联-Window-setWindowManager" class="headerlink" title="Window与WanagerManager的关联 - Window :: setWindowManager()"></a>Window与WanagerManager的关联 - Window :: setWindowManager()</h2><p>我们知道Window的添加、更新和删除都是要通过WanagerManager的，接下来我们看看Window与WanagerManager是如何关联的，从上面知道该过程是在Window的setWindowManager方法中，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Window.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWindowManager</span><span class="params">(WindowManager wm, IBinder appToken, String appName, <span class="keyword">boolean</span> hardwareAccelerated)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//token是Window的重要属性之一，是IBinder类型，它这里等于Activity中的mToken</span></span><br><span class="line">        mAppToken = appToken;</span><br><span class="line">        <span class="comment">//应用名</span></span><br><span class="line">        mAppName = appName;</span><br><span class="line">      <span class="comment">//是否硬件加速</span></span><br><span class="line">        mHardwareAccelerated = hardwareAccelerated</span><br><span class="line">                || SystemProperties.getBoolean(PROPERTY_HARDWARE_UI, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//获得系统级服务WMS在本地进程的代理</span></span><br><span class="line">        <span class="keyword">if</span> (wm == <span class="keyword">null</span>) &#123;</span><br><span class="line">            wm = (WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">//1、关注这里，调用WindowManagerImpl的createLocalWindowManager方法，创建WindowManager</span></span><br><span class="line">        mWindowManager = ((WindowManagerImpl)wm).createLocalWindowManager(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在setWindowManager方法中，是有关window的一些属性的赋值，其中mAppToken是Activity中的token，它在Activity启动的过程中从AMS中传递过来的，这里你只要记住Activity应用窗口的token值是Activity中的token值，接下来如果wm为空就获取WMS并转成WindowManager赋值给wm，wm是WindowManager，它是一个接口，它的具体实现类是WindowManagerImpl，所以接下来的注释1中wm转成WindowManagerImpl，并调用WindowManagerImpl的createLocalWindowManager方法，我们来看看WindowManagerImpl的createLocalWindowManager方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WindowManagerImpl.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WindowManagerImpl <span class="title">createLocalWindowManager</span><span class="params">(Window parentWindow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WindowManagerImpl(mContext, parentWindow);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="title">WindowManagerImpl</span><span class="params">(Context context, Window parentWindow)</span> </span>&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mParentWindow = parentWindow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法很简单，只是简单的返回一个WindowManagerImpl对象，注意它传入了一个parentWindow参数，它是Window类型，说明此时构建的WindowManagerImpl是与具体的Window关联的，至此，在java层上Window就已经与WindowManager建立起联系。 </p><h2 id="Activity的Window的视图创建-Window-setContentView"><a href="#Activity的Window的视图创建-Window-setContentView" class="headerlink" title="Activity的Window的视图创建 - Window :: setContentView()"></a>Activity的Window的视图创建 - Window :: setContentView()</h2><p>从上一篇文章我们知道，View是依附在Window上的，在Activity的启动过程中的attach方法里已经完成了Activity的Window的创建和与WindowManager的关联，那么Activity的视图即View是在哪里创建的呢？答案是在我们熟悉的setContentView方法中，我们先来看一张图：</p><img src="/2019/07/10/Activity%E5%BA%94%E7%94%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%B7%BB%E5%8A%A0%E8%BF%87%E7%A8%8B/window1.png" class="" title="window1"><p>如图所示每一个Activity都有一个顶级View叫做DecorView，一般情况下它会包含一个竖直方向的LinearLayout，在这个LinearLayout中包含两部分(具体情况与Android的版本与主题有关)，上面是标题栏，下面是内容布局，内容布局其实是一个FrameLayout，我们平时setContentView指定的布局其实是set到了这个FrameLayout中，所以这个方法叫setContentView也是也是很贴和实际的，因为FrameLayout的id就是android.R.id.content，理解了这些知识后，我们来看Activity中的setContentView方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Activity.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(@LayoutRes <span class="keyword">int</span> layoutResID)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、关注这里，其实调用的是PhoneWindow的setContentView，setContentView里面会加载内容布局并添加进DecorView中</span></span><br><span class="line">    getWindow().setContentView(layoutResID);</span><br><span class="line">    <span class="comment">//如果Activity主题是带ActionBar的话，这里面就会创建ActionBar并添加进DecorView中</span></span><br><span class="line">    initWindowDecorActionBar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看注释1，前面已经讲过Activity的Window的创建，所以这里的getWindow其实返回的是Window，而Window的实现类是PhoneWindow，所以这里调用的是PhoneWindow的setContentView，并传入了我们的内容布局id，PhoneWindow的setContentView方法的相应源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PhoneWindow.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(<span class="keyword">int</span> layoutResID)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1，根据mContentParent是否为空做出不同动作，mContentParent就是上面所讲的id为android.R.id.content的布局，用来set我们id为layoutResID的内容布局</span></span><br><span class="line">    <span class="keyword">if</span> (mContentParent == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//1.1、mContentParent为空，创建DecorView，并加载mContentParent</span></span><br><span class="line">        installDecor();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class="line">        <span class="comment">//1.2、mContentParent不为空，并且没有转场动画，就把mContentParent中的View视图清空，下面会重新加载</span></span><br><span class="line">        mContentParent.removeAllViews();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2、根据是否有转场动画，做出不同的动作</span></span><br><span class="line">    <span class="keyword">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class="line">        <span class="comment">//2.1、有转场动画，创建Scene完成转场动画</span></span><br><span class="line">        <span class="keyword">final</span> Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID， getContext());</span><br><span class="line">        transitionTo(newScene);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//2.2、没有转场动画，直接把我们的layoutResID的布局加载进mContentParent</span></span><br><span class="line">        mLayoutInflater.inflate(layoutResID, mContentParent);</span><br><span class="line">    &#125;</span><br><span class="line">     mContentParent.requestApplyInsets();</span><br><span class="line">    <span class="keyword">final</span> Callback cb = getCallback();</span><br><span class="line">    <span class="keyword">if</span> (cb != <span class="keyword">null</span> &amp;&amp; !isDestroyed()) &#123;</span><br><span class="line">        <span class="comment">//触发Activity的onContentChanged方法, 因为Activity实现了这些回调接口</span></span><br><span class="line">        cb.onContentChanged();</span><br><span class="line">    &#125;</span><br><span class="line">    mContentParentExplicitlySet = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从注释中可以看出这个方法如果忽略转场动画的处理的话，可以分为两部分，第一部分是注释1.1的DecorView的创建和加载mContentParent，第二部分是注释2.2的把我们的layoutResID的布局加载进mContentParent，其中重点是第一部分，下面我们来分析PhoneWindow的setContentView方法的第一部分。</p><h3 id="1、PhoneWindow-installDecor"><a href="#1、PhoneWindow-installDecor" class="headerlink" title="1、PhoneWindow :: installDecor()"></a>1、PhoneWindow :: installDecor()</h3><p>我们来看PhoneWindow的installDecor方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PhoneWindow.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installDecor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//1、根据mDecor是否为空，做出不同动作，mDecor就是DecorView，它是继承自FrameLayout</span></span><br><span class="line">    <span class="keyword">if</span> (mDecor == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//1.1、mDecor为空，就创建mDecor</span></span><br><span class="line">        mDecor = generateDecor(-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//1.2、、mDecor不为空，不用重复创建，把Window设置给DecorView</span></span><br><span class="line">        mDecor.setWindow(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mContentParent == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//2、如果mContentParent为空，就加载mContentParent</span></span><br><span class="line">        mContentParent = generateLayout(mDecor);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>installDecor()有一百多行代码，但是重点就是上面几句，因为这里我们是第一次创建mDecor，所以mDecor就为空，那么上面就分为两部分，第一部分是注释1.1的创建mDecor，第二部分是注释2的加载加载mContentParent，我们先看installDecor方法的第一部分。</p><h4 id="1-1-PhoneWindow-generateDecor"><a href="#1-1-PhoneWindow-generateDecor" class="headerlink" title="1.1 PhoneWindow  :: generateDecor()"></a>1.1 PhoneWindow  :: generateDecor()</h4><p>PhoneWindow的generateDecor()方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PhoneWindow.java</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> DecorView <span class="title">generateDecor</span><span class="params">(<span class="keyword">int</span> featureId)</span> </span>&#123;</span><br><span class="line">    Context context;</span><br><span class="line">    <span class="keyword">if</span> (mUseDecorContext) &#123;</span><br><span class="line">        Context applicationContext = getContext().getApplicationContext();</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        context = getContext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1、关注这里，new了一个DecorView</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DecorView(context, featureId, <span class="keyword">this</span>, getAttributes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到generateDecor就是简单的创建了一个DecorView并返回，其中this是Window实例，DecorView的构造方法中会把Window设置给DecorView中的mWindow。我们看一下DecorView是什么，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DecorView.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecorView</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> <span class="keyword">implements</span> <span class="title">RootViewSurfaceTaker</span>, <span class="title">WindowCallbacks</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到DecorView就是一个FrameLayout。</p><p>我们回到installDecor方法中，接下来我们来看installDecor方法的第二部分。</p><h4 id="1-2-PhoneWindow-generateLayout-mDecor"><a href="#1-2-PhoneWindow-generateLayout-mDecor" class="headerlink" title="1.2  PhoneWindow  :: generateLayout(mDecor)"></a>1.2  PhoneWindow  :: generateLayout(mDecor)</h4><p>PhoneWindow的generateLayout()方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PhoneWindow.java</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ViewGroup <span class="title">generateLayout</span><span class="params">(DecorView decor)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里获取到当前的Activity的主题theme的属性，下面忽略的，都是根据theme的属性设置Activity的Window</span></span><br><span class="line">    TypedArray a = getWindowStyle();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//这个layoutResource是一个布局id</span></span><br><span class="line">    <span class="keyword">int</span> layoutResource;</span><br><span class="line">    <span class="comment">//获得theme的features</span></span><br><span class="line">    <span class="keyword">int</span> features = getLocalFeatures();</span><br><span class="line">    <span class="comment">//下面根据features获得不同的layoutResource</span></span><br><span class="line">    <span class="keyword">if</span> ((features &amp; (<span class="number">1</span> &lt;&lt; FEATURE_SWIPE_TO_DISMISS)) != <span class="number">0</span>) &#123;</span><br><span class="line">        layoutResource = R.layout.screen_swipe_dismiss;</span><br><span class="line">        setCloseOnSwipeEnabled(<span class="keyword">true</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((features &amp; ((<span class="number">1</span> &lt;&lt; FEATURE_LEFT_ICON) | (<span class="number">1</span> &lt;&lt; FEATURE_RIGHT_ICON))) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mIsFloating) &#123;</span><br><span class="line">            TypedValue res = <span class="keyword">new</span> TypedValue();</span><br><span class="line">            getContext().getTheme().resolveAttribute(</span><br><span class="line">                R.attr.dialogTitleIconsDecorLayout, res, <span class="keyword">true</span>);</span><br><span class="line">            layoutResource = res.resourceId;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            layoutResource = R.layout.screen_title_icons;</span><br><span class="line">        &#125;</span><br><span class="line">        removeFeature(FEATURE_ACTION_BAR);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((features &amp; ((<span class="number">1</span> &lt;&lt; FEATURE_PROGRESS) | (<span class="number">1</span> &lt;&lt; FEATURE_INDETERMINATE_PROGRESS))) != <span class="number">0</span></span><br><span class="line">               &amp;&amp; (features &amp; (<span class="number">1</span> &lt;&lt; FEATURE_ACTION_BAR)) == <span class="number">0</span>) &#123;</span><br><span class="line">        layoutResource = R.layout.screen_progress;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((features &amp; (<span class="number">1</span> &lt;&lt; FEATURE_CUSTOM_TITLE)) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mIsFloating) &#123;</span><br><span class="line">            TypedValue res = <span class="keyword">new</span> TypedValue();</span><br><span class="line">            getContext().getTheme().resolveAttribute(</span><br><span class="line">                R.attr.dialogCustomTitleDecorLayout, res, <span class="keyword">true</span>);</span><br><span class="line">            layoutResource = res.resourceId;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            layoutResource = R.layout.screen_custom_title;</span><br><span class="line">        &#125;</span><br><span class="line">        removeFeature(FEATURE_ACTION_BAR);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((features &amp; (<span class="number">1</span> &lt;&lt; FEATURE_NO_TITLE)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mIsFloating) &#123;</span><br><span class="line">            TypedValue res = <span class="keyword">new</span> TypedValue();</span><br><span class="line">            getContext().getTheme().resolveAttribute(</span><br><span class="line">                R.attr.dialogTitleDecorLayout, res, <span class="keyword">true</span>);</span><br><span class="line">            layoutResource = res.resourceId;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((features &amp; (<span class="number">1</span> &lt;&lt; FEATURE_ACTION_BAR)) != <span class="number">0</span>) &#123;</span><br><span class="line">            layoutResource = a.getResourceId(</span><br><span class="line">                R.styleable.Window_windowActionBarFullscreenDecorLayout,</span><br><span class="line">                R.layout.screen_action_bar);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            layoutResource = R.layout.screen_title;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((features &amp; (<span class="number">1</span> &lt;&lt; FEATURE_ACTION_MODE_OVERLAY)) != <span class="number">0</span>) &#123;</span><br><span class="line">        layoutResource = R.layout.screen_simple_overlay_action_mode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//1、我们选取这个 R.layout.screen_simple 布局作为例子看一下</span></span><br><span class="line">        layoutResource = R.layout.screen_simple;</span><br><span class="line">    &#125;</span><br><span class="line">    mDecor.startChanging();</span><br><span class="line">    <span class="comment">//2、将上面获取到的layoutResource对应的布局加载进DecorView中</span></span><br><span class="line">    mDecor.onResourcesLoaded(mLayoutInflater, layoutResource);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//3、因为layoutResource对应的布局已经加载进DecorView中了，所以这里可以通过findViewById获取android.R.id.content的布局</span></span><br><span class="line">    ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    mDecor.finishChanging();</span><br><span class="line"><span class="comment">//返回id为android.R.id.content的布局，赋值给mContentParent</span></span><br><span class="line">    <span class="keyword">return</span> contentParent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>generateLayout()这个方法非常长，但是它里面的逻辑很简单，这个方法的主要作用是根据当前的Activity的theme的属性设置Activity的Window，并把根据features获取到的布局加载进传进来的DecorView，并从DecorView中获取android.R.id.content的布局返回给mContentParent，我们只要看懂注释<strong>1~3</strong>就清楚了。</p><p>首先我们看注释1，因为if…else…的语句非常多，所以我就选了最后一个else语句的layoutResource对应的布局文件讲解，它的位置在：<strong>/frameworks/base/core/res/res/layout/screen_simple.xml</strong>，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 还记得上面那张图吗，DecorView一般情况下它会包含一个竖直方向的LinearLayout --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ViewStub是一个按需加载的View，它在用到时才会加载，而且只能加载一次，这里它的layout指向的是一个ActionBar的布局文件，所以这里把ViewStub看作一个ActionBar就行 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ViewStub</span> <span class="attr">android:id</span>=<span class="string">"@+id/action_mode_bar_stub"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:inflatedId</span>=<span class="string">"@+id/action_mode_bar"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout</span>=<span class="string">"@layout/action_mode_bar"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:theme</span>=<span class="string">"?attr/actionBarTheme"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这个就是id为android.R.id.content得布局，用来放置我们平时setContentView时set得内存布局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:id</span>=<span class="string">"@android:id/content"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:foregroundInsidePadding</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:foregroundGravity</span>=<span class="string">"fill_horizontal|top"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:foreground</span>=<span class="string">"?android:attr/windowContentOverlay"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>screen_simple.xml文件就是一个布局文件，大家把这个布局对应一下上面得那张图，就会有一种恍然大悟得感觉了，所以我们紧接着来看注释2，它就是把上面这个screen_simple.xml布局文件加载进DecorView中。</p><p>我们再看注释3，ID_ANDROID_CONTENT就是android.R.id.content的常量，看一下findViewById方法的源码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PhoneWindow.java  </span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T extends View&gt; <span class="function">T <span class="title">findViewById</span><span class="params">(@IdRes <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//getDecorView()就是获得到Window中的DecorView</span></span><br><span class="line">        <span class="keyword">return</span> getDecorView().findViewById(id);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到findViewById方法中获取到DecorView，然后调用DecorView的findViewById方法，因为在注释2中我们已经把layoutResource对应的布局加载进DecorView中了，所以这时就获取到android.R.id.content的布局。在generateLayout方法的最后，把android.R.id.content的布局返回给mContentParent。</p><p>我们再回到installDecor方法中，至此我们已经创建好<strong>DecorView</strong>，也通过DecorView获取到<strong>mContentParent, 即android.R.id.content的布局</strong>。</p><p>我们来分析PhoneWindow的setContentView方法的第二部分。</p><h3 id="2、mLayoutInflater-inflate-layoutResID-mContentParent"><a href="#2、mLayoutInflater-inflate-layoutResID-mContentParent" class="headerlink" title="2、mLayoutInflater.inflate(layoutResID, mContentParent)"></a>2、mLayoutInflater.inflate(layoutResID, mContentParent)</h3><p>layoutResID就是我们setContentView传进来的内容布局id，所以这里就把内容布局加载进mContentParent中了。至此Window的setContentView分析完毕。</p><p>这个过程如下图：</p><img src="/2019/07/10/Activity%E5%BA%94%E7%94%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%B7%BB%E5%8A%A0%E8%BF%87%E7%A8%8B/window2.jpg" class="" title="window2"><p>我们回到Activity的setContentView方法，其实到这里Activity的视图，也可以是说Activity的Window的视图DecorView就创建好了，接下来就是把这个DecorView显示到屏幕上。</p><h2 id="Activity的Window的视图添加-WindowManager-addView"><a href="#Activity的Window的视图添加-WindowManager-addView" class="headerlink" title="Activity的Window的视图添加  - WindowManager :: addView()"></a>Activity的Window的视图添加  - WindowManager :: addView()</h2><p>熟悉Activity的启动流程的都知道，Activity会在handleResumeActivity方法中把DecorView显示出来，而添加一个Winow是通过WindowManager的addView方法实现的，但是Window只是View的载体，并不是真实存在的，所以addView其实就是添加一个View，这个View是依附在Window上，并且这个View是 View Hierarchy 最顶端的根 View，而Activity的的顶级View是DecorView, 所以添加Activity的Window就是添加DecorView。我们来看一下handleResumeActivity方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ActivityThread.java</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">handleResumeActivity</span><span class="params">(IBinder token,  <span class="keyword">boolean</span> clearHide, <span class="keyword">boolean</span> isForward, <span class="keyword">boolean</span> reallyResume, <span class="keyword">int</span> seq, String reason)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ActivityClientRecord里面保存了Activity的信息</span></span><br><span class="line">    ActivityClientRecord r = mActivities.get(token);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//这个方法里面最终会回调Activity的onResume方法</span></span><br><span class="line">    r = performResumeActivity(token, clearHide, reason);</span><br><span class="line">    <span class="comment">//所以下面都是在执行onResume方法后的行为</span></span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//得到Activity</span></span><br><span class="line">        <span class="keyword">final</span> Activity a = r.activity;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//面if（r.window == null &amp;&amp; !a.mFinished &amp;&amp; willBeVisible）&#123;&#125;分支里面的逻辑主要是把Activity的Window的DecorView添加到WMS中</span></span><br><span class="line">        <span class="keyword">if</span> (r.window == <span class="keyword">null</span> &amp;&amp; !a.mFinished &amp;&amp; willBeVisible) &#123;</span><br><span class="line">            <span class="comment">//获取前面Activit创建的Window</span></span><br><span class="line">            r.window = r.activity.getWindow();</span><br><span class="line">            <span class="comment">//获取前面Window创建的DecorView</span></span><br><span class="line">            View decor = r.window.getDecorView();</span><br><span class="line">            <span class="comment">//先把DecorView设为不可见</span></span><br><span class="line">            decor.setVisibility(View.INVISIBLE);</span><br><span class="line">            <span class="comment">//Activity关联的WindowManager</span></span><br><span class="line">            ViewManager wm = a.getWindowManager();</span><br><span class="line">            <span class="comment">//下面设置Window的布局参数</span></span><br><span class="line">            WindowManager.LayoutParams l = r.window.getAttributes();</span><br><span class="line">            a.mDecor = decor;</span><br><span class="line">            <span class="comment">//窗口的类型是TYPE_BASE_APPLICATION，应用类型窗口</span></span><br><span class="line">            l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="keyword">if</span> (a.mVisibleFromClient) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!a.mWindowAdded) &#123;</span><br><span class="line">                    a.mWindowAdded = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="comment">//1、关注这里，调用WindowManager的addView方法</span></span><br><span class="line">                    wm.addView(decor, l);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="comment">//...</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (!willBeVisible) &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//面if（r.window == null &amp;&amp; !a.mFinished &amp;&amp; willBeVisible）&#123;&#125;分支里面的逻辑主要是把DecorView显示出来</span></span><br><span class="line">        <span class="keyword">if</span> (!r.activity.mFinished &amp;&amp; willBeVisible</span><br><span class="line">            &amp;&amp; r.activity.mDecor != <span class="keyword">null</span> &amp;&amp; !r.hideForNow) &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="keyword">if</span> (r.activity.mVisibleFromClient) &#123;</span><br><span class="line">                <span class="comment">//2、关注这里，上面已经把Window添加到WMS中了，所以里面会把DecorView显示出来, 见下面Activity.java</span></span><br><span class="line">                r.activity.makeVisible();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Activity.java</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeVisible</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">   <span class="comment">//把DecorView设为可见</span></span><br><span class="line">   mDecor.setVisibility(View.VISIBLE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的注释已经写的很清楚了，重点就是一句话：<strong>获取Activity的Window中的DecorView并调用WindowManager的addView方法添加DecorView，然后把DecorView设置为可见</strong>。到这里视图的添加已经转移到WindowManager中，阅读过上一篇文章的知道，WindowManager的实现类是WindowManagerImp，WindowManagerImp会把大部分操作转发给WindowManagerGlobal。</p><h3 id="1、WindowManagerGlobal-addView"><a href="#1、WindowManagerGlobal-addView" class="headerlink" title="1、WindowManagerGlobal :: addView()"></a>1、WindowManagerGlobal :: addView()</h3><p>所以我们直接看方法WindowManagerGlobal的addView()就行，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WindowManagerGlobal.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View view, ViewGroup.LayoutParams params,</span></span></span><br><span class="line"><span class="function"><span class="params">            Display display, Window parentWindow)</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    <span class="comment">//获取Window的LayoutParams</span></span><br><span class="line">    <span class="keyword">final</span> WindowManager.LayoutParams wparams = (WindowManager.LayoutParams) params;</span><br><span class="line">    <span class="comment">//这里的parentWindow不为空，因为从上面的Window与WanagerManager的关联可知，会调用createLocalWindowManager(this)来创建一个WanagerManagerImpl，这个this代表的PhoneWindow实例会传进WanagerManagerImpl构造中赋值给mParentWindow</span></span><br><span class="line">    <span class="comment">//1、调整窗口布局参数</span></span><br><span class="line">    <span class="keyword">if</span> (parentWindow != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//如果有设置父窗口，会通过adjustLayoutParamsForSubWindow()来调整params</span></span><br><span class="line">        parentWindow.adjustLayoutParamsForSubWindow(wparams);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ViewRootImpl root;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//2、构建ViewRootimpl</span></span><br><span class="line">        root = <span class="keyword">new</span> ViewRootImpl(view.getContext(), display);</span><br><span class="line">        <span class="comment">//3、把View、ViewRootimpl、LayoutParams保存</span></span><br><span class="line">        <span class="comment">//把上面调整好的params设置给待添加的View</span></span><br><span class="line">        view.setLayoutParams(wparams);</span><br><span class="line">        <span class="comment">//把待添加的View添加到View列表中</span></span><br><span class="line">        mViews.add(view);</span><br><span class="line">        <span class="comment">//把ViewRootimpl对象root添加到ViewRootimpl列表中</span></span><br><span class="line">        mRoots.add(root);</span><br><span class="line">        <span class="comment">//把params添加到params列表中</span></span><br><span class="line">        mParams.add(wparams);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//4、调用ViewRootImpl的setView将View显示到手机窗口上</span></span><br><span class="line">            root.setView(view, wparams, panelParentView);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">           <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述方法主要分为4个部分，我们先来看WindowManagerGlobal的addView传进来的4个参数，其中view、params和display三者是必不可少的，view就代表待添加的View，这里是DecorView，params就代表窗口布局参数，diaplay代表的是表示要输出的显示设备，而parentWindow表示父窗口，这里的父窗口并不一定是真正意义上的父窗口，有可能就是描述一个窗口的对象本身。在上述分析Activity的 WindowManager创建时就提到parentWindow就是PhoneWindow本身。</p><h4 id="1-1、adjustLayoutParamsForSubWindow-wparams"><a href="#1-1、adjustLayoutParamsForSubWindow-wparams" class="headerlink" title="1.1、adjustLayoutParamsForSubWindow(wparams)"></a>1.1、adjustLayoutParamsForSubWindow(wparams)</h4><p>接下来我们来看这个方法，这个方法被分为4部分，其中第一部分是注释1，重点是Window的adjustLayoutParamsForSubWindow方法，用来调整params，该方法主要源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Window.java</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adjustLayoutParamsForSubWindow</span><span class="params">(WindowManager.LayoutParams wp)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">if</span> (wp.type &gt;= WindowManager.LayoutParams.FIRST_SUB_WINDOW &amp;&amp; wp.type &lt;= WindowManager.LayoutParams.LAST_SUB_WINDOW) &#123;<span class="comment">//如果它是子窗口</span></span><br><span class="line">        <span class="keyword">if</span> (wp.token == <span class="keyword">null</span>) &#123;</span><br><span class="line">            View decor = peekDecorView();</span><br><span class="line">            <span class="keyword">if</span> (decor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//可以看到子窗口的token为顶级View的WindowToken</span></span><br><span class="line">                wp.token = decor.getWindowToken();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (wp.type &gt;= WindowManager.LayoutParams.FIRST_SYSTEM_WINDOW &amp;&amp; wp.type &lt;= WindowManager.LayoutParams.LAST_SYSTEM_WINDOW) &#123;<span class="comment">//如果它是系统窗口</span></span><br><span class="line">        <span class="comment">//系统窗口没有为token赋值，因为系统窗口的生命周期不依赖于app，当app退出了，系统窗口不会受到影响，它还是能显示和接收外界的输入事件</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果它是应用窗口</span></span><br><span class="line">        <span class="keyword">if</span> (wp.token == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//可以看到应用窗口的token为Activity的mAppToken</span></span><br><span class="line">            wp.token = mContainer == <span class="keyword">null</span> ? mAppToken : mContainer.mAppToken;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法主要是为Window的token赋值，如果是应用窗口且wp.token==null，就会给它赋值mAppToken，而这个mAppToken就是我们上面在Activity的attach()方法中传入的mToken，而系统窗口的token为null，原因注释中说了，我们再分析子窗口的token，接上面的decor.getWindowToken()，该方法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//View.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IBinder <span class="title">getWindowToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mAttachInfo != <span class="keyword">null</span> ? mAttachInfo.mWindowToken : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到子窗口的token就是View中mAttachInfo的mWindowToken，那么mAttachInfo是什么？它在哪里被赋值？我们先留一个疑问。</p><h4 id="1-2、创建ViewRootImpl"><a href="#1-2、创建ViewRootImpl" class="headerlink" title="1.2、创建ViewRootImpl"></a>1.2、创建ViewRootImpl</h4><p>我们回到addView()方法继续看注释2，注释2构建了一个ViewRootimpl，WindowManagerGlobal会为每一个待添加的View创建一个ViewRootImpl，我们看ViewRootImpl的构造方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewRootImpl.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ViewRootImpl</span><span class="params">(Context context, Display display)</span> </span>&#123;</span><br><span class="line">    mContext = context;</span><br><span class="line">    <span class="comment">//1、记住这个mWindowSession，待会用到</span></span><br><span class="line">    mWindowSession = WindowManagerGlobal.getWindowSession();</span><br><span class="line">    mDisplay = display;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//2、创建了一个W对象，继承自IWindow.Stub，是一个IBinder类型，用来接收WMS的通知</span></span><br><span class="line">    mWindow = <span class="keyword">new</span> W(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//3、创建了一个mAttachInfo，这个mAttachInfo就是上面View中mAttachInfo，它在这里被创建，见下面View.AttachInfo的构造方法</span></span><br><span class="line">    mAttachInfo = <span class="keyword">new</span> View.AttachInfo(mWindowSession, mWindow, display, <span class="keyword">this</span>, mHandler, <span class="keyword">this</span>,</span><br><span class="line">                                      context);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//View.java</span></span><br><span class="line"> AttachInfo(IWindowSession session, IWindow window, Display display,  ViewRootImpl viewRootImpl, Handler handler, Callbacks effectPlayer) &#123;</span><br><span class="line">     mSession = session;</span><br><span class="line">     mWindow = window;</span><br><span class="line">     <span class="comment">//mWindowToken本质就是ViewRootImpl中的W类，只是调用asBinder转化了一下</span></span><br><span class="line">     mWindowToken = window.asBinder();</span><br><span class="line">     mDisplay = display;</span><br><span class="line">     mViewRootImpl = viewRootImpl;</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>ViewRootImpl的构造方法中，关键的就是上面三个注释，注释1下面会解释，注释2创建了一个W类对象，它是一个IBinder类型，它在后面会通过Binder IPC传送到WMS中，WMS就是通过这个W类对象和Activity所在进程交互，注释3创建了一个AttachInfo类对象，ViewRootImpl为每一个待添加的View创建一个AttachInfo类对象mAttachInfo，当这个待添加的View与ViewRootImpl建立联系(mView被赋值)后，ViewRootImpl就会调用performTraversal()方法遍历这颗View Hierarchy 把其mAttachInfo赋值给这颗View Hierarchy 中的每一个View的mAttachInfo，所以上面的<strong>decor.getWindowToken()</strong>中的mAttachInfo就不为空，这样子窗口的token就是mAttachInfo中的mWindowToken，从AttachInfo构造可以看出，传入的W类通过asBinder转化了一下赋值给mWindowToken，所以现在可以得出结论：<strong>子窗口的token就是ViewRootImpl中的W类</strong>。</p><h4 id="1-3、-把View、ViewRootimpl、LayoutParams保存到列表"><a href="#1-3、-把View、ViewRootimpl、LayoutParams保存到列表" class="headerlink" title="1.3、 把View、ViewRootimpl、LayoutParams保存到列表"></a>1.3、 把View、ViewRootimpl、LayoutParams保存到列表</h4><p>我们回到addView()方法继续看注释3，第三部分就是把待添加的View、新创建ViewRootimpl、待添加的View的LayoutParams分别保存到3个列表，这三个列表在WindowManagerGlobal中，这三个列表的含义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WindowManagerGlobal.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowManagerGlobal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;View&gt; mViews = <span class="keyword">new</span> ArrayList&lt;View&gt;();<span class="comment">//mViews存储的是所有Window所对应的顶级View（即View Hierarchy最顶端的View）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;ViewRootImpl&gt; mRoots = <span class="keyword">new</span> ArrayList&lt;ViewRootImpl&gt;();<span class="comment">//mRoots存储着所有Window所对应的ViewRootImpl</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;WindowManager.LayoutParams&gt; mParams = <span class="keyword">new</span> ArrayList&lt;WindowManager.LayoutParams&gt;();<span class="comment">//mParams存储着所有Window所对应的布局参数</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4、通过ViewRootImpl-的setView-方法把DecorView显示到窗口上"><a href="#1-4、通过ViewRootImpl-的setView-方法把DecorView显示到窗口上" class="headerlink" title="1.4、通过ViewRootImpl 的setView()方法把DecorView显示到窗口上"></a>1.4、通过ViewRootImpl 的setView()方法把DecorView显示到窗口上</h4><p>我们回到addView()方法继续看注释4，注释4就是调用ViewRootImpl的setView方法，它里面会请求View Hierarchy的绘制，并请求WMS显示待添加的View，我们看一下该方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setView</span><span class="params">(View view, WindowManager.LayoutParams attrs, View panelParentView)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mView == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//ViewRootImpl与待添加的View建立联系</span></span><br><span class="line">            mView = view;</span><br><span class="line">           <span class="comment">//...</span></span><br><span class="line">            <span class="comment">//接收WMS添加后的返回结果</span></span><br><span class="line">           <span class="keyword">int</span> res；</span><br><span class="line">            <span class="comment">//1、请求绘制View Hierarchy</span></span><br><span class="line">           requestLayout();</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//...</span></span><br><span class="line">                    <span class="comment">//2、向通过mWindowSession向WMS发起显示当前Window的请求</span></span><br><span class="line">                    res = mWindowSession.addToDisplay(mWindow, mSeq, mWindowAttributes,</span><br><span class="line">                            getHostVisibility(), mDisplay.getDisplayId(),</span><br><span class="line">                            mAttachInfo.mContentInsets, mAttachInfo.mStableInsets,</span><br><span class="line">                            mAttachInfo.mOutsets, mInputChannel);</span><br><span class="line">             &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                 <span class="comment">//...</span></span><br><span class="line">             &#125;</span><br><span class="line">            <span class="comment">//下面这些异常都是由于添加Window错误而抛出</span></span><br><span class="line">            <span class="keyword">if</span> (res &lt; WindowManagerGlobal.ADD_OKAY) &#123;</span><br><span class="line">                    <span class="comment">//...</span></span><br><span class="line">                    <span class="keyword">switch</span> (res) &#123;</span><br><span class="line">                        <span class="keyword">case</span> WindowManagerGlobal.ADD_BAD_APP_TOKEN:</span><br><span class="line">                        <span class="keyword">case</span> WindowManagerGlobal.ADD_BAD_SUBWINDOW_TOKEN:</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> WindowManager.BadTokenException(</span><br><span class="line">                                    <span class="string">"Unable to add window -- token "</span> + attrs.token</span><br><span class="line">                                    + <span class="string">" is not valid; is your activity running?"</span>);</span><br><span class="line">                        <span class="keyword">case</span> WindowManagerGlobal.ADD_NOT_APP_TOKEN:</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> WindowManager.BadTokenException(</span><br><span class="line">                                    <span class="string">"Unable to add window -- token "</span> + attrs.token</span><br><span class="line">                                    + <span class="string">" is not for an application"</span>);</span><br><span class="line">                      <span class="comment">//...</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  <span class="comment">//...</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在setView方法中，我们先看注释1，在向WMS发起将View显示到手机窗口上前，先调用requestLayout绘制整颗View Hierarchy，这个方法里面会通过Choreographer的postCallback方法注册对应的绘制回调(CALLBACK_TRAVERSAL)，等待vsync信号，然后会触发整个View树的绘制操作，也就是performTraversal()方法的执行。我们来看注释2，到这里Activity的Window的添加就交给了mWindowSession，它是一个IWindowSession类型，IWindowSession是一个AIDL接口文件，需要编译后才生成IWindowSession.java接口，mWindowSession是在上面的ViewRootImpl的构造中被赋值的：<strong>mWindowSession = WindowManagerGlobal.getWindowSession();</strong>，关于这部分的已经在上一篇文章讲解过了，所以注释2其实最终调用的Session的addToDisplay()方法，在addToDisplay()中返回了WMS的addWindow()的返回结果,所以从这里开始<strong>添加Window的过程转移到WMS进程</strong>中去。</p><h3 id="2、WMS-addWindow"><a href="#2、WMS-addWindow" class="headerlink" title="2、WMS :: addWindow()"></a>2、WMS :: addWindow()</h3><p>我们就简单的过一遍WMS的addWindow()方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addWindow</span><span class="params">(Session session, IWindow client, <span class="keyword">int</span> seq,</span></span></span><br><span class="line"><span class="function"><span class="params">            WindowManager.LayoutParams attrs, <span class="keyword">int</span> viewVisibility, <span class="keyword">int</span> displayId,</span></span></span><br><span class="line"><span class="function"><span class="params">            Rect outContentInsets, Rect outStableInsets, Rect outOutsets,</span></span></span><br><span class="line"><span class="function"><span class="params">                     InputChannel outInputChannel)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span>[] appOp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//如果窗口时系统窗口，还要进行权限检查</span></span><br><span class="line">    <span class="keyword">int</span> res = mPolicy.checkAddPermission(attrs, appOp);</span><br><span class="line">    <span class="keyword">if</span> (res != WindowManagerGlobal.ADD_OKAY) &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> type = attrs.type;</span><br><span class="line">    <span class="keyword">synchronized</span>(mWindowMap) &#123;</span><br><span class="line">        <span class="comment">//省略的是检查Display显示信息,</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//如果是子窗口</span></span><br><span class="line">        <span class="keyword">if</span> (type &gt;= FIRST_SUB_WINDOW &amp;&amp; type &lt;= LAST_SUB_WINDOW) &#123;</span><br><span class="line">            <span class="comment">//通过windowForClientLocked()方法还要检查其父窗口是否存在</span></span><br><span class="line">            parentWindow = windowForClientLocked(<span class="keyword">null</span>, attrs.token, <span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">//如果父窗口不存在，返回错误</span></span><br><span class="line">            <span class="keyword">if</span> (parentWindow == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                <span class="keyword">return</span> WindowManagerGlobal.ADD_BAD_SUBWINDOW_TOKEN;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果父窗口还是子窗口，返回错误</span></span><br><span class="line">            <span class="keyword">if</span> (parentWindow.mAttrs.type &gt;= FIRST_SUB_WINDOW</span><br><span class="line">                &amp;&amp; parentWindow.mAttrs.type &lt;= LAST_SUB_WINDOW) &#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                <span class="keyword">return</span> WindowManagerGlobal.ADD_BAD_SUBWINDOW_TOKEN;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">        <span class="comment">//检查token</span></span><br><span class="line">        AppWindowToken atoken = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">////是否有父窗口</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> hasParent = parentWindow != <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//如果它有父窗口，就使用父窗口的token，如果没有，就是使用自己的token</span></span><br><span class="line">        WindowToken token = displayContent.getWindowToken(</span><br><span class="line">            hasParent ? parentWindow.mAttrs.token : attrs.token);</span><br><span class="line">        <span class="comment">//如果它有父窗口，就使用父窗口的type，如果没有，就是使用自己的type  </span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> rootType = hasParent ? parentWindow.mAttrs.type : type;</span><br><span class="line">         <span class="keyword">if</span> (token == <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="keyword">if</span> (rootType &gt;= FIRST_APPLICATION_WINDOW &amp;&amp; rootType &lt;= LAST_APPLICATION_WINDOW) &#123;<span class="comment">//如果是应用窗口，但是它的token为空，返回错误</span></span><br><span class="line">                 <span class="comment">//...</span></span><br><span class="line">                 <span class="keyword">return</span> WindowManagerGlobal.ADD_BAD_APP_TOKEN;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">//...</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rootType &gt;= FIRST_APPLICATION_WINDOW &amp;&amp; rootType &lt;= LAST_APPLICATION_WINDOW) &#123;<span class="comment">//如果是应用窗口，但是它的token不是mAppToken（mApptoken是从AMS传过来的），返回错误</span></span><br><span class="line">                atoken = token.asAppWindowToken();</span><br><span class="line">                <span class="keyword">if</span> (atoken == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="comment">//...</span></span><br><span class="line">                  <span class="keyword">return</span> WindowManagerGlobal.ADD_NOT_APP_TOKEN;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (atoken.removed) &#123;</span><br><span class="line">                   <span class="comment">//...</span></span><br><span class="line">                   <span class="keyword">return</span> WindowManagerGlobal.ADD_APP_EXITING;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//这里省略的是，一些系统窗口的token 不能为空，并且通过token检索到的WindowToken的类型不能是其本身对应的类型</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (token.asAppWindowToken() != <span class="keyword">null</span>) &#123; <span class="comment">//某些系统窗口的token应该为空，但是却不为空，所以这里把token清空</span></span><br><span class="line">                attrs.token = <span class="keyword">null</span>;</span><br><span class="line">                token = <span class="keyword">new</span> WindowToken(<span class="keyword">this</span>, client.asBinder(), type, <span class="keyword">false</span>, displayContent,</span><br><span class="line">                        session.mCanAddInternalSystemWindow);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//经过一系列的检查后，会创建一个WindowState</span></span><br><span class="line">        <span class="keyword">final</span> WindowState win = <span class="keyword">new</span> WindowState(<span class="keyword">this</span>, session, client, token, parentWindow,</span><br><span class="line">                    appOp[<span class="number">0</span>], seq, attrs, viewVisibility, session.mUid,</span><br><span class="line">                    session.mCanAddInternalSystemWindow);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//走到这里证明没有任何错误发生，res = ADD_OKAY</span></span><br><span class="line">        res = WindowManagerGlobal.ADD_OKAY;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//WindowState的attach方法创建了一个SurfaceSession对象用于与SurfaceFlinger服务通信</span></span><br><span class="line">        win.attach();</span><br><span class="line">        <span class="comment">//client就是Activity进程那边传过来的ViewRootImpl中的W类，这里用asBinder转化了一下，所以这里以W类为Key，WindowState为Value建立映射存放进mWindowMap中，它是一个WindowHashMap类型</span></span><br><span class="line">        mWindowMap.put(client.asBinder(), win);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法很长，但是里面的逻辑还是很有规律，建议对照着注释跟源码看一遍，这里总结一下这个方法的过程：</p><ul><li>1、首先如果是系统窗口要进行权限检查，mPolicy是一个PolicyWindowManager类型，如果想知道哪些系统窗口是需要权限的可以查看这个PolicyWindowManager的checkAddPermission()方法，这个方法检查如果不是系统类型的窗口就会返回一个ADD_OKAY表示检查通过，否则表示检查不通过，代表着这个系统窗口没有在Manifest.xml文件中声明权限。</li><li>2、如果是子窗口类型，就通过windowForClientLocked()方法还要检查其父窗口是否存在，子窗口一定要有父窗口。</li><li>3、根据类型type检查token是否有效，应用窗口和子窗口的token是一定要赋值的，否则创建窗口会抛异常，且应用窗口中的token必须是某个有效的 Activity 的 mToken。而子窗口中的token必须是父窗口的 ViewRootImpl 中的 W 对象。对于部分系统窗口其token也要赋值，有些系统窗口的token不需要赋值。这个token赋值规则可以对照上面的adjustLayoutParamsForSubWindow(wparams)的方法解说。</li><li>4、通过WindowState的attach方法，WMS把渲染Window视图的任务交给了SurfaceFlinger。</li><li>5、一系列的检查后，WMS会为每一个Window会创建一个WindowState，并以传过来的W类为Key，新创建的WindowState为Value建立映射存放进WindowHashMap中，这个WindowState维护着窗口的状态以及根据适当的机制来调整窗口的状态。</li></ul><p>这个添加过程如下图：</p><img src="/2019/07/10/Activity%E5%BA%94%E7%94%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%B7%BB%E5%8A%A0%E8%BF%87%E7%A8%8B/window3.jpg" class="" title="window3"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是Activity的Window的添加过程，我们发现添加一个Window最重要的是View、type和token，至于其他类型窗口的添加相似的，一图总结本文，如下：</p><img src="/2019/07/10/Activity%E5%BA%94%E7%94%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%B7%BB%E5%8A%A0%E8%BF%87%E7%A8%8B/window4.png" class="" title="window4"><p>从图中可以看到，添加一个Window，会涉及到两个进程的交互，一个是Activity所在的应用进程，一个是WMS所在的系统服务进程，所以绿色的那部分就代表着IPC，ViewRootImpl通过WindonManagerGlobal的静态变量sWindowSession负责与WMS通信，它是Session类型，在ViewRootImpl构造中被赋值，WMS中的每个Window的WindowState的mClient负责与Activity所在的应用进程通信，它是W类型，在创建WindowState构造中被赋值，在Activity所在的应用进程的WindonManagerGlobal中会为每一个添加的Window中的View创建一个ViewRootImpl，所以多个Window就对应多个ViewRootImpl，而在WMS中，Window对应着一个View，它会为每一个Window创建一个WindowState以维护Window的状态，所以多个Window就多个WindowState。</p><p>从应用窗口的添加过程中，对Window的机制也有了一些了解，以后如果遇到有关于Window的添加的异常也懂得去哪里找原因。</p><p>参考资料：</p><p><a href="https://blog.csdn.net/qian520ao/article/details/78555397#viewrootimpl" target="_blank" rel="noopener">Android Window 机制探索</a></p><p><a href="https://mp.weixin.qq.com/s/jhTIMQ_yu5DXM7Vz8OQwGg" target="_blank" rel="noopener">浅析 Android 的窗口</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;上一篇文章&lt;a href=&quot;https://rain9155.github.io/2019/03/22/Window,%20WindowManager%E5%92%8CWindowManagerService%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Window, WindowManager和WindowManagerService之间的关系&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从上一篇文章中，我们了解到了Window的体系机制，也知道了window分为三种类型，分别是应用窗口(Application Window)、子窗口(Sub Window)、系统窗口(System Window），本文通过源码以Activity为例讲解一下应用窗口的添加过程，如果没看过上一篇文章建议先看，对于不同类型的窗口的添加，它们在WindowManager中的处理过程会有一点不一样，但是对于在WMS的处理过程中，基本上都是一样的。所以本文深入讲解一下Activity窗口的添加过程，知道了这个过程，对于其他类型的窗口添加也就能举一反三了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Window机制" scheme="http://yoursite.com/categories/Window%E6%9C%BA%E5%88%B6/"/>
    
    
      <category term="window" scheme="http://yoursite.com/tags/window/"/>
    
      <category term="windowManager" scheme="http://yoursite.com/tags/windowManager/"/>
    
      <category term="WMS" scheme="http://yoursite.com/tags/WMS/"/>
    
      <category term="activity" scheme="http://yoursite.com/tags/activity/"/>
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>发布开源库到jitpack</title>
    <link href="http://yoursite.com/2019/06/10/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jitpack/"/>
    <id>http://yoursite.com/2019/06/10/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jitpack/</id>
    <published>2019-06-10T10:47:41.000Z</published>
    <updated>2023-01-07T10:44:49.030Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近几天准备发布一个开源库，方便自己使用，一开始了解到的是发布到jcenter仓库中，它是目前世界上最大的java和Android开源软件构件仓库，而且 JCenter 是 Android Studio 默认使用的服务器仓库，只需要一句话就可以搞定整个包的导入过程，但是它的发布过程繁琐，而且对于新手来说特别不友好，就算你跟着网上教程来发布，运气好的话你就会发布成功，如果运气不好，你就会遇到很多构建失败、上传失败、翻墙等问题，而且在网上还找不到答案。我就属于运气不好的一类，我发布的时候几乎是使用了所有方法，但还是失败，就在我心灰意冷的时刻，我发现了<strong>jitpack</strong>，几步操作就把开源库发布成功，真的是简单了许多，有种相见恨晚的感觉，下面就把我发布的过程分享给大家。</p><h2 id="JitPack是什么？"><a href="#JitPack是什么？" class="headerlink" title="JitPack是什么？"></a>JitPack是什么？</h2><p>在讲解发布流程之前先简单介绍一下jitpack是什么，<a href="https://jitpack.io/" target="_blank" rel="noopener">JitPack</a>是一个网站，它允许你把git托管的java或android项目（貌似目前仅支持github和码云），轻松发布到jitpack的maven仓库上，它所有内容都通过内容分发网络（CDN）使用加密https连接获取。</p><h2 id="发布步骤"><a href="#发布步骤" class="headerlink" title="发布步骤"></a>发布步骤</h2><p>下面开始讲解发布步骤。以我的开源库<a href="https://github.com/rain9155/Loading" target="_blank" rel="noopener">Loading</a>为例。</p><h3 id="1、准备好你要发布的library"><a href="#1、准备好你要发布的library" class="headerlink" title="1、准备好你要发布的library"></a>1、准备好你要发布的library</h3><p>library不同于app工程，library是没有applicationId的，还有build.gradle中apply的的插件也不一样，在AS中按如下操作新建一个library：File -&gt; new -&gt; New Moudle -&gt; Android Library -&gt; next -&gt; 填写好信息后 -&gt; finish。</p><h3 id="2、给你要发布libaray添加配置"><a href="#2、给你要发布libaray添加配置" class="headerlink" title="2、给你要发布libaray添加配置"></a>2、给你要发布libaray添加配置</h3><p>2.1、首先在项目的根目录的build.gradle下添加maven插件，如下：</p><img src="/2019/06/10/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jitpack/step1.png" class="" title="step1"><p>可以去这里查看插件的最新版本<a href="https://github.com/dcendents/android-maven-gradle-plugin" target="_blank" rel="noopener">android-maven-gradle-plugin</a>。</p><p>2.2、然后再library目录的build.gradle下apply插件和添加group，如下：</p><img src="/2019/06/10/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jitpack/step2.png" class="" title="step2"><p>group填<strong>com.github.你的github账号名</strong>，这里我的是rain9155。</p><h3 id="3、执行gradlew命令，排错"><a href="#3、执行gradlew命令，排错" class="headerlink" title="3、执行gradlew命令，排错"></a>3、执行gradlew命令，排错</h3><p>再命令行下输入<strong>gradlew install</strong>命令，这个命令会构建你的library到你的本地 maven 仓库($HOME/.m2/repository)中，如下：</p><img src="/2019/06/10/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jitpack/step3.png" class="" title="step3"><p>如果出现BUILD SUCCESS，说明构建成功，如果出现BUILD FAIL，说明构建失败，这时候你就要按照失败提示去排错，排错完后在执行一遍gradlew install命令，直到出现BUILD SUCCESS。</p><h3 id="4、本地打tag，上传到github中"><a href="#4、本地打tag，上传到github中" class="headerlink" title="4、本地打tag，上传到github中"></a>4、本地打tag，上传到github中</h3><p>4.1、在打tag前，你要先执行<strong>git add .</strong>和<strong>git commit -m “XX”</strong>命令，把代码提交到本地git仓库</p><p>4.2、然后开始在本地git仓库打tag，如下：</p><img src="/2019/06/10/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jitpack/step4.png" class="" title="step4"><p>打tag本质就是提交一个commit，-a后面写版本号，一般是v1.0或v1.0.0，-m后面写描述信息，这里写了第一版，然后把tag push到github上面。</p><h3 id="5、github上面发布release"><a href="#5、github上面发布release" class="headerlink" title="5、github上面发布release"></a>5、github上面发布release</h3><p>打开你的libary的github界面，点击<strong>release</strong>，如下：</p><img src="/2019/06/10/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jitpack/step5.png" class="" title="step5"><p>然后点击<strong>Draft a new release</strong>，新建一个release，如下：</p><img src="/2019/06/10/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jitpack/step6.png" class="" title="step6"><p>然后填信息，如下：</p><img src="/2019/06/10/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jitpack/step7.png" class="" title="step7"><p>填好信息后，点击<strong>publich release</strong>，如下：</p><img src="/2019/06/10/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jitpack/step8.png" class="" title="step8"><p>其实relese就是一个加了描述信息的tag。</p><h3 id="6、用GitHub账号登陆、注册jitpack，Look-Up-gt-Get-it"><a href="#6、用GitHub账号登陆、注册jitpack，Look-Up-gt-Get-it" class="headerlink" title="6、用GitHub账号登陆、注册jitpack，Look Up -&gt; Get it"></a>6、用GitHub账号登陆、注册<a href="<https://jitpack.io/">jitpack</a>，Look Up -&gt; Get it</h3><p>登陆jitpack后，在jitpack的地址栏中输入你的library的的github项目地址，然后点击<strong>Look Up</strong>，如下：</p><img src="/2019/06/10/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jitpack/step9.png" class="" title="step9"><p>点击Look Up后，下面会出现项目在github上发布的release版本，你有多少个release，下面就会显示多少个，然后点击<strong>Get it</strong>，如下：</p><img src="/2019/06/10/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jitpack/step10.png" class="" title="step10"><p>点击Get it后，它会滚到下面去，你要滚回上面去，先等一会，等jitpack那里构建完，会出现一个绿色的log，如下：</p><img src="/2019/06/10/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jitpack/step11.png" class="" title="step11"><p>如果出现红色的log，说明构建失败，你可以点击进去看一下失败原因，出现绿色的代表成功，然后再点Get it，它会滚到下面去，如下：</p><img src="/2019/06/10/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jitpack/step12.png" class="" title="step12"><p>可以看到，它提示了你如何用gradle方式引用你的开源库，<code>maven { url &quot;https://jitpack.io&quot; }</code>就是指定私有Maven库为<a href="https://link.jianshu.com/?t=https://jitpack.io/" target="_blank" rel="noopener">JitPack</a>，<code>implementation com.github.rain9155:Loading:Tag</code>则是指定具体的包。然后你就可以愉快的在项目中按照它的提示引用你的开源库。</p><p>更多请查看示例<a href="https://github.com/rain9155/Loading" target="_blank" rel="noopener"><strong>Loading</strong></a>。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>jitpack也是有勋章的，如下：</p><img src="/2019/06/10/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jitpack/step13.png" class="" title="step13"><p>点击那个jitpack，把它的链接复制到你的REMAED中去，如下：</p><img src="/2019/06/10/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jitpack/step14.png" class="" title="step14"> <h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p><a href="https://link.jianshu.com?t=https://jitpack.io/" target="_blank" rel="noopener">JitPack</a>是基于GitHub Releases的发布。当你打完tag，生成一个Release时，源文件会自动打包成zip。在<a href="https://link.jianshu.com?t=https://jitpack.io/" target="_blank" rel="noopener">JitPack</a>上点击【Get it】，就可以编译这个tag的源文件，把版本发布到这个私有Maven库中，并且可以提供给其他人使用。比起Bintray的JCenter，或者Maven Central这个官方中央仓库来说，<a href="https://link.jianshu.com?t=https://jitpack.io/" target="_blank" rel="noopener">JitPack</a>背靠GitHub，少了一大堆流程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近几天准备发布一个开源库，方便自己使用，一开始了解到的是发布到jcenter仓库中，它是目前世界上最大的java和Android开源软件构
      
    
    </summary>
    
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="jitpack" scheme="http://yoursite.com/tags/jitpack/"/>
    
  </entry>
  
  <entry>
    <title>android6.0动态权限申请的正确流程</title>
    <link href="http://yoursite.com/2019/06/06/android6-0%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E7%94%B3%E8%AF%B7%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/06/06/android6-0%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E7%94%B3%E8%AF%B7%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%B5%81%E7%A8%8B/</id>
    <published>2019-06-06T10:13:59.000Z</published>
    <updated>2023-01-07T10:44:48.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从 Android 6.0（API 级别 23）开始，用户开始在应用运行时向其授予权限，而不是在应用安装时授予。所以如果你的应用使用到了一些危险权限，就必须在AndroidManifest.xml 中静态地声明需要用到的权限，并在使用到该功能时要动态的申请，否则在调用到相应权限功能时候，会抛出 SecurityException异常。所以本文探讨一下动态权限的申请的正确流程，并把它封装成一个库，简化了申请过程。</p><ul><li><a href="https://github.com/rain9155/PermissionHelper" target="_blank" rel="noopener">PermissionHelper</a></li></ul><h2 id="权限的分类"><a href="#权限的分类" class="headerlink" title="权限的分类"></a>权限的分类</h2><p>在讲解之前，先看一下android权限的分类，android权限分为四类，如下：</p><h3 id="1、普通权限"><a href="#1、普通权限" class="headerlink" title="1、普通权限"></a>1、普通权限</h3><p>普通权限也叫正常权限，它不需要动态申请，你只需要在用到它的时候在AndroidManifest.xml 中静态地声明，然后系统在app运行时就会自动的授予该app相应的权限。这类权限主要在你的app想要接触app沙盒外的数据或资源的时用到，它不会涉及到系统的操作，也不会泄漏或篡改用户的隐私数据。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">ACCESS_LOCATION_EXTRA_COMMANDS </span><br><span class="line">ACCESS_NETWORK_STATE </span><br><span class="line">ACCESS_NOTIFICATION_POLICY </span><br><span class="line">ACCESS_WIFI_STATE </span><br><span class="line">BLUETOOTH </span><br><span class="line">BLUETOOTH_ADMIN </span><br><span class="line">BROADCAST_STICKY </span><br><span class="line">CHANGE_NETWORK_STATE </span><br><span class="line">CHANGE_WIFI_MULTICAST_STATE </span><br><span class="line">CHANGE_WIFI_STATE </span><br><span class="line">DISABLE_KEYGUARD </span><br><span class="line">EXPAND_STATUS_BAR </span><br><span class="line">FOREGROUND_SERVICE </span><br><span class="line">GET_PACKAGE_SIZE </span><br><span class="line">INSTALL_SHORTCUT </span><br><span class="line">INTERNET </span><br><span class="line">KILL_BACKGROUND_PROCESSES </span><br><span class="line">MANAGE_OWN_CALLS </span><br><span class="line">MODIFY_AUDIO_SETTINGS </span><br><span class="line">NFC </span><br><span class="line">READ_SYNC_SETTINGS </span><br><span class="line">READ_SYNC_STATS </span><br><span class="line">RECEIVE_BOOT_COMPLETED </span><br><span class="line">REORDER_TASKS </span><br><span class="line">REQUEST_COMPANION_RUN_IN_BACKGROUND </span><br><span class="line">REQUEST_COMPANION_USE_DATA_IN_BACKGROUND </span><br><span class="line">REQUEST_DELETE_PACKAGES </span><br><span class="line">REQUEST_IGNORE_BATTERY_OPTIMIZATIONS </span><br><span class="line">SET_ALARM </span><br><span class="line">SET_WALLPAPER </span><br><span class="line">SET_WALLPAPER_HINTS </span><br><span class="line">TRANSMIT_IR </span><br><span class="line">USE_FINGERPRINT </span><br><span class="line">VIBRATE </span><br><span class="line">WAKE_LOCK </span><br><span class="line">WRITE_SYNC_SETTINGS</span><br></pre></td></tr></table></figure><h3 id="2、签名权限"><a href="#2、签名权限" class="headerlink" title="2、签名权限"></a>2、签名权限</h3><p>该类权限只对拥有相同签名的应用开放。例如某个应用自定义了一个permission 且在权限标签中加入 android:protectionLevel=”signature”，其他应用想要访问该应用中的某些数据时，必须要在AndroidManifest.xml中声明该权限，而且还要与该应用具有相同的签名，系统会在app运行时自动授予该权限。这类我们用的比较少。</p><h3 id="3、危险权限"><a href="#3、危险权限" class="headerlink" title="3、危险权限"></a>3、危险权限</h3><p>也叫敏感权限，运行时权限，跟普通权限相反，一旦某个应该获取了该类权限，用户的隐私数据就面临被泄露篡改的风险。所以你想使用该权限就必须在AndroidManifest.xml 中静态地声明需要用到的权限，并在使用到该功能时要动态的申请，除非用户同意该权限，否则你不能使用该权限对应的功能。如下：</p><img src="/2019/06/06/android6-0%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E7%94%B3%E8%AF%B7%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%B5%81%E7%A8%8B/p1.png" class="" title="p1"><p>可以看到android把危险权限分为10组，所以申请危险权限的时候都是按组申请，我们只要申请组内的任意一个危险权限就行，当用户一旦同意授权该危险权限，那么该权限所对应的权限组中的所有其他权限也会同时被授权。</p><h3 id="4、特殊权限"><a href="#4、特殊权限" class="headerlink" title="4、特殊权限"></a>4、特殊权限</h3><p>特殊权限我了解的有三个，如下：</p><ul><li>SYSTEM_ALERT_WINDOW：设置悬浮窗</li><li>WRITE_SETTINGS：修改系统设置</li><li>REQUEST_INSTALL_PACKAGES： 允许应用安装未知来源应用</li></ul><p>它也是要要申请的，但是它不同于危险权限的申请，危险权限的申请会弹出一个对话框询问你是否同意，而特殊权限的申请需要跳转到指定的界面，让你手动确认同意。</p><h2 id="动态权限申请流程"><a href="#动态权限申请流程" class="headerlink" title="动态权限申请流程"></a>动态权限申请流程</h2><p>所以动态权限的申请就是申请<strong>危险权限或特殊权限</strong>，权限的申请在不同的Android版本有不同的行为，如下：</p><ul><li>如果设备运行的是 Android 5.1 或更低版本，或者应用的 targetSdkVersion 为 22 或更低：如果您在 Manifest 中列出了危险权限，则用户必须在安装应用时系统会要求用户授予此权限，如果他们不授予此权限，系统根本不会安装应用，用户一旦全部同意授予，他们撤销权限的唯一方式是卸载应用。</li><li>如果设备运行的是 Android 6.0 或更高版本，并且应用的 targetSdkVersion为23 或更高：应用必须在 Manifest 中列出权限，并且它必须在运行时请求其需要的每项危险权限。用户可以授予或拒绝每项权限，且即使用户拒绝权限请求，应用仍可以继续运行有限的功能。用户可以随时进入应用的“Settings”中调整应用的动态权限授权。所以你每次使用到该权限的功能时，都要动态申请，因为用户有可能在“Settings”界面中把它再次关闭掉。</li></ul><p>我这里讨论的是6.0后的动态申请，所以从 Android 6.0开始，无论您的应用面向哪个 API 级别，您都应对应用进行测试，以验证它在缺少需要的权限时行为是否正常，我把权限申请的流程分为单个和多个权限申请，分别画了个图。</p><h3 id="1、单个权限申请流程"><a href="#1、单个权限申请流程" class="headerlink" title="1、单个权限申请流程"></a>1、单个权限申请流程</h3><img src="/2019/06/06/android6-0%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E7%94%B3%E8%AF%B7%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%B5%81%E7%A8%8B/p2.png" class="" title="p2"><h3 id="2、多个权限申请流程"><a href="#2、多个权限申请流程" class="headerlink" title="2、多个权限申请流程"></a>2、多个权限申请流程</h3><img src="/2019/06/06/android6-0%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E7%94%B3%E8%AF%B7%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%B5%81%E7%A8%8B/p3.png" class="" title="p3"><h3 id="3、自定义提示权限组的提示框"><a href="#3、自定义提示权限组的提示框" class="headerlink" title="3、自定义提示权限组的提示框"></a>3、自定义提示权限组的提示框</h3><p>上面两个图有有提到自定义提示权限组，那么它主要包含以下内容：</p><ul><li>1、包含需要授权的权限列表或单个权限提示</li><li>2、包含跳转到应用设置授权界面中的跳转按钮</li><li>3、包含放弃授权的取消按钮，即取消这个提示框</li></ul><blockquote><p>注意：如果用户不授权，则不能使用该功能或应用无法运行，可以考虑取消第3步的取消按钮，即无法取消这个提示框，一定要用户去“Settings”授权。</p></blockquote><h2 id="其他注意点"><a href="#其他注意点" class="headerlink" title="其他注意点"></a>其他注意点</h2><p>除了特殊权限外，还有一个location权限也比较特殊，需要通过 <strong>LocationManager的isProviderEnabled(LocationManager.GPS_PROVIDER)</strong>判断是否打开定位开关后再进行权限申请，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">lm = (LocationManager) <span class="keyword">this</span>.getSystemService(<span class="keyword">this</span>.LOCATION_SERVICE);</span><br><span class="line">    <span class="keyword">if</span> (lm.isProviderEnabled(LocationManager.GPS_PROVIDER)) &#123;<span class="comment">//开了定位服务</span></span><br><span class="line">        <span class="comment">//请求定位功能</span></span><br><span class="line">       PermissionHelper.getInstance().with(<span class="keyword">this</span>).requestPermission(</span><br><span class="line">                Manifest.permission.ACCESS_FINE_LOCATION,</span><br><span class="line">                <span class="keyword">new</span> IPermissionCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAccepted</span><span class="params">(Permission permission)</span> </span>&#123;</span><br><span class="line">                        <span class="comment">//...</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDenied</span><span class="params">(Permission permission)</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//跳转到开启定位的地方</span></span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"系统检测到未开启GPS定位服务,请开启"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        intent.setAction(Settings.ACTION_LOCATION_SOURCE_SETTINGS);</span><br><span class="line">        startActivityForResult(intent, PRIVATE_CODE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文主要让让大家对权限的申请流程有进一步的认识，然后可以通过对动态权限的封装，将检测动态权限，请求动态权限，权限设置跳转，监听权限设置结果等处理和业务功能隔离开来，业务以后可以非常快速的接入动态权限支持，提高开发效率，更多细节查看<a href="https://github.com/rain9155/PermissionHelper" target="_blank" rel="noopener">PermissionHelper</a>。</p><p>参考资料：</p><p><a href="https://developer.android.google.cn/guide/topics/permissions/overview" target="_blank" rel="noopener">Permissions</a></p><p><a href="https://mp.weixin.qq.com/s/w82temt7NjQb2eATONuEsA" target="_blank" rel="noopener">安卓系统权限，你真的了解吗？</a></p><p><a href="https://www.jianshu.com/p/6a4dff744031" target="_blank" rel="noopener">Android 6.0运行权限解析（高级篇</a>)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;从 Android 6.0（API 级别 23）开始，用户开始在应用运行时向其授予权限，而不是在应用安装时授予。所以如果你的应用使用到了一些
      
    
    </summary>
    
    
      <category term="开源项目" scheme="http://yoursite.com/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>发布开源库到jcenter</title>
    <link href="http://yoursite.com/2019/06/05/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jcenter/"/>
    <id>http://yoursite.com/2019/06/05/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jcenter/</id>
    <published>2019-06-05T10:41:30.000Z</published>
    <updated>2023-01-07T10:44:48.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天写过一篇文章<a href="https://blog.csdn.net/Rain_9155/article/details/90516026" target="_blank" rel="noopener">快速发布开源库到jitpack</a>，在里面我控诉发布jcenter的发布过程繁琐，对新手不友好，直到这几天我遇到了一个<a href="https://github.com/novoda/bintray-release" target="_blank" rel="noopener">bintray-release</a>插件，发现它可以帮助你更简单的发布开源库到jcenter上，而且过程也很简单。</p><p>如果你还不懂jcenter是什么或者你不懂那些配置有什么作用，强烈建议你先看一下这个两篇文章<a href="https://juejin.im/post/5aef06e56fb9a07aae151406" target="_blank" rel="noopener">教你一步步发布一个开源库到 JCenter</a>、<a href="https://www.jianshu.com/p/cfc9669b732b" target="_blank" rel="noopener">手把手教你发布自己的开源库到jcenter</a>，这两篇文章也教了另外两种发布开源库到jcenter的方式。本文是第3种方式，使用bintray-release发布开源库到jcenter上。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>如果你已经有账号和仓库了，就跳过1、2步。</p><h3 id="1、注册bintray账号"><a href="#1、注册bintray账号" class="headerlink" title="1、注册bintray账号"></a>1、注册bintray账号</h3><p>打开<a href="https://bintray.com/" target="_blank" rel="noopener">bintray</a>网站(可能会有点慢，如果你没有翻墙)，点击下图的位置，如下：</p><img src="/2019/06/05/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jcenter/step1.png" class="" title="step1"><p>千万不要点击绿色那个按钮，那个是给企业用的，我们是个人开发者，注册个人账号，然后出现以下画面：</p><img src="/2019/06/05/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jcenter/step2.png" class="" title="step2"><p>可以关联github和google账号注册，但是如果你github和google关联的邮箱是中国的邮箱，会注册失败，所以这里是建议你先去注册一个Google邮箱，要有国外的邮箱才能注册成功。</p><p>这里假设你已经有Google邮箱了，然后你填好图中的信息，First Name填姓，Last Name填名，Username是填用户名，最好不要填中文，剩下的一看就直到填什么了，填好信息后点击<strong>Create My Account</strong>。这时它会发一封认证邮件给你的邮箱，因为邮箱是Google的，可能会有点慢，等你收到邮件点击确认后，它才会进入你的个人界面，否则就一直卡在那里，所以耐心等待邮件确认。</p><h3 id="2、创建Maven库"><a href="#2、创建Maven库" class="headerlink" title="2、创建Maven库"></a>2、创建Maven库</h3><p>收到邮件确认后，进入个人界面，如图：</p><img src="/2019/06/05/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jcenter/step3.png" class="" title="step3"><p>点击<strong>Add New Repository</strong>，进入如下界面：</p><img src="/2019/06/05/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jcenter/step4.png" class="" title="step4"><p>这里填你的maven仓库的信息，Name填maven仓库名，这个很重要，记住你填的仓库名，Type就选maven，Licences就默认，Description可选，填仓库的描述，填完后点击<strong>Create</strong>。</p><p>然后你就可以在个人界面看到你刚才创建的maven仓库，如下：</p><img src="/2019/06/05/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jcenter/step5.png" class="" title="step5"><p>你以后发布的开源库都会放到这个仓库中。</p><h3 id="3、配置根目录build-gradle"><a href="#3、配置根目录build-gradle" class="headerlink" title="3、配置根目录build.gradle"></a>3、配置根目录build.gradle</h3><p>打开你的项目，在根目录的build.gradle种引入插件，这里以我的<a href="https://github.com/rain9155/Utils" target="_blank" rel="noopener">Utils</a>为例，如下：</p><img src="/2019/06/05/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jcenter/step6.png" class="" title="step6"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classpath <span class="string">'com.novoda:bintray-release:0.9.1'</span></span><br></pre></td></tr></table></figure><p>插件的最新版本可以去这里找<a href="https://github.com/novoda/bintray-release/releases" target="_blank" rel="noopener">bintray-release</a>。</p><h3 id="4、配置库目录中的build-gradle"><a href="#4、配置库目录中的build-gradle" class="headerlink" title="4、配置库目录中的build.gradle"></a>4、配置库目录中的build.gradle</h3><p>点开你的库目录，在build.gradle中添加如下代码：</p><img src="/2019/06/05/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jcenter/step7.png" class="" title="step7"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.novoda.bintray-release'</span></span><br><span class="line">publish &#123;</span><br><span class="line">    repoName = <span class="string">'jianyu'</span> <span class="comment">//maven仓库名</span></span><br><span class="line">    userOrg = <span class="string">"rain9155"</span> <span class="comment">//bintray.com注册的用户名</span></span><br><span class="line">    groupId = <span class="string">"com.jianyu"</span> <span class="comment">//jcenter上的路径</span></span><br><span class="line">    artifactId = <span class="string">'utils'</span> <span class="comment">//项目名称</span></span><br><span class="line">    publishVersion = <span class="string">"v1.0"</span> <span class="comment">//版本号</span></span><br><span class="line">    desc = <span class="string">"a simple utils tool"</span> <span class="comment">//描述，不重要，要填的话不要填中文，不然会乱码</span></span><br><span class="line">    website = <span class="string">"https://github.com/rain9155/Utils"</span> <span class="comment">////网站，不重要，就填github上的地址就行了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我按上述填后，我到时库引用是这样：<strong>implementation ‘com.jianyu:utils:v1.0’</strong>。</p><h3 id="5、执行构建上传命令"><a href="#5、执行构建上传命令" class="headerlink" title="5、执行构建上传命令"></a>5、执行构建上传命令</h3><p>打开<strong>Terminal</strong>面板，在命令行中输入：<strong>gradlew clean build bintrayUpload -PbintrayUser=你的用户名 -PbintrayKey=你的Api密匙 -PdryRun=false</strong></p><p>用户名就是你上面的的用户名，我这里是rain9155，Api密匙需要到网站的个人简介中找，如下:</p><img src="/2019/06/05/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jcenter/step8.png" class="" title="step8"><img src="/2019/06/05/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jcenter/step9.png" class="" title="step9"><p>把命令填写完整后填点击回车，等待它上传，我大概等了10几分钟，出现以下代表上传成功：</p><img src="/2019/06/05/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jcenter/step10.png" class="" title="step10"><p>否则出现<strong>BUILD FAILED</strong>，就是有错误，排错后再重新输入命令，重新上传，直到成功。一般的错误都是超时、maven库名字填错、无法找到该类。</p><h3 id="6、Add-to-Jcenter"><a href="#6、Add-to-Jcenter" class="headerlink" title="6、Add to Jcenter"></a>6、Add to Jcenter</h3><p>打开你的maven仓库，如下：</p><img src="/2019/06/05/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jcenter/step11.png" class="" title="step11"><p>可以看到utils库上传成功，点进去，如下：</p><img src="/2019/06/05/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jcenter/step12.png" class="" title="step12"><p>点击1处那里会有一个<strong>Add to jcenter</strong>按钮，因为我已经add过了，所以会消失，但是你们的会有，进入如下画面：</p><img src="/2019/06/05/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jcenter/step13.png" class="" title="step13"><p>直接点击<strong>Send</strong>，等待几个小时后，jcenter的审核人员会给你发一封站内邮件，如下：</p><img src="/2019/06/05/%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%B0jcenter/step14.png" class="" title="step14"><p>然后你就可以愉快的一句话引用你的库到项目中了，在上面2的红色圈那里已经圈出来了。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>有了插件的帮助，发布一个开源库还是挺简单的。大家尝试一下吧。</p><p>更多信息查看<a href="https://github.com/rain9155/Utils" target="_blank" rel="noopener">Utils</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前几天写过一篇文章&lt;a href=&quot;https://blog.csdn.net/Rain_9155/article/details/9051
      
    
    </summary>
    
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="jcenter" scheme="http://yoursite.com/tags/jcenter/"/>
    
  </entry>
  
  <entry>
    <title>Android8.0的Activity启动流程(2)</title>
    <link href="http://yoursite.com/2019/05/19/Android8.0%E7%9A%84Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B2/"/>
    <id>http://yoursite.com/2019/05/19/Android8.0%E7%9A%84Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B2/</id>
    <published>2019-05-19T08:12:34.000Z</published>
    <updated>2023-01-07T10:44:48.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>上一篇文章<a href="https://rain9155.github.io/2019/05/19/Android8.0%E7%9A%84Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B1/" target="_blank" rel="noopener">Android8.0的Activity启动流程(1)</a></li></ul><p>上一篇文章讲了应用进程请求AMS启动Activity过程和Activity在AMS中的启动过程，然后Activity启动的代码逻辑就从AMS所在进程，又重新回到了应用进程所在的ApplicationThread中。我们还留下了一个问题，<strong>Activity的生命周期方法是如何被回调的？</strong>，下面我们就带着这个疑问，去走一遍源码，看一下在应用进程中ApplicationThread启动Activity的过程。</p><a id="more"></a><pre><code>本文基于android8.0，本文相关源码文件位置如下：frameworks/base/core/java/android/app/Activity.javaframeworks/base/core/java/android/app/ActivityThread.javaframeworks/base/core/java/android/app/Instrumentation.java</code></pre><h2 id="ApplicationThread-scheduleLaunchActivity"><a href="#ApplicationThread-scheduleLaunchActivity" class="headerlink" title="ApplicationThread::scheduleLaunchActivity()"></a>ApplicationThread::scheduleLaunchActivity()</h2><p>上文结尾讲到在ActivityStackSupervisor的realStartActivityLocked()中调用了ApplicationThread中的scheduleLaunchActivity方法，这里是Activity启动的开始。ApplicationThread是ActivityThread的内部类，实现了IApplicationThread.stub接口。ActivityThread代表应用程序进程的主线程，它管理着当前应用程序进程的线程。</p><p>我们来看一下scheduleLaunchActivity的相关源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ActivityThread::ApplicationThread</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scheduleLaunchActivity</span><span class="params">(Intent intent, IBinder token, <span class="keyword">int</span> ident,</span></span></span><br><span class="line"><span class="function"><span class="params">                ActivityInfo info, Configuration curConfig, Configuration overrideConfig,</span></span></span><br><span class="line"><span class="function"><span class="params">                CompatibilityInfo compatInfo, String referrer, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">int</span> procState, Bundle state, PersistableBundle persistentState,</span></span></span><br><span class="line"><span class="function"><span class="params">                List&lt;ResultInfo&gt; pendingResults, List&lt;ReferrerIntent&gt; pendingNewIntents,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          <span class="keyword">boolean</span> notResumed, <span class="keyword">boolean</span> isForward, ProfilerInfo profilerInfo)</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">       ActivityClientRecord r = <span class="keyword">new</span> ActivityClientRecord();</span><br><span class="line"></span><br><span class="line">            r.token = token;</span><br><span class="line">            r.ident = ident;</span><br><span class="line">            r.intent = intent;</span><br><span class="line">            r.referrer = referrer;</span><br><span class="line">            r.voiceInteractor = voiceInteractor;</span><br><span class="line">            r.activityInfo = info;</span><br><span class="line">            r.compatInfo = compatInfo;</span><br><span class="line">            r.state = state;</span><br><span class="line">            r.persistentState = persistentState;</span><br><span class="line"></span><br><span class="line">            r.pendingResults = pendingResults;</span><br><span class="line">            r.pendingIntents = pendingNewIntents;</span><br><span class="line"></span><br><span class="line">            r.startsNotResumed = notResumed;</span><br><span class="line">            r.isForward = isForward;</span><br><span class="line"></span><br><span class="line">            r.profilerInfo = profilerInfo;</span><br><span class="line"></span><br><span class="line">            r.overrideConfig = overrideConfig;</span><br><span class="line">            updatePendingConfiguration(curConfig);</span><br><span class="line"></span><br><span class="line">            sendMessage(H.LAUNCH_ACTIVITY, r);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上述方法中只是简单的把从AMS传过来的有关启动Activity的参数，封装成ActivityClientRecord，然后调用sendMessage向H发送LAUNCH_ACTIVITY的消息，并且将ActivityClientRecord作为参数传了过去，H是ActivityThread中的内部类，是Handler类型，有关Activity的启动消息都交给这个Handler处理，为什么这里要进行切换到主线程处理消息呢？因为此时这里还运行在Binder的线程池中，不能进行Activity的启动，所以要切换到主线程中才能进行Activity的生命周期的方法回调。</p><p>下面我们来看看sendMessage方法。</p><h3 id="1、ApplicationThread-sendMessage"><a href="#1、ApplicationThread-sendMessage" class="headerlink" title="1、ApplicationThread::sendMessage()"></a>1、ApplicationThread::sendMessage()</h3><p>该方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ActivityThread::ApplicationThread</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(<span class="keyword">int</span> what, Object obj)</span> </span>&#123;</span><br><span class="line">        sendMessage(what, obj, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(<span class="keyword">int</span> what, Object obj, <span class="keyword">int</span> arg1, <span class="keyword">int</span> arg2, <span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        Message msg = Message.obtain();</span><br><span class="line">        msg.what = what;</span><br><span class="line">        msg.obj = obj;</span><br><span class="line">        msg.arg1 = arg1;</span><br><span class="line">        msg.arg2 = arg2;</span><br><span class="line">        <span class="keyword">if</span> (async) &#123;</span><br><span class="line">            msg.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mH.sendMessage(msg);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>可以看到，sendMessage方法中将H.LAUNCH_ACTIVITY与ActivityClientRecord封装成一个Message，然后调用mH的sendMessage方法，mH就是H的实例，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> H mH = <span class="keyword">new</span> H();</span><br></pre></td></tr></table></figure><p>熟悉android消息机制的都知道(不了解的，可以看这一篇文章<a href="https://rain9155.github.io/2019/02/21/Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6java%E5%B1%82/" target="_blank" rel="noopener">Android消息机制java层</a>)，Handler发送消息后，都会统一到handlerMessage方法中处理。</p><p>我们来看一下Handler H对消息的处理。</p><h3 id="2、H-handleMessage（）"><a href="#2、H-handleMessage（）" class="headerlink" title="2、H::handleMessage（）"></a>2、H::handleMessage（）</h3><p>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ActivityThread.java</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">H</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LAUNCH_ACTIVITY         = <span class="number">100</span>;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAUSE_ACTIVITY          = <span class="number">101</span>;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESUME_ACTIVITY         = <span class="number">107</span>;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DESTROY_ACTIVITY        = <span class="number">109</span>;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BIND_APPLICATION        = <span class="number">110</span>;</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> LAUNCH_ACTIVITY: &#123;</span><br><span class="line">                    <span class="keyword">final</span> ActivityClientRecord r = (ActivityClientRecord) msg.obj;</span><br><span class="line">                    r.packageInfo = getPackageInfoNoCheck(</span><br><span class="line">                            r.activityInfo.applicationInfo, r.compatInfo);</span><br><span class="line">                    handleLaunchActivity(r, <span class="keyword">null</span>, <span class="string">"LAUNCH_ACTIVITY"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>H中有很多关于四大组件的消息处理的字段，如Activity的启动，这里我们只关心前面发送过来的LAUNCH_ACTIVITY字段的消息处理，可以看到这里首先把msg中的obj字段转换为ActivityClientRecord，然后为ActivityClientRecord的packageInfo赋值，packageInfo是LoadedApk类型，它表示已加载的APK文件，接下来调用了外部类ActivityThread的handleLaunchActivity方法。</p><p>接下来我们来看一下ActivityThread的handleLaunchActivity方法。</p><h2 id="ActivityThread-handleLaunchActivity（）"><a href="#ActivityThread-handleLaunchActivity（）" class="headerlink" title="ActivityThread::handleLaunchActivity（）"></a>ActivityThread::handleLaunchActivity（）</h2><p>该方法源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ActivityThread.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent, String reason)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//最终回调Activity的onConfigurationChanged方法</span></span><br><span class="line">    handleConfigurationChanged(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//这里面获取WindowManager系统服务的本地代理</span></span><br><span class="line">    WindowManagerGlobal.initialize();</span><br><span class="line">    <span class="comment">//1、关注这里，启动Activity，调用了ActivityThread的performLaunchActivity方法，会最终回调Activity的onCreate，onStart方法</span></span><br><span class="line">    Activity a = performLaunchActivity(r, customIntent);</span><br><span class="line">    <span class="keyword">if</span> (a != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//2、关注这里，调用了ActivityThread的handleResumeActivity方法，会最终回调Activity的onResume方法</span></span><br><span class="line">         handleResumeActivity(r.token, <span class="keyword">false</span>, r.isForward,</span><br><span class="line">                    !r.activity.mFinished &amp;&amp; !r.startsNotResumed, r.lastProcessedSeq, reason);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果出错了，这里会告诉AMS停止启动Activity  </span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ActivityManager.getService()</span><br><span class="line">                .finishActivity(r.token, Activity.RESULT_CANCELED, <span class="keyword">null</span>,</span><br><span class="line">                                Activity.DONT_FINISH_TASK_WITH_ACTIVITY);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex.rethrowFromSystemServer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本文的重点是Activity的生命周期如何被回调，所以上面我们只需要关注注释1、2。注释1中调用了ActivityThread的performLaunchActivity方法，该方法最终完成了Activity对象的创建和启动过程，如果启动出错就会通知AMS停止启动Activity，并且在注释2中ActivityThread通过handleResumeActivity将被启动的Activity置为Resume状态。</p><p>我们首先看注释1的performLaunchActivity方法。</p><h3 id="1、ActivityThread-performLaunchActivity"><a href="#1、ActivityThread-performLaunchActivity" class="headerlink" title="1、ActivityThread::performLaunchActivity()"></a>1、ActivityThread::performLaunchActivity()</h3><p>该方法相关源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ActivityThread.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Activity <span class="title">performLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//从ActivityClientRecord中获取ActivityInfo。</span></span><br><span class="line">    ActivityInfo aInfo = r.activityInfo;</span><br><span class="line">    <span class="comment">//获取packageInfo，packageInfo是前面讲到的LoadedApk类型</span></span><br><span class="line">    <span class="keyword">if</span> (r.packageInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">        r.packageInfo = getPackageInfo(aInfo.applicationInfo, r.compatInfo,</span><br><span class="line">                                       Context.CONTEXT_INCLUDE_CODE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取ComponentName</span></span><br><span class="line">     ComponentName component = r.intent.getComponent();</span><br><span class="line">        <span class="keyword">if</span> (component == <span class="keyword">null</span>) &#123;</span><br><span class="line">            component = r.intent.resolveActivity(</span><br><span class="line">                mInitialApplication.getPackageManager());</span><br><span class="line">            r.intent.setComponent(component);</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="keyword">if</span> (r.activityInfo.targetActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            component = <span class="keyword">new</span> ComponentName(r.activityInfo.packageName,</span><br><span class="line">                    r.activityInfo.targetActivity);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//创建要启动Activity的上下文环境</span></span><br><span class="line">    ContextImpl appContext = createBaseContextForActivity(r);</span><br><span class="line">    <span class="comment">//构造Activity对象，并设置参数</span></span><br><span class="line">    Activity activity = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//获取类加载器</span></span><br><span class="line">            java.lang.ClassLoader cl = appContext.getClassLoader();</span><br><span class="line">         <span class="comment">//通过Instrumentation，用类加载创建该Activity实例</span></span><br><span class="line">            activity = mInstrumentation.newActivity(</span><br><span class="line">                    cl, component.getClassName(), r.intent);</span><br><span class="line">            StrictMode.incrementExpectedActivityCount(activity.getClass());</span><br><span class="line">            <span class="comment">//设置相关参数准备初始化Activity</span></span><br><span class="line">            r.intent.setExtrasClassLoader(cl);</span><br><span class="line">            r.intent.prepareToEnterProcess();</span><br><span class="line">            <span class="keyword">if</span> (r.state != <span class="keyword">null</span>) &#123;</span><br><span class="line">                r.state.setClassLoader(cl);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          <span class="comment">//初始化Activity失败</span></span><br><span class="line">          <span class="comment">//....</span></span><br><span class="line">      &#125;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//创建Application</span></span><br><span class="line">         Application app = r.packageInfo.makeApplication(<span class="keyword">false</span>, mInstrumentation);</span><br><span class="line">         <span class="comment">//...</span></span><br><span class="line">         <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="comment">//构造Configuration对象</span></span><br><span class="line">              Configuration config = <span class="keyword">new</span> Configuration(mCompatConfiguration);</span><br><span class="line">             <span class="comment">//...</span></span><br><span class="line">             <span class="comment">//把该Activity和ContextImpl关联</span></span><br><span class="line">             appContext.setOuterContext(activity);</span><br><span class="line">             <span class="comment">//通过attach方法将上述创建的信息保持到Activity内部，用来完成对Activity的初始化，如ContextImpl，Application，Configuration</span></span><br><span class="line">             activity.attach(appContext, <span class="keyword">this</span>, getInstrumentation(), r.token,</span><br><span class="line">                        r.ident, app, r.intent, r.activityInfo, title, r.parent,</span><br><span class="line">                        r.embeddedID, r.lastNonConfigurationInstances, config,</span><br><span class="line">                        r.referrer, r.voiceInteractor, window, r.configCallback);</span><br><span class="line">             <span class="comment">//...</span></span><br><span class="line">             <span class="comment">//获取Activity的主题并设置</span></span><br><span class="line">             <span class="keyword">int</span> theme = r.activityInfo.getThemeResource();</span><br><span class="line">             <span class="keyword">if</span> (theme != <span class="number">0</span>) &#123;</span><br><span class="line">                    activity.setTheme(theme);</span><br><span class="line">             &#125;</span><br><span class="line">              activity.mCalled = <span class="keyword">false</span>;</span><br><span class="line">             <span class="comment">//1、根据是否需要持久化，调用Instrumentation的callActivityOnCreate方法通知Activity已经被创建，里面最终会调用Activity的onCreate方法</span></span><br><span class="line">              <span class="keyword">if</span> (r.isPersistable()) &#123;</span><br><span class="line">                    mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="comment">//关注这里，走这个分支</span></span><br><span class="line">                    mInstrumentation.callActivityOnCreate(activity, r.state);</span><br><span class="line">                &#125;</span><br><span class="line">              <span class="keyword">if</span> (!activity.mCalled) &#123;</span><br><span class="line">                   <span class="comment">//...</span></span><br><span class="line">                  <span class="comment">//无法调用Activity的onCreate方法，抛出异常</span></span><br><span class="line">                &#125;</span><br><span class="line">              r.activity = activity;</span><br><span class="line">              r.stopped = <span class="keyword">true</span>;</span><br><span class="line">              <span class="keyword">if</span> (!r.activity.mFinished) &#123;</span><br><span class="line">                  <span class="comment">//2、里面最终会调用Activity的onStart方法</span></span><br><span class="line">                  activity.performStart();</span><br><span class="line">                  r.stopped = <span class="keyword">false</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (!r.activity.mFinished) &#123;</span><br><span class="line">                    <span class="comment">//根据是否需要持久化，调用Instrumentation的callActivityOnRestoreInstanceState方法通知Activity已经被创建，里面最终会调用Activity的onRestoreInstanceState方法</span></span><br><span class="line">                    <span class="keyword">if</span> (r.isPersistable()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (r.state != <span class="keyword">null</span> || r.persistentState != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state,</span><br><span class="line">                                    r.persistentState);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (r.state != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">             <span class="comment">//...</span></span><br><span class="line">         &#125;</span><br><span class="line">          r.paused = <span class="keyword">true</span>;</span><br><span class="line">         <span class="comment">//把ActivityClientRecord缓存起来，以便在以后使用。mActivities的定义：ArrayMap&lt;IBinder, ActivityClientRecord&gt; mActivities = new ArrayMap&lt;&gt;();</span></span><br><span class="line"> mActivities.put(r.token, r);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (SuperNotCalledException e) &#123;</span><br><span class="line">          <span class="comment">//...</span></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          <span class="comment">//...</span></span><br><span class="line">          <span class="comment">//抛异常，无法启动Activity</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> activity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法的主要代码都贴出来了，并做了注释，它主要做了以下事情：</p><ul><li>1、从ActivityClientRecord中获取待启动的Activity的组件信息，如ActivityInfo，ComponentName。</li></ul><p>ActivityInfo类用于存储代码中AndroidManifes设置的activity节点信息，ComponentName类中保存了该Activity的包名和类名</p><ul><li>2、通过createBaseContextForActivity方法创建要启动Activity的上下文环境ContextImp，并在下面作为参数传进attach方法中。</li></ul><p>ContextImp是Context的具体实现，Context中的大部分逻辑都是交给ContextImpl来完成，Context中定义了许多与四大组件启动、系统级服务获取、类加载、资源获取等有密切关系的方法，而Activity继承自ContextThemeWrapper，ContextThemeWrapper继承自ContextWrapper，ContextWrapper继承自Context，ContextWrapper内部有一个Context类型的mBase引用，而在Activity的attach方法中会调用attachBaseContext方法把该ContextImp赋值给mBase，所以Activity是ContextImpl的包装类，Activity扩展了Context中的方法。（这里就是一个<a href="https://blog.csdn.net/Rain_9155/article/details/89250729" target="_blank" rel="noopener">装饰者模式</a>）</p><ul><li>3、通过LoadedApk的makeApplication方法创建Application。</li></ul><p>makeApplication方法里面最终是通过Instrumentation的newApplication方法用类加载器创建Application，如果Application已经被创建过了，那么就不会重复创建，如果创建成功，会紧接着通过Instrumentation的callApplicationOnCreate来调用Application的onCreate方法。</p><ul><li>4、通过Instrumentation的newActivity方法用类加载器创建Activity对象。</li></ul><p>Instrumentation是一个用来监控应用程序与系统交互的类，通过它可以创建Activity、Applicationd实例，还与Activity生命周期的回调有关，所以在下文看到mInstrumentation.callActivityOnXX, 一般都是要回调某个Activity的生命周期方法。</p><ul><li>5、通过Activity的attach方法来完成一些重要数据的初始化，如ContextImpl，Application，Configuration等。</li></ul><p>在attach方法中会创建Window对象（PhoneWindow）并与Activity自身进行关联，这样当Window接收到外部的输入事件后就可以将事件传递给Activity。第2点讲过，还会把ContextImpl与Activity关联。</p><ul><li>6、调用Instrumentation的callActivityOnCreate方法，里面最终会调用Activity的onCreate方法。</li></ul><p>这里就是重点关注的注释1，注释还写到这里会根据是否需要持久化来调用不同参数的mInstrumentation的callActivityOnCreate方法，这个持久化是什么？其实这是在API 21后，Activity新增的一个”<strong>persistableMode</strong>“属性，在AndroidManifest.xml的activity节点将他它设为<strong>android:persistableMode=”persistAcrossReboots</strong>，Activity就有了持久化的能力，这时候我们可以数据保存在<strong>outPersistentState</strong>（Bundle类型），那么即使是关机，仍然可以恢复这些数据。关于PersistableMode更多信息可以看这篇文章<a href="https://www.rainng.com/android-persistablemode/" target="_blank" rel="noopener">PersistableMode使Activity数据持久化保存</a>，这不是本文的重点。</p><p>所以一般情况下我们没有使用这个属性，就会走到else分支，调用 mInstrumentation.callActivityOnCreate(activity, r.state)方法。</p><h4 id="1-1、Instrumentation-callActivityOnCreate"><a href="#1-1、Instrumentation-callActivityOnCreate" class="headerlink" title="1.1、Instrumentation::callActivityOnCreate()"></a>1.1、Instrumentation::callActivityOnCreate()</h4><p>该方法源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//Instrumentation.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callActivityOnCreate</span><span class="params">(Activity activity, Bundle icicle)</span> </span>&#123;</span><br><span class="line">        prePerformCreate(activity);</span><br><span class="line">    <span class="comment">//1、关注这里，调用了Activity的performCreate方法</span></span><br><span class="line">        activity.performCreate(icicle);</span><br><span class="line">        postPerformCreate(activity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们看注释1，调用了activity的performCreate方法，见名知意。</p><h5 id="1-1-1、Activity-performCreate"><a href="#1-1-1、Activity-performCreate" class="headerlink" title="1.1.1、Activity::performCreate()"></a>1.1.1、Activity::performCreate()</h5><p>该方法源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Activity.java </span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">performCreate</span><span class="params">(Bundle icicle, PersistableBundle persistentState)</span> </span>&#123;</span><br><span class="line">        restoreHasCurrentPermissionRequest(icicle);</span><br><span class="line">    <span class="comment">//1、看到我们的主角吧！onCreate方法</span></span><br><span class="line">        onCreate(icicle, persistentState);</span><br><span class="line">        mActivityTransitionState.readState(icicle);</span><br><span class="line">        performCreateCommon();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>看注释1，调用了我们熟悉的onCreate方法，我们平时一般在这里面进行Activity的控件、资源等初始化操作。</p><p>下面继续回到ActivityThread的performLaunchActivity方法，接着上面的第6点。</p><ul><li>7、调用Activity的performStart方法，里面最终会调用Activity的onStart方法。</li></ul><p>这里也就是重点关注的注释2，下面看一下performStart方法。</p><h4 id="1-2、Activity-performStart"><a href="#1-2、Activity-performStart" class="headerlink" title="1.2、Activity::performStart()"></a>1.2、Activity::performStart()</h4><p>我们继续点进去看一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Activity.java</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">performStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    mCalled = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//1、关注这里，调用了Instrumentation的callActivityOnStart方法</span></span><br><span class="line">    mInstrumentation.callActivityOnStart(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (!mCalled) &#123;</span><br><span class="line">             <span class="comment">//...</span></span><br><span class="line">             <span class="comment">//无法调用Activity的onStart方法，抛出异常</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看注释1，该方法还是一样的套路，调用 mInstrumentation.callActivityOnStart方法，我们看一下 Instrumentation的callActivityOnStart方法：</p><h5 id="1-2-1、Instrumentation-callActivityOnStart"><a href="#1-2-1、Instrumentation-callActivityOnStart" class="headerlink" title="1.2.1、Instrumentation::callActivityOnStart()"></a>1.2.1、Instrumentation::callActivityOnStart()</h5><p>该方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Instrumentation.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callActivityOnStart</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//看到我们的主角吧！onStart方法</span></span><br><span class="line">        activity.onStart();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>很简单的一句代码，调用了我们熟悉的onStart方法。</p><p>继续回到我们的ActivityThread的performLaunchActivity方法，还有一点没分析完，接下来到了根据需要调用Instrumentation的callActivityOnRestoreInstanceState方法，里面最终会调用Activity的onRestoreInstanceState方法，关于这个方法的作用已经不是本文的重点，但我们可以得出一个结论，onRestoreInstanceState方法的调用时机是在onStart方法之后。最后ActivityThread把ActivityClientRecord缓存起来。</p><p>分析完这个长长的方法，其实跟本文有关也就第6、7点。我们跳出ActivityThread::performLaunchActivity方法，回到ActivityThread的handleLaunchActivity方法。现在我们的Activity已经回调了onCreate和onStart方法，接下来应该是onResume方法。</p><p>下面我们我们接着来看handleLaunchActivity方法中注释2的handleResumeActivity方法。</p><h3 id="2、ActivityThread-handleResumeActivity"><a href="#2、ActivityThread-handleResumeActivity" class="headerlink" title="2、ActivityThread::handleResumeActivity()"></a>2、ActivityThread::handleResumeActivity()</h3><p>该方法源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ActivityThread.java</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">handleResumeActivity</span><span class="params">(IBinder token,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">boolean</span> clearHide, <span class="keyword">boolean</span> isForward, <span class="keyword">boolean</span> reallyResume, <span class="keyword">int</span> seq, String reason)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//从缓存中拿出ActivityClientRecord</span></span><br><span class="line">    ActivityClientRecord r = mActivities.get(token);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//1、主要关注这里，调用了performResumeActivity方法，这里最终会调用Activity的onResume方法</span></span><br><span class="line">    r = performResumeActivity(token, clearHide, reason);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2、下面if（r ！= null）&#123;&#125;分支里面的逻辑都是把Activity显示出来</span></span><br><span class="line"><span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//拿到Activity</span></span><br><span class="line">        <span class="keyword">final</span> Activity a = r.activity;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">boolean</span> willBeVisible = !a.mStartedActivity;</span><br><span class="line">        <span class="keyword">if</span> (!willBeVisible) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    willBeVisible = ActivityManager.getService().willActivityBeVisible(</span><br><span class="line">                            a.getActivityToken());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">                &#125;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">if</span> (r.window == <span class="keyword">null</span> &amp;&amp; !a.mFinished &amp;&amp; willBeVisible) &#123;</span><br><span class="line">            <span class="comment">//得到Activity关联的Window</span></span><br><span class="line">             r.window = r.activity.getWindow();</span><br><span class="line">            <span class="comment">//得到Activity的DecorView，即Activity的顶级View</span></span><br><span class="line">            View decor = r.window.getDecorView();</span><br><span class="line">            <span class="comment">//先把DecorView设为不可见</span></span><br><span class="line">            decor.setVisibility(View.INVISIBLE);</span><br><span class="line">            <span class="comment">//得到ViewManager，用于添加DecorView</span></span><br><span class="line">            ViewManager wm = a.getWindowManager();</span><br><span class="line">            <span class="comment">//得到布局参加</span></span><br><span class="line">            WindowManager.LayoutParams l = r.window.getAttributes();</span><br><span class="line">            a.mDecor = decor;</span><br><span class="line">            <span class="comment">//下面设置布局参数</span></span><br><span class="line">            l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;</span><br><span class="line">            l.softInputMode |= forwardBit;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">             <span class="keyword">if</span> (a.mVisibleFromClient) &#123;</span><br><span class="line">                 <span class="keyword">if</span> (!a.mWindowAdded) &#123;</span><br><span class="line">                     a.mWindowAdded = <span class="keyword">true</span>;</span><br><span class="line">                     <span class="comment">//用ViewManager添加DecorView</span></span><br><span class="line">                     wm.addView(decor, l);</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="comment">//...</span></span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//此时用于承载DecorView的Window已经被WM添加了，但是还处于INVISIBLE状态,所以下面就把它值为VISIBLE</span></span><br><span class="line">        <span class="keyword">if</span> (!r.activity.mFinished &amp;&amp; willBeVisible &amp;&amp; r.activity.mDecor != <span class="keyword">null</span> &amp;&amp; !r.hideForNow) &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">             <span class="keyword">if</span> (r.activity.mVisibleFromClient) &#123;</span><br><span class="line">                 <span class="comment">//把Activity显示出来</span></span><br><span class="line">                 r.activity.makeVisible();</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//Activity不能够Resume，通知AMS结束掉该Activity</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>handleResumeActivity方法里面的代码也有点长，这个方法主要是把Activity置为Resume状态，并把Activity显示出来，所以我们只关注注释1，注释2是把Activity值为VISIBLE状态，大家要明白的是Activity其实也可以说是一个View，它的顶级View叫做DecorView，但系统回调完Activity的onResume函数时，只是说明Activity1已经完成所有的资源准备工作，Activity已经做好显示给用户的准备，所以还要通过类似于setVisible的方式把它显示出来，这个过程涉及到WindowManage的相关知识，为什么要这样做？大家可以看这篇文章<a href="https://rain9155.github.io/2019/03/22/Window,%20WindowManager%E5%92%8CWindowManagerService%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/" target="_blank" rel="noopener">Window,WindowManager和WindowManagerService之间的关系</a>了解一下，所以注释2不是本文重点就不讲了。</p><p>下面我们来看注释1的performResumeActivity方法。</p><h4 id="2-1-ActivityThread-performResumeActivity"><a href="#2-1-ActivityThread-performResumeActivity" class="headerlink" title="2.1 ActivityThread::performResumeActivity()"></a>2.1 ActivityThread::performResumeActivity()</h4><p>该方法主要源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ActivityThread.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ActivityClientRecord <span class="title">performResumeActivity</span><span class="params">(IBinder token,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                       <span class="keyword">boolean</span> clearHide, String reason)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//从缓存中拿到ActivityClientRecord</span></span><br><span class="line">     ActivityClientRecord r = mActivities.get(token);</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span> &amp;&amp; !r.activity.mFinished) &#123;</span><br><span class="line">         <span class="keyword">if</span> (clearHide) &#123;</span><br><span class="line">                r.hideForNow = <span class="keyword">false</span>;</span><br><span class="line">                r.activity.mStartedActivity = <span class="keyword">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="comment">//1、主要关注这里，调用了Activity的performResume方法</span></span><br><span class="line">            r.activity.performResume();</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">             r.paused = <span class="keyword">false</span>;</span><br><span class="line">             r.stopped = <span class="keyword">false</span>;</span><br><span class="line">             r.state = <span class="keyword">null</span>;</span><br><span class="line">             r.persistentState = <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">             <span class="comment">//...</span></span><br><span class="line">            <span class="comment">//抛异常，无法resume Activity</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要关注注释1，调用了Activity的performResume，和上面的performCreate，performStart很相似。</p><p>下面我们来看Activity的performResume方法。</p><h5 id="2-1-1-Activity-performResume"><a href="#2-1-1-Activity-performResume" class="headerlink" title="2.1.1 Activity::performResume()"></a>2.1.1 Activity::performResume()</h5><p>该方法主要源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Activity.java</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">performResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里处理Activity生命周期中的Restart流程</span></span><br><span class="line">    performRestart();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">mCalled = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//1、关注这里，调用Instrumentation的callActivityOnResume方法</span></span><br><span class="line">    mInstrumentation.callActivityOnResume(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (!mCalled) &#123;</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//抛异常，无法调用Activity的onResume方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个方法中我们看到了 performRestart()方法，这个是根据情况处理Restart流程，里面会执行onReStart() -&gt; onStart() ，到这里就执行onResume()， 所以我们看到注释1会Instrumentation的callActivityOnResume方法，这个和上面的callActivityOnCreate()、callActivityOnStart（）类似。</p><p>本着执着的态度，我们还是看一下Instrumentation的callActivityOnResume方法。</p><h6 id="2-1-2、Instrumentation-callActivityOnResume"><a href="#2-1-2、Instrumentation-callActivityOnResume" class="headerlink" title="2.1.2、Instrumentation::callActivityOnResume()"></a>2.1.2、Instrumentation::callActivityOnResume()</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//Instrumentation.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callActivityOnResume</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">    activity.mResumed = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">//又看到了我们的主角之一，onResume方法</span></span><br><span class="line">    activity.onResume();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法先把Activity的mResumed 赋值为true，然后回调了我们熟悉的onResume方法。</p><p>我们跳出ActivityThread的handleResumeActivity方法，回到handleLaunchActivity方法，至此handleLaunchActivity方法分析完，Activity已经显示到用户面前。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到目前为止我们已经回调了Activity的三个生命周期方法：onCreate -&gt; onStart -&gt; onResume，onRestart也介绍了一下，可以说开头那个问题已经解解决了一半，我先来看一下本文的时序图：</p><img src="/2019/05/19/Android8.0%E7%9A%84Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B2/activity1.jpg" class="" title="activity1"><p>所以现在我们知道了在应用进程中ApplicationThread启动Activity的过程。</p><p>那么还有三个方法：onPause -&gt; onStop -&gt; onDestory 什么时候被回调呢？大家都知道Activity有7个生命周期方法，除去onRestart，其他3个都是一 一对应的，结合前面那篇文章<a href="https://rain9155.github.io/2019/05/19/Android8.0%E7%9A%84Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B1/" target="_blank" rel="noopener">Android8.0的Activity启动流程(1)</a>我们知道：</p><ul><li><p>1、在AMS中含有ApplicatiThread的本地代理，所以AMS所在进程可以通过这个代理与ActivityThread的主线程通信，也就能调用ApplicatiThread的一些方法。</p></li><li><p>2、在应用进程中也含有系统服务AMS的本地代理对象，所以应用进程可以通过这个代理与AMS通信，可以请求AMS启动一个Activity。</p></li><li><p>3、双方都含有双方的代理，通过Binder，也就建立起双方的通信通道。</p></li></ul><p>每个应用都有自己专属Activity任务栈，Activity任务栈的管理是在AMS那边，在本文的情况下，一个Activity已经被启动了，该Activity被加入到栈顶中去，如果此时我按back键返回上一个Activity，那么该Activity就会调用相应的回调onPause -&gt; onStop -&gt; onDestory方法，这个过程在AMS那边对应一个出栈动作，此时AMS也就像启动Activity调用scheduleLaunchActivity方法那样调用ApplicationThread中schedulePauseActivity、scheduleStopActivity、scheduleDestroyActivity方法来结束掉这个Activity，这个调用过程是IPC，所以大家通过本文举一反三也就明白了Activity的其他生命周期是如何被回调的，这个过程离不开与AMS的交互。</p><p>至此我们已经走完startActivity后发生的流程。在这整个过程中也发现了自己平常很多遗落的知识点，让我更进一步的认识了Activity。希望大家也有所收获。</p><p>参考资料：</p><p><a href="https://www.jianshu.com/p/91984327690e" target="_blank" rel="noopener">Activity生命周期回调是如何被回调的</a></p><p><a href="http://liuwangshu.cn/framework/component/7-activity-start-2.html" target="_blank" rel="noopener">Android8.0 根Activity启动过程（后篇）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;上一篇文章&lt;a href=&quot;https://rain9155.github.io/2019/05/19/Android8.0%E7%9A%84Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B1/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android8.0的Activity启动流程(1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上一篇文章讲了应用进程请求AMS启动Activity过程和Activity在AMS中的启动过程，然后Activity启动的代码逻辑就从AMS所在进程，又重新回到了应用进程所在的ApplicationThread中。我们还留下了一个问题，&lt;strong&gt;Activity的生命周期方法是如何被回调的？&lt;/strong&gt;，下面我们就带着这个疑问，去走一遍源码，看一下在应用进程中ApplicationThread启动Activity的过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="四大组件" scheme="http://yoursite.com/categories/%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="activity" scheme="http://yoursite.com/tags/activity/"/>
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Android8.0的Activity启动流程(1)</title>
    <link href="http://yoursite.com/2019/05/19/Android8.0%E7%9A%84Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B1/"/>
    <id>http://yoursite.com/2019/05/19/Android8.0%E7%9A%84Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B1/</id>
    <published>2019-05-19T08:11:17.000Z</published>
    <updated>2023-01-07T10:44:48.661Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Activity的启动流程有俩种过程，一种是根Activity的启动过程，即在Launch界面点击一个应用图标启动应用程序，根Activity指的是应用程序启动的第一个Activity；另一种是普通Activity的启动流程，即我们平时调用startActivity方法来启动一个Activity。本文讨论第二种，startActivity方法大家都知道是用来启动一个Activity的，那么大家有没有想过它在底层是怎么启动的呢？Activity的生命周期方法是如何被回调的？它启动过程中涉及到多少个进程？接下来我们通过撸一篇源码来了解Activity的大概启动流程，然后解答这几个问题。</p><a id="more"></a><pre><code>本文源码基于Android8.0，本文涉及的源码文件位置如下：frameworks/base/core/java/android/app/Activity.javaframeworks/base/services/core/java/com/android/server/am/*.java(*代表ActivityManagerService，ActivityStack，ActivityStarter，ActivityStackSupervisor，ActivityStack)</code></pre><h2 id="Activity-startActivity"><a href="#Activity-startActivity" class="headerlink" title="Activity::startActivity()"></a>Activity::startActivity()</h2><p>startActivity有好几种重载方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.startActivity(intent, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent, @Nullable Bundle options)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (options != <span class="keyword">null</span>) &#123;</span><br><span class="line">            startActivityForResult(intent, -<span class="number">1</span>, options);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//我们一般没有传options参数给startActivity，所以options为空，就会走到这个分支</span></span><br><span class="line">            <span class="comment">//第二参数requestCode为-1，表示不需要知道Activity启动的结果</span></span><br><span class="line">            startActivityForResult(intent, -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//发现两个参数的startActivityForResult方法最终还是调用三个参数的startActivityForResult方法，options参数传入null</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivityForResult</span><span class="params">(@RequiresPermission Intent intent, <span class="keyword">int</span> requestCode)</span> </span>&#123;</span><br><span class="line">        startActivityForResult(intent, requestCode, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以发现startActivity最终都会调用到startActivityForResult方法。</p><h3 id="1、Activity-startActivityForResult"><a href="#1、Activity-startActivityForResult" class="headerlink" title="1、Activity::startActivityForResult()"></a>1、Activity::startActivityForResult()</h3><p>这里我们来到了具有三个参数的startActivityForResult方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Activity.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivityForResult</span><span class="params">(@RequiresPermission Intent intent, <span class="keyword">int</span> requestCode, @Nullable Bundle options)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//mParent一直为空</span></span><br><span class="line">        <span class="keyword">if</span> (mParent == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="comment">//1、关注这里，调用Instrumentation的execStartActivity方法</span></span><br><span class="line">            Instrumentation.ActivityResult ar =</span><br><span class="line">                mInstrumentation.execStartActivity(</span><br><span class="line">                    <span class="keyword">this</span>, mMainThread.getApplicationThread(), mToken, <span class="keyword">this</span>,</span><br><span class="line">                    intent, requestCode, options);</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="comment">//此时requestCode为-1</span></span><br><span class="line">            <span class="keyword">if</span> (requestCode &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                mStartedActivity = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在上面的的代码中，会进入mParent==null的这个分支里，mParent是Activity类型，它只会在LocalActivityManger构造中被赋值，在我们startActivity过程中一直为空（关于为甚么mParent一直为空，可以查看这篇文章<a href="https://www.jianshu.com/p/3141d2c0194c" target="_blank" rel="noopener">StartActivity路上的mParent</a>）。这里我们只关注注释1，调用Instrumentation的execStartActivity方法，Instrumentation是一个用来监控应用程序与系统交互的类，我们还要注意传入execStartActivity方法的两个参数：</p><ul><li>1、mMainThread.getApplicationThread()：ApplicationThread类型，mMainThread是ActivityThread类型，它是应用程序的入口类，而mMainThread.getApplicationThread()就是获得一个<strong>ApplicationThread</strong>，它是ActivityThread的内部类，它实现了IApplicationThread.Stub，如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ActivityThread.java::ApplicationThread</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationThread</span> <span class="keyword">extends</span> <span class="title">IApplicationThread</span>.<span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IApplicationThread.java类是在编译时由IApplicationThread.aidl通过AIDL工具自动生成的，IApplicationThread的内部会自动生成一个 IApplicationThread.Stub类，它继承自Binder类，而Binder实现了IBinder接口，并且 IApplicationThread.Stub实现了IActivityManager接口。要想进行进程间通信，ApplicationThread只需要继承IApplicationThread.Stub类并实现相应的方法就可以，这样主线程ActivityThread就可以通过ApplicationThread就能对外提供远程服务。要记住这个<strong>ApplicationThread</strong>，他在Activity的启动过程中发挥重要作用。</p><ul><li>2、mToken： 它的类型为IBinder，代表着当前Activity的token，它保存自己所处Activity的ActivityRecord信息</li></ul><h3 id="2、Instrumentation-execStartActivity"><a href="#2、Instrumentation-execStartActivity" class="headerlink" title="2、Instrumentation::execStartActivity()"></a>2、Instrumentation::execStartActivity()</h3><p>我们继续看Instrumentation的execStartActivity方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Instrumentation.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ActivityResult <span class="title">execStartActivity</span><span class="params">(Context who, IBinder contextThread, IBinder token, Activity target, Intent intent, <span class="keyword">int</span> requestCode, Bundle options)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//还记得上面提到的ApplicationThread吗，这里把它转成了IApplicationThread，并在下面作为startActivity方法的参数</span></span><br><span class="line">    IApplicationThread whoThread = (IApplicationThread) contextThread;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//1、关注这里，这里实际调用的是ActivityManagerService的startActivity方法</span></span><br><span class="line">        <span class="keyword">int</span> result = ActivityManager.getService()</span><br><span class="line">            .startActivity(whoThread, who.getBasePackageName(), intent,</span><br><span class="line">                           intent.resolveTypeIfNeeded(who.getContentResolver()),</span><br><span class="line">                           token, target != <span class="keyword">null</span> ? target.mEmbeddedID : <span class="keyword">null</span>,</span><br><span class="line">                           requestCode, <span class="number">0</span>, <span class="keyword">null</span>, options);</span><br><span class="line">        <span class="comment">//检查启动Activity的结果，无法正确启动一个Activiy时，这个方法抛出异常</span></span><br><span class="line">        checkStartActivityResult(result, intent);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failure from system"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看注释1，ActivityManager.getService()返回的是ActivityManagerService（下面简称AMS）在应用进程的本地代理，该方法在ActivityManager中，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ActivityManager.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IActivityManager <span class="title">getService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//IActivityManagerSingleton是Singleton类型，Singleton是一个单例的封装类</span></span><br><span class="line">    <span class="comment">//第一次调用它的get方法时它会通过create方法来初始化AMS这个Binder对象，在后续调用中返回之前创建的对象</span></span><br><span class="line">        <span class="keyword">return</span> IActivityManagerSingleton.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton&lt;IActivityManager&gt; IActivityManagerSingleton =</span><br><span class="line">            <span class="keyword">new</span> Singleton&lt;IActivityManager&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> IActivityManager <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="comment">//ServiceManager是服务大管家，这里通过getService获取到了IBinder类型的AMS引用</span></span><br><span class="line">                    <span class="keyword">final</span> IBinder b = ServiceManager.getService(Context.ACTIVITY_SERVICE);</span><br><span class="line">                    <span class="comment">//这通过asInterface方法把IBinder类型的AMS引用转换成AMS在应用进程的本地代理</span></span><br><span class="line">                    <span class="keyword">final</span> IActivityManager am = IActivityManager.Stub.asInterface(b);</span><br><span class="line">                    <span class="keyword">return</span> am;</span><br><span class="line">                &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>上面出现的IActivityManager.java类的意义类似于前面提到的ApplicationThread.java。要想进行进程间通信，AMS只需要继承IActivityManager.Stub类并实现相应的方法就可以，这样AMS就能对外提供远程服务，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ActivityManagerService.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityManagerService</span> <span class="keyword">extends</span> <span class="title">IActivityManager</span>.<span class="title">Stub</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以继续回到Instrumentation的execStartActivity方法中，ActivityManager.getService()返回的是AMS的本地代理，注意AMS是在系统进程SystemServer中，所以注释1这里通过<strong>Binder的IPC</strong>，调用的其实是AMS的startActivity方法。</p><p>整个过程的时序图如下：</p><img src="/2019/05/19/Android8.0%E7%9A%84Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B1/activity1.png" class="" title="activity"><p><strong>在这里开始，Activity的启动过程从应用进程转移到AMS中去</strong>。</p><h2 id="AMS-startActivity"><a href="#AMS-startActivity" class="headerlink" title="AMS::startActivity()"></a>AMS::startActivity()</h2><p>AMS的startActivity方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AMS.java</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivity</span><span class="params">(IApplicationThread caller, String callingPackage, Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode, <span class="keyword">int</span> startFlags, ProfilerInfo profilerInfo, Bundle bOptions)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo,</span><br><span class="line">             resultWho, requestCode, startFlags, profilerInfo, bOptions,</span><br><span class="line">             UserHandle.getCallingUserId());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>简单的return了startActivityAsUser方法，该方法在最后多了个 UserHandle.getCallingUserId()参数，AMS根据这个确定调用者权限。我们再来看看其他参数：</p><ul><li>caller：IApplicationThread类型，还记得上面提到的ApplicationThread吗？到这里它已经被转成了ApplicationThread的本地代理，这个转换的过程发生在上面讲到的Binder的IPC中，就像上面提到的AMS本地代理转换一样。</li><li>callingPackage：前面一直传过来的，代表调用者Activity所在的包名</li><li>intent：前面startActivity时传递过来的intent</li><li>resolvedType：从上面传过来，intent.resolveTypeIfNeeded()</li><li>resultTo：IBinder类型，还记得上面提到的mToken吗？就是从上面一直传过来的，保存着的调用者Activity的ActivityRecord信息</li><li>resultWho：String类型，调用者Activity的mEmbeddedID，前面一直传过来的</li><li>requestCode：从上面一直传过来的，一直为-1</li><li>startFlags：从上面传过来，为0</li><li>profilerInfo：ProfilerInfo类型，从上面传过来，等于null</li><li>bOptions：Bundle类型，从上面传过来，等于null</li></ul><p>下面继续看AMS的startActivityAsUser方法。</p><h3 id="1、AMS-startActivityAsUser"><a href="#1、AMS-startActivityAsUser" class="headerlink" title="1、AMS::startActivityAsUser()"></a>1、AMS::startActivityAsUser()</h3><p>startActivityAsUser方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AMS.java</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivityAsUser</span><span class="params">(IApplicationThread caller, String callingPackage, Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode, <span class="keyword">int</span> startFlags, ProfilerInfo profilerInfo, Bundle bOptions, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">     <span class="keyword">return</span> mActivityStarter.startActivityMayWait(caller, -<span class="number">1</span>, callingPackage, intent,</span><br><span class="line">             resolvedType, <span class="keyword">null</span>, <span class="keyword">null</span>, resultTo, resultWho, requestCode, startFlags,</span><br><span class="line">             profilerInfo, <span class="keyword">null</span>, <span class="keyword">null</span>, bOptions, <span class="keyword">false</span>, userId, <span class="keyword">null</span>, <span class="keyword">null</span>,</span><br><span class="line">             <span class="string">"startActivityAsUser"</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>省略了两个判断，1、判断调用者进程是否被隔离，2、判断调用者是否有权限，这些都不是重点。下面继续简单的return了mActivityStarter.startActivityMayWait方法，mActivityStarter是ActivityStarter类型，它是AMS中加载Activity的控制类，会收集所有的逻辑来决定如何将Intent和Flags转换为Activity，并将Activity和Task以及Stack相关联。传入startActivityMayWait方法的参数又多了几个，看一下几个：</p><ul><li>callingUid：第二个参数，等于-1</li><li>inTask：倒数第二个参数，TaskRecord类型，代表要启动的Activity所在的栈，这里为null，表示还没创建</li><li>reason：倒数第一个参数，值为”startActivityAsUser”，代表启动的理由</li><li>其他的参数有一些传入null，有一些是从上面传过来的</li></ul><p>下面看ActivityStarter中的startActivityMayWait方法。</p><h3 id="2、ActivityStarter-startActivityMayWait"><a href="#2、ActivityStarter-startActivityMayWait" class="headerlink" title="2、ActivityStarter::startActivityMayWait()"></a>2、ActivityStarter::startActivityMayWait()</h3><p>来看看这个方法的源码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ActivityStarter.java</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivityMayWait</span><span class="params">(IApplicationThread caller, <span class="keyword">int</span> callingUid, String callingPackage, Intent intent, String resolvedType, IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor, IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode, <span class="keyword">int</span> startFlags, ProfilerInfo profilerInfo, WaitResult outResult, Configuration globalConfig, Bundle bOptions, <span class="keyword">boolean</span> ignoreTargetSecurity, <span class="keyword">int</span> userId, IActivityContainer iContainer, TaskRecord inTask, String reason)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//把上面传进来的intent再构造一个新的Intent对象，这样即便intent被修改也不受影响</span></span><br><span class="line">    intent = <span class="keyword">new</span> Intent(intent);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    ResolveInfo rInfo = mSupervisor.resolveIntent(intent, resolvedType, userId);</span><br><span class="line">    <span class="keyword">if</span>(rInfo == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//解析这个intent，收集intent指向的Activity信息</span></span><br><span class="line">    ActivityInfo aInfo = mSupervisor.resolveActivity(intent, rInfo, startFlags, profilerInfo);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">final</span> ActivityRecord[] outRecord = <span class="keyword">new</span> ActivityRecord[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//1、主要关注这里，调用了本身的startActivityLocked方法</span></span><br><span class="line">    <span class="keyword">int</span> res = startActivityLocked(caller, intent, ephemeralIntent, resolvedType, aInfo, rInfo, voiceSession, voiceInteractor, resultTo, resultWho, requestCode, callingPid, callingUid, callingPackage, realCallingPid, realCallingUid, startFlags, options, ignoreTargetSecurity, componentSpecified, outRecord, container, inTask, reason);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ActivityInfo里面收集了要启动的Activity信息（关于ResolveInfo与ActivityInfo可以看这篇<a href="https://blog.csdn.net/Rain_9155/article/details/89286415" target="_blank" rel="noopener">如何获取Android应用与系统信息</a>），主要还是关注注释1，这里又调用了ActivityStarter中的startActivityLocked方法。传入startActivityLocked方法的参数又多了几个（callingPid等）。关于pid于与uid的介绍可以看这篇文章<a href="https://blog.csdn.net/jiaoli_82/article/details/49802613" target="_blank" rel="noopener">Android手机中UID、PID作用及区别</a>。</p><p>下面来看一下startActivityLocked方法。</p><h4 id="2-1、ActivityStarter-startActivityLocked"><a href="#2-1、ActivityStarter-startActivityLocked" class="headerlink" title="2.1、ActivityStarter::startActivityLocked()"></a>2.1、ActivityStarter::startActivityLocked()</h4><p>该方法的相关源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ActivityStarter.java</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">startActivityLocked</span><span class="params">(IApplicationThread caller, Intent intent, Intent ephemeralIntent, String resolvedType, ActivityInfo aInfo, ResolveInfo rInfo, IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor, IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode, <span class="keyword">int</span> callingPid, <span class="keyword">int</span> callingUid, String callingPackage, <span class="keyword">int</span> realCallingPid, <span class="keyword">int</span> realCallingUid, <span class="keyword">int</span> startFlags, ActivityOptions options, <span class="keyword">boolean</span> ignoreTargetSecurity, <span class="keyword">boolean</span> componentSpecified,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ActivityRecord[] outActivity, ActivityStackSupervisor.ActivityContainer container, TaskRecord inTask, String reason)</span> </span>&#123;</span><br><span class="line">         <span class="comment">//这里对上面传进来值为"startActivityAsUser"理由参数判空</span></span><br><span class="line">         <span class="keyword">if</span> (TextUtils.isEmpty(reason)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Need to specify a reason."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">       mLastStartReason = reason;</span><br><span class="line">       mLastStartActivityTimeMs = System.currentTimeMillis();</span><br><span class="line">       mLastStartActivityRecord[<span class="number">0</span>] = <span class="keyword">null</span>;</span><br><span class="line">      <span class="comment">//1、主要关注这里，调用了本身的startActivity方法</span></span><br><span class="line">       mLastStartActivityResult = startActivity(caller, intent, ephemeralIntent, resolvedType,</span><br><span class="line">                aInfo, rInfo, voiceSession, voiceInteractor, resultTo, resultWho, requestCode,</span><br><span class="line">                callingPid, callingUid, callingPackage, realCallingPid, realCallingUid, startFlags,</span><br><span class="line">                options, ignoreTargetSecurity, componentSpecified, mLastStartActivityRecord,</span><br><span class="line">                container, inTask);</span><br><span class="line">      <span class="keyword">if</span> (outActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            outActivity[<span class="number">0</span>] = mLastStartActivityRecord[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">return</span> mLastStartActivityResult;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里主要关注注释1，调用了ActivityStarter中的startActivity方法，该方法多了一个参数，最后一个mLastStartActivityRecord，mLastStartActivityRecord是一个ActivityRecord数组类型，ActivityRecord是用来保存一个Activity的所有信息的类。</p><p>下面来看ActivityStarter中的startActivity方法。</p><h4 id="2-2、ActivityStarter-startActivity"><a href="#2-2、ActivityStarter-startActivity" class="headerlink" title="2.2、ActivityStarter::startActivity()"></a>2.2、ActivityStarter::startActivity()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//ActivityStarter.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">startActivity</span><span class="params">(IApplicationThread caller, Intent intent, Intent ephemeralIntent, String resolvedType, ActivityInfo aInfo, ResolveInfo rInfo, IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor, IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode, <span class="keyword">int</span> callingPid, <span class="keyword">int</span> callingUid, String callingPackage, <span class="keyword">int</span> realCallingPid, <span class="keyword">int</span> realCallingUid, <span class="keyword">int</span> startFlags, ActivityOptions options, <span class="keyword">boolean</span> ignoreTargetSecurity, <span class="keyword">boolean</span> componentSpecified,</span></span></span><br><span class="line"><span class="function"><span class="params">ActivityRecord[] outActivity, ActivityStackSupervisor.ActivityContainer container, TaskRecord inTask)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> err = ActivityManager.START_SUCCESS;</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">     <span class="comment">//获取调用者所在进程记录的对象，caller就是上面一直强调的代表调用者进程的ApplicationThread对象</span></span><br><span class="line">     ProcessRecord callerApp = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">if</span> (caller != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">//这里调用AMS的getRecordForAppLocked方法获得代表调用者进程的callerApp</span></span><br><span class="line">         callerApp = mService.getRecordForAppLocked(caller);</span><br><span class="line">         <span class="keyword">if</span> (callerApp != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="comment">//获取调用者进程的pid与uid并赋值</span></span><br><span class="line">             callingPid = callerApp.pid;</span><br><span class="line">             callingUid = callerApp.info.uid;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             err = ActivityManager.START_PERMISSION_DENIED;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//下面startActivity方法的参数之一，代表调用者Activity的信息</span></span><br><span class="line">     ActivityRecord sourceRecord = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">if</span> (resultTo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sourceRecord = mSupervisor.isInAnyStackLocked(resultTo);</span><br><span class="line">         <span class="comment">//...</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">     <span class="comment">//创建即将要启动的Activity的信息描述类ActivityRecord</span></span><br><span class="line">      ActivityRecord r = <span class="keyword">new</span> ActivityRecord(mService, callerApp, callingPid, callingUid,</span><br><span class="line">                callingPackage, intent, resolvedType, aInfo, mService.getGlobalConfiguration(),</span><br><span class="line">                resultRecord, resultWho, requestCode, componentSpecified, voiceSession != <span class="keyword">null</span>,</span><br><span class="line">                mSupervisor, container, options, sourceRecord);</span><br><span class="line">     <span class="comment">//outActivity是ActivityRecord[]类型，从上面传进来，这里把ActivityRecord赋值给了它，下面会作为参数传进startActivity方法中</span></span><br><span class="line">     <span class="keyword">if</span> (outActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">         outActivity[<span class="number">0</span>] = r;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">     <span class="comment">//1、关注这里，调用了本身的另一个startActivity方法</span></span><br><span class="line"><span class="keyword">return</span> startActivity(r, sourceRecord, voiceSession, voiceInteractor, startFlags, <span class="keyword">true</span>,</span><br><span class="line">                options, inTask, outActivity);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上面的startActivity代码非常长，省略了很多，上面讲的调用者进程，在这里等价于应用程序进程，ProcessRecord是用来描述一个应用进程的信息，ActivityRecord上面也讲过了，就是用来记录一个要启动的Activity的所有信息，在注释1处的调用了ActivityStarter的startActivity方法，这个方法参数少了很多，大多数有关要启动的Activity的信息都被封装进了ActivityRecord类中，作为参数r传了进去。</p><p>下面来看ActivityStarter的startActivity方法。</p><h4 id="2-3、ActivityStarter-startActivity"><a href="#2-3、ActivityStarter-startActivity" class="headerlink" title="2.3、ActivityStarter::startActivity()"></a>2.3、ActivityStarter::startActivity()</h4><p>该方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//ActivityStarter.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">startActivity</span><span class="params">(<span class="keyword">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span></span></span><br><span class="line"><span class="function"><span class="params">                           IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor, <span class="keyword">int</span> startFlags, <span class="keyword">boolean</span> doResume, ActivityOptions options, TaskRecord inTask, ActivityRecord[] outActivity)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> result = START_CANCELED;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">            mService.mWindowManager.deferSurfaceLayout();</span><br><span class="line">         <span class="comment">//1、主要关注这里，调用本身的startActivityUnchecked方法</span></span><br><span class="line">            result = startActivityUnchecked(r, sourceRecord, voiceSession, voiceInteractor,</span><br><span class="line">                    startFlags, doResume, options, inTask, outActivity);</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="comment">//...</span></span><br><span class="line">           mService.mWindowManager.continueSurfaceLayout();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这里主要调用了ActivityStarter的startActivityUnchecked方法。</p><h4 id="2-4、ActivityStarter-startActivityUnchecked"><a href="#2-4、ActivityStarter-startActivityUnchecked" class="headerlink" title="2.4、ActivityStarter::startActivityUnchecked()"></a>2.4、ActivityStarter::startActivityUnchecked()</h4><p>该方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ActivityStarter.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">startActivityUnchecked</span><span class="params">(<span class="keyword">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span></span></span><br><span class="line"><span class="function"><span class="params">IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor, <span class="keyword">int</span> startFlags, <span class="keyword">boolean</span> doResume, ActivityOptions options, TaskRecord inTask, ActivityRecord[] outActivity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//把上面传进来的参数除了outActivity都传进去了，主要是把这些参数赋值给ActivityStarter的成员变量，如mDoResume = doResume, mStartActivity = r</span></span><br><span class="line">    <span class="comment">//mStartActivity就是即将要启动的Activity的信息</span></span><br><span class="line">     setInitialState(r, options, inTask, doResume, startFlags, sourceRecord, voiceSession,</span><br><span class="line">                voiceInteractor);</span><br><span class="line">    <span class="comment">//计算出启动Activity的模式，并赋值给mLaunchFlags</span></span><br><span class="line">    computeLaunchingTaskFlags();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//设置启动模式</span></span><br><span class="line">     mIntent.setFlags(mLaunchFlags);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">boolean</span> newTask = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//1、下面会进行判断，到底需不需要创建一个新的Activity任务栈</span></span><br><span class="line">    <span class="keyword">int</span> result = START_SUCCESS;</span><br><span class="line">    <span class="keyword">if</span> (mStartActivity.resultTo == <span class="keyword">null</span> &amp;&amp; mInTask == <span class="keyword">null</span> &amp;&amp; !mAddingToTask</span><br><span class="line">        &amp;&amp; (mLaunchFlags &amp; FLAG_ACTIVITY_NEW_TASK) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//1.1走这里就会在setTaskFromReuseOrCreateNewTask方法内部创建一个新的Activity任务栈</span></span><br><span class="line">        newTask = <span class="keyword">true</span>;</span><br><span class="line">        result = setTaskFromReuseOrCreateNewTask(</span><br><span class="line">            taskToAffiliate, preferredLaunchStackId, topStack);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mSourceRecord != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//1.2走这里就会在setTaskFromSourceRecord方法内部获得调用者Activity的的任务栈赋值给mTargetStack</span></span><br><span class="line">        result = setTaskFromSourceRecord();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mInTask != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//1.3走这里就会在setTaskFromInTask方法内部直接把mInTask赋值给mTargetStack，前面已经说过mInTask等于null</span></span><br><span class="line">        result = setTaskFromInTask();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//1.4、就是前面的条件都不满足了，但是这种情况很少发生</span></span><br><span class="line">        setTaskToCurrentTopOrCreateNewTask();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (result != START_SUCCESS) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//mDoResume等于上面传进来的doResume，为true</span></span><br><span class="line">     <span class="keyword">if</span> (mDoResume) &#123;</span><br><span class="line">            <span class="keyword">final</span> ActivityRecord topTaskActivity =</span><br><span class="line">                    mStartActivity.getTask().topRunningActivityLocked();</span><br><span class="line">            <span class="keyword">if</span> (!mTargetStack.isFocusable()</span><br><span class="line">                    || (topTaskActivity != <span class="keyword">null</span> &amp;&amp; topTaskActivity.mTaskOverlay</span><br><span class="line">                    &amp;&amp; mStartActivity != topTaskActivity)) &#123;</span><br><span class="line">              <span class="comment">//走这里不会显示Activity，因为Activity还没有获取焦点或者Activity的栈溢出</span></span><br><span class="line">              <span class="comment">//...</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//正常的话会走到这里</span></span><br><span class="line">                <span class="keyword">if</span> (mTargetStack.isFocusable() &amp;&amp; !mSupervisor.isFocusedStack(mTargetStack)) &#123;</span><br><span class="line">                    mTargetStack.moveToFront(<span class="string">"startActivityUnchecked"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//2、主要关注这里调用mSupervisor的resumeFocusedStackTopActivityLocked方法</span></span><br><span class="line">                mSupervisor.resumeFocusedStackTopActivityLocked(mTargetStack, mStartActivity,</span><br><span class="line">                        mOptions);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">     <span class="keyword">return</span> START_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的startActivityUnchecked方法也是很长，这个方法主要处理Activity栈管理相关的逻辑，如果对于这方面信息不熟悉的话可以查看这两篇文章<a href="https://blog.csdn.net/guolin_blog/article/details/41087993" target="_blank" rel="noopener">Android任务和返回栈完全解析</a>、<a href="http://liuwangshu.cn/framework/ams/2-activitytask.html" target="_blank" rel="noopener">ActivityTask和Activity栈管理</a>。一个或多个ActivityRecord会组成一个TaskRecord，TaskRecord用来记录Activity的栈，而ActivityStack包含了一个或多个TaskRecord。上面代码的mTargetStack就是ActivityStack类型，我们先来看注释1，注释1会根据mLaunchFlags等条件到底需不需要创建一个新的Activity任务栈，而本文所讨论的条件限定在从一个应用程序调用Activity的startActivity去启动另外一个Activity的情景，而且默认Activity的启动模式是standard，并不会创建一个新的任务栈，所以就会走到1.2的条件分支，然后我们再来看注释2，这里会调用mSupervisor.resumeFocusedStackTopActivityLocked方法，mSupervisor是ActivityStackSupervisor类型，ActivityStackSupervisor主要用来管理ActivityStack。启动Activity的过程从ActivityStack来到了ActivityStackSupervisor。</p><p>下面我们来看ActivityStackSupervisor的resumeFocusedStackTopActivityLocked方法。</p><h3 id="3、ActivityStackSupervisor-resumeFocusedStackTopActivityLocked"><a href="#3、ActivityStackSupervisor-resumeFocusedStackTopActivityLocked" class="headerlink" title="3、ActivityStackSupervisor::resumeFocusedStackTopActivityLocked()"></a>3、ActivityStackSupervisor::resumeFocusedStackTopActivityLocked()</h3><p>该方法源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ActivityStackSupervisor.java</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">resumeFocusedStackTopActivityLocked</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ActivityStack targetStack, ActivityRecord target, ActivityOptions targetOptions)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//获取要启动的Activity所在栈的栈顶的ActivityRecord</span></span><br><span class="line">        <span class="keyword">final</span> ActivityRecord r = mFocusedStack.topRunningActivityLocked();</span><br><span class="line">    <span class="comment">//1、r是否null或是否为RESUMED状态</span></span><br><span class="line">        <span class="keyword">if</span> (r == <span class="keyword">null</span> || r.state != RESUMED) &#123;</span><br><span class="line">            <span class="comment">//2、关注这里，调用ActivityStack的resumeTopActivityUncheckedLocked方法</span></span><br><span class="line">            mFocusedStack.resumeTopActivityUncheckedLocked(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (r.state == RESUMED) &#123;</span><br><span class="line">            mFocusedStack.executeAppTransition(targetOptions);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先这里会获取要启动的Activity所在栈的栈顶的ActivityRecord赋值给r，因为要启动的Activity的还没有启动，所以此时栈顶就是调用者Activity，调用者Activity启动Activity，肯定会从RESUME状态转到其他状态如STPO，所以注释1满足r.state != RESUMED的条件，此时就是走带注释2，注释2调用了mFocusedStack的resumeTopActivityUncheckedLocked方法，mFocusedStack就是ActivityStack类型。启动Activity的过程从ActivityStackSupervisor又回到到了ActivityStack。</p><p>下面我们来看ActivityStack的resumeTopActivityUncheckedLocked方法。</p><h4 id="3-1、ActivityStack-resumeTopActivityUncheckedLocked"><a href="#3-1、ActivityStack-resumeTopActivityUncheckedLocked" class="headerlink" title="3.1、ActivityStack:: resumeTopActivityUncheckedLocked()"></a>3.1、ActivityStack:: resumeTopActivityUncheckedLocked()</h4><p>该方法的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ActivityStack.java</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">resumeTopActivityUncheckedLocked</span><span class="params">(ActivityRecord prev, ActivityOptions options)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1、关注这里，这里调用了本身的resumeTopActivityInnerLocked方法</span></span><br><span class="line">            result = resumeTopActivityInnerLocked(prev, options);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们来看注释1，简单的调用了resumeTopActivityInnerLocked方法。</p><h5 id="3-1-1、-ActivityStack-resumeTopActivityInnerLocked"><a href="#3-1-1、-ActivityStack-resumeTopActivityInnerLocked" class="headerlink" title="3.1.1、 ActivityStack:: resumeTopActivityInnerLocked()"></a>3.1.1、 ActivityStack:: resumeTopActivityInnerLocked()</h5><p>该方法源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ActivityStack.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">resumeTopActivityInnerLocked</span><span class="params">(ActivityRecord prev, ActivityOptions options)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//获得将要启动的Activity的信息</span></span><br><span class="line">        <span class="keyword">final</span> ActivityRecord next = topRunningActivityLocked(<span class="keyword">true</span> <span class="comment">/* focusableOnly */</span>)</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">if</span> (next.app != <span class="keyword">null</span> &amp;&amp; next.app.thread != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="comment">//1、关注这里，调用了ActivityStackSupervisor的startSpecificActivityLocked方法</span></span><br><span class="line">            mStackSupervisor.startSpecificActivityLocked(next, <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_STACK) mStackSupervisor.validateTopActivitiesLocked();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>topRunningActivityLocked方法获得将要启动的Activity的信息next，因为此时要启动的Activity还不属于任何进程，故它的ProcessRecord为空成立，就会走到else分支，所以注释1这里调用了ActivityStackSupervisor的startSpecificActivityLocked方法，又回到了ActivityStackSupervisor中。</p><p>下面来看ActivityStackSupervisor的startSpecificActivityLocked方法。</p><h4 id="3-2、ActivityStackSupervisor-startSpecificActivityLocked"><a href="#3-2、ActivityStackSupervisor-startSpecificActivityLocked" class="headerlink" title="3.2、ActivityStackSupervisor::startSpecificActivityLocked()"></a>3.2、ActivityStackSupervisor::startSpecificActivityLocked()</h4><p>该方法源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ActivityStackSupervisor.java</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startSpecificActivityLocked</span><span class="params">(ActivityRecord r, <span class="keyword">boolean</span> andResume, <span class="keyword">boolean</span> checkConfig)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取要启动的Activity的所在应用程序进程</span></span><br><span class="line">        ProcessRecord app = mService.getProcessRecordLocked(r.processName, r.info.applicationInfo.uid, <span class="keyword">true</span>);</span><br><span class="line">        r.getStack().setLaunchTime(r);</span><br><span class="line">        <span class="comment">//要启动的Activity的所在应用程序进程存在</span></span><br><span class="line">        <span class="keyword">if</span> (app != <span class="keyword">null</span> &amp;&amp; app.thread != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                <span class="comment">//1、关注这里，调用了本身的realStartActivityLocked方法</span></span><br><span class="line">                realStartActivityLocked(r, app, andResume, checkConfig);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里首先会获取要启动的Activity所在的应用进程app，当app进程已经运行时，就会调用注释1处的realStartActivityLocked方法，注意这里多了一个参数，把代表应用进程的app传了进去。</p><p>下面来看ActivityStackSupervisor的realStartActivityLocked方法。</p><h4 id="3-3、ActivityStackSupervisor-realStartActivityLocked"><a href="#3-3、ActivityStackSupervisor-realStartActivityLocked" class="headerlink" title="3.3、ActivityStackSupervisor::realStartActivityLocked()"></a>3.3、ActivityStackSupervisor::realStartActivityLocked()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">realStartActivityLocked</span><span class="params">(ActivityRecord r, ProcessRecord app, <span class="keyword">boolean</span> andResume, <span class="keyword">boolean</span> checkConfig)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//1、把应用所在进程信息赋值给要启动的Activity的ActivityRecord</span></span><br><span class="line">    r.app = app;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//2、关注这里，app是ProcessRecord类型，app.thread是IApplicationThread类型</span></span><br><span class="line">        <span class="comment">//app.thread是应用进程的ApplicationThread在AMS的本地代理，前面已经讲过</span></span><br><span class="line">        <span class="comment">//所以这里实际调用的是ApplicationThread的scheduleLaunchActivity方法</span></span><br><span class="line">        app.thread.scheduleLaunchActivity(<span class="keyword">new</span> Intent(r.intent), r.appToken,</span><br><span class="line">                   System.identityHashCode(r), r.info,</span><br><span class="line">                   mergedConfiguration.getGlobalConfiguration(),</span><br><span class="line">                   mergedConfiguration.getOverrideConfiguration(), r.compat,</span><br><span class="line">                   r.launchedFromPackage, task.voiceInteractor, app.repProcState, r.icicle,</span><br><span class="line">                   r.persistentState, results, newIntents, !andResume,</span><br><span class="line">                   mService.isNextTransitionForward(), profilerInfo);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;<span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如这方法名所示，realStartActivity，兜兜转转，这里就是真正启动Activity的地方，注释1处app指的是传入的要启动的Activity的所在的应用程序进程，是从前面传过来的，这里把它赋值给了要启动的Activity的ActivityRecord的app字段去，这样就可以说要启动的Activity属于应用进程，我们再来看注释2这里，app.thread就是我们上面一直强调的ApplicationThread，所以这里通过<strong>Binder的IPC</strong>其实调用的是ApplicationThread中的scheduleLaunchActivity方法。</p><p>整个过程的时序图如下：</p><img src="/2019/05/19/Android8.0%E7%9A%84Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B1/activity2.png" class="" title="activity"><p><strong>当前的代码逻辑执行在AMS所在进程，从这里开始Activity的启动流程最终又回到了应用进程所在的ApplicationThread中。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本来一篇文章写完Activity的启动，写到这里才发现，篇幅太长，所以<strong>Activity在应用进程中的启动过程</strong>就放到下一篇文章。本文简单的介绍了<strong>应用进程请求AMS启动Activity过程和Activity在AMS中的启动过程</strong>，现在让我们来回答一下开头给出的几个问题：</p><ul><li><strong>1、Activity的启动流程是怎样的？</strong></li></ul><p>从应用调用一个startActivity方法开始，应用进程开始请求AMS启动Activity，然后在AMS中Activity完成它的一系列准备，最后再回到应用进程中开始回调Activity的生命周期，本文回答了一半这个问题，即本文讲解了应用进程开始请求AMS启动Activity，然后在AMS中完成它的一系列准备的过程，这个过程用时序图表示如下：</p><img src="/2019/05/19/Android8.0%E7%9A%84Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B1/activity3.png" class="" title="activity"><ul><li><strong>2、Activity的生命周期方法是如何被回调的？</strong></li></ul><p>本文并没有解答这个问题，这个问题要到下一篇文章才能有答案。</p><ul><li><strong>3、它启动过程中涉及到多少个进程？</strong></li></ul><p>答案是2个，前言已经讲过本文讨论的是普通Activity的启动流程，<strong>即我们平时调用startActivity方法来启动一个Activity</strong>，所以本文这个过程涉及的进程可以可以用下面这个图表示：</p><img src="/2019/05/19/Android8.0%E7%9A%84Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B1/activity4.png" class="" title="activity"><p>图中AppProcess代表应用所在进程，systemServer代表AMS所在进程，两个进程之间通过Binder进行通信，实现了XX.Stub的类就可以进行Binder通信，如本文的ApplicationThread和AMS都实现了各自的Stub类，所以应用进程startActivity时请求AMS启动Activity，AMS准备好后，再发送scheduleLaunchActivity请求告诉应用可以开始启动Activity了。</p><p>那么如果是前言所讲的第一种启动Activity的过程，<strong>即在Launch界面点击一个应用图标启动应用程序</strong>，那么会涉及多少个进程？答案是4个，如图：</p><img src="/2019/05/19/Android8.0%E7%9A%84Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B1/activity5.png" class="" title="activity5"><p>可以看到会涉及Launcher进程、SystemServer进程、App进程、Zygote进程(关于这些进程的简单信息可以看这篇<a href="https://rain9155.github.io/2019/10/08/%E4%BB%8E%E8%BF%9B%E7%A8%8B%E7%9A%84%E8%A7%92%E5%BA%A6%E7%9C%8BAndroid%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/" target="_blank" rel="noopener">从进程的角度看Android的系统架构</a>)，这整个过程如下：首先是点击App图标，此时是运行在Launcher进程,  Launcher通过AMS本地代理向AMS发起startActivity请求，AMS收到请求后，发现要启动的Activity的进程不存在，就通过Process.start方法向Zygote进程发送创建进程的请求，Zygote进程收到请求后，fork出新的子进程，即App进程，然后进入ActivityThread.main方法中，这时运行在App进程中，App进程通过AMS本地代理向AMS发起attachApplication请求，AMS接收到请求后，进行一些列准备工作(通知Activity创建Application)后，再通过ApplicationThread向App进程发送scheduleLaunchActivity请求，App进程收到请求后，后面就会进行Activity的生命周期回调。</p><p>关于ApplicationThread中的scheduleLaunchActivity方法之后的流程就留到下一篇文章了。</p><p>阅读源码真的是一个漫长的过程，又时候看别人写的那么简单，但是当自己去写，才发现要考虑的东西很多，所以这是一个日积月累的过程，所以阅读源码的时候，最好跟着前人的文章阅读，这样理解的更快。</p><p>参考文章：</p><p><a href="http://gityuan.com/2016/03/12/start-activity/" target="_blank" rel="noopener">startActivity启动过程分析</a></p><p><a href="http://liuwangshu.cn/framework/component/6-activity-start-1.html" target="_blank" rel="noopener">Android8.0 根Activity启动过程</a></p><p><a href="https://www.cnblogs.com/jymblog/p/10917345.html" target="_blank" rel="noopener">从Activity的启动流程理解Binder</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Activity的启动流程有俩种过程，一种是根Activity的启动过程，即在Launch界面点击一个应用图标启动应用程序，根Activity指的是应用程序启动的第一个Activity；另一种是普通Activity的启动流程，即我们平时调用startActivity方法来启动一个Activity。本文讨论第二种，startActivity方法大家都知道是用来启动一个Activity的，那么大家有没有想过它在底层是怎么启动的呢？Activity的生命周期方法是如何被回调的？它启动过程中涉及到多少个进程？接下来我们通过撸一篇源码来了解Activity的大概启动流程，然后解答这几个问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="四大组件" scheme="http://yoursite.com/categories/%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="activity" scheme="http://yoursite.com/tags/activity/"/>
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Window,WindowManager和WindowManagerService之间的关系</title>
    <link href="http://yoursite.com/2019/03/22/Window,%20WindowManager%E5%92%8CWindowManagerService%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>http://yoursite.com/2019/03/22/Window,%20WindowManager%E5%92%8CWindowManagerService%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</id>
    <published>2019-03-22T14:36:32.000Z</published>
    <updated>2023-01-07T10:44:48.838Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上面3个名词在开发中经常听到，在Android开发中，Window是所有视图的载体，如Activity，Dialog和Toast的视图，我们想要对Window进行添加和删除就要通过WindowManager来操作，而WindowManager就是通过Binder与WindowManagerService进行跨进程通信，把具体的实现工作交给WindowManagerService（下面简称WMS）。下面分别介绍它们，理清它们的基本脉络。</p><a id="more"></a><pre><code>本文基于Android8.0, 相关源码位置如下:frameworks/base/core/java/android/view/*.java（*代表Window, WindowManager, ViewManager, WindowManagerImpl，WindowManagerGlobal, ViewRootImpl）frameworks/base/core/java/com/android/internal/policy/PhoneWindow.java    frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java    frameworks/base/services/core/java/com/android/server/wm/Session.java</code></pre><h2 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h2><h4 id="1、Window是什么"><a href="#1、Window是什么" class="headerlink" title="1、Window是什么"></a>1、Window是什么</h4><p>Window在Android开发中是一个窗口的概念，它是一个抽象类，我们打开Window，如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Window</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FEATURE_NO_TITLE = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FEATURE_CONTENT_TRANSITIONS = <span class="number">12</span>;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> View <span class="title">getDecorView</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(@LayoutRes <span class="keyword">int</span> layoutResID)</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(View view)</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(View view, ViewGroup.LayoutParams params)</span></span>;</span><br><span class="line">     <span class="keyword">public</span> &lt;T extends View&gt; <span class="function">T <span class="title">findViewById</span><span class="params">(@IdRes <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getDecorView().findViewById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到里面有我们熟悉的一些字段和方法，以Activity对应的Window为例，具体的实现类是PhoneWindow，在PhoneWindow中有一个顶级View—DecorView，继承自FrameLayout，我们可以通过getDecorView()获得它，当我们调用Activity的setContentView时，其实最终会调用Window的setContentView，当我们调用Activity的findViewById时，其实最终调用的是Window的findViewById，这也间接的说明了Window是View的直接管理者。但是Window并不是真实存在的，它更多的表示一种抽象的功能集合，View才是Android中的视图呈现形式，绘制到屏幕上的是View不是Window，但是View不能单独存在，它必需依附在Window这个抽象的概念上面，Android中需要依赖Window提供视图的有Activity，Dialog，Toast，PopupWindow，StatusBarWindow（系统状态栏），输入法窗口等，因此Activity，Dialog等视图都对应着一个Window。</p><h4 id="2、Window的类型（应用窗口，子窗口，系统窗口-与层级"><a href="#2、Window的类型（应用窗口，子窗口，系统窗口-与层级" class="headerlink" title="2、Window的类型（应用窗口，子窗口，系统窗口)与层级"></a>2、Window的类型（应用窗口，子窗口，系统窗口)与层级</h4><p>Window的类型type被定义在WindowManager中的静态内部类LayoutParams中，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WindowManager</span> <span class="keyword">extends</span> <span class="title">ViewManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LayoutParams</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span>.<span class="title">LayoutParams</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line">        <span class="comment">//应用程序窗口type值</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FIRST_APPLICATION_WINDOW = <span class="number">1</span>;<span class="comment">//代表应用程序窗口的起始值</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_BASE_APPLICATION   = <span class="number">1</span>;<span class="comment">//窗口的基础值，其他窗口的type值要大于这个值</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_APPLICATION        = <span class="number">2</span>;<span class="comment">//普通应用程序窗口，token必须设置为Activity的token来指定窗口属于谁</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_APPLICATION_STARTING = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_DRAWN_APPLICATION = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LAST_APPLICATION_WINDOW = <span class="number">99</span>;<span class="comment">//代表应用程序窗口的结束值</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//子窗口type值</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FIRST_SUB_WINDOW = <span class="number">1000</span>;<span class="comment">//代表子窗口的起始值</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_APPLICATION_PANEL = FIRST_SUB_WINDOW;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_APPLICATION_MEDIA = FIRST_SUB_WINDOW + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_APPLICATION_SUB_PANEL = FIRST_SUB_WINDOW + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_APPLICATION_ATTACHED_DIALOG = FIRST_SUB_WINDOW + <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_APPLICATION_MEDIA_OVERLAY  = FIRST_SUB_WINDOW + <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_APPLICATION_ABOVE_SUB_PANEL = FIRST_SUB_WINDOW + <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LAST_SUB_WINDOW = <span class="number">1999</span>;<span class="comment">//代表子窗口的结束值</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//系统窗口的type值</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FIRST_SYSTEM_WINDOW     = <span class="number">2000</span>;<span class="comment">//代表系统窗口的起始值</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_STATUS_BAR         = FIRST_SYSTEM_WINDOW;<span class="comment">//系统状态栏</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_SEARCH_BAR         = FIRST_SYSTEM_WINDOW+<span class="number">1</span>;<span class="comment">//搜索条窗口</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_PHONE              = FIRST_SYSTEM_WINDOW+<span class="number">2</span>;<span class="comment">//通话窗口</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LAST_SYSTEM_WINDOW      = <span class="number">2999</span>;<span class="comment">//代表系统窗口结束值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LayoutParams中以TYPE开头的值有很多，但总体可以分为3类：</p><ul><li>应用程序窗口：type值范围是1~99，Activity就是一个典型的应用程序窗口，type值是TYPE_BASE_APPLICATION，WindowManager的LayoutParams默认type值是TYPE_APPLICATION。</li><li>子窗口：type值范围是1000~1999，PupupWindow就是一个典型的子窗口，type值是TYPE_APPLICATION_PANEL，子窗口不能独立存在，必须依附于父窗口</li><li>系统窗口：type值范围是2000~2999,系统窗口的类型很多，上面并没有全部列举出来，系统状态栏就是一个典型的系统窗口，type值是TYPE_STATUS_BAR，与应用程序窗口不同的是，系统窗口的创建是需要声明权限的。</li></ul><p>type值决定了决定了Window显示的层级（z-ordered），即在屏幕Z轴方向的显示次序，一般情况下type值越大，则窗口显示的越靠前，在Window的3种类型中，应用程序窗口的层级范围是1<del>99，子窗口的层级范围是1000</del>1999，系统窗口的层级范围是2000~2999，层级范围对应着type值，如果想要Window位于所有的Window上，采用较大的层级即可，例如系统层级。</p><h4 id="3、Window的属性"><a href="#3、Window的属性" class="headerlink" title="3、Window的属性"></a>3、Window的属性</h4><p>Window的类型flag同样被定义在WindowManager中的静态内部类LayoutParams中，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WindowManager</span> <span class="keyword">extends</span> <span class="title">ViewManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LayoutParams</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span>.<span class="title">LayoutParams</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ALLOW_LOCK_WHILE_SCREEN_ON     = <span class="number">0x00000001</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_DIM_BEHIND        = <span class="number">0x00000002</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_BLUR_BEHIND        = <span class="number">0x00000004</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_NOT_FOCUSABLE      = <span class="number">0x00000008</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_NOT_TOUCHABLE      = <span class="number">0x00000010</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_NOT_TOUCH_MODAL    = <span class="number">0x00000020</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_KEEP_SCREEN_ON     = <span class="number">0x00000080</span>;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LayoutParams中定义的flag属性同样很多，这里挑几个常见的讲解：</p><ul><li>FLAG_ALLOW_LOCK_WHILE_SCREEN_ON：只要窗口对用户可见，就允许在屏幕开启状态下锁屏。</li><li>FLAG_KEEP_SCREEN_ON： 只要窗口对用户可见，屏幕就一直亮着。</li><li>FLAG_SHOW_WHEN_LOCKED：窗口可以在锁屏的界面上显示。</li><li>FLAG_NOT_FOCUSABLE：窗口不能获取焦点，也不能接受任何输入事件，此标志同时会启用FLAG_NOT_TOUCH_MODAL，最终事件会直接传递给下层的具有焦点的窗口。</li><li>FLAG_NOT_TOUCH_MODAL：当前窗口区域以外的触摸事件会传递给底层的窗口，当前窗口区域内的触摸事件则自己处理，一般来说都要开启此标记，否则其他Window将无法收到单机事件。</li><li>FLAG_NOT_TOUCHABLE：窗口不接收任何触摸事件</li></ul><p>可以看到LayoutParams中的type和flag非常重要，可以控制Window的显示特性。知道了Window的相关信息，就能更好的了解WindowManager。</p><h2 id="WindowManager"><a href="#WindowManager" class="headerlink" title="WindowManager"></a>WindowManager</h2><p>WindowManager是一个接口，里面常用的方法有：添加View，更新View和删除View，WindowManager继承自ViewManager，这三个方法定义在ViewManager中，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ViewManager</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View view, ViewGroup.LayoutParams params)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateViewLayout</span><span class="params">(View view, ViewGroup.LayoutParams params)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeView</span><span class="params">(View view)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这些方法传入的参数是View，不是Window，说明WindowManager管理的是Window中的View，我们通过WindowManager操作Window就是在操作Window中的View。WindowManager的具体实现类是WindowManagerImp，我们看一下相应方法的实现，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowManagerImpl</span> <span class="keyword">implements</span> <span class="title">WindowManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WindowManagerGlobal mGlobal = WindowManagerGlobal.getInstance();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Window mParentWindow;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">WindowManagerImpl</span><span class="params">(Context context, Window parentWindow)</span> </span>&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mParentWindow = parentWindow;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(@NonNull View view, @NonNull ViewGroup.LayoutParams params)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        mGlobal.addView(view, params, mContext.getDisplay(), mParentWindow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateViewLayout</span><span class="params">(@NonNull View view, @NonNull ViewGroup.LayoutParams params)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        mGlobal.updateViewLayout(view, params);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeView</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        mGlobal.removeView(view, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到WindowManagerImp也没有做什么，它把3个方法的操作都委托给了WindowManagerGlobal这个单例类，我们还看到了mParentWindow这个字段，它是Window类型，是从构造中被传入，所以WindowManager会持有Window的引用，这样WindowManager就可以对Window做操作了。比如<strong>mGlobal.addView</strong>，我们可以理解为往window中添加View，在WindowManagerGlobal中，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View view, ViewGroup.LayoutParams params,Display display, Window parentWindow)</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    ViewRootImpl root;</span><br><span class="line">    root = <span class="keyword">new</span> ViewRootImpl(view.getContext(), display);<span class="comment">//注释1</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    root.setView(view, wparams, panelParentView);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终会走到ViewRootlmp的setView中, 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setView</span><span class="params">(View view, WindowManager.LayoutParams attrs, View panelParentView)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//这里会进行View的绘制流程</span></span><br><span class="line">    requestLayout();</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//通过session与WMS建立通信</span></span><br><span class="line">     res = mWindowSession.addToDisplay(mWindow, mSeq, mWindowAttributes,</span><br><span class="line">                                getHostVisibility(), mDisplay.getDisplayId(),</span><br><span class="line">                                mAttachInfo.mContentInsets, mAttachInfo.mStableInsets,</span><br><span class="line">                                mAttachInfo.mOutsets, mInputChannel);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ViewRootlmp的setView中，首先通过requestLayout()发起View绘制流程，然后在mWindowSession的addToDisplay中通过Binder与WMS进行跨进程通信，请求显示窗口上的视图，至此View就会显示到屏幕上。这个mWindowSession是一个IWindowSession.AIDL接口类型，用来实现跨进程通信，在WMS内部会为每一个应用的请求保留一个单独的Session，同样实现了IWindowSession接口，应用与WMS之间的通信就通过这个Session。那么这个mWindowSession什么时候被赋值的呢？就在上面的注释1中，我们打开ViewRootlmp的构造函数，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ViewRootImpl</span><span class="params">(Context context, Display display)</span> </span>&#123;</span><br><span class="line">    mWindowSession = WindowManagerGlobal.getWindowSession();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到mWindowSession是通过WindowManagerGlobal的单例类的getWindowSession()获得的，我们打开WindowManagerGlobal的getWindowSession()，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IWindowSession <span class="title">getWindowSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">synchronized</span> (WindowManagerGlobal<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (sWindowSession == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   InputMethodManager imm = InputMethodManager.getInstance();</span><br><span class="line">                   <span class="comment">//1、首先获取WMS的本地代理</span></span><br><span class="line">                   IWindowManager windowManager = getWindowManagerService();</span><br><span class="line">                   <span class="comment">//2、通过WMS的本地代理的openSession来获取Session</span></span><br><span class="line">                   sWindowSession = windowManager.openSession(</span><br><span class="line">                           <span class="keyword">new</span> IWindowSessionCallback.Stub() &#123;</span><br><span class="line">                               <span class="meta">@Override</span></span><br><span class="line">                               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimatorScaleChanged</span><span class="params">(<span class="keyword">float</span> scale)</span> </span>&#123;</span><br><span class="line">                                   ValueAnimator.setDurationScale(scale);</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;,</span><br><span class="line">                           imm.getClient(), imm.getInputContext());</span><br><span class="line">               &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> sWindowSession;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>我们首先看1，getWindowManagerService()源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IWindowManager <span class="title">getWindowManagerService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (WindowManagerGlobal<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (sWindowManagerService == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//获取WMS的本地代理对象</span></span><br><span class="line">                sWindowManagerService = IWindowManager.Stub.asInterface(</span><br><span class="line">                        ServiceManager.getService(<span class="string">"window"</span>));</span><br><span class="line">              <span class="comment">//...</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sWindowManagerService;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到， ServiceManager.getService(“window”)就是获得WMS，然后通过IWindowManager.Stub.asInterface()转换成WMS在应用进程的本地代理，getWindowManagerService()就是返回WMS在本地应用进程的代理。（这里涉及到Binder知识）</p><p>然后看2，通过WMS的本地代理的openSession来获取Session，我们可以在WMS中找到这个函数实现，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> IWindowSession <span class="title">openSession</span><span class="params">(IWindowSessionCallback callback, IInputMethodClient client,</span></span></span><br><span class="line"><span class="function"><span class="params">          IInputContext inputContext)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">      <span class="comment">//为每个窗口请求创建一个Session并返回</span></span><br><span class="line">      Session session = <span class="keyword">new</span> Session(<span class="keyword">this</span>, callback, client, inputContext);</span><br><span class="line">      <span class="keyword">return</span> session;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>至此建立起与WMS的通信的桥梁。然后WindowManager就间接的通过Session向WMS发起显示窗口视图的请求，WMS会向应用返回和窗口交互的信息。至于mGlobal.updateViewLayout和mClobal.removeView也是类似的过程，可自行研究。</p><h2 id="WindowManagerService"><a href="#WindowManagerService" class="headerlink" title="WindowManagerService"></a>WindowManagerService</h2><p>WindowManagerService是一个系统级服务，由SystemService启动，实现了IWindowManager.AIDL接口，它的主要功能分为以下俩方面:</p><h3 id="1、窗口管理"><a href="#1、窗口管理" class="headerlink" title="1、窗口管理"></a>1、窗口管理</h3><p>它负责窗口的启动，添加和删除，它还负责窗口的层级显示（z-orderes）和维护窗口的状态。我们继续上面的<strong>mGlobal.addView</strong>，上面讲到这个方法是向WMS发起一个显示窗口视图的请求，最终会走到mWindowSession.addToDisplay()方法，我们可以在Session中找到这个函数实现，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addToDisplay</span><span class="params">(IWindow window, <span class="keyword">int</span> seq, WindowManager.LayoutParams attrs,</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">int</span> viewVisibility, <span class="keyword">int</span> displayId, Rect outContentInsets, Rect outStableInsets,</span></span></span><br><span class="line"><span class="function"><span class="params">           Rect outOutsets, InputChannel outInputChannel)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//返回WMS中addWindow所返回的结果</span></span><br><span class="line">       <span class="keyword">return</span> mService.addWindow(<span class="keyword">this</span>, window, seq, attrs, viewVisibility, displayId,</span><br><span class="line">               outContentInsets, outStableInsets, outOutsets, outInputChannel);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>可以看到addToDisplay方法中最终返回了WMS中addWindow所返回的结果，Window的添加请求就交给WMS去处理，addWindow的实现在WMS中，里面代码很长，这里就不再深究了（留在下一篇文章从一个例子分析），addWindow主要做的事情是先进行窗口的权限检查，因为系统窗口需要声明权限，然后根据相关的Display信息以及窗口信息对窗口进行校对，再然后获取对应的WindowToken，再根据不同的窗口类型检查窗口的有效性，如果上面一系列步骤都通过了，就会为该窗口创建一个WindowState对象，以维护窗口的状态和根据适当的时机调整窗口状态，最后就会通过WindowState的attach方法与SurfaceFlinger通信。因此SurfaceFlinger能使用这些Window信息来合成surfaces,并渲染输出到显示设备。</p><h3 id="2、输入事件的中转站"><a href="#2、输入事件的中转站" class="headerlink" title="2、输入事件的中转站"></a>2、输入事件的中转站</h3><p>当我们的触摸屏幕时就会产生输入事件，在Android中负责管理事件的输入是<strong>InputManagerService</strong>，在启动IMS的时候会在native层创建NativeInputManager，在NativeInputManager的构造中会创建<strong>InputManager和Eventhub（监听/dev/input/设备节点中所有事件的输入）</strong>，在InputManager构造中会依此创建<strong>InputDispatcher、InputReader、InputReaderThread、InputDispatcherThread</strong>。</p><p>InputReader运行在InputReaderThread中，它会不断循环从EventHub中读取原始输入事件，InputReader将这些原始输入事件加工后就交给运行在InputDispatcherThread中的InputDispatcher，而InputDispatcher它会寻找一个最合适的窗口来处理输入事件，WMS是窗口的管理者，WMS会把所有窗口的信息更新到InputDispatcher中，这样InputDispatcher就可以将输入事件派发给合适的Window，Window就会把这个输入事件传给顶级View，然后就会涉及我们熟悉的事件分发机制。</p><p>我们来再来看在ViewRootImp的setView中调用mWindowSession.addToDisplay方法时传入的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setView</span><span class="params">(View view, WindowManager.LayoutParams attrs, View panelParentView)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">   mInputChannel = <span class="keyword">new</span> InputChannel();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//通过session与WMS建立通信,同时通过InputChannel接收输入事件回调</span></span><br><span class="line">     res = mWindowSession.addToDisplay(mWindow, mSeq, mWindowAttributes,</span><br><span class="line">                                getHostVisibility(), mDisplay.getDisplayId(),</span><br><span class="line">                                mAttachInfo.mContentInsets, mAttachInfo.mStableInsets,</span><br><span class="line">                                mAttachInfo.mOutsets, mInputChannel);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">     <span class="keyword">if</span> (mInputChannel != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">//...</span></span><br><span class="line">         <span class="comment">//处理输入事件回调</span></span><br><span class="line">         mInputEventReceiver = <span class="keyword">new</span> WindowInputEventReceiver(mInputChannel, Looper.myLooper());</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这个传入的mInputChannel参数，它是InputChannel类型，它实现了Parcelable接口，用于接受WMS返回来的输入事件，在WMS中会创建两个InputChannel实例，一个会通过mInputChannel参数传回来，一个会放在WMS的WindowState中，WindowState中的InputChannel会交给InputDispatcher，这样应用端和InputDispatcher端就可以通过这两个InputChannel来进行事件的接收和发送。</p><p>它们之间的类图关系如下：</p><img src="/2019/03/22/Window,%20WindowManager%E5%92%8CWindowManagerService%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/window1.jpg" class="" title="Window,WindowManager, WMS之间的关系"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面简单的介绍，我们知道Window是View的载体，我们想要对Window进行删除，添加，更新View就得通过WindowManager，WindowManager与WMS通过Session进行通信，具体的实现就交给了WMS处理，WMS会为每一个Window创建一个WindowState并管理它们，具体的渲染工作WMS就交给SurfaceFinger处理。本文所讨论的WMS系统相关结构如下：</p><img src="/2019/03/22/Window,%20WindowManager%E5%92%8CWindowManagerService%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/window2.jpg" class="" title="WMS系统结构"><p>参考资料：</p><p>《Anddroid开发艺术探索》</p><p>《Android源码设计模式》</p><p><a href="http://liuwangshu.cn/tags/WindowManager/" target="_blank" rel="noopener">Android解析WindowManager</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上面3个名词在开发中经常听到，在Android开发中，Window是所有视图的载体，如Activity，Dialog和Toast的视图，我们想要对Window进行添加和删除就要通过WindowManager来操作，而WindowManager就是通过Binder与WindowManagerService进行跨进程通信，把具体的实现工作交给WindowManagerService（下面简称WMS）。下面分别介绍它们，理清它们的基本脉络。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Window机制" scheme="http://yoursite.com/categories/Window%E6%9C%BA%E5%88%B6/"/>
    
    
      <category term="window" scheme="http://yoursite.com/tags/window/"/>
    
      <category term="windowManager" scheme="http://yoursite.com/tags/windowManager/"/>
    
      <category term="WMS" scheme="http://yoursite.com/tags/WMS/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView之观察者模式</title>
    <link href="http://yoursite.com/2019/03/09/RecyclerView%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/03/09/RecyclerView%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-03-09T09:39:00.000Z</published>
    <updated>2023-01-07T10:44:48.773Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>RecyclerView是Android开发中的一个重要的模式，通常我们往RecyclerView添加数据时，都会调用Adapter的notifiyXX函数，这是为什么呢，今天我们就从源码来探究一下，对观察者模式不熟悉的读者，可以看一下这一篇博客<a href="https://blog.csdn.net/Rain_9155/article/details/83004247" target="_blank" rel="noopener">观察者模式</a>, RecyclerView在更新数据时也算是对观察者模式的一种应用。</p><a id="more"></a><pre><code>本文源码基于Android8.0, 相关源码位置如下frameworks/support/v7/recyclerview/src/android/support/v7/widget/RecyclerView.javaframeworks/base/core/java/android/database/Observable.java</code></pre><h2 id="Adapter-notifyDataSetChange"><a href="#Adapter-notifyDataSetChange" class="headerlink" title="Adapter.notifyDataSetChange()"></a>Adapter.notifyDataSetChange()</h2><p>我们来看一下我们平常可能使用到的notifyXX方法：</p><img src="/2019/03/09/RecyclerView%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/rv5.png" class="" title="rv5"><p>可以看到，RecyclerView可ListView相比多了很多notifyItemXX方法，说明RecyclerView支持定向刷新，如果只有部分itemView数据发生变化，在使用ListView时我们没得选择只能使用notifyDataSetChange()方法来对整体itemView更新数据，但是在RecyclerView中，我们可以只对发生数据变化的itemView更新，当样也可以整体更新，而且相信大家现在在使用RecyclerView更新itemView时使用最多的方法还是Adapter.notifyDataSetChange()吧。那我们就以这个方法为例，该方法的源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">notifyDataSetChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           mObservable.notifyChanged();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个mObservable是声明在Adapter中的AdapterDataObservable对象，如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span>&lt;<span class="title">VH</span> <span class="keyword">extends</span> <span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AdapterDataObservable mObservable = <span class="keyword">new</span> AdapterDataObservable();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而AdapterDataObservable定义在RecyclerView中，Adapter.notifyDataSetChange()调用了AdapterDataObservable.notifyChanged()方法，该方法源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterDataObservable</span> <span class="keyword">extends</span> <span class="title">Observable</span>&lt;<span class="title">AdapterDataObserver</span>&gt; </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = mObservers.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            mObservers.get(i).onChanged();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到该方法做的事情是遍历mObservers集合，然后逐个调用onChanged()方法，那么mObservers是什么东西？mObservers其实就是一个观察者列表，而mObservable就是一个被观察者，每个Adapter中只有一个被观察者，被观察者中有一个观察者列表，当有数据更新时，被观察者就会调用遍历调用注册到观察者列表中观察者的onChanged方法，来通知观察者更新数据。<br>mObservers其实是一个ArrayList，它定义在AdapterDataObservable的父类Observable中，Observable的定义如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Observable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> ArrayList&lt;T&gt; mObservers = <span class="keyword">new</span> ArrayList&lt;T&gt;();<span class="comment">//观察者集合列表</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//注册一个观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(T observer)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        mObservers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//取消该观察者的注册</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterObserver</span><span class="params">(T observer)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        mObservers.remove(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取消所有观察者的注册</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(mObservers) &#123;</span><br><span class="line">            mObservers.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Observable中只有几个简单的方法，所以我们要向观察者列表中注册一个观察者，才能接受到更新通知，那么RecyclerView是怎么注册一个观察者的吗？其实是通过RecyclerView.setAdapter()方法实现的。</p><h2 id="RecyclerView-setAdapter"><a href="#RecyclerView-setAdapter" class="headerlink" title="RecyclerView.setAdapter()"></a>RecyclerView.setAdapter()</h2><p>我们每次使用RecyclerView都要调用setAdapter()设置一个Adapter，不然数据就无法展示，该方法的源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdapter</span><span class="params">(@Nullable Adapter adapter)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    setAdapterInternal(adapter, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在setAdapter又调用了setAdapterInternal(), 该方法相关源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setAdapterInternal</span><span class="params">(@Nullable Adapter adapter, <span class="keyword">boolean</span> compatibleWithPrevious, <span class="keyword">boolean</span> removeAndRecycleViews)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、移除旧的Adapter，并注销观察者</span></span><br><span class="line">    <span class="keyword">if</span> (mAdapter != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mAdapter.unregisterAdapterDataObserver(mObserver);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2、compatibleWithPrevious为false，表示不使用旧的Adapter中ViewHolder，所以调用removeAndRecycleViews方法把ViewHolder旧的Adapter中的ViewHolder回收复用</span></span><br><span class="line">    <span class="keyword">if</span> (!compatibleWithPrevious || removeAndRecycleViews) &#123;</span><br><span class="line">        removeAndRecycleViews();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3、更新Adapter并注册一个观察者</span></span><br><span class="line">    <span class="keyword">final</span> Adapter oldAdapter = mAdapter;</span><br><span class="line">    mAdapter = adapter;</span><br><span class="line">    <span class="keyword">if</span> (adapter != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//注册一个观察者</span></span><br><span class="line">        adapter.registerAdapterDataObserver(mObserver);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>setAdapterInternal()方法中就主要做了上面3件事，而且上面Adapter中调用的registerXX或unregisterXX最终调用mObservable的方法, 如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span>&lt;<span class="title">VH</span> <span class="keyword">extends</span> <span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerAdapterDataObserver</span><span class="params">(@NonNull AdapterDataObserver observer)</span> </span>&#123;</span><br><span class="line">        mObservable.registerObserver(observer);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterAdapterDataObserver</span><span class="params">(@NonNull AdapterDataObserver observer)</span> </span>&#123;</span><br><span class="line">        mObservable.unregisterObserver(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些方法的含义已经在上面讲解Observable时解释过了。那么在setAdapterInternal()中注册的观察者mObserver是什么呢？它其实就是一个RecyclerViewDataObserver类型，定义在RecyclerView中，如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerView</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span> <span class="keyword">implements</span> <span class="title">ScrollingView</span>, <span class="title">NestedScrollingChild2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RecyclerViewDataObserver mObserver = <span class="keyword">new</span> RecyclerViewDataObserver();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而RecyclerViewDataObserver是AdapterDataObserver的子类，它定义在RecyclerView中，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerViewDataObserver</span> <span class="keyword">extends</span> <span class="title">AdapterDataObserver</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="keyword">if</span> (!mAdapterHelper.hasPendingUpdates()) &#123;</span><br><span class="line">                <span class="comment">//请求重新布局</span></span><br><span class="line">                requestLayout();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我们熟悉的onChange方法，RecyclerViewDataObserver重写了它，当满足一定条件时就会重新布局从而从可以从Adapter中获取更新数据并绑定数据到itemView,达到更新itemView的目的。<br>所以RecyclerView在设置Adapter是时，会注册一个观察者mObserver到Adapter的被观察者mObservable中。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后我们来整理一下这个过程，RecyclerView中有一个观察者mObserver，是RecyclerViewDataObserver类型，在RecyclerView设置Adapter时会把它注册到Adapter中，而Adapter中包含一个被观察者mObservable，是AdapterDataObservable类型，注册到Adapter中的观察最终会注册到mObservable的mObservers列表中，当我们手动调用Adapter的notifyXX函数时，notifyXX函数实际上会调用AdapterDataObservable的notifyXX函数，该函数会遍历所有观察者的onChange函数，在RecyclerViewDataObserver的onChange函数中会要求RecyclerView调用requestLayout()重新布局,更新用户界面。如图：</p><img src="/2019/03/09/RecyclerView%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/rv6.png" class="" title="rv6">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;RecyclerView是Android开发中的一个重要的模式，通常我们往RecyclerView添加数据时，都会调用Adapter的notifiyXX函数，这是为什么呢，今天我们就从源码来探究一下，对观察者模式不熟悉的读者，可以看一下这一篇博客&lt;a href=&quot;https://blog.csdn.net/Rain_9155/article/details/83004247&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;观察者模式&lt;/a&gt;, RecyclerView在更新数据时也算是对观察者模式的一种应用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="recyclerView" scheme="http://yoursite.com/categories/recyclerView/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="recyclerView" scheme="http://yoursite.com/tags/recyclerView/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView之缓存设计</title>
    <link href="http://yoursite.com/2019/03/08/RecyclerView%E4%B9%8B%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2019/03/08/RecyclerView%E4%B9%8B%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1/</id>
    <published>2019-03-08T06:56:50.000Z</published>
    <updated>2023-01-07T10:44:48.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>上一篇文章<a href="https://rain9155.github.io/2019/03/01/RecyclerView之布局设计" target="_blank" rel="noopener">RecyclerView之布局设计</a></li></ul><p>RecyclerView，见名之义，这个View代表了可循环使用的视图集合控件，封装了View的缓存逻辑判断，RecyclerView的基本单元是ViewHolder，里面有一个itemView代表了视图上的子View，所以RecyclerView的缓存基本单元也是ViewHolder。本文将从源码的角度来讲解RecyclerView的缓存设计。</p><a id="more"></a><pre><code>本文相关源码基于Android8.0，相关源码位置如下:frameworks/support/v7/recyclerview/src/android/support/v7/widget/RecyclerView.javaframeworks/support/v7/recyclerview/src/android/support/v7/widget/LinearLayoutManager.java</code></pre><h2 id="Recycler介绍"><a href="#Recycler介绍" class="headerlink" title="Recycler介绍"></a>Recycler介绍</h2><p>这里首先介绍一下Recycler，它定义在RecyclerView中，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Recycler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;ViewHolder&gt; mAttachedScrap = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//缓存着在屏幕中显示的ViewHolder</span></span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;ViewHolder&gt; mCachedViews = <span class="keyword">new</span> ArrayList&lt;ViewHolder&gt;();<span class="comment">//缓存着已经滚动出屏幕的ViewHolder,即屏幕外的ViewHolder</span></span><br><span class="line">    RecycledViewPool mRecyclerPool;<span class="comment">//ViewHolder的缓存池，屏幕外缓存的mCachedViews已满时，会将ViewHolder缓存到RecycledViewPool中。</span></span><br><span class="line">    <span class="keyword">private</span> ViewCacheExtension mViewCacheExtension;<span class="comment">//自定义缓存，自己实现ViewCacheExtension类来实现缓存。</span></span><br><span class="line">    ArrayList&lt;ViewHolder&gt; mChangedScrap = <span class="keyword">null</span>;<span class="comment">//屏幕内缓存，缓存着数据已经改变的ViewHolder</span></span><br><span class="line">    <span class="keyword">int</span> mViewCacheMax = DEFAULT_CACHE_SIZE;<span class="comment">//mCachedViews默认缓存数量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CACHE_SIZE = <span class="number">2</span>;<span class="comment">//默认缓存数量为2</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRequestedCacheMax = DEFAULT_CACHE_SIZE; <span class="comment">//可以设置mCachedViews的最大缓存数量，默认为2</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Recycler是RecyclerView的核心类，是RecyclerView的缓存实现类，它有着四级缓存：</p><ul><li><p>1、<strong>mAttachedScrap</strong><br>屏幕内缓存,  当我们调用notifiXX函数重新布局时，在布局之前，LayoutManager会调用detachAndScrapAttachedViews(recycler)把在RecyclerView中显示的ViewHolder一个个的剥离下来,然后缓存在mAttachedScrap中，等布局时会先从mAttachedScrap查找，再把ViewHolder一个个的放回RecyclerView原位中去，mAttachedScrap只是单纯的保存从RecyclerView中剥离的ViewHolder，再重新放回RecyclerView中去，如果放回后还有剩余的ViewHolder没有参加新布局，会从mAttachedScrap移到mCachedViews中。</p></li><li><p>2、<strong>mCachedViews</strong><br>在RecyclerView滚动时，对于那些不在RecyclerView中显示的ViewHolder，LayoutManager会调用removeAndRecycleAllViews(recycler)把这些已经移除的ViewHolder缓存在mCacheViews中，它的默认大小是2，当它满了的时候，就会利用先进先出原则，把老的ViewHolder移到mRecyclerPool中，mCachedViews它只是缓存最新被移除出屏幕的ViewHolder。</p></li><li><p>3、<strong>mViewCacheExtension</strong><br>自定义缓存实现，一般而言，我们不会自定义缓存实现，使用Recycler提供的3级缓存足够。</p></li><li><p>4、<strong>mRecyclerPool</strong><br>缓存池，通过前面1、2可以知道，真正废弃的ViewHolder最终移到mRecyclerPool，当我们向RecyclerView申请一个HolderView来使用的时，如果在mAttachedScrap、mCachedViews匹配不到，即使他们中有ViewHolder也不会返回给我们使用，而是会到mRecyclerPool中去拿一个废弃的ViewHolder返回。</p><p>mRecyclerPool内部维护了一个SparseArray，在mRecyclerPool中会根据每个ViewType把ViewHolder分别存储在不同的列表中，每个ViewType默认缓存5个ViewHolder，而且RecyclerViewPool也可以是多个RecyclerView之间的ViewHolder的缓存池，只要通过RecyclerView.setRecycledViewPool(RecycledViewPool)设置同一个RecycledViewPool，设置时，不需要自己去new 一个 RecyclerViewPool，每个RecyclerView默认都有一个RecyclerViewPool，只需要通过mRecyclerView.getRecycledViewPool()获取。RecyclerViewPool大概结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RecycledViewPool</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_MAX_SCRAP = <span class="number">5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrapData</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ArrayList&lt;ViewHolder&gt; mScrapHeap = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> mMaxScrap = DEFAULT_MAX_SCRAP;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//SparseArray的key为type，value为ScrapData，ScrapData中包含ViewHolder列表</span></span><br><span class="line">    SparseArray&lt;ScrapData&gt; mScrap = <span class="keyword">new</span> SparseArray&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据type从缓存池中获取一个ViewHolder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">getRecycledView</span><span class="params">(<span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ScrapData scrapData = mScrap.get(viewType);</span><br><span class="line">        <span class="keyword">if</span> (scrapData != <span class="keyword">null</span> &amp;&amp; !scrapData.mScrapHeap.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">final</span> ArrayList&lt;ViewHolder&gt; scrapHeap = scrapData.mScrapHeap;</span><br><span class="line">            <span class="keyword">return</span> scrapHeap.remove(scrapHeap.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把一个ViewHolder放入缓存池中缓存</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putRecycledView</span><span class="params">(ViewHolder scrap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> viewType = scrap.getItemViewType();</span><br><span class="line">        <span class="keyword">final</span> ArrayList&lt;ViewHolder&gt; scrapHeap = getScrapDataForType(viewType).mScrapHeap;</span><br><span class="line">        <span class="keyword">if</span> (mScrap.get(viewType).mMaxScrap &lt;= scrapHeap.size()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        scrap.resetInternal();</span><br><span class="line">        scrapHeap.add(scrap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们从Recycler中获取一个ViewHolder时，是这样的顺序：mAttachedScrap -&gt; mCachedViews -&gt; mViewCacheExtension -&gt; mRecyclerPool,当上述步骤都找不到了，就会调用<strong>Adapter的creat函数</strong>创建一个ViewHolder。那这里为什么省略mChangedScrap不讲呢？因为mChangedScrap是跟RecyclerView的预布局有关，缓存着RecyclerView中数据改变过的ViewHolder，而预布局默认为false，一般是RecyclerView执行动画时才会为true，我们上一篇文章也没有讨论执行动画的时候的布局过程，所以这里就不分析mChangedScrap。</p></li></ul><h2 id="Recycler-getViewForPosition"><a href="#Recycler-getViewForPosition" class="headerlink" title="Recycler.getViewForPosition()"></a>Recycler.getViewForPosition()</h2><p>在上篇文章中，提到在layoutChunk函数中，首先会调用LayoutState对象的next函数获取到一个itemView，然后布局这个itemView，我们来看LayoutState的next函数相关实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">View <span class="title">next</span><span class="params">(RecyclerView.Recycler recycler)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略了一个mScrapList，属于LayoutManager，跟执行动画时的缓存有关，这里不分析</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//这里才是核心，调用Recycler中的getViewForPosition获取itemView</span></span><br><span class="line">    <span class="keyword">final</span> View view = recycler.getViewForPosition(mCurrentPosition);</span><br><span class="line">    <span class="comment">//把itemView索引移到下一个位置</span></span><br><span class="line">    mCurrentPosition += mItemDirection;</span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码实际是调用RecyclerView.Recycler对象的getViewForPosition方法获取itemView，而该函数最终会获取一个ViewHolder，从而返回ViewHolder中的itemView，我们来看该函数相关调用和实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getViewForPosition</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getViewForPosition(position, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">View <span class="title">getViewForPosition</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">boolean</span> dryRun)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//可以看到最终返回的是ViewHolder中的itemView</span></span><br><span class="line">     <span class="keyword">return</span> tryGetViewHolderForPositionByDeadline(position, dryRun, FOREVER_NS).itemView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取一个ViewHolder</span></span><br><span class="line"><span class="function">ViewHolder <span class="title">tryGetViewHolderForPositionByDeadline</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">boolean</span> dryRun, <span class="keyword">long</span> deadlineNs)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Recycler的getViewForPosition方法最终会调用到tryGetViewHolderForPositionByDeadline方法，tryGetViewHolderForPositionByDeadline方法的意图是通过给定的position从Recycler的scrap, cache，RecycledViewPool获取一个ViewHolder或者通过Adapter直接创建一个ViewHolder。我们来看tryGetViewHolderForPositionByDeadline方法相关源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数解释：</span></span><br><span class="line"><span class="comment">//position：要获得哪个位置的ViewHolder</span></span><br><span class="line"><span class="comment">//dryRun: 代表position的ViewHolder是否已经从scrap或cache列表中移除，这里为false，表示没有，因为布局函数layoutChildren中一定会调用detachAndScrapAttachedViews(recycler)函数，表示把ViewHolder放入scrap列表中</span></span><br><span class="line"><span class="function">ViewHolder <span class="title">tryGetViewHolderForPositionByDeadline</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">boolean</span> dryRun, <span class="keyword">long</span> deadlineNs)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略了跟预布局有关的mChangedScrap获取ViewHolder，mChangedScrap不属于常规缓存</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">   </span><br><span class="line">    ViewHolder holder = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//1、第一次查找，通过position从scrap或hidden或cache中找ViewHolder</span></span><br><span class="line">         holder = getScrapOrHiddenOrCachedHolderForPosition(position, dryRun);</span><br><span class="line">            <span class="comment">//如果找到ViewHolder，检查ViewHolder的合法性</span></span><br><span class="line">            <span class="keyword">if</span> (holder != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//检查ViewHolder的是否被移除，position是否越界等，如果检查通过返回true，失败返回false</span></span><br><span class="line">                <span class="keyword">if</span> (!validateViewHolderForOffsetPosition(holder)) &#123;</span><br><span class="line">                    <span class="comment">//检查不通过</span></span><br><span class="line">                    <span class="comment">//上述讲过dryRun为false</span></span><br><span class="line">                    <span class="keyword">if</span> (!dryRun) &#123;</span><br><span class="line">                        <span class="comment">//设置这个ViewHolder为无效标志</span></span><br><span class="line">                        holder.addFlags(ViewHolder.FLAG_INVALID);</span><br><span class="line">                        <span class="comment">//把这个ViewHolder从scrap列表中移除</span></span><br><span class="line">                        <span class="keyword">if</span> (holder.isScrap()) &#123;</span><br><span class="line">                            removeDetachedView(holder.itemView, <span class="keyword">false</span>);</span><br><span class="line">                            holder.unScrap();</span><br><span class="line">                        &#125; </span><br><span class="line">                        <span class="comment">//...</span></span><br><span class="line">                        <span class="comment">//把这个ViewHolder放入cache列表中或mRecyclerPool中</span></span><br><span class="line">                        recycleViewHolderInternal(holder);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//置空不匹配的ViewHolder，进入下一步查找</span></span><br><span class="line">                    holder = <span class="keyword">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//检查通过了</span></span><br><span class="line">                    fromScrapOrHiddenOrCache = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> offsetPosition = mAdapterHelper.findPositionOffset(position);</span><br><span class="line">        <span class="comment">//这里可以看到我们熟悉的Adapter中的getItemViewType方法，重写此方法可以让RecyclerView显示多种type的itemView</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> type = mAdapter.getItemViewType(offsetPosition);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果mAdapter.hasStableIds()为true，就进入第2次查找，默认返回false</span></span><br><span class="line">         <span class="keyword">if</span> (mAdapter.hasStableIds()) &#123;</span><br><span class="line">            <span class="comment">//2、第2次查找，根据ViewHolder的type和id从scrap或cached列表查找</span></span><br><span class="line">            holder = getScrapOrCachedViewForId(mAdapter.getItemId(offsetPosition),</span><br><span class="line">                    type, dryRun);</span><br><span class="line">            <span class="keyword">if</span> (holder != <span class="keyword">null</span>) &#123; <span class="comment">//找到了</span></span><br><span class="line">                <span class="comment">//更新ViewHolder的位置</span></span><br><span class="line">                holder.mPosition = offsetPosition;</span><br><span class="line">                fromScrapOrHiddenOrCache = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (holder == <span class="keyword">null</span> &amp;&amp; mViewCacheExtension != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//3、第3次查找，从自定义缓存中查找，一般我们不会重写ViewCacheExtension</span></span><br><span class="line">            <span class="keyword">final</span> View view = mViewCacheExtension.getViewForPositionAndType(<span class="keyword">this</span>, position, type);</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">         <span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//4、第4次查找，从RecycledViewPool中查找，可以看到这里会根据type返回一个使用过的ViewHolder给你</span></span><br><span class="line">            holder = getRecycledViewPool().getRecycledView(type);</span><br><span class="line">            <span class="keyword">if</span> (holder != <span class="keyword">null</span>) &#123;<span class="comment">//找到了</span></span><br><span class="line">                <span class="comment">//重置ViewHolder中的信息</span></span><br><span class="line">                holder.resetInternal();</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//前面的4次还找不到合适的ViewHolder，就重新创建一个</span></span><br><span class="line">        <span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="comment">//...</span></span><br><span class="line">             <span class="comment">//5、这里会调用Adapter中的OnCreateViewHolder方法</span></span><br><span class="line">             holder = mAdapter.createViewHolder(RecyclerView.<span class="keyword">this</span>, type);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">boolean</span> bound = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//6、只要满足以下3个情况：</span></span><br><span class="line">    <span class="comment">//1、ViewHolder没有被绑定过，即没有设置FLAG_BOUND标志位</span></span><br><span class="line">    <span class="comment">//2、ViewHolder需要更新，即设置了FLAG_UPDATE标志位</span></span><br><span class="line">    <span class="comment">//3、ViewHolder是无效的，即设置了FLAG_INVALID标志位</span></span><br><span class="line">    <span class="comment">//就会调用Adapter中的OnBindViewHolder方法</span></span><br><span class="line">    <span class="keyword">if</span> (!holder.isBound() || holder.needsUpdate() || holder.isInvalid()) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> offsetPosition = mAdapterHelper.findPositionOffset(position);</span><br><span class="line">        <span class="comment">//这里最终调用Adapter中的OnBindViewHolder方法</span></span><br><span class="line">        bound = tryBindViewHolderByDeadline(holder, offsetPosition, position, deadlineNs);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来函数很长但是步骤还是很清晰的，我们把它分为注释1、2、3、4、5、6来看：</p><h3 id="1、调用getScrapOrHiddenOrCachedHolderForPosition"><a href="#1、调用getScrapOrHiddenOrCachedHolderForPosition" class="headerlink" title="1、调用getScrapOrHiddenOrCachedHolderForPosition()"></a>1、调用getScrapOrHiddenOrCachedHolderForPosition()</h3><p>注释1中通过position从scrap或hidden或cache中找ViewHolder，我们来看getScrapOrHiddenOrCachedHolderForPosition方法的关键源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function">ViewHolder <span class="title">getScrapOrHiddenOrCachedHolderForPosition</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">boolean</span> dryRun)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//1.1、第一次尝试，从mAttachedScrap找到一个精确，没有失效的ViewHolder并返回</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> scrapCount = mAttachedScrap.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; scrapCount; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> ViewHolder holder = mAttachedScrap.get(i);</span><br><span class="line">        <span class="keyword">if</span> (!holder.wasReturnedFromScrap() &amp;&amp; holder.getLayoutPosition() == position</span><br><span class="line">                &amp;&amp; !holder.isInvalid() &amp;&amp; (mState.mInPreLayout || !holder.isRemoved()))&#123;</span><br><span class="line">            <span class="comment">//标志这个ViewHolder是从mAttachedScrap取出并返回的</span></span><br><span class="line">            holder.addFlags(ViewHolder.FLAG_RETURNED_FROM_SCRAP);</span><br><span class="line">            <span class="keyword">return</span> holder;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1.2、第二次尝试，dryRun为false，从RecyclerView中隐藏的itemView中找，如果找到合适的View，就让它显示并把它从RecyclerView中剥离，然后根据这个View的LayoutParam获取ViewHolder，最后把这个ViewHolder放入mAttachedScrap并返回</span></span><br><span class="line">    <span class="keyword">if</span> (!dryRun) &#123;</span><br><span class="line">        View view = mChildHelper.findHiddenNonRemovedView(position);</span><br><span class="line">        <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//获取ViewHolder</span></span><br><span class="line">            <span class="keyword">final</span> ViewHolder vh = getChildViewHolderInt(view);</span><br><span class="line">            <span class="comment">//显示这个View</span></span><br><span class="line">            mChildHelper.unhide(view);</span><br><span class="line">            <span class="comment">//从RecyclerView剥离这个View</span></span><br><span class="line">            mChildHelper.detachViewFromParent(layoutIndex);</span><br><span class="line">            <span class="comment">//把这个ViewHolder放入mAttachedScrap</span></span><br><span class="line">            scrapView(view);</span><br><span class="line">            vh.addFlags(ViewHolder.FLAG_RETURNED_FROM_SCRAP</span><br><span class="line">                    | ViewHolder.FLAG_BOUNCED_FROM_HIDDEN_LIST);</span><br><span class="line">            <span class="comment">//返回</span></span><br><span class="line">            <span class="keyword">return</span> vh;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1.3、第三次尝试，从mCachedViews找到没有失效的ViewHolder并返回</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> cacheSize = mCachedViews.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cacheSize; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> ViewHolder holder = mCachedViews.get(i);</span><br><span class="line">        <span class="keyword">if</span> (!holder.isInvalid() &amp;&amp; holder.getLayoutPosition() == position) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dryRun) &#123;</span><br><span class="line">                mCachedViews.remove(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> holder;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到注释1的第一次查找，里面分为3步：</p><ul><li>1.1、从mAttachedScrap找。</li><li>1.2、如果上一步没有得到合适的缓存，从HiddenViews找。</li><li>1.3、如果上一步没有得到合适的缓存，从mCachedViews找。</li></ul><p>从上面3个步骤之一找到，就返回ViewHolder，然后检查ViewHolder的有效性，如果无效，则从mAttachedScrap中移除，并加入到mCacheViews或者mRecyclerPool中，并且将ViewHolder置为null，走到下一步。</p><h3 id="2、调用getScrapOrCachedViewForId"><a href="#2、调用getScrapOrCachedViewForId" class="headerlink" title="2、调用getScrapOrCachedViewForId()"></a>2、调用getScrapOrCachedViewForId()</h3><p>下一步就是注释2，如果我们通过Adapter.setHasStableIds(boolean)设置为true，就会进入,里面根据ViewHolder的type和id从scrap或cached列表查找ViewHolder，我们来看一下相关源码该方法的相关源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ViewHolder <span class="title">getScrapOrCachedViewForId</span><span class="params">(<span class="keyword">long</span> id, <span class="keyword">int</span> type, <span class="keyword">boolean</span> dryRun)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.1、第一次尝试，从mAttachedScrap找到一个id相同并且没有从mAttachedScrap取出并返回过的ViewHolder，还要type相同的ViewHolder返回</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> count = mAttachedScrap.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = count - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">final</span> ViewHolder holder = mAttachedScrap.get(i);</span><br><span class="line">        <span class="keyword">if</span> (holder.getItemId() == id &amp;&amp; !holder.wasReturnedFromScrap()) &#123;</span><br><span class="line">            <span class="comment">//id相同type相同</span></span><br><span class="line">            <span class="keyword">if</span> (type == holder.getItemViewType()) &#123;</span><br><span class="line">                holder.addFlags(ViewHolder.FLAG_RETURNED_FROM_SCRAP);</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> holder;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!dryRun) &#123;</span><br><span class="line">                <span class="comment">//id相同但type不同</span></span><br><span class="line">                <span class="comment">//从mAttachedScrap移除这个ViewHolder</span></span><br><span class="line">                mAttachedScrap.remove(i);</span><br><span class="line">                removeDetachedView(holder.itemView, <span class="keyword">false</span>);</span><br><span class="line">                <span class="comment">//把这个ViewHolder放入caches或RecyclerViewPool</span></span><br><span class="line">                quickRecycleScrapView(holder.itemView);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.2、第2次尝试，从mCachedViews中找到一个id相同并且type相同的ViewHolder返回</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> cacheSize = mCachedViews.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = cacheSize - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">final</span> ViewHolder holder = mCachedViews.get(i);</span><br><span class="line">        <span class="keyword">if</span> (holder.getItemId() == id) &#123;</span><br><span class="line">            <span class="comment">//id相同并且type相同</span></span><br><span class="line">            <span class="keyword">if</span> (type == holder.getItemViewType()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!dryRun) &#123;</span><br><span class="line">                    <span class="comment">//从cache中移除</span></span><br><span class="line">                    mCachedViews.remove(i);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> holder;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!dryRun) &#123;</span><br><span class="line">                <span class="comment">//id相同type不相同</span></span><br><span class="line">                <span class="comment">//把这个ViewHolder从cache中移除并放入RecyclerViewPool中</span></span><br><span class="line">                recycleCachedViewAt(i);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到注释2的第二次查找，里面分为2步：</p><ul><li>2.1、从mAttachedScrap找。</li><li>2.2、如果上一步没有得到合适的缓存，从mCachedViews找。</li></ul><p>第二次查找跟第一次不同的是，它是通过Adapter.getItemId(position)获得该位置ViewHolder的id，来查找ViewHolder，我们可以重写Adapter.getItemId(position)返回每个position的ViewHolder的id，默认返回RecyclerView.NO_ID。从上面2个步骤之一找到，就返回ViewHolder，如果找不到就进入下一步。</p><h3 id="3、从ViewCacheExtension中找"><a href="#3、从ViewCacheExtension中找" class="headerlink" title="3、从ViewCacheExtension中找"></a>3、从ViewCacheExtension中找</h3><p>注释3的第三次查找是从自定义缓存中查找，这个没什么好说，可以直接到下一步。</p><h3 id="4、从RecyclerViewRool中找"><a href="#4、从RecyclerViewRool中找" class="headerlink" title="4、从RecyclerViewRool中找"></a>4、从RecyclerViewRool中找</h3><p>下一步就是第4次查找，从RecyclerdViewPool中查找，可以看到这里先使用getRecyclerViewPool获得Recycler中的RecyclerViewPool，然后调用RecyclerViewPool的getRecycledView(type)根据type获取一个ViewHolder，我们来看该方法的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">getRecycledView</span><span class="params">(<span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//根据type取出ScrapData</span></span><br><span class="line">    <span class="keyword">final</span> ScrapData scrapData = mScrap.get(viewType);</span><br><span class="line">    <span class="keyword">if</span> (scrapData != <span class="keyword">null</span> &amp;&amp; !scrapData.mScrapHeap.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//取出ScrapData中的ViewHolder列表</span></span><br><span class="line">        <span class="keyword">final</span> ArrayList&lt;ViewHolder&gt; scrapHeap = scrapData.mScrapHeap;</span><br><span class="line">        <span class="comment">//返回一个ViewHolder并从pool中删除</span></span><br><span class="line">        <span class="keyword">return</span> scrapHeap.remove(scrapHeap.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mScrap是SparseArray类型，它会根据type把ViewHolder存放在不同ScrapData中，ScrapData中有一个mScrapHeap，是ArrayList类型，它会存放RecyclerViewPool中放进来的ViewHolder。所以上面这个方法首先会根据type取出ScrapData，然后取出mScrapHeap，如果mScrapHeap有元素，就返回并删除，然后重置这个ViewHolder让它复用，如果没有就进入下一步。</p><h3 id="5、调用Adapter的createViewHolder"><a href="#5、调用Adapter的createViewHolder" class="headerlink" title="5、调用Adapter的createViewHolder()"></a>5、调用Adapter的createViewHolder()</h3><p>既然缓存中没有就创建一个，该方法的相关源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> VH <span class="title">createViewHolder</span><span class="params">(@NonNull ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">final</span> VH holder = onCreateViewHolder(parent, viewType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，调用了我们熟悉的onCreateViewHolder方法，该方法就是用来创建ViewHolder。</p><p>到这里，经过tryGetViewHolderForPositionByDeadline方法中的注释1、2、3、4、5步骤之一拿到了ViewHolder，接下来就是看是否需要调用Adapter的OnBindViewHolder方法绑定ViewHolder。</p><h3 id="6、根据情况调用Adapter的OnBindViewHolder"><a href="#6、根据情况调用Adapter的OnBindViewHolder" class="headerlink" title="6、根据情况调用Adapter的OnBindViewHolder()"></a>6、根据情况调用Adapter的OnBindViewHolder()</h3><p>从上面知道当缓存中不能提供ViewHolder就会调用adapter的onCreateViewHolder创建一个，那么我们同样熟悉的OnBindViewHolder方法是什么时候执行的呢？如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ViewHolder <span class="title">tryGetViewHolderForPositionByDeadline</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">boolean</span> dryRun, <span class="keyword">long</span> deadlineNs)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    ViewHolder holder = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//走到这里表示holder已经经过各种手段赋值了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//6、只要满足以下3个情况：</span></span><br><span class="line">    <span class="comment">//1、ViewHolder没有被绑定过，即没有设置FLAG_BOUND标志位</span></span><br><span class="line">    <span class="comment">//2、ViewHolder需要更新，即设置了FLAG_UPDATE标志位</span></span><br><span class="line">    <span class="comment">//3、ViewHolder是无效的，即设置了FLAG_INVALID标志位</span></span><br><span class="line">    <span class="comment">//就会调用Adapter中的OnBindViewHolder方法</span></span><br><span class="line">    <span class="keyword">if</span> (!holder.isBound() || holder.needsUpdate() || holder.isInvalid()) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> offsetPosition = mAdapterHelper.findPositionOffset(position);</span><br><span class="line">        <span class="comment">//这里最终调用Adapter中的OnBindViewHolder方法</span></span><br><span class="line">        bound = tryBindViewHolderByDeadline(holder, offsetPosition, position, deadlineNs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">tryBindViewHolderByDeadline</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> offsetPosition, <span class="keyword">int</span> position, <span class="keyword">long</span> deadlineNs)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//调用Adapter的OnBindViewHolder方法</span></span><br><span class="line">    mAdapter.bindViewHolder(holder, offsetPosition);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isBound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (mFlags &amp; FLAG_BOUND) != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">needsUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (mFlags &amp; FLAG_UPDATE) != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isInvalid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (mFlags &amp; FLAG_INVALID) != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>holder.isBound()、holder.needsUpdate() 、holder.isInvalid()方法中会分别判断ViewHolder中有没有设置FLAG_BOUND标志位、FLAG_UPDATE标志位、FLAG_INVALID标志位，只要满足3种情况之一，就会调用Adapter的OnBindViewHolder方法绑定数据，这3种情况的解释如下：</p><ul><li>1、<strong>没有设置FLAG_BOUND标志位</strong>：它表示ViewHolder没有调用过OnBindViewHolder方法，一般是调用Adapter的OnCreateViewHolder方法创建的ViewHolder会出现这种情况；</li><li>2、<strong>设置了FLAG_UPDATE标志位</strong>：它表示ViewHolder需要更新，一般是调用了Adapter的<strong>定向更新</strong>的相关方法或者ViewHolder是从RecycledViewPool中取出的就会出现这种情况；</li><li>3、<strong>设置了FLAG_INVALID标志位</strong>：它表示ViewHolder是无效的，一般是从mAttachedScrap或mCacheViews中取出ViewHolder后，发现它满足被移除或者position越界了等<strong>不合法</strong>的条件，就会把取出ViewHolder设置FLAG_INVALID标志位，标志无效，然后调用recycleViewHolderInternal方法把它放入mCacheViews或RecycledViewPool中，在recycleViewHolderInternal方法中ViewHolder首先会被尝试放入mCacheViews(默认大小为2)中，如果满了，就会利用先进先出原则，把老的ViewHolder移到mRecyclerPool中。</li></ul><p>bind方法是用来绑定数据，对于从mAttachedScrap中拿出来的ViewHolder是不用重新bind的，而对于从mRecyclerPool拿出和通过Create方法创建的ViewHolder是需要重新bind的，而对于从mCacheViews中拿出的ViewHolder<strong>有可能</strong>会被bind，当调用getScrapOrHiddenOrCachedHolderForPosition方法<strong>根据position</strong>获取ViewHolder时，如果这个ViewHoler是从mCacheViews中取出的，说明满足有效的、positioin匹配这两种情况，如果这个ViewHolder同时是合法的，那么这个ViewHolder不需要重新bind，而如果是不合法的，就会标志无效，再次放入mCacheViews中(有可能会移动到mRecyclerPool)，等待调用getScrapOrCachedViewForId方法<strong>根据type和id</strong>从mCacheViews再次获取这个已经被标记为无效的ViewHolder，如果这个无效的ViewHolder的type和id都匹配的话，就会获取这个无效的ViewHolder，而此时这个ViewHolder是需要重新bind的。</p><p>从前面的分析来看，<strong>mAttachedScrap和mCacheViews都是position匹配或者type和id匹配才会命中返回ViewHolder，而mRecyclerPool则没有这些限制，只要mRecyclerPool中相应type类型的ViewHolder缓存有，就会命中返回ViewHolder，且优先级mAttachedScrap &gt; mCacheViews &gt; mRecyclerPool</strong>，通过以下3个场景，加深大家理解mAttachedScrap、mCacheViews、mRecyclerPool的作用：</p><p>1、当RecyclerView列表上下滑动时，屏幕内的ViewHolder会被缓存到mAttachedScrap中，在屏幕内改变位置的ViewHolder复位后，很快会从mAttachedScrap复用到原位置上；</p><p>2、当RecyclerView列表向上滑动，列表顶部有ViewHolder滑出屏幕，滑出屏幕的ViewHolder会被缓存到mCacheViews中，当列表向下滑动复位时，滑出屏幕的ViewHolder很快从mCacheViews复用到原位置上；</p><p>3、当RecyclerView列表向上滑动，列表顶部有ViewHolder滑出屏幕，滑出屏幕的ViewHolder会被缓存到mCacheViews中，多余的会移动到mRecyclerPool中，列表底部有空余的ViewHolder位置，这时会从mRecyclerPool取出ViewHolder复用，填充底部空余的ViewHolder位置。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文中源码角度简单的分析RecyclerView布局一个itemView时是怎样通过Recycler来获取一个ViewHolder，从而获取itemView，如图：</p><img src="/2019/03/08/RecyclerView%E4%B9%8B%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1/rv4.png" class="" title="rv"><p>准确的来说，Recycler是RecyclerView的itemView的提供者和管理者，它在内部封装了RecyclerView的缓存设计实现，在RecyclerView中有着四级缓存：AttachedScrap,mCacheViews,ViewCacheExtension,RecycledViewPool，正因为这样RecyclerView在使用的时候效率更好。</p><p>参考文章:</p><p><a href="https://blog.csdn.net/feather_wch/article/details/81613313#观察者模式" target="_blank" rel="noopener">RecyclerView和ListView原理</a></p><p><a href="https://juejin.im/post/5c696ba9e51d457f136d24ff#heading-9" target="_blank" rel="noopener">RecyclerView缓存机制（咋复用？）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;上一篇文章&lt;a href=&quot;https://rain9155.github.io/2019/03/01/RecyclerView之布局设计&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RecyclerView之布局设计&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RecyclerView，见名之义，这个View代表了可循环使用的视图集合控件，封装了View的缓存逻辑判断，RecyclerView的基本单元是ViewHolder，里面有一个itemView代表了视图上的子View，所以RecyclerView的缓存基本单元也是ViewHolder。本文将从源码的角度来讲解RecyclerView的缓存设计。&lt;/p&gt;
    
    </summary>
    
    
      <category term="recyclerView" scheme="http://yoursite.com/categories/recyclerView/"/>
    
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="recyclerView" scheme="http://yoursite.com/tags/recyclerView/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView之布局设计</title>
    <link href="http://yoursite.com/2019/03/01/RecyclerView%E4%B9%8B%E5%B8%83%E5%B1%80%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2019/03/01/RecyclerView%E4%B9%8B%E5%B8%83%E5%B1%80%E8%AE%BE%E8%AE%A1/</id>
    <published>2019-03-01T07:10:00.000Z</published>
    <updated>2023-01-07T10:44:48.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>RecyclerView功能强大，自推出以来受到了无数人的喜爱，它可以通过一个LayoutManager将一个RecyclerView显示为不同的样式，例如ListView、GridView样式、瀑布流样式，所以加深对于RecyclerView的学习对于开发有很重要的意义。关于RecyclerView如何使用网上有很多文章，本篇文章从源码讲解RecyclerView如何通过layoutManager来进行布局。</p><a id="more"></a><pre><code>本文相关源码基于Android8.0，相关源码位置如下:frameworks/support/v7/recyclerview/src/android/support/v7/widget/RecyclerView.javaframeworks/support/v7/recyclerview/src/android/support/v7/widget/LinearLayoutManager.java</code></pre><h2 id="RecyclerView-onLayout"><a href="#RecyclerView-onLayout" class="headerlink" title="RecyclerView.onLayout()"></a>RecyclerView.onLayout()</h2><p>Android中每一个控件从它被定义到xml布局文件到呈现在屏幕上都要经过onMeasure -&gt; onLayout -&gt; onDraw 三个阶段，RecyclerView同样不例外，它的布局在OnLayout函数中进行，该方法相关源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    dispatchLayout();</span><br><span class="line">    mFirstLayoutComplete = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到该方法只是简单的调用了dispatchLayout方法,并记录了是第一次布局，dispatchLayout()相关源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">dispatchLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1、检查是否设置了Adapter和LayoutManager</span></span><br><span class="line">        <span class="keyword">if</span> (mAdapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mLayout == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//2、RecyclerView的布局分3步，即dispatchLayoutStep1()，dispatchLayoutStep2()，dispatchLayoutStep3()，下面分情况进行dispatchLayoutStep1()，dispatchLayoutStep2()</span></span><br><span class="line">        <span class="comment">//2.1、没有执行过布局流程，执行 dispatchLayoutStep1()， dispatchLayoutStep2()</span></span><br><span class="line">        <span class="keyword">if</span> (mState.mLayoutStep == State.STEP_START) &#123;</span><br><span class="line">            dispatchLayoutStep1();</span><br><span class="line">            mLayout.setExactMeasureSpecsFrom(<span class="keyword">this</span>);</span><br><span class="line">            dispatchLayoutStep2();</span><br><span class="line">        <span class="comment">//2.2、已经执行过布局流程，但是因为数据变化或布局大小发生改变，重新执行 dispatchLayoutStep2()</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (mAdapterHelper.hasUpdates() || mLayout.getWidth() != getWidth()</span><br><span class="line">                || mLayout.getHeight() != getHeight()) &#123;</span><br><span class="line">            mLayout.setExactMeasureSpecsFrom(<span class="keyword">this</span>);</span><br><span class="line">            dispatchLayoutStep2();</span><br><span class="line">        <span class="comment">//2.3、已经执行过布局流程并且数据和布局大小也确定了</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//设置RecyclerView的宽高为精确模式（即MeasureSpecMode == MeasureSpec.EXACTLY）</span></span><br><span class="line">            mLayout.setExactMeasureSpecsFrom(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3、RecyclerView的布局第3步 dispatchLayoutStep3()</span></span><br><span class="line">        dispatchLayoutStep3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面源码我分3部分解释，首先注释1，没有设置RecyclerView的Adapter和LayoutManager直接return，这也解释了为什么我们平时忘记设置它们时RecyclerView会显示不出数据。<br>然后注释2、3，这两部分一起讲，因为RecyclerView的布局过程分为3步：dispatchLayoutStep1，dispatchLayoutStep2和dispatchLayoutStep3。在讲解之前先讲解mState.mLayoutStep，mState是State类型用于保存RecyclerView的状态，mLayouStep定义在State中，有三种取值分别代表了布局过程的3个步骤，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RecyclerView.State</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STEP_START = <span class="number">1</span>;           <span class="comment">//还未执行dispatchLayoutStep1()，初始步骤</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STEP_LAYOUT = <span class="number">1</span> &lt;&lt; <span class="number">1</span>;     <span class="comment">//已经执行了dispatchLayoutStep1()或dispatchLayoutStep2()，布局步骤</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STEP_ANIMATIONS = <span class="number">1</span> &lt;&lt; <span class="number">2</span>; <span class="comment">//已经执行dispatchLayoutStep2()，动画步骤</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">int</span> mLayoutStep = STEP_START;</span><br></pre></td></tr></table></figure><p>可以看到mLayoutStep默认是STEP_START取值，下面我们简单分析RecyclerView的布局过程3步分别做了什么，首先dispatchLayoutStep1()的相关源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchLayoutStep1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//确保dispatchLayoutStep1()还未被执行过</span></span><br><span class="line">    mState.assertLayoutStep(State.STEP_START);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//1、处理Adapter数据更新的问题，计算需要运行的动画类型</span></span><br><span class="line">    processAdapterUpdatesAndSetAnimationFlags();</span><br><span class="line">    <span class="comment">//2、存储关于View的一些状态和信息</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//3、 如果有必要，会进行预言性的布局，并且保存相关信息。</span></span><br><span class="line">    <span class="keyword">if</span> (mState.mRunSimpleAnimations) &#123;</span><br><span class="line">          <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mState.mRunPredictiveAnimations)&#123;</span><br><span class="line">         <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新mLayoutStep的值，进入布局步骤</span></span><br><span class="line">     mState.mLayoutStep = State.STEP_LAYOUT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>省略了很多东西，dispatchLayoutStep1()主要是来存储当前子View的状态并确定是否要执行动画、如果过有必要，会进行预言性的布局，并且保存相关信息，本文重点不在此，然后来看看dispatchLayoutStep2()，相关源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchLayoutStep2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//方法执行期间不能要求RequestLayout()</span></span><br><span class="line">        startInterceptRequestLayout();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//确保已经执行了dispatchLayoutStep1()或dispatchLayoutStep2(), 从这里可以看出dispatchLayoutStep2()可能会被多次执行</span></span><br><span class="line">        mState.assertLayoutStep(State.STEP_LAYOUT | State.STEP_ANIMATIONS);</span><br><span class="line">        <span class="comment">//1、设置好初始状态</span></span><br><span class="line">        mAdapterHelper.consumeUpdatesInOnePass();</span><br><span class="line">        mState.mItemCount = mAdapter.getItemCount();</span><br><span class="line">        mState.mDeletedInvisibleItemCountSincePreviousLayout = <span class="number">0</span>;</span><br><span class="line">        mState.mInPreLayout = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//2、调用布局管理器去布局（布局核心方法）</span></span><br><span class="line">        mLayout.onLayoutChildren(mRecycler, mState)；</span><br><span class="line">        <span class="comment">// 动画相关状态</span></span><br><span class="line">        mState.mRunSimpleAnimations = mState.mRunSimpleAnimations &amp;&amp; mItemAnimator != <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//更新mLayoutStep值，进入动画步骤</span></span><br><span class="line">        mState.mLayoutStep = State.STEP_ANIMATIONS;</span><br><span class="line">        </span><br><span class="line">        stopInterceptRequestLayout(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dispatchLayoutStep2()大部分源码都在此，它才是本文的重点，它在里面调用 mLayout.onLayoutChildren(）将布局的具体策略交给了LayoutManager，下面我们会重点分析这个函数，最后我们再来看看dispatchLayoutStep3()，相关源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchLayoutStep3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//确保已经执行dispatchLayoutStep2()</span></span><br><span class="line">    mState.assertLayoutStep(State.STEP_ANIMATIONS);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//重置mLayoutStep的值</span></span><br><span class="line">    mState.mLayoutStep = State.STEP_START;</span><br><span class="line">    <span class="comment">//1、触发动画</span></span><br><span class="line">    <span class="keyword">if</span>(mState.mRunSimpleAnimations)&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2、保存View的一些信息</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//3、清除状态和清除无用的信息</span></span><br><span class="line">    mViewInfoStore.clear()</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>省略了大量代码，dispatchLayoutStep3()同样跟动画相关，它主要保存关于Views的所有信息、触发动画、做必要的清理操作，它也不是本文的重点。<br>可以看到mLayoutStep与dispatchLayoutStep()对应关系如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">STEP_START --&gt;  dispatchLayoutStep1()</span><br><span class="line">STEP_LAYOUT --&gt; dispatchLayoutStep2()</span><br><span class="line">STEP_ANIMATIONS --&gt; dispatchLayoutStep2(), dispatchLayoutStep3()</span><br></pre></td></tr></table></figure><p>讲完3个步骤我们在回到RecyclerView.dispatchLayout()，RecyclerView的布局入口OnLayout()会执行dispatchLayout()，dispatchLayout（）会根据RecyclerView的布局步骤执行dispatchLayoutStep1、2、3。那么为什么dispatchLayout（）中会分2.1, 2.2, 2.3条件执行dispatchLayoutStep1、2，而不直接按顺序dispatchLayoutStep1、2、3执行布局流程？这是因为在RecyclerView的onMeasure中，dispatchLayoutStep1、2就已经有可能因为RecyclerView自动测量模式中由于测量出来的宽高不精确而被调用，相应代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthSpec, <span class="keyword">int</span> heightSpec)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//设置了layoutaManager后，layoutaManager默认开启自动测量模式</span></span><br><span class="line">    <span class="keyword">if</span> (mLayout.isAutoMeasureEnabled()) &#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">int</span> widthMode = MeasureSpec.getMode(widthSpec);</span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">int</span> heightMode = MeasureSpec.getMode(heightSpec);</span><br><span class="line">       <span class="comment">//首先执行LayoutManager的onMeasure方法,里面会调用RecyclerView的onMeasure方法测量自身width和height</span></span><br><span class="line">       mLayout.onMeasure(mRecycler, mState, widthSpec, heightSpec);</span><br><span class="line">       <span class="comment">//Measure过后检查RecyclerView的width和height是否是精确值</span></span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">boolean</span> measureSpecModeIsExactly = widthMode == MeasureSpec.EXACTLY &amp;&amp; heightMode == MeasureSpec.EXACTLY;</span><br><span class="line">       <span class="comment">//如果RecyclerView的width和height是精确值，就跳过下面步骤</span></span><br><span class="line">       <span class="keyword">if</span> (measureSpecModeIsExactly || mAdapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//如果RecyclerView的width和height不是精确值，则会进行下面步骤</span></span><br><span class="line">       <span class="comment">//1、dispatchLayoutStep1()还未被执行过，执行 dispatchLayoutStep1()</span></span><br><span class="line">       <span class="keyword">if</span> (mState.mLayoutStep == State.STEP_START) &#123;</span><br><span class="line">           dispatchLayoutStep1();</span><br><span class="line">       &#125;</span><br><span class="line">       mLayout.setMeasureSpecs(widthSpec, heightSpec);</span><br><span class="line">       mState.mIsMeasuring = <span class="keyword">true</span>;</span><br><span class="line">       <span class="comment">//2、执行dispatchLayoutStep2()进行布局</span></span><br><span class="line">       dispatchLayoutStep2();</span><br><span class="line">       <span class="comment">//3、布局过程结束，该方法里面会根据childView中的边界信息计算并设置RecyclerView长宽的测量值</span></span><br><span class="line">       mLayout.setMeasuredDimensionFromChildren(widthSpec, heightSpec);</span><br><span class="line">       <span class="comment">//下面省略一些代码，下面还会再次检查，如果RecyclerView的宽高还不是精确值或至少有一个childView的宽高还不是精确值，还会再次执行执行dispatchLayoutStep2()进行布局</span></span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RecyclerView是一个ViewGroup，如果自身的宽高设置了warp_content必须先调用dispatchLayoutStep2()布局childView后才能测量出准确宽高。所以我们再看回dispatchLayout()中的3个判断:</p><ul><li><p>dispatchLayout()中2.1条件：如果mLayoutStep == State.STEP_START，证明OnMeasure中还没有进行过布局，如果mLayoutStep ！= State.STEP_START，证明OnMeasure中进行过布局了，直接跳到2.3条件，不用重复布局，直接使用直接使用之前数据设置RecyclerView的宽高为精确模式。</p></li><li><p>dispatchLayout()中2.2条件：2.1条件不成立时为什么直接跳到2.3条件不到2.2条件，因为上述条件基于RecyclerView正常的测量布局绘制到呈现在屏幕的过程，如果在这之后你对RecyclerView调用了notifXX函数，就会造成数据变化从而要求重新布局（requestLayout()函数调用），此时2.2条件就会成立，RecyclerView会调用dispatchLayoutStep2()重新布局。</p></li><li><p>dispatchLayout()中2.3条件：2.1条件中分析过了。</p></li></ul><p>3个判断后，最终一定会调用dispatchLayoutStep3()。至此分析完RecyclerView的onLayout()。</p><h2 id="RecyclerView-dispatchLayoutStep2-gt-LayoutManager-onLayoutChildren（）"><a href="#RecyclerView-dispatchLayoutStep2-gt-LayoutManager-onLayoutChildren（）" class="headerlink" title="RecyclerView.dispatchLayoutStep2() -&gt; LayoutManager.onLayoutChildren（）"></a>RecyclerView.dispatchLayoutStep2() -&gt; LayoutManager.onLayoutChildren（）</h2><p>RecyclerView真正布局的进行就是在LayoutManager.onLayoutChildren（）中进行，LayoutManager的onLayoutChildren()的实现在LayoutManager的三个子类中：LinearLayoutManager、GridLayoutManager、StaggeredGridLayoutMnager，分别对应3种不同的布局样式。这里以LinearLayoutManager中的实现为例，下面是该函数在LinearLayoutManager实现中的相关源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源码很长，这里先抛出它的主要步骤：</span></span><br><span class="line"><span class="comment">//1、通过检查childView和其他变量，找出锚点的坐标（coordinate）和位置（position），并把锚点信息设置到AnchorInfo</span></span><br><span class="line"><span class="comment">//2、根据锚点向俩边填充</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里还讲一下下面出现End和Start的方法或字段的意思：</span></span><br><span class="line"><span class="comment">//如果LinearLayoutManager的Orientation是VERTICAL方向，End指屏幕的最下面（即Bottom），Start指屏幕的最上面(即Top)</span></span><br><span class="line"><span class="comment">//如果LinearLayoutManager的Orientation是HORIZONTAL方向，End指屏幕的最左边（即Left），Start指屏幕的最右边(即Right)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLayoutChildren</span><span class="params">(RecyclerView.Recycler recycler, RecyclerView.State state)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//解析布局方向，设置mShouldReverseLayout的值，它是一个Boolean类型，false表示LinearLayoutManager的Orientation是VERTICAL方向或者LinearLayoutManager的Orientation是HORIZONTAL方向并且你在manifest中没有设置RTL布局，true表示LinearLayoutManager的Orientation是HORIZONTAL方向并且你在manifest中设置了RTL布局</span></span><br><span class="line">    resolveShouldLayoutReverse();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//根据mStackFromEnd（表示从End开始填充itemView，默认是false）和mShouldReverseLayout决定mLayoutFromEnd的值，mLayoutFromEnd表示itemView从End开始布局还是从Start开始布局，从Start开始布局为false 从End开始布局是为true，这里一般都为false，即从Start到End开始布局</span></span><br><span class="line">    mAnchorInfo.mLayoutFromEnd = mShouldReverseLayout ^ mStackFromEnd;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1、计算AnchorInfo的信息，即找出锚点的position和coordinate</span></span><br><span class="line">    updateAnchorInfoForLayout(recycler, state, mAnchorInfo);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//从End到Start开始布局，这里省略不讲，原理和从Start到End开始布局一样</span></span><br><span class="line">    <span class="keyword">if</span> (mAnchorInfo.mLayoutFromEnd) &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//这里我们只讨论从Start到End开始布局</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//更新LayoutState，确定从锚点到RecyclerView底部有多少可用空间</span></span><br><span class="line">        updateLayoutStateToFillEnd(mAnchorInfo);</span><br><span class="line">        mLayoutState.mExtra = extraForEnd;</span><br><span class="line">        <span class="comment">//2.1、第一次填充itemView，从锚点向底部填充</span></span><br><span class="line">        fill(recycler, mLayoutState, state, <span class="keyword">false</span>);</span><br><span class="line">        endOffset = mLayoutState.mOffset;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> lastElement = mLayoutState.mCurrentPosition;</span><br><span class="line">        <span class="keyword">if</span> (mLayoutState.mAvailable &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            extraForStart += mLayoutState.mAvailable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新LayoutState，确定从锚点到RecyclerView顶部有多少可用空间</span></span><br><span class="line">        updateLayoutStateToFillStart(mAnchorInfo);</span><br><span class="line">        mLayoutState.mExtra = extraForStart;</span><br><span class="line">        mLayoutState.mCurrentPosition += mLayoutState.mItemDirection;</span><br><span class="line">        <span class="comment">//2.2、第二次填充itemView，从锚点向顶部填充</span></span><br><span class="line">        fill(recycler, mLayoutState, state, <span class="keyword">false</span>);</span><br><span class="line">        startOffset = mLayoutState.mOffset;</span><br><span class="line">        <span class="comment">//如果屏幕上还有剩余的空间</span></span><br><span class="line">        <span class="keyword">if</span> (mLayoutState.mAvailable &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            extraForEnd = mLayoutState.mAvailable;</span><br><span class="line">            updateLayoutStateToFillEnd(lastElement, endOffset);</span><br><span class="line">            mLayoutState.mExtra = extraForEnd;</span><br><span class="line">            fill(recycler, mLayoutState, state, <span class="keyword">false</span>);</span><br><span class="line">            endOffset = mLayoutState.mOffset;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>onLayoutChildren方法有接近200行代码，但怎么也逃不出注释的2步，首先确定锚点（大部分情况下锚点就是RecyclerView上的itemView），并设置锚点的信息AnchorInfo。它定义在LinearLayoutManager中，有几个关键的属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AnchorInfo</span> </span>&#123;</span><br><span class="line">        OrientationHelper mOrientationHelper;<span class="comment">//根据LinearLayoutManager的布局方向来测量itemView位置信息的帮助类，当你调用LinearLayoutManager的setOrientation(int orientation)方法时，LinearLayoutManager会根据不同orientation创建不同的OrientationHelper实现并设置给mOrientation属性</span></span><br><span class="line">        <span class="keyword">int</span> mPosition;<span class="comment">//锚点在Adapter中的索引位置</span></span><br><span class="line">        <span class="keyword">int</span> mCoordinate;<span class="comment">//锚点相对于LinearLayoutManager的布局方向在屏幕上的坐标，如果是VERTICAL方向，代表y轴偏移量，如果是HORIZONTAL方向，代表x轴偏移量</span></span><br><span class="line">        <span class="keyword">boolean</span> mLayoutFromEnd;<span class="comment">//上面解释过了</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么它是怎么确定锚点信息的？我们来看注释1 updateAnchorInfoForLayout方法的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateAnchorInfoForLayout</span><span class="params">(RecyclerView.Recycler recycler, RecyclerView.State state,</span></span></span><br><span class="line"><span class="function"><span class="params">            AnchorInfo anchorInfo)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、如果屏幕上有itemView并且RecyclerView要滚动到某个itemView，则以这个itemView为锚点</span></span><br><span class="line">    <span class="keyword">if</span> (updateAnchorFromPendingData(state, anchorInfo)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2、如果屏幕上有itemView,则根据anchorInfo.mLayoutFromEnd找出最接近End或Start位置的itemView为锚点</span></span><br><span class="line">    <span class="keyword">if</span> (updateAnchorFromChildren(recycler, state, anchorInfo)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3、如果屏幕上没有itemView，则根据anchorInfo.mLayoutFromEnd和RecyclerView的padding来决定锚点coordinate和mStackFormEnd决定锚点的position</span></span><br><span class="line">    anchorInfo.assignCoordinateFromPadding();</span><br><span class="line">    anchorInfo.mPosition = mStackFromEnd ? state.getItemCount() - <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于里面的俩个updataAnchorFormXX函数就不展开了，对于情况1一般是我们滚动了RecyclerView的itemView或调用了RecyclerView的scrolltoXX函数，对于情况2一般是我们itemView已经加载到屏幕上了并且此时我们调用notifiXX函数来刷新或增删itemView，而情况3就是我们现在讨论的情况，RecyclerView加载到屏幕上，此时还没有布局itemView。我们点进AnchorInfo的assignCoordinateFromPadding()看看干了什么，相关源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">assignCoordinateFromPadding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mCoordinate = mLayoutFromEnd ? mOrientationHelper.getEndAfterPadding() :     mOrientationHelper.getStartAfterPadding();</span><br><span class="line">&#125;</span><br><span class="line">     </span><br><span class="line"><span class="comment">//下面只给出LinearLayoutManager的Orientation为VERTICAL方向的实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEndAfterPadding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mLayoutManager.getHeight() - mLayoutManager.getPaddingBottom();</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStartAfterPadding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mLayoutManager.getPaddingLeft();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到如果此时RecyclerView中没有itemView并且LinearLayoutManager的布局方向为VERTICAL和mLayoutFromEnd值为false：anchorInfo的mCoordinate就是RecyclerView的paddingLeft，anchorInfo的position就是0（锚点为RecyclerView左上角的位置）。</p><img src="/2019/03/01/RecyclerView%E4%B9%8B%E5%B8%83%E5%B1%80%E8%AE%BE%E8%AE%A1/rv1.png" class="" title="图一"><p>我们回到onlayoutChildern方法，确定了锚点后，然后就要根据AnchorInfo开始填充itemView，在开始填充之前，LinearLayoutManager会用LayoutState暂时保存一些布局信息，它定义在LinearLayoutManager中，有几个关键属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LayoutState</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mAvailable;<span class="comment">//表示当前的布局方向中，RecyclerView中要用于填充itemView的可用空间大小</span></span><br><span class="line">    <span class="keyword">int</span> mOffset;<span class="comment">//表示当前的布局方向中，在RecyclerView中距离锚点的位置偏移量</span></span><br><span class="line">    <span class="keyword">int</span> mExtra = <span class="number">0</span>;<span class="comment">//表示自己设置的额外布局的范围，一般不会设置</span></span><br><span class="line">    <span class="keyword">int</span> mLayoutDirection;<span class="comment">//表示布局往哪个方向填充，俩个取值：LAYOUT_START为向RecyclerView顶部，LAYOUT_END为向底部</span></span><br><span class="line">    <span class="keyword">int</span> mCurrentPosition;<span class="comment">//表示当前锚点在Adapter中的索引，可用它获得下一个itemView的索引</span></span><br><span class="line">    <span class="keyword">int</span> mItemDirection;<span class="comment">//决定由mCurrentPosition获得下一个itemView的索引时是+1还是-1，俩个取值：ITEM_DIRECTION_HEAD表示索引-1，ITEM_DIRECTION_TAIL表示索引+1</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>updateLayoutStateToFillEnd函数会在向下填充前更新layoutState的值，相关源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateLayoutStateToFillEnd</span><span class="params">(AnchorInfo anchorInfo)</span> </span>&#123;</span><br><span class="line">        updateLayoutStateToFillEnd(anchorInfo.mPosition, anchorInfo.mCoordinate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateLayoutStateToFillEnd</span><span class="params">(<span class="keyword">int</span> itemPosition, <span class="keyword">int</span> offset)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//下面基于在当前讨论的情景中：</span></span><br><span class="line">    <span class="comment">//这里可用布局空间mLayoutState.mAvailable就是RecyclerView的高度</span></span><br><span class="line">    mLayoutState.mAvailable = mOrientationHelper.getEndAfterPadding() - offset;</span><br><span class="line">    <span class="comment">//这里为LayoutState.ITEM_DIRECTION_TAIL，索引+1</span></span><br><span class="line">    mLayoutState.mItemDirection = mShouldReverseLayout ? LayoutState.ITEM_DIRECTION_HEAD :</span><br><span class="line">            LayoutState.ITEM_DIRECTION_TAIL;</span><br><span class="line">    <span class="comment">//当前锚点索引</span></span><br><span class="line">    mLayoutState.mCurrentPosition = itemPosition;</span><br><span class="line">    <span class="comment">//这里为向RecyclerView底部填充</span></span><br><span class="line">    mLayoutState.mLayoutDirection = LayoutState.LAYOUT_END;</span><br><span class="line">    <span class="comment">//这里offet为0</span></span><br><span class="line">    mLayoutState.mOffset = offset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>准备好layoutState后，就调用fill方法进行填充itemView，核心源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fill</span><span class="params">(RecyclerView.Recycler recycler, LayoutState layoutState, RecyclerView.State state, <span class="keyword">boolean</span> stopOnFocusable)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//前面讲过，表示可用布局空间大小</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> start = layoutState.mAvailable;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">// 1、计算剩余可用的填充空间，可用布局空间加上额外布局空间</span></span><br><span class="line">    <span class="keyword">int</span> remainingSpace = layoutState.mAvailable + layoutState.mExtra;</span><br><span class="line">    <span class="comment">//用于记录每一次while循环的填充一个itemView后的结果</span></span><br><span class="line">    LayoutChunkResult layoutChunkResult = mLayoutChunkResult;</span><br><span class="line">    <span class="comment">//2、while判断条件，屏幕还有剩余可用空间并且还有数据就继续执行</span></span><br><span class="line">    <span class="keyword">while</span> ((layoutState.mInfinite || remainingSpace &gt; <span class="number">0</span>) &amp;&amp; layoutState.hasMore(state)) &#123;</span><br><span class="line">        <span class="comment">//重置LayoutChunkResult</span></span><br><span class="line">        layoutChunkResult.resetInternal();</span><br><span class="line">        <span class="comment">//3、循环调用layoutChunk方法一个一个的填充itemView，里面会根据LinearLayoutmanager的orientation方向布局itemView（布局子View的核心方法）</span></span><br><span class="line">        layoutChunk(recycler, state, layoutState, layoutChunkResult);</span><br><span class="line">        <span class="keyword">if</span> (layoutChunkResult.mFinished) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算填充一次itemView消耗了多少空间，或者说计算距离锚点的偏移量</span></span><br><span class="line">        layoutState.mOffset += layoutChunkResult.mConsumed * layoutState.mLayoutDirection;</span><br><span class="line">        <span class="comment">//4、如果layoutChunkResult没有要求忽略这次消耗或这次布局的不是ScrapView或我们不是在做预布局，就更新可填充空间的大小</span></span><br><span class="line">        <span class="keyword">if</span> (!layoutChunkResult.mIgnoreConsumed || mLayoutState.mScrapList != <span class="keyword">null</span></span><br><span class="line">                    || !state.isPreLayout()) &#123;</span><br><span class="line">                layoutState.mAvailable -= layoutChunkResult.mConsumed;</span><br><span class="line">                remainingSpace -= layoutChunkResult.mConsumed;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//下面省略的是，如果是因滚动引起的布局，会通过判断滑动后view是否滑出边界决定是否回收View</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//填充完成，修改起始位置，即填充到哪个位置</span></span><br><span class="line">    <span class="keyword">return</span> start - layoutState.mAvailable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的注释很详细，大概流程就是在while循环中根据剩余可用空间不断的调用layoutChunk（）函数进行布局itemView，layoutChunk方法会在里面根据RecyclerView的缓存机制获取一个View从而把它填充到RecyclerView中去，下面继续来看layoutChunk方法相关源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">layoutChunk</span><span class="params">(RecyclerView.Recycler recycler, RecyclerView.State state,  LayoutState layoutState, LayoutChunkResult result)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、获取一个View</span></span><br><span class="line">    View view = layoutState.next(recycler);</span><br><span class="line">    <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">        result.mFinished = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) view.getLayoutParams();</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">   <span class="comment">//2、测量itemView</span></span><br><span class="line">   measureChildWithMargins(view, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">   <span class="comment">//3、计算该itemView消耗的高度或宽度</span></span><br><span class="line">   result.mConsumed = mOrientationHelper.getDecoratedMeasurement(view);</span><br><span class="line">   <span class="keyword">int</span> left, top, right, bottom;</span><br><span class="line">   <span class="comment">//4、按竖直方向布局，计算itemView的上下左右布局</span></span><br><span class="line">   <span class="keyword">if</span> (mOrientation == VERTICAL) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isLayoutRTL()) &#123;</span><br><span class="line">            right = getWidth() - getPaddingRight();</span><br><span class="line">            left = right - mOrientationHelper.getDecoratedMeasurementInOther(view);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = getPaddingLeft();</span><br><span class="line">            right = left + mOrientationHelper.getDecoratedMeasurementInOther(view);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (layoutState.mLayoutDirection == LayoutState.LAYOUT_START) &#123;</span><br><span class="line">            bottom = layoutState.mOffset;</span><br><span class="line">            top = layoutState.mOffset - result.mConsumed;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            top = layoutState.mOffset;</span><br><span class="line">            bottom = layoutState.mOffset + result.mConsumed;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//水平布局的计算方式</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5、布局itemView</span></span><br><span class="line">    layoutDecoratedWithMargins(view, left, top, right, bottom);</span><br><span class="line">    <span class="comment">//消耗可用布局空间如果itemView没有被移除或没有改变</span></span><br><span class="line">    <span class="keyword">if</span> (params.isItemRemoved() || params.isItemChanged()) &#123;</span><br><span class="line">        result.mIgnoreConsumed = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在layoutChunk方法中首先从layoutState中根据mCurrentPosition获取itemView，然后获取itemView的布局参数，并且根据布局方式(横向或纵向)计算出itemView的上下左右布局，最后调用layoutDecoratedWithMargins方法实现布局itemView，layoutDecoratedWithMargins方法定义在LayoutManger中，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">layoutDecoratedWithMargins</span><span class="params">(@NonNull View child, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right,  <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</span><br><span class="line">    <span class="keyword">final</span> Rect insets = lp.mDecorInsets;</span><br><span class="line">    child.layout(left + insets.left + lp.leftMargin, top + insets.top + lp.topMargin,</span><br><span class="line">right - insets.right - lp.rightMargin,</span><br><span class="line">            bottom - insets.bottom - lp.bottomMargin);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>可以看到，只是调用了itemView的layout函数将itemView布局到具体的位置。</p><p>我们再回到onlayoutChildern方法，按照上面图一，我们已经填充了下面，但是上面是不用填充的，因为没有可用空间，所以注释2.2基本下是不会走的了。而fill towaards Start步骤和fill towards End差不多。那么为什么RecyclerView进行两次填充呢？因为RecyclerView理想的锚点如下图：</p><img src="/2019/03/01/RecyclerView%E4%B9%8B%E5%B8%83%E5%B1%80%E8%AE%BE%E8%AE%A1/rv2.png" class="" title="图二"><p>上面是RecyclerView的方向为VERTICAL的情况，当为HORIZONTAL方向的时候填充算法是不变的。但我们一般是图一的情况，从上往下填充。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一图胜千言，下图是LayoutManager循环布局所有的itemView。</p><img src="/2019/03/01/RecyclerView%E4%B9%8B%E5%B8%83%E5%B1%80%E8%AE%BE%E8%AE%A1/rv3.png" class="" title="图三"><p>可以看到RecyclerView将布局的职责分离到LayoutManager中，使得RecyclerView更加灵活，我们也可以自定义自己的LayoutManger，实现自己想要的布局。可以看到RecyclerView具有很强大的扩展性，所以深入学习这个控件是很有必要的。能看到这里的都是有毅力的人，本文只是RecyclerView学习的第一篇，以后会继续分析RecyclerView的缓存设计。</p><p>参考资料：</p><p>《Android源码设计与分析》</p><p><a href="https://blog.csdn.net/feather_wch/article/details/81613313#观察者模式" target="_blank" rel="noopener">RecyclerView和ListView原理</a></p><p><a href="https://www.jianshu.com/p/898479f103b6" target="_blank" rel="noopener">RecyclerView源码分析(三)–布局流程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;RecyclerView功能强大，自推出以来受到了无数人的喜爱，它可以通过一个LayoutManager将一个RecyclerView显示为不同的样式，例如ListView、GridView样式、瀑布流样式，所以加深对于RecyclerView的学习对于开发有很重要的意义。关于RecyclerView如何使用网上有很多文章，本篇文章从源码讲解RecyclerView如何通过layoutManager来进行布局。&lt;/p&gt;
    
    </summary>
    
    
      <category term="recyclerView" scheme="http://yoursite.com/categories/recyclerView/"/>
    
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="recyclerView" scheme="http://yoursite.com/tags/recyclerView/"/>
    
  </entry>
  
  <entry>
    <title>ThreadLocal原理解析</title>
    <link href="http://yoursite.com/2019/02/21/ThreadLocal%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2019/02/21/ThreadLocal%E8%A7%A3%E6%9E%90/</id>
    <published>2019-02-21T05:55:50.000Z</published>
    <updated>2023-01-07T10:44:48.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>ThreadLocal，线程本地存储区（Thread Local Storage，简称为TLS），通过它可以在指定的线程中存储数据，数据存储之后，只能在指定的线程中可以获取到存储的数据，对于其他线程来说则无法获取到数据。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>ThreadLocal 提供了 get()，set(T value)，remove() 3个对外方法，来看一个简单的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义两个ThreadLocal</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Integer&gt; mThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Integer&gt; mThreadLocal2 = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//主线程</span></span><br><span class="line">        mThreadLocal.set(<span class="number">0</span>);<span class="comment">//mThreadLocal存值</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" - "</span> + mThreadLocal.get());<span class="comment">////mThreadLocal取值</span></span><br><span class="line"></span><br><span class="line">        mThreadLocal2.set(<span class="number">1</span>);<span class="comment">//mThreadLocal2存值</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" - "</span> + mThreadLocal2.get());<span class="comment">////mThreadLoca2取值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//子线程1</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            mThreadLocal.set(<span class="number">2</span>);<span class="comment">//mThreadLocal存值</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" - "</span> + mThreadLocal.get());<span class="comment">//mThreadLocal取值</span></span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//子线程2</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">" - "</span> + mThreadLocal.get())).start();<span class="comment">//mThreadLocal取值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输出结果：*/</span></span><br><span class="line">main - <span class="number">0</span></span><br><span class="line">main - <span class="number">1</span></span><br><span class="line">Thread-<span class="number">0</span> - <span class="number">2</span></span><br><span class="line">Thread-<span class="number">1</span> - <span class="keyword">null</span></span><br></pre></td></tr></table></figure><p>上面代码中，有三个线程，分别为主线程(main)、子线程1(Thread-0)、子线程2(Thread-1)，有两个不同的ThreadLocal实例，分别为mThreadLocal、mThreadLocal2，根据输出结果，得出以下结论：</p><ul><li><strong>1、在同一线程中，通过不同的ThreadLocal存值，则通过相应的ThreadLocal取出的值也不一样</strong>，例如这里在主线程通过分别设置mThreadLocal的值为0，mThreadLocal2的值为1，从输出结果可以看出mThreadLocal取出的值还是0，mThreadLocal2取出的值还是1；</li><li><strong>2、在不同线程中，访问的是同一个ThreadLocal对象，但通过同一个ThreadLocal获取的值却不一样</strong>，例如这里在子线程1设置mThreadLocal的值2，在子线程2没有设置mThreadLocal的值，从输出结果可以看出通过同一个ThreadLocal获取的值不一样，一个为2，一个为null；</li></ul><p>这里给出先给出解释：</p><p>在java中，线程的表示是用java.lang.Thread类来表示，在Thread类中定义了一个ThreadLocalMap字段，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Thread.java</span></span><br><span class="line">ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>ThreadLocalMap是ThreadLocal中的一个<strong>静态内部类</strong>，它是一个简化版的HashMap<strong>容器</strong>，也就是说这个容器是以<strong>key-value</strong>来存值的，每个线程都管理着自己的容器，我们可以从外部拿到这个threadLocals，然后往这个容器中存值、取值等，而ThreadLocal就是这样做的，当我们通过ThreadLocal的<strong>set方法</strong>存值时，它会以<strong>当前ThreadLocal实例为key，要存的值为value</strong>，把这个映射保存进相应的线程的容器中，当我们通过ThreadLocal的<strong>get方法</strong>取值时，它会以当前ThreadLocal实例为Key，然后去相应线程的容器中查找这个键为Key的value值返回。</p><p>所以：</p><ul><li>1、<strong>在上面的主线程中</strong>，mThreadLocal和mThreadLocal2这两个ThreadLocal实例都往主线程的容器中存值，但由于mThreadLocal和mThreadLocal2的两个实例不一样，导致key不一样，所以在容器中存放value的位置也不一样，这样就可以根据相应的key获取出相应的value；</li><li>2、<strong>在上面的子线程1和子线程2中</strong>，都是通过mThreadLoca这个ThreadLocal实例来存取值，但是由于线程实例不一样，导致获取的容器也不一样，所以根据同一个key从不同的容器中获取的value也就不一样。</li></ul><p>如果不是很理解，就来看一下下面关于ThreadLocal的源码分析：</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="1、ThreadLocal"><a href="#1、ThreadLocal" class="headerlink" title="1、ThreadLocal"></a>1、ThreadLocal</h3><h4 id="1-1、get方法"><a href="#1-1、get方法" class="headerlink" title="1.1、get方法"></a>1.1、get方法</h4><p>该方法用于获取当前线程TLS区域的数据，该方法的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ThreadLocal.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、获取当前线程</span></span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    <span class="comment">//2、 以当前线程为参数，获取一个 ThreadLocalMap 对象</span></span><br><span class="line">    ThreadLocalMap map = getMap(t)；</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//2.1、map不为空，则以当前 ThreadLocal 对象实例作为key值，去map中取值，有找到直接返回</span></span><br><span class="line">            ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                T result = (T)e.value;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//2.2、 map 为空或者在map中取不到值，那么走这里，返回默认初始值</span></span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//getMap方法返回传进来的线程中的threadlocals字段，threadlocals是一个ThreadLocalMap对象，它就是我们上面提到的每个线程中保存数据的Map容器</span></span><br><span class="line">    <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ThreadLocal的get方法，首先获取当前线程，接着以当前线程为参数调用getMap方法，getMap方法返回当前线程中保存数据的<strong>Map容器</strong>，调用getMap之后就得到了当前线程的数据存储容器即map，然后判断它是否为null：</p><ul><li><strong>注释2.1</strong>：当map不为空时，就以当前ThreadLocal实例为参数调用map.getEntry方法，该方法返回一个ThreadLocalMap.Entry对象，Entry就是线程容器中表示<strong>key-value</strong>映射的类，它里面有一个key和一个value值，而value值就是我们需要的数据；</li><li><strong>注释2.2</strong>： 当map为空时或者在map中找不到数据即map.getEntry返回了null，就调用setInitialValue方法返回默认初始值，该方法源码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ThreadLocal.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 获取初始值，默认返回Null，允许重写</span></span><br><span class="line">    T value = initialValue();</span><br><span class="line">    <span class="comment">//2、获取当前线程并以当前线程为参数，获取一个ThreadLocalMap 对象</span></span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="comment">//3、当map不为空，设置初始值给map</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//当map为空， 创建当前线程的数据存储容器map</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">    <span class="comment">//返回初始值</span></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>该方法分为以下3步：</li></ul><p>1、 调用initialValue()，可以看到它默认返回null，但是我们可以<strong>重写该方法并返回你想要的初始值</strong>；</p><p>2、获取当前线程，再次以当前线程为参数，获取一个ThreadLocalMap 对象；</p><p>3、再次判断map是否为空，如下：</p><ul><li>当map不为空时，以当前ThreadLocal实例为key，initialvalue方法获取到的初始值为value，将（key - value）值保存到map中；</li><li>当map为空时，就调用createMap方法， ThreadLocal 中的 createMap() 方法就是对当前Thread 中的 threadLocals成员变量赋值，该方法源码如下:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//以当前ThreadLocal实例对象为key，传进来的value为值，创建一个ThreadLocalMap实例</span></span><br><span class="line">    t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>Thread 中的 threadLocal 成员变量初始值为 null，并且在 Thread 类中没有任何赋值的地方，只有在 ThreadLocal 中的 createMap方法中对其赋值，而调用createMap方法的地方就两个：<strong>set 和 setInitialValue方法</strong>，而调用 setInitialValue() 方法的地方只有 get方法。</li></ul><p>到此，get方法就已经讲完了。</p><h4 id="1-2、set方法"><a href="#1-2、set方法" class="headerlink" title="1.2、set方法"></a>1.2、set方法</h4><p>set方法是将value存储到当前线程的TLS区域，在上面的get方法中，ThreadLocal会根据线程取出线程的容器，然后再根据key（ThreadLocal实例）去容器中取值，如果取不到值，就会返回初始值，初始值默认是null，那是因为ThreadLocal要调用set方法后，容器中才有我们想要的值，set方法的源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ThreadLocal.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 取当前线程对象</span></span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    <span class="comment">//2. 取当前线程的数据存储容器</span></span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">//2.1. 如果map不为空，以当前ThreadLocal实例对象为key，存值</span></span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">//2.2. 如果map为空，新建一个当前线程的数据存储容器</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>set方法的步骤是不是感觉似曾相识，没错，它和get方法中所讲的<strong>setInitialValue方法几乎一模一样</strong>，只是没有调用initialValue方法返回初始值，因为set方法的参数value就是我们想要保存的值，而不用调用initialValue方法设置默认初始值。</p><p>至此，set方法讲解完毕。</p><p>get和set两个方法内部都会自动根据当前线程选择相对应的容器存取，所以其实<strong>ThreadLocal的核心还是ThreadLocalMap对象</strong>，get方法会调用ThreadLocalMap的<strong>getEntry(ThreadLocal&lt;?&gt;)</strong>根据ThreadLocal实例获取一个Entry对象，该Entry对象保存了key-value映射，set方法会调用ThreadLocalMap的<strong>set(ThreadLocal&lt;?&gt;, Object)</strong>保存key-value映射到ThreadLocalMap中，下面我们就简单的讲解一下ThreadLocalMap的组成。</p><h3 id="2、ThreadLocal-ThreadLocalMap"><a href="#2、ThreadLocal-ThreadLocalMap" class="headerlink" title="2、ThreadLocal::ThreadLocalMap"></a>2、ThreadLocal::ThreadLocalMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ThreadLocal::ThreadLocalMap</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITIAL_CAPACITY = <span class="number">16</span>;<span class="comment">//初始容量为16，必须为2^n</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;<span class="comment">//table中Entry的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> threshold;<span class="comment">//扩容阈值, 当size &gt;= threshold时就会触发扩容逻辑</span></span><br><span class="line">    <span class="keyword">private</span> Entry[] table;<span class="comment">//table数组</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setThreshold</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">         <span class="comment">//ThreadLocalMap的threshold为table数组长度的2/3</span></span><br><span class="line">         threshold = len * <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//以下为ThreadLocal调用ThreadLocalMap的主要方法</span></span><br><span class="line">    <span class="comment">//分别对应ThreadLocal的get、set、remove方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> Entry <span class="title">getEntry</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ThreadLocalMap 就是一个用于存储数据的容器类, 它是ThreadLocal中的静态内部类， 它的底层实现类似于hashMap的实现，也是基于哈希算法，里面table数组就是真正的存储每个线程的数据，数组的每个元素类型就是一个具有（key-value）键值对的Entry，key对应ThreadLocal实例，value对应要存储的数据，Entry在数组中的index值是根据key的<strong>threadLocalHashCode</strong>用<strong>hash算法</strong>算出来的，threadLocalHashCode是ThreadLocal中的一个字段，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ThreadLocal.java</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> threadLocalHashCode = nextHashCode();<span class="comment">//threadLocalHashCode的值等于nextHashCode方法的返回值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger nextHashCode = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_INCREMENT = <span class="number">0x61c88647</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextHashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//每次调用nextHashCode方法都会在原本的int值加上0x61c88647后再返回</span></span><br><span class="line">    <span class="keyword">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而ThreadLocalMap 的hash算法，即计算index值的算法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hash算法：threadLocalHashCode与（table数组长度-1）相与</span></span><br><span class="line"><span class="comment">//这样会使得i均匀的分布在数组的长度之内</span></span><br><span class="line"><span class="keyword">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>当出现冲突时，ThreadLocalMap是使用<strong>线性探测法</strong>来解决冲突的，即如果i位置已经有了key-value映射，就会在i + 1位置找，直到找到一个合适的位置。</p><p>我们看一下Entry的实现，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&gt; </span>&#123;</span><br><span class="line">    Object value;</span><br><span class="line">    Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">        <span class="comment">//key是弱引用</span></span><br><span class="line">        <span class="keyword">super</span>(k);</span><br><span class="line">        value = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Entry 继承至 <strong>WeakReference</strong>，并且它的<strong>key是弱引用</strong>，但是<strong>value是强引用</strong>，所以如果<strong>key关联的ThreadLocal实例</strong>没有强引用，只有弱引用时，在gc发生时，ThreadLocal实例就会被gc回收，当ThreadLocal实例被gc回收后，由于value是强引用，导致table数组中存在着<strong>null - value</strong>这样的映射，称之为<strong>脏槽</strong>，这种脏槽会浪费table数组的空间，所以需要及时清除，所以ThreadLocalMap 中提供了<strong>expungeStaleEntry</strong>方法和<strong>expungeStaleEntries</strong>方法去清理这些脏槽，每次ThreadLocalMap 运行getEntry、set、remove等方法时，都会主动的间接使用这些方法去清理脏槽，从而释放更多的空间，避免无谓的扩容操作。</p><blockquote><p>java中有4种引用，分别为：强引用、软引用、弱引用和虚引用.</p></blockquote><h3 id="3、小结"><a href="#3、小结" class="headerlink" title="3、小结"></a>3、小结</h3><p>根据使用实例和源码分析，我们得出以下两个结论：</p><p>1、<strong>使用同一个ThreadLocal对象，可以维护着不同线程的数据副本：</strong></p><p>这是因为，这些数据本来就是存储在各自线程中了，ThreadLocal 的 get() 方法内部其实会先去获取当前的线程对象，然后直接将线程存储数据的容器(ThreadLocalMap)取出来，如果为空就会先创建并将初始值和当前 ThreadLocal 对象绑定存储进去，这样不同线程即使调用了同一 ThreadLocal 对象的get方法，取的数据也是各自线程的数据副本，这样自然就可以达到维护不同线程各自相互独立的数据副本，且以线程为作用域的效果了。</p><p>2、<strong>在同一线程中不同ThreadLocal对象虽然共用同一个线程中的容器，但却可以相互独立运作：</strong></p><p>这是因为，ThreadLocal 的 get() 方法内部根据线程取出map后，当map不为空时，会根据ThreadLocal实例去map中查找value，换句话说，在将数据存储到线程的容器map中是以当前 ThreadLocal 对象实例为 key 存储，这样，即使在同一线程中调用了不同的 ThreadLocal 对象的 get() 方法，所获取到的数据也是不同的，达到同一线程中不同 ThreadLocal 虽然共用一个容器，但却可以相互独立运作的效果。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>如果你是单线程环境，那么不用考虑使用ThreadLocal了，ThreadLocal是用来在多线程环境下的。</p><p>在多线程环境下，如果某个变量只在特定的某个线程中使用，即我们对这个变量的操作<strong>只限定在同一个线程内</strong>，那么就不需要使用同步来保证这个变量的正确性，因为没有存在竞争，这时我们可以把这个变量直接存储在线程内部中，要使用这个变量时直接从线程内部拿出来后再操作，这就<strong>避免了使用同步带来的性能消耗</strong>，典型的例子有Android中的Looper，通过Looper.myLooper方法就可以返回当前线程关联的Looper。</p><p>总的来说，当某些数据是以线程为作用域并且不同线程具有不同的数据副本的时候，就可以考虑采用 ThreadLocal。</p><h2 id="正确使用"><a href="#正确使用" class="headerlink" title="正确使用"></a>正确使用</h2><p>上面介绍ThreadLocalMap时提到，如果ThreadLocalMap中的key关联的ThreadLoca实例被回收了，就会导致ThreadLocalMap还残留着这个key对应的value实例，出现了脏槽，而脏槽是通过ThreadLocalMap<strong>主动的调用expungeStaleEntry或expungeStaleEntries方法清理</strong>，而这两个方法只会在主动调用ThreadLocalMap的set(ThreadLocal , Object)、getEntry(ThreadLocal)和remove(ThreadLocal)等方法时才会被调用，而ThreadLocalMap的set、getEntry、remove方法只有在调用ThreadLocal的set、get、remove方法时才会被调用。</p><p>所以想象这样的一种情况：我们使用ThreadLocal的set方法往线程的ThreadLocalMap中保存了一个<strong>非常大</strong>的数据，从这之后，我没有再调用过ThreadLocal的set、get、remove等方法，当这个数据对应的<strong>ThreadLocal实例被gc回收</strong>后，ThreadLocalMap中还残留这这个null-value映射，并且这个<strong>线程的生命周期是和程序同步</strong>的，直到程序结束它才会结束，这样就导致了内存泄漏的发生，产生内存浪费。</p><p>所以我们平常使用完ThreadLocal后，应该手动的调用<strong>remove方法</strong>把映射删除，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Integer&gt; mThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//调用mThreadLocal的set方法</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    threadLocal对象.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么ThreadLocal要定义为静态变量？，可以参考：</p><img src="/2019/02/21/ThreadLocal%E8%A7%A3%E6%9E%90/threadlocal1.png" class="" title="thread"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文从使用到源码简单的分析了一下ThreadLocal，介绍了ThreadLocal的使用场景和正确使用方法，从ThreadLocal的get和set方法中都可以看出，它们所操作的对象都是当前线程中的容器ThreadLocalMap，所以在不同线程中访问同一个ThreadLocal的get和set方法，它们对ThreadLocal所做的读写操作仅限与线程内部。</p><p>参考资料：</p><p><a href="https://mp.weixin.qq.com/s/vZXg87bKA5UrNKcrFNuQvQ" target="_blank" rel="noopener">ThreadLocal 相关的各种面试问法了解一下？</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;ThreadLocal，线程本地存储区（Thread Local Storage，简称为TLS），通过它可以在指定的线程中存储数据，数据存储
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="ThreadLocal" scheme="http://yoursite.com/tags/ThreadLocal/"/>
    
  </entry>
  
  <entry>
    <title>Android消息机制(native层)</title>
    <link href="http://yoursite.com/2019/02/21/Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6native%E5%B1%82/"/>
    <id>http://yoursite.com/2019/02/21/Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6native%E5%B1%82/</id>
    <published>2019-02-21T05:51:51.000Z</published>
    <updated>2023-01-07T10:44:48.683Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>上一篇文章：<a href="https://rain9155.github.io/2019/02/21/Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6java%E5%B1%82/" target="_blank" rel="noopener">Android消息机制java层</a></li></ul><p>MessageQueue中有多个native方法，MessaeQueue是Android消息机制的Java层和native层的连接纽带，Android的java层和native层通过<strong>JNI调用</strong>打通，java层和native各有一套消息机制，实现不一样，本文讲解native层的Android消息机制，了解了native层的消息机制，你就能明白<strong>为什么java层的loop方法是死循环但却不会消耗性能</strong>这个问题。</p><h2 id="native层消息机制架构图"><a href="#native层消息机制架构图" class="headerlink" title="native层消息机制架构图"></a>native层消息机制架构图</h2><img src="/2019/02/21/Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6native%E5%B1%82/Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6(native%E5%B1%82).jpg" class=""><ul><li><strong>MessageQueue</strong>  — 里面有一个Looper，和java层的MessageQueue同名;</li><li><strong>NativeMessageQueue</strong>  —  MessageQueue的继承类，native层的消息队列，<strong>只是一个代理类</strong>，其大部分方法操作都转交给Looper的方法;</li><li><strong>Looper</strong>  —  native层的Looper，<strong>其功能相当于java层的Handler</strong>，它可以取出消息，发送消息，处理消息；</li><li><strong>MessageHandler</strong>  —  native层的消息处理类，Looper把处理消息逻辑转交给此类;</li><li><strong>WeakMessageHanlder</strong>  —  MessageHandler的继承类，也是消息处理类，但最终还是会把消息处理逻辑转交给MessageHandler。</li></ul><h2 id="java层的MessageQueue"><a href="#java层的MessageQueue" class="headerlink" title="java层的MessageQueue"></a>java层的MessageQueue</h2><p>要讲解native层的消息机制，我们需要从java层消息机制调用到的MessageQueue的<strong>native方法</strong>讲起，MessageQueue中所有的native方法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MessageQueue.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageQueue</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">nativeInit</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">nativeDestroy</span><span class="params">(<span class="keyword">long</span> ptr)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">nativePollOnce</span><span class="params">(<span class="keyword">long</span> ptr, <span class="keyword">int</span> timeoutMillis)</span></span>; </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">nativeWake</span><span class="params">(<span class="keyword">long</span> ptr)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">nativeIsPolling</span><span class="params">(<span class="keyword">long</span> ptr)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">nativeSetFileDescriptorEvents</span><span class="params">(<span class="keyword">long</span> ptr, <span class="keyword">int</span> fd, <span class="keyword">int</span> events)</span></span>;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们主要讲解三个：nativeInit()、 nativePollOnce(long ptr, int timeoutMillis)和 nativeWake(long ptr)，<strong>nativeInit</strong>方法在java层的MessageQueue<strong>构造</strong>的时候调用到，<strong>nativePollOnce</strong>方法在java层的MessageQueue的<strong>next</strong>方法调用到，<strong>nativeWake</strong>方法在java层的MessageQueue的<strong>enqueueuMessage</strong>方法调用到。</p><h3 id="1、nativeInit"><a href="#1、nativeInit" class="headerlink" title="1、nativeInit()"></a>1、nativeInit()</h3><p>java层中，在ActivityThread的main方法创建UI线程的消息循环，<strong>Looper.prepareMainLooper -&gt; Looper.prepare -&gt; new Looper -&gt; new MessageQueue</strong>，MessageQueue是在Looper的构造中创建的，在MessageQueue的构造中:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MessageQueue.java</span></span><br><span class="line">MessageQueue(<span class="keyword">boolean</span> quitAllowed) &#123;</span><br><span class="line">    mQuitAllowed = quitAllowed;</span><br><span class="line">    mPtr = nativeInit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在java层中，mPtr保存了nativeInit()返回的值，nativeInit方法的实现在android_os_MessageQueue.cpp文件中的<strong>android_os_MessageQueue_nativeInit</strong>方法中，该方法源码如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//frameworks/base/core/jni/android_os_MessageQueue.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> jlong <span class="title">android_os_MessageQueue_nativeInit</span><span class="params">(JNIEnv* env, jclass clazz)</span> </span>&#123;   </span><br><span class="line">    <span class="comment">//创建native消息队列NativeMessageQueue</span></span><br><span class="line">    NativeMessageQueue* nativeMessageQueue = <span class="keyword">new</span> NativeMessageQueue();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//增加引用计数</span></span><br><span class="line">    nativeMessageQueue-&gt;incStrong(env);</span><br><span class="line">    <span class="comment">//使用C++强制类型转换符reinterpret_cast把NativeMessageQueue指针强转成long类型并返回到java层</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;jlong&gt;(nativeMessageQueue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在android_os_MessageQueue_nativeInit方法中会创建一个NativeMessageQueue对象，并增加其引用计数，并将NativeMessageQueue指针mPtr保存在Java层的MessageQueue中，现在我们来看<strong>NativeMessageQueue的构造函数</strong>, 如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//frameworks/base/core/jni/android_os_MessageQueue.cpp</span></span><br><span class="line">NativeMessageQueue::NativeMessageQueue() </span><br><span class="line">    : mPollEnv(<span class="literal">NULL</span>), mPollObj(<span class="literal">NULL</span>), mExceptionObj(<span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="comment">//获取TLS中的Looper(Looper::getForThread相当于java层的Looper.mLooper中的ThreadLocal.get方法) </span></span><br><span class="line">    mLooper = Looper::getForThread();</span><br><span class="line">    <span class="keyword">if</span> (mLooper == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">//创建native层的Looper</span></span><br><span class="line">        mLooper = <span class="keyword">new</span> Looper(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//保存Looper到TLS中(Looper::setForThread相当于java层的ThreadLocal.set方法)</span></span><br><span class="line">        Looper::setForThread(mLooper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在NativeMessageQueue的构造中会先调用Looper的getForThread方法从当前线程获取Looper对象，如果为空，就会创建一个Looper并调用Looper的setForThread方法设置给当前线程。</p><blockquote><p>关于TLS更多信息可以查看<a href="https://rain9155.github.io/2019/02/21/ThreadLocal解析" target="_blank" rel="noopener">ThreadLocal原理解析</a></p></blockquote><p>也就是说Looper和MessageQueue在java层和native层都有，但它们的功能并不是一一对应，此处native层的Looper与Java层的Looper没有任何的关系，只是在native层重实现了一套类似功能的逻辑，我们来看看native层在创建Looper时做了什么，<strong>Looper的构造函数</strong>如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//system/core/libutils/Looper.cpp</span></span><br><span class="line">Looper::Looper(<span class="keyword">bool</span> allowNonCallbacks) :</span><br><span class="line">        mAllowNonCallbacks(allowNonCallbacks), mSendingMessage(<span class="literal">false</span>),</span><br><span class="line">        mPolling(<span class="literal">false</span>), mEpollFd(<span class="number">-1</span>), mEpollRebuildRequired(<span class="literal">false</span>),</span><br><span class="line">        mNextRequestSeq(<span class="number">0</span>), mResponseIndex(<span class="number">0</span>), mNextMessageUptime(LLONG_MAX) &#123;</span><br><span class="line">    <span class="comment">//1、构造唤醒事件的fd（文件描述符）</span></span><br><span class="line">    mWakeEventFd = eventfd(<span class="number">0</span>, EFD_NONBLOCK | EFD_CLOEXEC);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//2、重建epoll事件</span></span><br><span class="line">    rebuildEpollLocked();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们忽略一大堆字段赋值，只关注字段<strong>mWakeEventFd</strong>和函数:<strong>rebuildEpollLocked()</strong>，mWakeEventFd就是用于<strong>唤醒线程的文件描述符</strong>，而rebuildEpollLocked方法就是用来重建epoll事件，建立起epoll机制，通过epoll机制监听各种文件描述符.</p><blockquote><p>文件描述符是什么？它就是一个int值，又叫做句柄，在Linux中，打开或新建一个文件，它会返回一个文件描述符，读写文件需要使用文件描述符来指定待读写的文件，所以文件描述符就是指代被打开的文件，所有对这个文件的IO操作都要通过文件描述符</p><p>但其实文件描述符也不仅仅是指代文件，它还有更多的含义，可以看后文的epoll机制解释。</p></blockquote><p><strong>rebuildEpollLocked</strong>方法的核心源码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//system/core/libutils/Looper.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Looper::rebuildEpollLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、关闭旧的管道</span></span><br><span class="line">    <span class="keyword">if</span> (mEpollFd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">close</span>(mEpollFd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、创建一个新的epoll文件描述符，并注册wake管道</span></span><br><span class="line">    mEpollFd = epoll_create(EPOLL_SIZE_HINT);<span class="comment">//EPOLL_SIZE_HINT为8</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">eventItem</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp; eventItem, <span class="number">0</span>, <span class="keyword">sizeof</span>(epoll_event)); <span class="comment">//置空eventItem</span></span><br><span class="line">    <span class="comment">//3、设置监听事件类型和需要监听的文件描述符</span></span><br><span class="line">    eventItem.events = EPOLLIN;<span class="comment">//监听可读事件（EPOLLIN）</span></span><br><span class="line">    eventItem.data.fd = mWakeEventFd;<span class="comment">//设置唤醒事件的fd（mWakeEventFd）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、将唤醒事件fd(mWakeEventFd)添加到epoll文件描述符(mEpollFd)，并监听唤醒事件fd(mWakeEventFd)</span></span><br><span class="line">    <span class="keyword">int</span> result = epoll_ctl(mEpollFd, EPOLL_CTL_ADD, mWakeEventFd, &amp; eventItem);   </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//5、将各种事件，如键盘、鼠标等事件的fd添加到epoll文件描述符(mEpollFd)，进行监听</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; mRequests.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> Request&amp; request = mRequests.valueAt(i);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">eventItem</span>;</span></span><br><span class="line">        request.initEventItem(&amp;eventItem);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> epollResult = epoll_ctl(mEpollFd, EPOLL_CTL_ADD, request.fd, &amp; eventItem);</span><br><span class="line">        <span class="keyword">if</span> (epollResult &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            ALOGE(<span class="string">"Error adding epoll events for fd %d while rebuilding epoll set: %s"</span>,</span><br><span class="line">                  request.fd, strerror(errno));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Looper的构造函数中涉及到Linux的epoll机制，epoll机制是Linux<strong>最高效的I/O复用机制, 使用一个文件描述符管理多个描述符</strong>，这里简单介绍一下它的使用方法:</p><blockquote><p>epoll操作过程有3个方法，分别是:</p><p><strong>1、int epoll_create(int size)</strong>：用于创建一个epoll的文件描述符，创建的文件描述符可监听size个文件描述符;<br><strong>参数介绍</strong>：<br><strong>size</strong>：size是指监听的描述符个数</p><p><strong>2、int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)</strong>： 用于对需要监听的文件描述符fd执行op操作，比如将fd添加到epoll文件描述符epfd;<br><strong>参数介绍</strong>:<br><strong>epfd</strong>：是epoll_create()的返回值<br><strong>op</strong>：表示op操作，用三个宏来表示，分别为EPOLL_CTL_ADD(添加)、EPOLL_CTL_DEL(删除)和EPOLL_CTL_MOD(修改)<br><strong>fd</strong>：需要监听的文件描述符<br><strong>epoll_event</strong>：需要监听的事件，有4种类型的事件，分别为EPOLLIN(文件描述符可读)、EPOLLOUT(文件描述符可写), EPOLLERR(文件描述符错误)和EPOLLHUP(文件描述符断)</p><p><strong>3、int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout)</strong>： 等待事件的上报, 该函数返回需要处理的事件数目，如返回0表示已超时;<br><strong>参数介绍</strong>：<br><strong>epfd</strong>：等待epfd上的io事件，最多返回maxevents个事件<br><strong>events</strong>：用来从内核得到事件的集合<br><strong>maxevents</strong>：events数量，该maxevents值不能大于创建epoll_create()时的size<br><strong>timeout</strong>：超时时间（毫秒，0会立即返回）</p><p>关于更多资料可以自行查找资料，有Linux基础的可以阅读<a href="http://gityuan.com/2019/01/06/linux-epoll/" target="_blank" rel="noopener">源码解读epoll内核机制</a> </p></blockquote><p>要了解epoll机制，首先要知道，在Linux中，<strong>文件、socket、管道(pipe)</strong>等可以进行IO操作的对象都可以称之为流，既然是IO流，那肯定会有两端：read端和write端，我们可以创建两个文件描述符wiretFd和readFd，对应read端和write端，当流中没有数据时，读线程就会阻塞(休眠)等待，当写线程通过wiretFd往流的wiret端写入数据后，readFd对应的read端就会感应到，唤醒读线程读取数据，大概就是这样的一个读写过程，读线程进入阻塞后，并不会消耗CPU时间，这是epoll机制高效的原因之一。</p><p>说了一大堆，我们再回到rebuildEpollLocked方法，rebuildEpollLocked方法中使用了epoll机制，在Linux中，线程之间的通信一般是通过<strong>管道(pipe)</strong>，在rebuildEpollLocked方法中，首先通过<strong>epoll_create</strong>方法创建一个epoll专用文件描述符(mEpollFd)，同时<strong>创建了一个管道</strong>，然后设置监听可读事件类型（EPOLLIN），最后通过<strong>epoll_ctl</strong>方法把Looper对象中的唤醒事件的文件描述符（mWakeEventFd）添加到epoll文件描述符的监控范围内，当mWakeEventFd那一端发生了写入，这时mWakeEventFd可读，就会被epoll监听到（<strong>epoll_wait</strong>方法返回），我们发现epoll文件描述符不仅监听了mWakeEventFd，它还监听了其他的如键盘、鼠标等事件的文件描述符，所以<strong>一个epoll文件描述符可以监听多个文件描述符</strong>。</p><p>至此，native层的MessageQueue和Looper就构建完毕，底层通过<strong>管道与epoll机制</strong>也建立了一套消息机制。</p><p>我们跟着MessageQueue#nativeInit()一路走下来，这里小结一下：</p><ul><li>1、首先java层的Looper对象会在构造函数中创建java层的MessageQueue对象;</li><li>2、 java层的MessageQueue对象又会调用nativeInit函数初始化native层的NativeMessageQueue，NativeMessageQueue的构造函数又会创建native层的Looper，并且在Looper中通过管道与epoll机制建立一套消息机制;</li><li>3、native层构建完毕，将NativeMessageQueue对象转换为一个long类型存储到java层的MessageQueue的mPtr中。</li></ul><h3 id="2、nativePollOnce"><a href="#2、nativePollOnce" class="headerlink" title="2、nativePollOnce()"></a>2、nativePollOnce()</h3><p>在native层通过epoll机制也建立了一套消息机制后，java层的消息循环也就创建好，在此之后就会在java层中启动消息循环，<strong>Looper.loop -&gt; MessageQueue.next</strong>，在java层中每次循环去读消息时，都会调用MessageQueue的next函数，如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MessageQueue.java</span></span><br><span class="line"> <span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line"> <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">  nativePollOnce(ptr, nextPollTimeoutMillis);</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>next方法返回一个Message，没有消息时，会调用nativePollOnce方法进入阻塞，nativePollOnce方法的实现在android_os_MessageQueue.cpp文件中的<strong>android_os_MessageQueue_nativePollOnce</strong>方法中，该方法的源码如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//frameworks/base/core/jni/android_os_MessageQueue.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">android_os_MessageQueue_nativePollOnce</span><span class="params">(JNIEnv* env, jobject obj,</span></span></span><br><span class="line"><span class="function"><span class="params">        jlong ptr, jint timeoutMillis)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//把ptr强转为NativeMessageQueue</span></span><br><span class="line">    NativeMessageQueue* nativeMessageQueue = <span class="keyword">reinterpret_cast</span>&lt;NativeMessageQueue*&gt;(ptr);</span><br><span class="line">    nativeMessageQueue-&gt;pollOnce(env, obj, timeoutMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ptr是从java层传过来的mPtr的值，mPtr在初始化时保存了NativeMessageQueue的指针，此时首先把传递进来的ptr转换为NativeMessageQueue，然后调用<strong>NativeMessageQueue的pollOnce</strong>函数，该函数核心源码如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//frameworks/base/core/jni/android_os_MessageQueue.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NativeMessageQueue::pollOnce</span><span class="params">(JNIEnv* env, jobject pollObj, <span class="keyword">int</span> timeoutMillis)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//核心是调用了native层的Looper的pollOnce方法</span></span><br><span class="line">    mLooper-&gt;pollOnce(timeoutMillis);  </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NativeMessageQueue是一个代理类，所以它把逻辑转交给Looper，这段代码主要就是调用了native层的Looper的<strong>pollOnce(timeoutMillis)</strong>方法，该方法定义在Looper.h文件中，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//system/core/libutils/Looper.h</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pollOnce</span><span class="params">(<span class="keyword">int</span> timeoutMillis)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用了带4个参数的pollOnce方法</span></span><br><span class="line">    <span class="keyword">return</span> pollOnce(timeoutMillis, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> pollOnce(timeoutMillis)方法会调用Looper的<strong>polOnce(timeoutMillis, NULL, NULL, NULL)</strong>，该方法的实现在Looper.cpp文件中，如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//system/core/libutils/Looper.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Looper::pollOnce</span><span class="params">(<span class="keyword">int</span> timeoutMillis, <span class="keyword">int</span>* outFd, <span class="keyword">int</span>* outEvents, <span class="keyword">void</span>** outData)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//一个死循环</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//当result不等于0时，就会跳出循环，返回到java层</span></span><br><span class="line">        <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理内部轮询</span></span><br><span class="line">        result = pollInner(timeoutMillis);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法内部是一个死循环，核心在于调用了<strong>pollInner</strong>方法，pollInner方法返回一个int值result，代表着本次轮询是否成功处理了消息，当result不等于0时，就会跳出循环，<strong>返回到java层继续处理java层消息</strong>，result有以下4种取值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> &#123;</span><br><span class="line">    <span class="comment">//表示Looper的wake方法被调用，即管道的写端的write事件触发</span></span><br><span class="line">    POLL_WAKE = -<span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表示某个被监听fd被触发。</span></span><br><span class="line">    POLL_CALLBACK = -<span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表示等待超时</span></span><br><span class="line">    POLL_TIMEOUT = -<span class="number">3</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//表示等待期间发生错误</span></span><br><span class="line">    POLL_ERROR = -<span class="number">4</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们接着来看<strong>pollInner</strong>方法，如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//system/core/libutils/Looper.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Looper::pollInner</span><span class="params">(<span class="keyword">int</span> timeoutMillis)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//timeoutMillis等于-1，并且mNextMessageUptime不等于LLONG_MAX</span></span><br><span class="line">    <span class="comment">//这说明java层没有消息但是native层有消息处理，这时在epoll_wait中，线程不能因为timeoutMillis等于-1而进入休眠，它还需要处理native层消息</span></span><br><span class="line">    <span class="comment">//所以这里会根据mNextMessageUptime把timeoutMillis更新为大于0的值</span></span><br><span class="line">    <span class="keyword">if</span> (timeoutMillis != <span class="number">0</span> &amp;&amp; mNextMessageUptime != LLONG_MAX) &#123;</span><br><span class="line">        <span class="keyword">nsecs_t</span> now = systemTime(SYSTEM_TIME_MONOTONIC);</span><br><span class="line">        <span class="keyword">int</span> messageTimeoutMillis = toMillisecondTimeoutDelay(now, mNextMessageUptime);</span><br><span class="line">        <span class="keyword">if</span> (messageTimeoutMillis &gt;= <span class="number">0</span></span><br><span class="line">                &amp;&amp; (timeoutMillis &lt; <span class="number">0</span> || messageTimeoutMillis &lt; timeoutMillis)) &#123;</span><br><span class="line">            <span class="comment">//更新timeoutMillis为大于0的值，这个大于0的值就是需要等待多久后，才会到达native层消息的执行时间，等待timeoutMillis后，epoll_wait就会返回处理native层消息</span></span><br><span class="line">            timeoutMillis = messageTimeoutMillis;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> result = POLL_WAKE;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//事件集合(eventItems)，EPOLL_MAX_EVENTS为最大事件数量，它的值为16</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">eventItems</span>[<span class="title">EPOLL_MAX_EVENTS</span>];</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1、等待事件发生或者超时(timeoutMillis)，如果有事件发生，就从管道中读取事件放入事件集合(eventItems)返回，如果没有事件发生，进入休眠等待，如果timeoutMillis时间后还没有被唤醒，就会返回</span></span><br><span class="line">    <span class="keyword">int</span> eventCount = epoll_wait(mEpollFd, eventItems, EPOLL_MAX_EVENTS, timeoutMillis);  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取锁</span></span><br><span class="line">    mLock.lock();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...省略的逻辑是：如果eventCount &lt;= 0 都会直接跳转到Done:;标记的代码段</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、遍历事件集合（eventItems），检测哪一个文件描述符发生了IO事件</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; eventCount; i++) &#123;</span><br><span class="line">        <span class="comment">//取出文件描述符</span></span><br><span class="line">        <span class="keyword">int</span> fd = eventItems[i].data.fd;</span><br><span class="line">        <span class="comment">//取出事件类型</span></span><br><span class="line">        <span class="keyword">uint32_t</span> epollEvents = eventItems[i].events;</span><br><span class="line">        <span class="keyword">if</span> (fd == mWakeEventFd) &#123;<span class="comment">//如果文件描述符为mWakeEventFd</span></span><br><span class="line">            <span class="keyword">if</span> (epollEvents &amp; EPOLLIN) &#123;<span class="comment">//并且事件类型为EPOLLIN（可读事件）</span></span><br><span class="line">                <span class="comment">//这说明当前线程关联的管道的另外一端写入了新数据</span></span><br><span class="line">                <span class="comment">//调用awoken方法不断的读取管道数据，直到清空管道</span></span><br><span class="line">                awoken();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ALOGW(<span class="string">"Ignoring unexpected epoll events 0x%x on wake event fd."</span>, epollEvents);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果是其他文件描述符，就进行它们自己的处理逻辑</span></span><br><span class="line">           <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2、下面是处理Native的Message</span></span><br><span class="line">    Done:;</span><br><span class="line">    <span class="comment">//mNextMessageUptime如果没有值，会被赋值成LLONG_MAX，但是如果mNextMessageUptime已经有值，它还是保持原来的值</span></span><br><span class="line">    mNextMessageUptime = LLONG_MAX;</span><br><span class="line">    <span class="comment">//mMessageEnvelopes是一个Vector集合，它代表着native中的消息队列</span></span><br><span class="line">    <span class="keyword">while</span> (mMessageEnvelopes.<span class="built_in">size</span>() != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">nsecs_t</span> now = systemTime(SYSTEM_TIME_MONOTONIC);</span><br><span class="line">        <span class="comment">//取出MessageEnvelope，MessageEnvelop有收件人Hanlder和消息内容Message</span></span><br><span class="line">        <span class="keyword">const</span> MessageEnvelope&amp; messageEnvelope = mMessageEnvelopes.itemAt(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//判断消息的执行时间</span></span><br><span class="line">        <span class="keyword">if</span> (messageEnvelope.uptime &lt;= now) &#123;<span class="comment">//消息到达执行时间</span></span><br><span class="line">            &#123;</span><br><span class="line">            <span class="comment">//获取native层的Handler</span></span><br><span class="line">                sp&lt;MessageHandler&gt; handler = messageEnvelope.handler;</span><br><span class="line">                <span class="comment">//获取native层的消息</span></span><br><span class="line">                Message message = messageEnvelope.message;</span><br><span class="line">                mMessageEnvelopes.removeAt(<span class="number">0</span>);</span><br><span class="line">                mSendingMessage = <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">//释放锁</span></span><br><span class="line">                mLock.unlock();</span><br><span class="line">                <span class="comment">//通过MessageHandler的handleMessage方法处理native层的消息</span></span><br><span class="line">                handler-&gt;handleMessage(message);</span><br><span class="line">            &#125;</span><br><span class="line">            mLock.lock();</span><br><span class="line">            mSendingMessage = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//result等于POLL_CALLBACK，表示某个监听事件被触发</span></span><br><span class="line">            result = POLL_CALLBACK;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//消息还没到执行时间</span></span><br><span class="line">            <span class="comment">//把消息的执行时间赋值给mNextMessageUptime</span></span><br><span class="line">            mNextMessageUptime = messageEnvelope.uptime;</span><br><span class="line">            <span class="comment">//跳出循环，进入下一次轮询</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放锁</span></span><br><span class="line">    mLock.unlock();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pollInner方法很长，省略了一大堆代码，这里讲解一些核心的点，pollInner实际上就是从管道中读取事件，并且处理这些事件，pollInner方法可分为3部分：</p><p><strong>1、执行epoll_wait方法，等待事件发生或者超时</strong></p><p>这里再次贴出epoll_wait方法的作用：</p><blockquote><p><strong>int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout)</strong>： 等待事件的上报, 该函数返回需要处理的事件数目，如返回0表示已超时;<br><strong>参数介绍</strong>：<br><strong>epfd</strong>：等待epfd上的io事件，最多返回maxevents个事件；<br><strong>events</strong>：用来从内核得到事件的集合；<br><strong>maxevents</strong>：events数量，该maxevents值不能大于创建epoll_create()时的size；<br><strong>timeout</strong>：超时时间（毫秒，0会立即返回）.</p></blockquote><p><strong>epoll_wait</strong>方法就是用来等待事件发生返回或者超时返回，它是一个阻塞方法， 如果<strong>epoll_create</strong>方法创建的epoll文件描述符（mEpollFd）所监听的任何事件发生，<strong>epoll_wait</strong>方法就会监听到，并把发生的事件从管道读取放入事件集合(eventItems)中，返回发生的事件数目eventCount，如果没有事件，epoll_wait方法就会让当前线程进入<strong>休眠</strong>，如果休眠timeout后还没有其他线程写入事件<strong>唤醒</strong>，就会返回，而此时返回的eventCount == 0，表示已经超时，timeout就是从java层一直传过来的<strong>nextPollTimeoutMillis</strong>，它的含义和nextPollTimeoutMillis一样，当timeout == -1时，表示native层的消息队列中没有消息，会一直等待下去，直到被唤醒，当timeout = 0时或到达timeout 时，它会立即返回。</p><p>我们发现epoll机制只会把<strong>发生了的事件</strong>放入事件集合中，这样线程对事件集合的每一个事件的相应IO操作都有意义，这也是epoll机制高效的原因之一。</p><p><strong>2、遍历事件集合（eventItems），检测哪一个文件描述符发生了IO事件</strong></p><p>遍历事件集合中，如果是<strong>mWakeEventFd</strong>，就调用awoken方法不断的读取管道数据，直到清空管道，如果是其他的文件描述符发生了IO事件，让它们自己处理相应逻辑。</p><p><strong>3、处理native层的Message</strong></p><p>只要epoll_wait方法返回后，都会进入<strong>Done标记位</strong>的代码段,  就开始处理处理native层的Message,  在此之前先讲解一下<strong>MessageEnvelope</strong>，正如其名字，信封，其结构体定义在Looper.h中，如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//system/core/libutils/Looper.h</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Looper</span> :</span> <span class="keyword">public</span> RefBase &#123; </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MessageEnvelope</span> &#123;</span></span><br><span class="line">        MessageEnvelope() : uptime(<span class="number">0</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">        MessageEnvelope(<span class="keyword">nsecs_t</span> u, <span class="keyword">const</span> sp&lt;MessageHandler&gt; h, <span class="keyword">const</span> Message&amp; m) : uptime(u), handler(h), message(m) &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">nsecs_t</span> uptime;</span><br><span class="line">        <span class="comment">//收信人handler</span></span><br><span class="line">        sp&lt;MessageHandler&gt; handler;</span><br><span class="line">        <span class="comment">//信息内容message</span></span><br><span class="line">        Message message;</span><br><span class="line">    &#125;;   </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MessageEnvelope里面记录着收信人（handler，<strong>MessageHandler</strong>类型，是一个消息处理类），发信时间(uptime)，信件内容(message，<strong>Message</strong>类型)，Message结构体，消息处理类MessageHandler都定义在Looper.h文件中,  在java层中，消息队列是一个<strong>链表</strong>，在native层中，消息队列是一个C++的<strong>Vector向量</strong>，Vector存放的是MessageEnvelope元素，接下来就进入一个while循环，里面会判断消息是否达到执行时间，如果到达执行时间，就会取出信封中的<strong>MessageHandler</strong>和<strong>Message</strong>，把Message交给MessageHandler的<strong>handlerMessage</strong>方法处理；如果没有到达执行时间，就会更新<strong>mNextMessageUptime</strong>为消息的执行时间，这样在下一次<strong>轮询</strong>时，如果由于java层没有消息导致timeoutMillis等于-1，就会根据mNextMessageUptime更新timeoutMillis为需要等待执行的时间，超时后返回继续处理native层消息队列的头部信息。</p><p>我们跟着MessageQueue#nativePollOnce()一路走下来，小结一下：</p><ul><li>1、当在java层通过Looper启动消息循环后，就会走到MessageQueue的nativePollOnce方法，在该方法native实现中，会把保存在java层的mPtr再转换为NativeMessageQueue；</li><li>2、然后调用NativeMessageQueue的pollOnce方法，该方法中最终会调用native层的Looper的pollInner方法，Looper的pollInner方法是阻塞方法，等从管道取到事件或超时就会返回，并通过native层的Handler处理native层的Message消息；</li><li>3、处理完native层消息后，又会返回到java层处理java层的消息，这俩个层次的消息都通过java层的Looper消息循环进行不断的获取，处理等操作.</li></ul><p>可以看到，native层的NativeMessageQueue实际上并没有做什么实际工作，只是把操作转发给native层的Looper，而native层的Looper则扮演了java层的Handle角色，它可以取出，发送，处理消息，</p><h3 id="3、nativeWake"><a href="#3、nativeWake" class="headerlink" title="3、nativeWake()"></a>3、nativeWake()</h3><p>我们在Java层通过Hanlder发送消息时，实际是把消息添加到消息队列，<strong>Handler.sendXX -&gt; Handler.enqueueMessage -&gt; MessageQueuue.enqueueMessage</strong>，最终会调用到MessageQueue的enqueueMessage方法,，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MessageQueue.java</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">            nativeWake(mPtr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法中如果需要进行唤醒MessageQueuue的话，都会调用到nativeWake方法,，MessageQueue的nativeWake方法的实现在android_os_MessageQueue.cpp文件中的<strong>android_os_MessageQueue_nativeWake</strong>方法中，该方法的源码如下:<br> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//frameworks/base/core/jni/android_os_MessageQueue.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">android_os_MessageQueue_nativeWake</span><span class="params">(JNIEnv* env, jclass clazz, jlong ptr)</span> </span>&#123;</span><br><span class="line">    NativeMessageQueue* nativeMessageQueue = <span class="keyword">reinterpret_cast</span>&lt;NativeMessageQueue*&gt;(ptr);</span><br><span class="line">    nativeMessageQueue-&gt;wake();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>首先把传递进来的ptr转换为NativeMessageQueue，然后调用<strong>NativeMessageQueue的wake</strong>函数，该函数源码如下:<br> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//frameworks/base/core/jni/android_os_MessageQueue.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NativeMessageQueue::wake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mLooper-&gt;wake();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>前面说过在native层中NativeMessageQueue只是一个代理Looper的角色，该方法把操作转发给native层的Looper，<strong>Looper的wake</strong>方法核心源码如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//system/core/libutils/Looper.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Looper::wake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> inc = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//使用write函数通过mWakeEventFd往管道写入字符inc</span></span><br><span class="line">    <span class="keyword">ssize_t</span> nWrite = TEMP_FAILURE_RETRY(<span class="built_in">write</span>(mWakeEventFd, &amp;inc, <span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>)));</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Looper的wake方法其实是<strong>使用write函数通过mWakeEventFd往管道写入字符inc</strong>，其中TEMP_FAILURE_RETRY 是一个宏定义， 当执行write方法失败后，会不断重复执行，直到执行成功为止，在<strong>nativeinit</strong>中，我们已经通过<strong>epoll_create</strong>方法监听了mWakeEventFd的可读事件，当mWakeEventFd可读时，epoll文件描述符就会监听到，这时<strong>epoll_wait</strong>方法就会从管道中读取事件返回，返回后就执行消息处理逻辑，所以这里的往管道写入字符inc，其实起到一个<strong>通知的作用</strong>，告诉监听的线程有消息插入了消息队列了，快点<strong>醒过来</strong>(因为进入了休眠状态)处理一下。</p><p>我们跟着MessageQueue#nativeWake一路走下来，小结一下：</p><ul><li>1、在java层插入消息到消息队列后，就会根据需要判断是否要调用nativeWake方法，如果调用，就转到2。</li><li>2、在nativeWake方法native实现中，会把保存在java层的mPtr再转换为NativeMessageQueue，然后调用NativeMessageQueue的wake方法，最终调用Looper的wake方法。</li><li>3、前面讲到Looper::pollInner方法是一个阻塞操作，当管道中没有事件时当前线程就会进入休眠等待，当管道有事件就会立即返回，从管道中读取事件并处理，而Looper::wake方法就是一个唤醒操作，它就是通过前面创建的唤醒事件文件描述符mWakeEventFd来往管道中写入内容，这时另外等待管道事件的线程就会被唤醒处理事件。</li></ul><h3 id="4、小结"><a href="#4、小结" class="headerlink" title="4、小结"></a>4、小结</h3><p>1、在创建java层的MessageQueue对象同时会在构造中调用<strong>nativeInit</strong>方法创建native层的NativeMessageQueue，在创建NativeMessageQueue同时会在构造中创建native层的Looper对象，并把它保存到TLS区域中，然后返回NativeMessageQueue的指针给java层的<strong>mPtr</strong>保存；</p><p>2、在创建Looper时会在构造中通过管道与epoll机制建立一套native层的消息机制，它首先创建一个唤醒文件描述符<strong>mWakeEventFd</strong>，然后使用epoll_create方法创建一个epoll文件描述符<strong>mEpollFd和管道</strong>，然后使用epoll_ctl把mWakeEventFd添加到mEpollFd的监控范围内；</p><p>3、当java层使用Handler发送消息时，会把消息插入到消息队列中，然后根据情况调用<strong>nativeWake</strong>方法唤醒阻塞线程，nativeWake方法会调用到native层的Looper的wake方法，里面会通过mWakeEventFd往管道中写入一个字符，唤醒阻塞线程处理消息；</p><p>4、当java层使用Looper的loop方法取消息时，如果没有消息，调用<strong>nativePollOnce方法</strong>进入阻塞状态，这时nativePollOnce方法会调用到native层的Looper的pollInner方法，里面会使用epoll_wait等待事件发生或超时，当mEpollFd监听的<strong>任何文件描述符（包括mWakeEventFd）</strong>的相应IO事件发生时，epoll_wait方法就会返回，返回就会通过native层的MessageHandler处理native层的Message，处理完native层消息后，再返回处理java层的消息。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java层和Native层的MessageQueue通过JNI建立关联，从而使得MessageQueue成为Java层和Native层的枢纽，既能处理上层消息，也能处理native层消息，而Handler/Looper/Message这三大类在Java层与Native层之间没有任何的关联，只是分别在Java层和Native层的消息模型中具有相似的功能，都是彼此独立的，各自实现相应的逻辑。</p><p>这里我们可以回答为什么java层的loop方法是死循环但却不会消耗性能这个问题：</p><p>因为java层的消息机制是依赖native层的消息机制来实现的，而native层的消息机制是通过Linux的<strong>管道和epoll机制</strong>实现的，epoll机制是一种高效的IO多路复用机制， 它使用一个文件描述符管理多个描述符，<strong>java层通过mPtr指针也就共享了native层的epoll机制的高效性</strong>，当loop方法中取不到消息时，便阻塞在MessageQueue的next方法，而next方法阻塞在nativePollOnce方法，nativePollOnce方法通过JNI调用进入到native层中去，最终nativePollOnce方法阻塞在<strong>epoll_wait</strong>方法中，epoll_wait方法会让当前线程释放CPU资源进入<strong>休眠状态</strong>，等到下一个消息到达(mWakeEventFd会往管道写入字符)或监听的其他事件发生时就会唤醒线程，然后处理消息，所以<strong>就算loop方法是死循环，当线程空闲时，它会进入休眠状态，不会消耗大量的CPU资源</strong>。</p><p>以上就是本文的所有内容，希望大家有所收获。</p><p>参考资料：</p><p><a href="https://www.cnblogs.com/muouren/p/11706457.html" target="_blank" rel="noopener">epoll、looper.loop主线程阻塞</a></p><p><a href="http://gityuan.com/2015/12/27/handler-message-native/" target="_blank" rel="noopener">Android消息机制2-Handler</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;上一篇文章：&lt;a href=&quot;https://rain9155.github.io/2019/02/21/Android%E6%
      
    
    </summary>
    
    
      <category term="消息机制" scheme="http://yoursite.com/categories/%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/"/>
    
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="handler" scheme="http://yoursite.com/tags/handler/"/>
    
      <category term="native" scheme="http://yoursite.com/tags/native/"/>
    
  </entry>
  
  <entry>
    <title>Android消息机制(java层)</title>
    <link href="http://yoursite.com/2019/02/21/Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6java%E5%B1%82/"/>
    <id>http://yoursite.com/2019/02/21/Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6java%E5%B1%82/</id>
    <published>2019-02-21T05:33:11.000Z</published>
    <updated>2023-01-07T10:44:48.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Android的消息机制用于<strong>同进程的线程间通信</strong>，它是由MessageQueue，Message，Looper，Handler共同组成，Android中大量的交互都是通过消息机制，比如四大组件启动过程与服务的交互、View的绘制、更新等都离不开消息机制，所以Android在某种意义上也可以说成是一个<strong>以消息驱动的系统</strong>，在Android中消息机制的运作分为java层和native层，它们之间的运作机制不一样，本文讲解的是java层的消息机制，如果你想了解native层的消息机制，可以阅读：</p><p><a href="http://rain9155.coding.me/2019/02/21/Android消息机制native层/" target="_blank" rel="noopener">Android消息机制(native层)</a></p><p>但其实java层的消息机制的核心功能都交给了native层的消息机制来完成，但作为应用开发，首先要掌握java层的消息机制。</p><blockquote><p>本文源码基于Android8.0，源码相关位置:<br>frameworks/base/core/java/android/os/<em>.java  (\</em>代表MessageQueue、Handler、Looper、Message)</p></blockquote><h2 id="消息机制概述"><a href="#消息机制概述" class="headerlink" title="消息机制概述"></a>消息机制概述</h2><p>Android应用的每个事件都会转化为一个系统消息即Message，消息中包含了事件的相关信息和消息的处理人即Handler，消息要通过Handler发送，最终被投递到一个消息队列中即MessageQueue，它维护了一个待处理的消息列表，然后通过Looper开启了一个消息循环不断地从这个队列中取出消息，当从消息队列取出一个消息后，Looper根据消息的处理人（target）将此消息分发给相应的Handle处理，整个过程如下图所示。</p><img src="/2019/02/21/Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6java%E5%B1%82/handler1.png" class=""><p>它们的工作原理就像工厂的生产线，Looper是发动机，MessageQueue是传送带，Handler是工人，Message则是待处理的产品。</p><h2 id="java层消息机制架构图"><a href="#java层消息机制架构图" class="headerlink" title="java层消息机制架构图"></a>java层消息机制架构图</h2><img src="/2019/02/21/Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6java%E5%B1%82/handler2.png" class=""><ul><li><strong>Looper</strong>  — 是每个线程的MessageQueue管家，里面有一个MessageQueue消息队列，负责把消息从MessageQueue中取出并把消息传递到Handler中去，每个线程只有一个Looper；</li><li><strong>MessageQueue</strong>  —  消息队列，有一组待处理的Message，主要用于存放所有通过Handler发送的消息，每个线程只有一个MessageQueue；</li><li><strong>Message</strong>  —  是线程之间传递的消息，里面有一个用于处理消息的Handler；</li><li><strong>Handler</strong>  —  主要用于发送和处理消息，里面有Looper和MessageQueue。</li></ul><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>在开发中，我们在子线程中执行完操作后通常需要更新UI，但我们都知道不能在子线程中更新UI，此时我们就要通过Handler将一个消息post到UI线程中，然后再在Handler中的handleMessage方法中进行处理，如果我们不传递UI线程所属的Looper去创建Handler，那么该Handler必须在主线程中创建，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在主线程中创建Handler </span></span><br><span class="line">Handler mHandler = <span class="keyword">new</span> Handler（）&#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span>&#123;</span><br><span class="line">    <span class="comment">//更新UI</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在子线程中进行耗时操作</span></span><br><span class="line"><span class="keyword">new</span> Thread（）&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">mHandler.sendEmptyMessage(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是我们平时使用Handler的常规用法了。</p><p>接下来我们以应用主线程(又叫做UI线程)的消息机制运作为例讲解Android消息机制的原理。</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="1、-Looper的创建"><a href="#1、-Looper的创建" class="headerlink" title="1、 Looper的创建"></a>1、 Looper的创建</h3><p>我们知道Android应用程序的入口实际上是ActivityThread.main方法，而应用的消息循环也是在这个方法中创建，具体源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ActivityThread.java </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="comment">//1、创建消息循环Looper</span></span><br><span class="line">  Looper.prepareMainLooper();</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="comment">//2、执行消息循环</span></span><br><span class="line">  Looper.loop();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>我们关注注释1，ActivityThread调用了Looper的prepareMainLooper方法来创建Looper实例，Looper的prepareMainLooper方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Looper.java </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、创建不允许退出的Looper</span></span><br><span class="line">    prepare(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">synchronized</span> (Looper<span class="class">.<span class="keyword">class</span>) </span>&#123;<span class="comment">//保证只有一个线程执行</span></span><br><span class="line">        <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2、将刚刚创建的Looper实例赋值给sMainLooper</span></span><br><span class="line">        <span class="comment">//sMainLooper字段是Looper类中专门为UI线程保留的，只要某个线程调用了prepareMainLooper方法，把它创建的Looper实例赋值给sMainLooper，它就可以成为UI线程，prepareMainLooper方法只允许执行一次</span></span><br><span class="line">        sMainLooper = myLooper();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span></span>&#123;<span class="comment">//quitAllowed表示是否允许Looper运行时退出</span></span><br><span class="line"><span class="comment">//Looper.prepare()只能执行一次</span></span><br><span class="line"><span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>); </span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//把Looper保存到TLS中</span></span><br><span class="line">sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@Nullable</span> <span class="function">Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//获取当前线程TLS区域的Looper</span></span><br><span class="line"><span class="keyword">return</span> sThreadLocal.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Looper sMainLooper;  <span class="comment">// guarded by Looper.class</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;Looper&gt;();</span><br></pre></td></tr></table></figure><p>线程在调用prepareMainLooper方法后，就代表它成为了一个UI线程，可以看到prepareMainLooper方法中是调用Looper的<strong>prepare方法</strong>来创建Looper实例，当要获取创建的Looper实例时，是通过Looper的<strong>myLooper</strong>方法来获取的，在调用prepare方法时，会把创建的Looper实例set到<strong>ThreadLocal</strong>中，当获取时也会从<strong>ThreadLocal</strong>中通过get方法获取，那么ThreadLocal是什么？这里简单介绍一下ThreadLocal：</p><blockquote><p><strong>ThreadLocal</strong>：线程本地存储区（Thread Local Storage，简称为TLS），每 个线程都有自己的私有的本地存储区域，不同线程之间彼此不能访问对方的TLS区域。</p><p><strong>它的常用操作方法有</strong>：<br>ThreadLocal.set(T value)：将value存储到当前线程的TLS区域。<br>ThreadLocal.get()：获取当前线程TLS区域的数据</p><p>关于ThreadLocal更多信息可以查看<a href="https://rain9155.github.io/2019/02/21/ThreadLocal解析" target="_blank" rel="noopener">ThreadLocal原理解析</a>.</p></blockquote><p>ThreadLocal的get()和set()方法操作的类型都是泛型，我们从ThreadLocal在Looper中的定义可以看出，sThreadLocal的get()和set()操作的类型都是Looper类型,  所以，由于ThreadLocal的作用，<strong>每个线程只能保存一个Looper，不同线程的Looper是不相同的</strong>，这样，通过调用<strong>Looper.prepare(false)</strong>方法，UI线程中就保存了它<strong>对应的、唯一的</strong>Looper实例，当在UI线程调用<strong>Looper.myLooper</strong>方法时它就会返回UI线程关联的Looper实例，当然，如果你在子线程中想要获得UI线程关联的Looper实例，就需要调用<strong>getMainLooper</strong>方法，该方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Looper <span class="title">getMainLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (Looper<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//返回UI线程的Looper实例</span></span><br><span class="line">        <span class="keyword">return</span> sMainLooper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是UI线程的Looper的创建过程，执行ActivityThread.main后，应用程序就启动了，UI的消息循环也在Looper.loop方法中启动，此后Looper会一直从消息队列中取出消息，用户或系统通过Handler不断往消息队列中添加消息，这些消息不断的被取出，处理，回收，使得应用运转起来。</p><p>我们在平时开发时，一般是使用<strong>不带参数的prepare()方法</strong>来创建子线程对应的Looper实例，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我们平时使用的prepare方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//quitAllowed = true</span></span><br><span class="line">    prepare(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和UI线程的区别是，UI线程的Looper是不允许推出的，而我们的Looper一般是允许退出的。</p><h3 id="2、MessageQueue的创建"><a href="#2、MessageQueue的创建" class="headerlink" title="2、MessageQueue的创建"></a>2、MessageQueue的创建</h3><p>我们在上面知道，调用Looper的prepare方法就会创建Looper实例，同时会把Looper实例通过ThreadLocal保存到线程中，在创建Looper时还会同时在构造中创建<strong>MessageQueue</strong>实例，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Looper.java</span></span><br><span class="line"><span class="keyword">final</span> MessageQueue mQueue;</span><br><span class="line"><span class="comment">//Looper唯一的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//可以看到MessageQueue是在Looper中创建的</span></span><br><span class="line">    mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</span><br><span class="line">    mThread = Thread.currentThread();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Looper只有这一个构造函数，并且它是私有的，所以我们只能通过Looper的prepare方法创建Looper实例，由于ThreadLocal，每个线程最多只能对应一个Looper实例，而每个Looper内部只有一个MessageQueue实例，推出：<strong>每个线程最多对应一个MessageQueue实例</strong>。</p><p>我们看一下MessageQueue的构造，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MessageQueue.java</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> mPtr; <span class="comment">// used by native code</span></span><br><span class="line">MessageQueue(<span class="keyword">boolean</span> quitAllowed) &#123;</span><br><span class="line">    mQuitAllowed = quitAllowed;</span><br><span class="line">    <span class="comment">//通过native方法初始化消息队列，其中mPtr是供native代码使用</span></span><br><span class="line">    mPtr = nativeInit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MessageQueue的构造中会通过native方法在<strong>native层</strong>创建一个属于native层的消息队列NativeMessageQueue，然后把NativeMessageQueue的地址返回给<strong>java层</strong>保存在<strong>mPtr</strong>中，java层和native层之间的通信就通过这个<strong>mPtr</strong>指针。</p><blockquote><p>MessageQueue是消息机制的核心类，它是java层和native层的连接纽带，它里面有大量的native方法，Android有俩套消息机制（java层和native层，实现不一样），但本文只讲解java层的消息机制，不会涉及到native层.</p><p>关于native层的查看<a href="http://rain9155.coding.me/2019/02/21/Android消息机制native层/" target="_blank" rel="noopener">Android消息机制（native层）</a></p></blockquote><p>我们通过Looper的<strong>myQueue</strong>方法就能获取到它关联的MessageQueue实例，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Looper.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@NonNull</span> <span class="function">MessageQueue <span class="title">myQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//先通过TLS获取Looper实例，再从对应的Looper中获取MessageQueue实例</span></span><br><span class="line">    <span class="keyword">return</span> myLooper().mQueue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、消息循环的运行"><a href="#3、消息循环的运行" class="headerlink" title="3、消息循环的运行"></a>3、消息循环的运行</h3><p>在ActivityThread的mian方法在创建Looper后，通过<strong>Looper.loop</strong>方法就启动了消息循环，这个函数会不断的从MessageQueue中取出消息、处理消息，我们点进此方法看一下它的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Looper.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">final</span> Looper me = myLooper();</span><br><span class="line">    <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从Looper中取出MessageQueue</span></span><br><span class="line">    <span class="keyword">final</span> MessageQueue queue = me.mQueue;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">//1、从MessageQueue中取出消息，没有消息时会阻塞等待</span></span><br><span class="line">        Message msg = queue.next(); </span><br><span class="line">        <span class="comment">//next()返回了null，表示MessageQueue正在退出，即调用了Looper的quit或quitSafely方法</span></span><br><span class="line">        <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//2、分发消息</span></span><br><span class="line">        msg.target.dispatchMessage(msg);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//3、回收消息</span></span><br><span class="line">        msg.recycleUnchecked();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>loop()中是一个死循环，我们关注注释1，loop()会调用MessageQueue的<strong>next()</strong>来获取最新的消息，当没有消息时，next()会一直阻塞在那里，这也导致loop()阻塞，唯一跳出循环的条件是next()返回null，这时代表Looper的quit()或quitSafely()被调用，从而调用MessageQueue的quit()来通知消息队列退出，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Looper.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mQueue.quit(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//quitSafely和quit方法的区别是，quitSafely方法会等MessageQueue中所有的消息处理完后才退出，而quit会直接退出</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quitSafely</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mQueue.quit(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以MessageQueue的<strong>next()</strong>是最关键的函数，我们来看看next函数的关键代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MessageQueue.java</span></span><br><span class="line"><span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//mPtr是在构造中被赋值，是指向native层的MessageQueue</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ptr = mPtr;</span><br><span class="line">    <span class="keyword">if</span> (ptr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pendingIdleHandlerCount = -<span class="number">1</span>; </span><br><span class="line">    <span class="keyword">int</span> nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//一个死循环，里面分为两部分，1、处理java层消息；2、如果没有消息处理，执行IdleHandler</span></span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Part1：获取java层的消息处理</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//nativePollOnce方法用于处理native层消息，是一个阻塞操作</span></span><br><span class="line">        <span class="comment">//它在这两种情况下返回：1、等待nextPollTimeoutMillis时长后；2、MessageQueue被唤醒</span></span><br><span class="line">        nativePollOnce(ptr, nextPollTimeoutMillis);</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</span><br><span class="line">            Message prevMsg = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//mMessages是java层的消息队列，这里表示取出消息队列的第一个消息</span></span><br><span class="line">            Message msg = mMessages;</span><br><span class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.target == <span class="keyword">null</span>) &#123;<span class="comment">//遇到同步屏障（target为null的消息）</span></span><br><span class="line">                <span class="comment">//在do-while中找到异步消息，优先处理异步消息</span></span><br><span class="line">                <span class="comment">//异步消息的isAsynchronous方法返回true</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    prevMsg = msg;</span><br><span class="line">                    msg = msg.next;</span><br><span class="line">                &#125; <span class="keyword">while</span> (msg != <span class="keyword">null</span> &amp;&amp; !msg.isAsynchronous());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;<span class="comment">//有消息</span></span><br><span class="line">                <span class="keyword">if</span> (now &lt; msg.when) &#123; <span class="comment">//消息还没到触发时间</span></span><br><span class="line">                    <span class="comment">//设置下一次轮询的超时时长（等待时长）</span></span><br><span class="line">                    nextPollTimeoutMillis = (<span class="keyword">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">//now == msg.when, 消息到达触发时间</span></span><br><span class="line">                    mBlocked = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="comment">//从mMessages的头部获取一条消息并返回 </span></span><br><span class="line">                    <span class="keyword">if</span> (prevMsg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        prevMsg.next = msg.next;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        mMessages = msg.next;</span><br><span class="line">                    &#125;</span><br><span class="line">                    msg.next = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">//设置消息的使用状态，即flags |= FLAG_IN_US</span></span><br><span class="line">                    msg.markInUse();</span><br><span class="line">                    <span class="comment">//返回这个消息</span></span><br><span class="line">                    <span class="keyword">return</span> msg;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//msg == null，没有消息</span></span><br><span class="line">                <span class="comment">//设置nextPollTimeoutMillis为-1，准备进入阻塞，等待MessageQueue被唤醒</span></span><br><span class="line">                nextPollTimeoutMillis = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//调用了quit方法</span></span><br><span class="line">            <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                dispose();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//当处于以下2种情况时，就会执行到Part2：</span></span><br><span class="line">            <span class="comment">//1、mMessages == null，java层没有消息处理</span></span><br><span class="line">            <span class="comment">//2、now &lt; msg.when，有消息处理，但是还没有到消息的执行时间</span></span><br><span class="line">            <span class="comment">//1、2两种情况都表明线程的消息队列处于空闲状态，处于空闲状态，就会执行IdleHandler</span></span><br><span class="line">            </span><br><span class="line">           <span class="comment">//Part2：没有消息处理，执行IdleHandler</span></span><br><span class="line">           <span class="comment">//mIdleHandlers表示IdleHandler列表</span></span><br><span class="line">           <span class="comment">//pendingIdleHandlerCount表示需要执行的IdleHandler的数量</span></span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (pendingIdleHandlerCount &lt; <span class="number">0</span></span><br><span class="line">                &amp;&amp; (mMessages == <span class="keyword">null</span> || now &lt; mMessages.when)) &#123;</span><br><span class="line">                pendingIdleHandlerCount = mIdleHandlers.size();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//没有IdleHandler需要处理，可直接进入阻塞</span></span><br><span class="line">                mBlocked = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">   <span class="comment">//有IdleHandler需要处理</span></span><br><span class="line">            <span class="keyword">if</span> (mPendingIdleHandlers == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mPendingIdleHandlers = <span class="keyword">new</span> IdleHandler[Math.max(pendingIdleHandlerCount, <span class="number">4</span>)];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//把mIdleHandlers列表转成mPendingIdleHandlers数组</span></span><br><span class="line">            mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历mPendingIdleHandlers数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</span><br><span class="line">            <span class="comment">//取出IdleHandler</span></span><br><span class="line">            <span class="keyword">final</span> IdleHandler idler = mPendingIdleHandlers[i];</span><br><span class="line">            mPendingIdleHandlers[i] = <span class="keyword">null</span>; <span class="comment">// release the reference to the handler</span></span><br><span class="line">            <span class="keyword">boolean</span> keep = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//执行IdleHandler的queueIdle方法，通过返回值由自己决定是否保持存活状态</span></span><br><span class="line">                keep = idler.queueIdle();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//...省略异常处理</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!keep) &#123;</span><br><span class="line">                <span class="comment">// 不需要存活，移除</span></span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                    mIdleHandlers.remove(idler);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//重置pendingIdleHandlerCount和nextPollTimeoutMillis为0</span></span><br><span class="line">        pendingIdleHandlerCount = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//nextPollTimeoutMillis为0，表示下一次循环会马上从Messages中取出一个Message判断是否到达执行时间</span></span><br><span class="line">        <span class="comment">//因为IdleHandler在处理事件的时间里，有可能有新的消息发送来过来，需要重新检查</span></span><br><span class="line">        nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MessageQueue的next方法有点长，但是它里面的逻辑是很好理解的，它主要是通过一个死循环不断的返回Message给Looper处理，next方法可以分为两部分阅读：</p><p><strong>1、获取java层的消息处理</strong>：</p><p>我们看Part1，先执行<strong>nativePollOnce</strong>方法，它是一个阻塞操作，其中nextPollTimeoutMillis代表下一次等待的超时时长，当nextPollTimeoutMillis = 0时或到达nextPollTimeoutMillis时，它会<strong>立即返回</strong>；当nextPollTimeoutMillis = -1时，表示MessageQueue中没有消息，会一直等待下去，直到Hanlder往消息队列投递消息，执行<strong>nativeWake</strong>方法后，MessageQueue被唤醒，nativePollOnce就会返回，但它此时并<strong>不是立即</strong>返回，它会先处理完native层的消息后，再返回，然后获取java层的消息处理；</p><p>接着next方法就会从mMessages链表的表头中获取一个消息，首先判断它是否是同步屏障，同步屏障就是<strong>target为null</strong>的Message，如果遇到同步屏障，MessageQueue就会优先获取异步消息处理，异步消息就是<strong>优先级</strong>比同步消息高的消息，我们平时发送的就是同步消息，通过Message的<strong>setAsynchronous(true)</strong>可以把同步消息变成异步消息，不管是同步还是异步，都是Message，获取到Message后；</p><p>接着判断Message是否到达它的执行时间(<strong>if(now == msg.when)</strong>)，如果到达了执行时间，next方法就会返回这条消息给Looper处理，并将其从单链表中删除；如果还没有到达执行时间，就设置nextPollTimeoutMillis为下一次等待超时时长，等待下次再次取出判断，可以发现虽然MessageQueue叫消息队列，但它却不是用队列实现的，而是用链表实现的。</p><blockquote><p>通过MessageQueue的<strong>postSyncBarrier</strong>方法可以添加一个同步屏障，通过<strong>removeSyncBarrier</strong>方法可以移除相应的同步屏障，在Android，<strong>Choreographer机制</strong>中就使用到了异步消息，在View树绘制之前，会先往UI线程的MessageQueue添加一个同步屏障，拦截同步消息，然后发送一个异步消息，等待VSYN信号到来，触发View树绘制，这样就可以让绘制任务优先执行。</p></blockquote><p><strong>2、没有消息处理，遍历IdleHandler列表，执行IdleHandler的queueIdle方法</strong>：</p><p>IdleHandler是什么？IdleHandler是一个接口，它里面只有一个<strong>queueIdle</strong>方法，Idle是空闲的意思，在<strong>MessageQueue空闲</strong>的时候会执行IdleHandler的queueIdle方法，我们可以通过MessageQueue的<strong>addIdleHandler</strong>方法添加我们自定义的IdleHandler到mIdleHandlers列表中，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MessageQueue.java</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;IdleHandler&gt; mIdleHandlers = <span class="keyword">new</span> ArrayList&lt;IdleHandler&gt;(); </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addIdleHandler</span><span class="params">(@NonNull IdleHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    mIdleHandlers.add(handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MessageQueue空闲，就代表它处于以下两种情况：</p><p>(1) mMessages == null，消息队列中没有消息处理；</p><p>(2) now &lt; msg.when，有消息处理，但是还没有到消息的执行时间.</p><p>以上两种情况之一都会触发next方法遍历IdleHandler列表，执行IdleHandler的queueIdle方法的操作。</p><blockquote><p>在Android中，我们平时所说的线程空闲其实就是指线程的MessageQueue空闲，这时就可以执行我们添加的IdleHandler，例如在LeakCanary中，它通过添加IdleHandler，在UI线程空闲时执行内存泄漏的判断逻辑.</p></blockquote><h3 id="4、消息的发送"><a href="#4、消息的发送" class="headerlink" title="4、消息的发送"></a>4、消息的发送</h3><p>到这里UI线程已经启动了消息循环，那么消息从何而来？消息是由系统产生，然后通过Hanlder发送到MessageQueue中，Handler就是用来处理和发送消息的，应用程序的<strong>Handler</strong>在ActivityThread中被创建，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ActivityThread.java </span></span><br><span class="line"><span class="keyword">final</span> H mH = <span class="keyword">new</span> H();</span><br><span class="line"></span><br><span class="line"><span class="comment">//H定义如下，继承Hanldler</span></span><br><span class="line"><span class="comment">//里面定义了大量的字段，跟Activity的启动，Application的绑定等有关</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">H</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BIND_APPLICATION        = <span class="number">110</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXIT_APPLICATION        = <span class="number">111</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CREATE_SERVICE          = <span class="number">114</span>;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> BIND_APPLICATION:</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            <span class="keyword">case</span> EXIT_APPLICATION:</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            <span class="keyword">case</span> CREATE_SERVICE:</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>mH</strong>就是应用程序内部使用的Handler，我们外部是不可使用的，应用程序通过Handler往MessageQueue中投递消息，并通过Handler的handlerMessage方法处理消息，而我们在外部也可以使用自己创建的Handler往UI线程的MessageQueue投递消息。</p><p>既然Handle可以往MessageQueue中投递消息，这说明Handler<strong>要和相应的MessageQueue关联</strong>，我们看Handler的构造函数，Handler有两种构造函数：</p><p>一种是<strong>指定Callback</strong>的构造函数，Callback默认为null，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Handler.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(callback, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(<span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">null</span>, async);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//先通过TLS获取Looper实例，与Looper关联</span></span><br><span class="line">    mLooper = Looper.myLooper();</span><br><span class="line">    <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">            <span class="string">"Can't create handler inside thread "</span> + Thread.currentThread()</span><br><span class="line">            + <span class="string">" that has not called Looper.prepare()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过Looper获取MessageQueue，与MessageQueue关联</span></span><br><span class="line">    mQueue = mLooper.mQueue;</span><br><span class="line">    <span class="comment">//Callback的作用在消息的分发中会讲到</span></span><br><span class="line">    mCallback = callback;</span><br><span class="line">    mAsynchronous = async;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在构造中如果通过Looper.myLooper方法获取不到Looper，就会抛出“<strong>Can’t create handler inside threadxx that has not called Looper.prepare()</strong>”异常，所以如果我们在子线程中使用Handler的默认构造，没有先调用Looper.prepare方法就创建Handler的话，就会抛出上述异常，但是在UI线程中就不会，因为应用程序启动时就已经调用了Looper的prepareMainLooper方法，在该方法里面已经调用了prepare(false)方法创建了UI线程的Looper实例，无需我们再次调用Looper.prepare方法。</p><p>另外一种是<strong>指定Looper</strong>的构造函数(如果不指定，Looper默认从当前线程的TLS区域获取)，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Handler.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(looper, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Looper looper, Callback callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(looper, callback, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Looper looper, Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//与Looper关联</span></span><br><span class="line">    mLooper = looper;</span><br><span class="line">    <span class="comment">//通过Looper获取MessageQueue，与MessageQueue关联</span></span><br><span class="line">    mQueue = looper.mQueue;</span><br><span class="line">    mCallback = callback;</span><br><span class="line">    mAsynchronous = async;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不管哪一种构造函数，可以看到，在Handler的最终构造中都会和<strong>对应线程</strong>的Looper、MessageQueue关联，所以就算Hander在子线程创建，我们也可以通过: <strong>Handler = new Handler(Looper.getMainLooper)；</strong>把Handler关联上UI线程的Looper，并通过Looper关联上UI线程的MessageQueue，这样，就能把Handler运行在UI线程中。</p><p><strong>消息的发送</strong>可以通过handler的<strong>一系列post</strong>方法和<strong>一系列的send</strong>方法，一系列post方法最终通过一系列send方法来实现，一系列send方法最终通过<strong>enqueueMessage</strong>方法来发送消息，如下：</p><img src="/2019/02/21/Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6java%E5%B1%82/handler3.png" class="" title="handler3"><p>可以发现Handler所有发送消息的方法，最终都是调用<strong>Handler的enqueueMessag</strong>方法，该方法源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Handler.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">    msg.target = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (mAsynchronous) &#123;</span><br><span class="line">        msg.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该方法中，首先把Message的target字段设置为当前发送消息的Handler, 然后设置Message是否是异步消息，最后把所有逻辑交给<strong>MessageQueue的enqueueMessage</strong>方法，该方法的相应源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MessageQueue.java</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">//正在退出时，回收msg，加入到消息池</span></span><br><span class="line">        <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            msg.recycle();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        msg.markInUse();</span><br><span class="line">        msg.when = when;</span><br><span class="line">        <span class="keyword">boolean</span> needWake;</span><br><span class="line">        <span class="comment">//取mMessages链表头部的消息</span></span><br><span class="line">        Message p = mMessages;</span><br><span class="line">        <span class="comment">//满足以下2种情况之一就把msg插入到链表头部：</span></span><br><span class="line">        <span class="comment">//1、如果p为null，则代表mMessages没有消息</span></span><br><span class="line">        <span class="comment">//2、如果when == 0 或 when &lt; p.when, 则代表msg的触发时间是链表中最早的</span></span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">            msg.next = p;</span><br><span class="line">            mMessages = msg;</span><br><span class="line">            needWake = mBlocked;<span class="comment">//如果处于阻塞状态，需要唤醒</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//3、如果p != null且msg并不是最早触发的，就在链表中找一个位置把msg插进去</span></span><br><span class="line">            <span class="comment">//如果处于阻塞状态，并且链表头部是一个同步屏障，并且插入消息是最早的异步消息，需要唤醒</span></span><br><span class="line">            needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();            </span><br><span class="line">            Message prev;</span><br><span class="line">            <span class="comment">//下面是一个链表的插入操作, 将消息按时间顺序插入到mMessages中</span></span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                prev = p;</span><br><span class="line">                p = p.next；</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="comment">//如果在找到插入位置之前，发现了异步消息的存在，不需要唤醒</span></span><br><span class="line">                <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                    needWake = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            msg.next = p;</span><br><span class="line">            prev.next = msg;</span><br><span class="line">        &#125;   </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//nativeWake方法会唤醒当前线程的MessageQueue</span></span><br><span class="line">        <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">            nativeWake(mPtr);</span><br><span class="line">        &#125;     </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MessageQueue的enqueueMessage方法主要是一个链表的插入操作，返回true就代表插入成功，返回false就代表插入失败，它主要分为以下3种情况：</p><p><strong>1、插入链表头部</strong>：</p><p>mMessages是按照Message触发时间的先后顺序排列的，<strong>越早触发的排得越前</strong>，头部的消息是将要最早触发的消息，当有消息需要加入mMessages时，如果mMessages为空或这个消息是最早触发的，就会直接插入链表头部；</p><p><strong>2、插入链表的中间位置</strong>：</p><p>如果消息链表不为空并且插入的消息不是最早触发的，就会从链表头部开始遍历，直到找到消息应该插入的合适位置，以保证所有消息的时间顺序，这一个过程可以理解为<strong>插入排序</strong>；</p><p><strong>3、判断是否调用nativeWake方法</strong></p><p>最后，根据needWake是否为true，来决定是否调用<strong>nativeWake</strong>方法唤醒当前线程的MessageQueue，needWake默认为false，即不需要唤醒，needWake<strong>为true</strong>就代表此时处于以下2种情况：</p><p>（1）如果插入消息在链表头部并且mBlocked == true，表示此时<strong>nativePollOnce</strong>方法进入阻塞状态，等待被唤醒返回；</p><p>（2）如果插入消息在链表中间，消息链表的头部是一个同步屏障，同时插入的消息是链表中最早的异步消息，需要唤醒，即时处理异步消息。</p><h3 id="5、消息的分发"><a href="#5、消息的分发" class="headerlink" title="5、消息的分发"></a>5、消息的分发</h3><p>在消息循环的运行中，如果loop方法中MessageQueue的<strong>next方法返回了Message</strong>，那么就会执行到这一句：*<em>msg.target.dispatchMessage(msg)<br>*</em>；Looper会把这条消息交给该Message的target（Handler对象）来处理,  实际上是转了一圈，Handler把消息发送给MessageQueue，Looper又把这个消息给Handler处理，下面来看消息分发逻辑，dispatchMessage()源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Handler.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、检查msg的callback是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">        handleCallback(msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//2、Handler的mCallback是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3、我们平常处理消息的方法，该方法默认为空，Handler子类通过覆写该方法来完成具体的逻辑。</span></span><br><span class="line">        handleMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面代码量很少，分为3步：</p><p>1、检查msg.callback是否为空，不为空则执行” handleCallback(msg)”, 源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Handler.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleCallback</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">    message.callback.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>msg.callback其实是一个Runnable对象，当我们通过Handler来post一个Runnable消息时，它就不为空，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Handler.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(Runnable r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  sendMessageDelayed(getPostMessage(r), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把Runnable对象包装成Message对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Message <span class="title">getPostMessage</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">    Message m = Message.obtain();</span><br><span class="line">    m.callback = r;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在post(Runnable r)中，会把Runnable包装成Message对象，并把Runnable设置给Message的callback字段，然后发送此消息。</p><p>2、如果msg.callback为空，检查mCallback是否为空，mCallback是一个Callback接口，定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Handler.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们这样：<strong>Handler handler = new Handler(callback)</strong> 来创建Handler时, mCallback就不为空，它的意义是当我们不想派生Handler的子类重写handleMessage()来处理消息时，就可以通过Callback来实现。</p><p>3、如果mCallback为空，最后调用Handler的<strong>handleMessage</strong>方法来处理消息，这就是我们平时熟悉的处理消息的方法。</p><p>从1、2、3可以看出，在Handler中，处理消息的回调的优先级为：<strong>Message的Callback &gt; Handler的Callback &gt; Handler的handleMessage方法</strong>。</p><h3 id="6、消息的回收复用"><a href="#6、消息的回收复用" class="headerlink" title="6、消息的回收复用"></a>6、消息的回收复用</h3><p><strong>1、消息的复用</strong></p><p>前面多次提到了Message，当我们通过Handler的obtainMessage()或Message的obtain()获取一个Message对象时，系统并不是每次都new一个出来，而是先从消息池中（sPool）尝试获取一个Message。Handler的obtainMessage()最终是调用了Message的<strong>obtain()</strong>，Message的obtain方法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Message.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Message <span class="title">obtain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (sPoolSync) &#123;</span><br><span class="line">    <span class="comment">//从sPool头部取出一个Message对象返回，并把消息从链表断开（即把sPool指向下一个Message）</span></span><br><span class="line">            <span class="keyword">if</span> (sPool != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Message m = sPool;</span><br><span class="line">                sPool = m.next;</span><br><span class="line">                m.next = <span class="keyword">null</span>;</span><br><span class="line">                m.flags = <span class="number">0</span>;<span class="comment">//清除in-use flag</span></span><br><span class="line">                sPoolSize--;<span class="comment">//消息池的大小进行减1操作</span></span><br><span class="line">                <span class="keyword">return</span> m;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//消息池中没有Message，直接new一个返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Message();</span><br></pre></td></tr></table></figure><p>sPool的数据类型为Message，通过next成员变量，维护一个消息池，消息池的默认大小为50。定义如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Object sPoolSync = <span class="keyword">new</span> Object();<span class="comment">//用于在获取Message对象时进行同步锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sPoolSize = <span class="number">0</span>;<span class="comment">//池的大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_POOL_SIZE = <span class="number">50</span>;<span class="comment">//池的可用大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Message sPool;</span><br><span class="line">    Message next;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然叫消息池，其实是通过链表实现的，每个Message都有一个同类型的next字段，这个next就是指向下一个可用的Message，最后一个可用的Message的next为空，这样所有可用的Message对象就通过next串成一个Message池，sPool指向池中的第一个Message，复用消息其实是<strong>从链表的头部获取一个Message返回</strong>。</p><p><strong>2、消息的回收</strong></p><p>我们发现在obtain方法中新创建Message对象时，并不会直接把它放到池中再返回，那么Message对象是什么时候被放进消息池中的呢？是在<strong>回收</strong>Message时把它放入池中，Message中也有类似Bitmap那样的<strong>recycler</strong>函数，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Message.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断消息是否正在使用</span></span><br><span class="line">        <span class="keyword">if</span> (isInUse()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (gCheckRecycle) &#123;<span class="comment">//Android 5.0以后的版本默认为true,之前的版本默认为false.</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"This message cannot be recycled because it "</span></span><br><span class="line">                        + <span class="string">"is still in use."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        recycleUnchecked();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">//对于不再使用的消息，加入到消息池</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">recycleUnchecked</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="comment">//将消息标示位置为IN_USE，并清空消息所有的参数</span></span><br><span class="line">        flags = FLAG_IN_USE;</span><br><span class="line">        what = <span class="number">0</span>;</span><br><span class="line">        arg1 = <span class="number">0</span>;</span><br><span class="line">        arg2 = <span class="number">0</span>;</span><br><span class="line">        obj = <span class="keyword">null</span>;</span><br><span class="line">        replyTo = <span class="keyword">null</span>;</span><br><span class="line">        sendingUid = -<span class="number">1</span>;</span><br><span class="line">        when = <span class="number">0</span>;</span><br><span class="line">        target = <span class="keyword">null</span>;</span><br><span class="line">        callback = <span class="keyword">null</span>;</span><br><span class="line">        data = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">synchronized</span> (sPoolSync) &#123;</span><br><span class="line">           <span class="comment">//当消息池没有满时，将Message对象加入消息池（即把Message插入链表头部）</span></span><br><span class="line">            <span class="keyword">if</span> (sPoolSize &lt; MAX_POOL_SIZE) &#123;</span><br><span class="line">                next = sPool;</span><br><span class="line">                sPool = <span class="keyword">this</span>;</span><br><span class="line">                sPoolSize++;<span class="comment">//消息池的可用大小进行加1操作</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>recycler函数先判断该Message是否还在使用，如果还在使用，就会抛异常，否则就调用recyclerUnchecked函数根据MAX_POOL_SIZE判断是否把该消息回收，回收前还要先清空该消息的各个字段，回收消息就是<strong>把自身插入到链表的表头</strong>。</p><p>通过消息的复用回收，减少Message对象不断创建与销毁的过程，提升了效率。</p><h3 id="7、小结"><a href="#7、小结" class="headerlink" title="7、小结"></a>7、小结</h3><p>1、创建Looper时，只能通过Looper的<strong>prepare</strong>方法创建，在创建Looper时会在内部创建一个MessageQueue，并把Looper保存在线程的TLS区域中，<strong>一个线程只能对应一个Looper，一个Looper只能对应一个MessageQueue</strong>；</p><p>2、在创建MessageQueue时，MessageQueue与NativeMessageQueue建立连接，NativeMessageQueue存储地址存于MessageQueue的<strong>mPtr</strong>字段中，java层和native通过mPtr字段进行通信（native端通过Linux的<strong>epoll机制</strong>建立起消息机制）;</p><p>3、由于ThreadLocal的作用，Looper属于某个线程，而MessageQueue存储在Looper中，所以<strong>MessageQueue则通过Looper与特定的线程关联上</strong>，而Handler在构造中又与Looper和MessageQueue相关联，当我们通过Handler发送消息时，消息就会被<strong>插入</strong>到Handler关联的MessageQueue中，而Looper会不断的轮询消息，从MessageQueue中取出消息给相应的Handler处理，所以最终通过Handler发送的消息就会被执行到Looper所在线程上，这就是Handler<strong>线程切换</strong>的原理，<strong>无论发送消息的Handler对象处于什么线程，最终处理消息的都是Looper所在线程</strong>；</p><p>4、Looper从MessageQueue中取出消息后，会交给消息的target(Handler)处理，在Handler中，处理消息的回调的优先级为：<strong>Message的Callback &gt; Handler的Callback &gt; Handler的handleMessage方法</strong>；</p><p>5、因为应用程序启动时在ActivityThread.main方法中的Looper.prepareMainLooper()中已经调用了Looper.prepare(false),所以在主线程中创建Handler无需我们手动调用Looper.prepare()，而在子线程中，如果我们不传递UI线程所属的Looper去创建Handler，那么就需要调用Looper.prepare()后再创建Handle来传递消息，因为Handler要和某个线程中的MessageQueue和Looper关联，<strong>只有调用Looper.prepare方法，Looper和MessageQueue才属于某个线程</strong>；</p><p>6、消息池是一个单链表，<strong>复用Message</strong>时，从头出取出，如果取不到，则新建返回，<strong>回收Message</strong>时，也从头插入。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文从Android应用UI线程消息循环的创建，消息循环的启动，Handler与Looper、MessageQueue的关联，消息的发送与分发，还有消息的复用这几个角度来讲解了Message，Handler，MessageQueue，Looper之间是如何配合工作，在你了解java层的消息机制是如何运作后，希望大家去了解一下<a href="http://rain9155.coding.me/2019/02/21/Android消息机制native层/" target="_blank" rel="noopener">native的消息机制</a>，例如要想知道为什么loop方法是<strong>死循环</strong>但却不会消耗性能，这些只有native层的消息机制才能给你答案.</p><p>除此之外，我们还知道了MessageQueue的IdleHandler的作用，它会在线程空闲时工作，还有异步消息的处理，它的优先级高于同步消息，会被优先处理，还有它们的应用场景，一般我们是在子线程切换到UI线程时使用Handler机制，但其实我们也可以在子线程使用Handler机制，可以参考Android中的<strong>HandlerThread</strong>，它的底层就是Handler+Thread.</p><p>以上就是本文的全部内容，希望大家有所收获。</p><p>参考资料：</p><p><a href="http://gityuan.com/2015/12/26/handler-message-framework/" target="_blank" rel="noopener">Android消息机制1-Handler</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Android的消息机制用于&lt;strong&gt;同进程的线程间通信&lt;/strong&gt;，它是由MessageQueue，Message，Loope
      
    
    </summary>
    
    
      <category term="消息机制" scheme="http://yoursite.com/categories/%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/"/>
    
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="handler" scheme="http://yoursite.com/tags/handler/"/>
    
  </entry>
  
</feed>
